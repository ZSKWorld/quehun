{"version":3,"file":"laya.gltf.js","sources":["../../bin/tsc/layaAir/laya/gltf/shader/glTFMetallicRoughness.glsl","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBR.vs","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBR.fs","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBRDepth.vs","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBRDepth.fs","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBRDepthNormal.vs","../../bin/tsc/layaAir/laya/gltf/shader/glTFPBRDepthNormal.fs","../../bin/tsc/layaAir/laya/gltf/shader/glTFShader.js","../../bin/tsc/layaAir/laya/gltf/glTFResource.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_anisotropy.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_clearcoat.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_emissive_strength.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_ior.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_iridescence.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_sheen.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_specular.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_transmission.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_unlit.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_materials_volume.js","../../bin/tsc/layaAir/laya/gltf/extensions/KHR_texture_transform.js","../../bin/tsc/layaAir/laya/gltf/glTFLoader.js"],"sourcesContent":["#if !defined(glTFMetallicRoughness_lib)\n    #define glTFMetallicRoughness_lib\n\n    #include \"ShadingFrag.glsl\";\n\n    #include \"PBRFrag.glsl\";\n\nstruct SurfaceInputs {\n    vec3 diffuseColor;\n    float alpha;\n    float alphaTest;\n    float metallic;\n    float roughness;\n    float occlusion;\n    vec3 emissionColor;\n    vec3 normalTS;\n    float specular;\n\n    // specular\n    float specularFactor;\n    vec3 specularColor;\n\n    #ifdef CLEARCOAT\n    float clearCoat;\n    float clearCoatRoughness;\n\t#ifdef CLEARCOAT_NORMAL\n    vec3 clearCoatNormalTS;\n\t#endif // CLEARCOAT_NORMAL\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    float anisotropy;\n    vec2 anisotropyDirection;\n    #endif // ANISOTROPIC\n\n    #ifdef IOR\n    float ior;\n    #endif // IOR\n\n    #ifdef IRIDESCENCE\n    float iridescence;\n    float iridescenceIor;\n    float iridescenceThickness;\n    #endif // IRIDESCENCE\n\n    #ifdef SHEEN\n    vec3 sheenColor;\n    float sheenRoughness;\n    #endif // SHEEN\n\n    #ifdef TRANSMISSION\n    float transmission;\n    #endif // TRANSMISSION\n\n    #ifdef THICKNESS\n    float thickness;\n    vec3 attenuationColor;\n    float attenuationDistance;\n    #endif // THICKNESS\n};\n\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs, const in PixelParams pixel)\n{\n    surface.alpha = inputs.alpha;\n\n    surface.normalTS = inputs.normalTS;\n\n    vec3 baseColor = inputs.diffuseColor;\n    float metallic = inputs.metallic;\n    float perceptualRoughness = inputs.roughness;\n\n    #ifdef IOR\n    float ior = inputs.ior;\n    surface.ior = ior;\n    vec3 f0 = vec3(dielectricIorToF0(ior));\n    #else // IOR\n    vec3 f0 = vec3(dielectricSpecularToF0(inputs.specular));\n    surface.ior = dielectricF0ToIor(f0.x);\n    #endif // IOR\n\n    // KHR_materials_specular\n    f0 *= inputs.specularFactor * inputs.specularColor;\n\n    surface.perceptualRoughness = max(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS);\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\n    surface.diffuseColor = computeDiffuse(baseColor, metallic);\n    surface.f0 = computeF0(f0, baseColor, metallic);\n    surface.f90 = computeF90(surface.f0);\n\n    surface.occlusion = inputs.occlusion;\n\n    #ifdef EMISSION\n    surface.emissionColor = inputs.emissionColor;\n    #endif // EMISSION\n\n    #ifdef IRIDESCENCE\n    surface.iridescence = inputs.iridescence;\n    surface.iridescenceIor = inputs.iridescenceIor;\n    surface.iridescenceThickness = inputs.iridescenceThickness;\n    #endif // IRIDESCENCE\n\n    #ifdef SHEEN\n    surface.sheenColor = inputs.sheenColor;\n    surface.sheenPerceptualRoughness = max(inputs.sheenRoughness, MIN_PERCEPTUAL_ROUGHNESS);\n    surface.sheenRoughness = pow2(surface.sheenPerceptualRoughness);\n    #endif // SHEEN\n\n    #ifdef CLEARCOAT\n    surface.clearCoat = inputs.clearCoat;\n    surface.clearCoatPerceptualRoughness = clamp(inputs.clearCoatRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\n    surface.clearCoatRoughness = surface.clearCoatPerceptualRoughness * surface.clearCoatPerceptualRoughness;\n\t#ifdef CLEARCOAT_NORMAL\n    surface.clearCoatNormalTS = inputs.clearCoatNormalTS;\n\t#endif // CLEARCOAT_NORMAL\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    surface.anisotropy = inputs.anisotropy;\n    surface.anisotropyDirection = inputs.anisotropyDirection;\n    #endif // ANISOTROPIC\n\n    #ifdef TRANSMISSION\n    surface.transmission = inputs.transmission;\n    #endif // TRANSMISSION\n\n    #ifdef THICKNESS\n    surface.thickness = inputs.thickness;\n    surface.attenuationColor = inputs.attenuationColor;\n    surface.attenuationDistance = inputs.attenuationDistance;\n    #endif // THICKNESS\n}\n\nvec4 glTFMetallicRoughness(const in SurfaceInputs inputs, in PixelParams pixel)\n{\n    #ifdef ALPHATEST\n    if (inputs.alpha < inputs.alphaTest)\n\t{\n\t    discard;\n\t}\n    #endif // ALPHATEST\n\n    Surface surface;\n    initSurface(surface, inputs, pixel);\n\n    PixelInfo info;\n    getPixelInfo(info, pixel, surface);\n\n    vec3 surfaceColor = vec3(0.0);\n    surfaceColor += PBRLighting(surface, info);\n\n    return vec4(surfaceColor, surface.alpha);\n}\n\n#endif // glTFMetallicRoughness_lib","#define SHADER_NAME glTFPBRVS\n\n#include \"Math.glsl\";\n\n#include \"Scene.glsl\";\n#include \"SceneFogInput.glsl\";\n\n#include \"Camera.glsl\";\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n\n#include \"PBRVertex.glsl\";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    gl_Position = getPositionCS(pixel.positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n\n#ifdef FOG\n    FogHandle(gl_Position.z);\n#endif\n}","#define SHADER_NAME glTFPBRFS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"SceneFog.glsl\";\n\n#include \"Camera.glsl\";\n#include \"Sprite3DFrag.glsl\";\n\n#include \"glTFMetallicRoughness.glsl\";\n\nvoid initSurfaceInputs(inout SurfaceInputs inputs, const in PixelParams pixel)\n{\n    vec2 uv = vec2(0.0);\n#ifdef UV\n    uv = pixel.uv0;\n#endif //\n\n    // render state\n    inputs.alphaTest = u_AlphaTestValue;\n\n    // surface\n    inputs.diffuseColor = u_BaseColorFactor.xyz;\n    inputs.alpha = u_BaseColorFactor.w;\n\n#ifdef COLOR\n    #ifdef ENABLEVERTEXCOLOR\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\n    inputs.alpha *= pixel.vertexColor.a;\n    #endif // ENABLEVERTEXCOLOR\n#endif // COLOR\n\n#ifdef BASECOLORMAP\n    vec2 baseColorUV = uv;\n    #ifdef BASECOLORMAP_TRANSFORM\n    baseColorUV = (u_BaseColorMapTransform * vec3(baseColorUV, 1.0)).xy;\n    #endif // BASECOLORMAP_TRANSFORM\n    vec4 baseColorSampler = texture2D(u_BaseColorTexture, baseColorUV);\n    #ifdef Gamma_u_BaseColorTexture\n    baseColorSampler = gammaToLinear(baseColorSampler);\n    #endif // u_BaseColorTexture_Gamma\n    inputs.diffuseColor *= baseColorSampler.rgb;\n    inputs.alpha *= baseColorSampler.a;\n#endif // BASECOLORMAP\n\n    inputs.specular = u_Specular;\n\n    inputs.specularFactor = 1.0;\n    inputs.specularColor = vec3(1.0);\n\n    inputs.specularFactor = u_SpecularFactor;\n#ifdef SPECULARFACTORMAP\n    vec2 specularFactorUV = uv;\n    #ifdef SPECULARFACTORMAP_TRANSFORM\n    specularFactorUV = (u_SpecularFactorMapTransfrom * specularFactorUV).xy;\n    #endif // SPECULARFACTORMAP_TRANSFORM\n    vec4 specularFactorSampler = texture2D(u_SpecularFactorTexture, specularFactorUV);\n    inputs.specularFactor *= specularFactorSampler.a;\n#endif // SPECULARFACTORMAP\n\n    inputs.specularColor = u_SpecularColorFactor;\n#ifdef SPECULARCOLORMAP\n    vec2 specularColorUV = uv;\n    #ifdef SPECULARFACTORMAP_TRANSFORM\n    specularColorUV = (u_SpecularColorMapTransform * specularColorUV).xy;\n    #endif // SPECULARFACTORMAP_TRANSFORM\n    vec4 specularColorSampler = texture2D(u_SpecularColorTexture, specularColorUV);\n    #ifdef Gamma_u_SpecularColorTexture\n    specularColorSampler = gammaToLinear(specularColorSampler);\n    #endif // Gamma_u_SpecularColorTexture\n    inputs.specularColor *= specularColorSampler.rgb;\n#endif // SPECULARCOLORMAP\n\n    inputs.metallic = u_MetallicFactor;\n    float roughness = u_RoughnessFactor;\n#ifdef METALLICROUGHNESSMAP\n    vec2 metallicUV = uv;\n    #ifdef METALLICROUGHNESSMAP_TRANSFORM\n    metallicUV = (u_MetallicRoughnessMapTransform * vec3(metallicUV, 1.0)).xy;\n    #endif METALLICROUGHNESSMAP_TRANSFORM\n    vec4 metallicRoughnessSampler = texture2D(u_MetallicRoughnessTexture, metallicUV);\n    inputs.metallic *= metallicRoughnessSampler.b;\n    roughness *= metallicRoughnessSampler.g;\n#endif // METALLICROUGHNESSMAP\n    inputs.roughness = roughness;\n\n    float occlusion = 1.0;\n#ifdef OCCLUSIONMAP\n    vec2 occlusionUV = uv;\n    #ifdef OCCLUSIONMAP_TRANSFORM\n    occlusionUV = (u_OcclusionMapTransform * vec3(occlusionUV, 1.0)).xy;\n    #endif // OCCLUSIONMAP_TRANSFORM\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, occlusionUV);\n    #ifdef Gamma_u_OcclusionTexture\n    occlusionSampler = gammaToLinear(occlusionSampler);\n    #endif // Gamma_u_OcclusionTexture\n    occlusion = occlusionSampler.r;\n#endif // OCCLUSIONMAP\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\n\n    inputs.emissionColor = u_EmissionFactor * u_EmissionStrength;\n#ifdef EMISSIONMAP\n    vec2 emissionUV = uv;\n    #ifdef EMISSIONMAP_TRANSFORM\n    emissionUV = (u_EmissionMapTransform * vec3(emissionUV, 1.0)).xy;\n    #endif // EMISSIONMAP_TRANSFORM\n    vec4 emissionSampler = texture2D(u_EmissionTexture, emissionUV);\n    #ifdef Gamma_u_EmissionTexture\n    emissionSampler = gammaToLinear(emissionSampler);\n    #endif // Gamma_u_EmissionTexture\n    inputs.emissionColor *= emissionSampler.rgb;\n#endif // EMISSIONMAP\n\n    inputs.normalTS = vec3(0.0, 0.0, 1.0);\n#ifdef NORMALMAP\n    vec2 normalUV = uv;\n    #ifdef NORMALMAP_TRANSFORM\n    normalUV = (u_NormalMapTransform * vec3(normalUV, 1.0)).xy;\n    #endif // NORMALMAP_TRANSFORM\n    vec3 normalSampler = texture2D(u_NormalTexture, normalUV).xyz;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    inputs.normalTS = normalScale(normalSampler, u_NormalScale);\n#endif // NORMALMAP\n\n#ifdef IOR\n    inputs.ior = u_Ior;\n#endif // IOR\n\n#ifdef IRIDESCENCE\n    float iridescenceFactor = u_IridescenceFactor;\n    #ifdef IRIDESCENCEMAP\n    vec2 iridescenceUV = uv;\n\t#ifdef IRIDESCENCEMAP_TRANSFORM\n    iridescenceUV = (u_IridescenceMapTransform * vec3(iridescenceUV, 1.0)).xy;\n\t#endif // IRIDESCENCEMAP_TRANSFORM\n    vec4 iridescenceSampler = texture2D(u_IridescenceTexture, iridescenceUV);\n    iridescenceFactor *= iridescenceSampler.r;\n    #endif // IRIDESCENCEMAP\n    float iridescenceThickness = u_IridescenceThicknessMaximum;\n    #ifdef IRIDESCENCE_THICKNESSMAP\n    vec2 iridescenceThicknessUV = uv;\n\t#ifdef IRIDESCENCE_THICKNESSMAP_TRANSFORM\n    iridescenceThicknessUV = (u_IridescenceThicknessMapTransform, vec3(iridescenceThicknessUV, 1.0)).xy;\n\t#endif // IRIDESCENCE_THICKNESSMAP_TRANSFORM\n    vec4 iridescenceThicknessSampler = texture2D(u_IridescenceThicknessTexture, iridescenceThicknessUV);\n    iridescenceThickness = mix(u_IridescenceThicknessMinimum, u_IridescenceThicknessMaximum, iridescenceThicknessSampler.g);\n    #endif // IRIDESCENCE_THICKNESSMAP\n    inputs.iridescence = iridescenceFactor;\n    inputs.iridescenceIor = u_IridescenceIor;\n    inputs.iridescenceThickness = iridescenceThickness;\n#endif // IRIDESCENCE\n\n#ifdef SHEEN\n    vec3 sheenColor = u_SheenColorFactor;\n    #ifdef SHEENCOLORMAP\n    vec2 sheenColorUV = uv;\n\t#ifdef SHEENCOLORMAP_TRANSFORM\n    sheenColorUV = (u_SheenColorMapTransform * vec3(sheenColorUV, 1.0)).xy;\n\t#endif // SHEENCOLORMAP_TRANSFORM\n    vec4 sheenColorSampler = texture2D(u_SheenColorTexture, sheenColorUV);\n\t#ifdef Gamma_u_SheenColorFactor\n    sheenColorSampler = gammaToLinear(sheenColorSampler);\n\t#endif // Gamma_u_SheenColorFactor\n    sheenColor *= sheenColorSampler.rgb;\n    #endif // SHEENCOLORMAP\n\n    float sheenRoughness = u_SheenRoughness;\n    #ifdef SHEEN_ROUGHNESSMAP\n    vec2 sheenRoughnessUV = uv;\n\t#ifdef SHEEN_ROUGHNESSMAP_TRANSFORM\n    sheenRoughnessUV = (u_SheenRoughnessMapTransform * vec3(sheenRoughnessUV, 1.0)).xy;\n\t#endif // SHEEN_ROUGHNESSMAP_TRANSFORM\n    vec4 sheenRoughnessSampler = texture2D(u_SheenRoughnessTexture, sheenRoughnessUV);\n    sheenRoughness *= sheenRoughnessSampler.a;\n    #endif // SHEEN_ROUGHNESSMAP\n\n    inputs.sheenColor = sheenColor;\n    inputs.sheenRoughness = sheenRoughness;\n#endif // SHEEN\n\n#ifdef CLEARCOAT\n    inputs.clearCoat = u_ClearCoatFactor;\n    inputs.clearCoatRoughness = u_ClearCoatRoughness;\n\n    #ifdef CLEARCOATMAP\n    vec2 clearCoatUV = uv;\n\t#ifdef CLEARCOATMAP_TRANSFORM\n    clearCoatUV = (u_ClearCoatMapTransform * vec3(clearCoatUV, 1.0)).xy;\n\t#endif // CLEARCOATMAP_TRANSFORM\n    vec4 clearCoatSampler = texture2D(u_ClearCoatTexture, clearCoatUV);\n    inputs.clearCoat *= clearCoatSampler.r;\n    #endif // CLEARCOATMAP\n\n    #ifdef CLEARCOAT_ROUGHNESSMAP\n    vec2 clearCoatRoughnessUV = uv;\n\t#ifdef CLEARCOAT_ROUGHNESSMAP_TRANSFORM\n    clearCoatRoughnessUV = (u_ClearCoatRoughnessMapTransform * vec3(uv, 1.0)).xy;\n\t#endif // CLEARCOAT_ROUGHNESSMAP_TRANSFORM\n    vec4 clearcoatSampleRoughness = texture2D(u_ClearCoatRoughnessTexture, clearCoatRoughnessUV);\n    inputs.clearCoatRoughness *= clearcoatSampleRoughness.g;\n    #endif // CLEARCOAT_ROUGHNESSMAP\n\n    #ifdef CLEARCOAT_NORMAL\n    vec2 clearCoatNormalUV = uv;\n\t#ifdef CLEARCOAT_NORMALMAP_TRANSFORM\n    clearCoatNormalUV = (u_ClearCoatNormalMapTransform * vec3(clearCoatNormalUV, 1.0)).xy;\n\t#endif // CLEARCOAT_NORMALMAP_TRANSFORM\n    vec3 clearCoatNormalSampler = texture2D(u_ClearCoatNormalTexture, clearCoatNormalUV).rgb;\n    clearCoatNormalSampler = normalize(clearCoatNormalSampler * 2.0 - 1.0);\n    clearCoatNormalSampler.y *= -1.0;\n    // todo scale\n    inputs.clearCoatNormalTS = normalScale(clearCoatNormalSampler, u_ClearCoatNormalScale);\n    #endif // CLEARCOAT_NORMAL\n#endif // CLEARCOAT\n\n#ifdef ANISOTROPIC\n    inputs.anisotropy = u_AnisotropyStrength;\n    vec2 direction = vec2(1.0, 0.0);\n\n    #ifdef ANISOTROPYMAP\n    vec2 anisotropyUV = uv;\n\t#ifdef ANISOTROPYMAP_TRANSFORM\n    anisotropyUV = (u_AnisotropyMapTransform * vec3(anisotropyUV, 1.0)).xy;\n\t#endif // ANISOTROPYMAP_TRANSFORM\n    vec3 anisotropySampler = texture2D(u_AnisotropyTexture, anisotropyUV).rgb;\n\n    inputs.anisotropy *= anisotropySampler.b;\n    direction = anisotropySampler.xy * 2.0 - 1.0;\n    #endif // ANISOTROPYMAP\n\n    vec2 anisotropyRotation = vec2(cos(u_AnisotropyRotation), sin(u_AnisotropyRotation));\n    mat2 rotationMatrix = mat2(anisotropyRotation.x, anisotropyRotation.y, -anisotropyRotation.y, anisotropyRotation.x);\n    inputs.anisotropyDirection = rotationMatrix * direction;\n\n#endif // ANISOTROPIC\n\n#ifdef TRANSMISSION\n    float transmission = u_TransmissionFactor;\n    #ifdef TRANSMISSIONMAP\n    vec2 transmissionUV = uv;\n\t#ifdef TRANSMISSIONMAP_TRANSFORM\n    transmissionUV = (u_TransmissionMapTransform * vec3(transmissionUV, 1.0)).xy;\n\t#endif // TRANSMISSIONMAP_TRANSFORM\n    vec4 transmissionSampler = texture2D(u_TransmissionTexture, transmissionUV);\n    transmission *= transmissionSampler.r;\n    #endif // TRANSMISSIONMAP\n    inputs.transmission = transmission;\n#endif // TRANSMISSION\n\n#ifdef THICKNESS\n\n    float thicknessFactor = u_VolumeThicknessFactor;\n    float attenuationDistance = u_VolumeAttenuationDistance;\n    vec3 attenuationColor = u_VolumeAttenuationColor.xyz;\n\n    #ifdef THICKNESSMAP\n    vec2 thicknessUV = uv;\n\t#ifdef THICKNESSMAP_TRANSFORM\n    thicknessUV = (u_VoluemThicknessMapTransform * vec3(thicknessUV, 1.0)).xy;\n\t#endif // THICKNESSMAP_TRANSFORM\n    vec4 thicknessSampler = texture2D(u_VolumeThicknessTexture, thicknessUV);\n    thicknessFactor *= thicknessSampler.g;\n    #endif // THICKNESSMAP\n\n    inputs.thickness = thicknessFactor;\n    inputs.attenuationColor = attenuationColor;\n    inputs.attenuationDistance = attenuationDistance;\n\n#endif // THICKNESS\n}\n\nvoid main()\n{\n\n#ifndef DEBUG\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    SurfaceInputs inputs;\n    initSurfaceInputs(inputs, pixel);\n\n    vec4 surfaceColor = glTFMetallicRoughness(inputs, pixel);\n\n    #ifdef FOG\n    surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\n    #endif // FOG\n\n    gl_FragColor = surfaceColor;\n\n#else DEBUG\n    // // debug\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    SurfaceInputs inputs;\n    initSurfaceInputs(inputs, pixel);\n\n    Surface surface;\n    initSurface(surface, inputs, pixel);\n\n    PixelInfo info;\n    getPixelInfo(info, pixel, surface);\n\n    vec3 debug = vec3(0.0);\n\n    #ifdef Debug_ShadingNormal\n    debug = vec3(info.normalWS * 0.5 + 0.5);\n    #endif // Debug_ShadingNormal\n\n    #ifdef Debug_GeometryNormal\n    debug = vec3(info.vertexNormalWS * 0.5 + 0.5);\n    #endif // Debug_GeometryNormal\n\n    #ifdef Debug_GeometryTangent\n    debug = vec3(pixel.tangentWS * 0.5 + 0.5);\n    #endif // Debug_GeometryTangent\n\n    #ifdef Debug_GeometryBiTangent\n    debug = vec3(pixel.biNormalWS * 0.5 + 0.5);\n    #endif // Debug_GeometryBiTangent\n\n    #ifdef Debug_Roughness\n    debug = vec3(surface.perceptualRoughness);\n    #endif // Debug_Roughness\n\n    #ifdef Debug_Alpha\n    debug = vec3(surface.alpha);\n    #endif // Debug_Alpha\n\n    #ifdef Debug_Occlusion\n    debug = vec3(surface.occlusion);\n    #endif // Debug_Occlusion\n\n    #ifdef Debug_BaseColor\n    debug = surface.diffuseColor;\n    #endif // Debug_BaseColor\n\n    #ifdef Debug_Metallic\n    debug = vec3(inputs.metallic);\n    #endif // Debug_Metallic\n\n    #ifdef THICKNESS\n\t#ifdef Debug_VolumeThickness\n    debug = vec3(surface.thickness);\n\t#endif // Debug_VolumeThickness\n\n\t#ifdef Debug_Attenuation\n    {\n\tvec3 scaleLength = vec3(0.0);\n\tscaleLength.x = length(vec3(u_WorldMat[0].xyz));\n\tscaleLength.y = length(vec3(u_WorldMat[1].xyz));\n\tscaleLength.z = length(vec3(u_WorldMat[2].xyz));\n\n\tvec3 n = info.normalWS;\n\tvec3 r = -info.viewDir;\n\tfloat airIor = 1.0;\n\n\tfloat ior = surface.ior;\n\tfloat etaIR = airIor / ior;\n\tfloat etaRI = ior / airIor;\n\tvec3 refractionVector = normalize(refract(r, n, etaIR)) * surface.thickness * scaleLength;\n\n\tvec3 absorption = -log((surface.attenuationColor)) / (surface.attenuationDistance);\n\tdebug = exp(-absorption);\n    }\n\t#endif // Debug_Attenuation\n\n    #endif // THICKNESS\n\n    #ifdef TRANSMISSION\n\t#ifdef Debug_Transmission\n    vec3 E = getE(surface, info);\n    debug = transmissionIBL(surface, info, E);\n\t#endif // Debug_Transmission\n    #endif // TRANSMISSION\n\n    #ifdef Debug_IOR\n    debug = vec3(surface.ior - 1.0);\n    #endif // Debug_IOR\n\n    #ifdef Debug_SpecularFactor\n    debug = vec3(inputs.specularFactor);\n    #endif // Debug_SpecularFactor\n\n    #ifdef Debug_SpecularColor\n    debug = vec3(inputs.specularColor);\n    #endif // DebugSpecularColor\n\n    #ifdef Debug_f0\n    debug = vec3(surface.f0);\n    #endif // Debug_f0\n\n    #ifdef Debug_f90\n    debug = vec3(surface.f90);\n    #endif // Debug_f90\n\n    #ifdef Debug_FrontFace\n    if (gl_FrontFacing)\n\t{\n\t    debug = vec3(1.0, 0.0, 0.0);\n\t}\n    else\n\t{\n\t    debug = vec3(0.0, 1.0, 0.0);\n\t}\n    #endif // Debug_FrontFace\n\n    #ifdef Debug_SpecularAO\n    float specularAO = saturate(pow(info.NoV + surface.occlusion, exp2(-16.0 * surface.roughness - 1.0)) - 1.0 + surface.occlusion);\n\n    float diffAO = specularAO - surface.occlusion;\n\n    debug = vec3(abs(diffAO));\n\n    if (diffAO < 0.0)\n\t{\n\t    debug *= vec3(1.0, 0.0, 0.0);\n\t}\n    else\n\t{\n\t    debug *= vec3(0.0, 1.0, 0.0);\n\t}\n    #endif // Debug_SpecularAO\n\n    // // #ifdef CLEARCOAT\n    // //     // debug = vec3(info.iridescenceFresnel);\n    // //     #ifdef CLEARCOAT_NORMAL\n    // //     debug = vec3(surface.clearCoatNormalTS * 0.5 + 0.5);\n    // //     #endif // CLEARCOAT_NORMAL\n    // //     // debug = vec3(surface.clearCoatRoughness);\n    // //     // debug = vec3(surface.clearCoat);\n    // // #endif // CLEARCOAT\n\n    // debug = vec3(info.normalWS * 0.5 + 0.5);\n\n    // // #ifdef SHEEN\n    // //     // debug = vec3(inputs.sheenColor);\n    // //     // debug = vec3(inputs.sheenRoughness);\n    // //     debug = vec3(info.sheenScaling);\n    // // #endif // SHEEN\n\n    // // #ifdef IRIDESCENCE\n    // //     // debug = vec3(surface.iridescenceIor - 1.0);\n    // //     // debug = vec3(surface.iridescenceThickness / 1200.0);\n    // //     debug = vec3(info.iridescenceFresnel);\n    // // #endif // IRIDESCENCE\n\n    // // #ifdef TRANSMISSION\n    // //     debug = vec3(surface.transmission);\n    // // #endif // TRANSMISSION\n\n    debug = gammaToLinear(debug);\n    gl_FragColor = vec4(debug, 1.0);\n\n#endif // DEBUG\n}","#define SHADER_NAME glTFDepthVS\n\n#include \"DepthVertex.glsl\";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    mat4 worldMat = getWorldMatrix();\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n    vec3 positionWS = pos.xyz / pos.w;\n\n    mat4 normalMat = transpose(inverse(worldMat));\n    vec3 normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\n\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\n    gl_Position = remapPositionZ(positionCS);\n}","#define SHADER_NAME glTFDepthFS\n\n#include \"DepthFrag.glsl\";\n\nvoid main()\n{\n    gl_FragColor = getDepthColor();\n}","#define SHADER_NAME glTFPBRDepthNormalVS\n\n#include \"Math.glsl\";\n\n#include \"Camera.glsl\";\n\n#include \"Sprite3DVertex.glsl\";\n\n#include \"VertexCommon.glsl\";\n\n#include \"PBRVertex.glsl\";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    sharePixelParams(pixel);\n\n    vec4 positionCS = getPositionCS(pixel.positionWS);\n    v_PositionCS = positionCS;\n    gl_Position = positionCS;\n    gl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME glTFPBRDepthNormalFS\n\n#include \"Color.glsl\";\n\n#include \"Scene.glsl\";\n#include \"SceneFog.glsl\";\n\n#include \"Camera.glsl\";\n#include \"Sprite3DFrag.glsl\";\n\n#include \"ShadingFrag.glsl\";\n\n#include \"DepthNormalFrag.glsl\";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    vec3 normalWS = pixel.normalWS;\n\n#ifdef NORMALMAP\n    #ifdef UV\n\n    vec2 uv = pixel.uv0;\n\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).xyz;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    vec3 normalTS = normalScale(normalSampler, u_NormalScale);\n    normalWS = normalize(pixel.TBN * normalTS);\n\n    #endif UV\n#endif // NORMALMAP\n\n    vec4 positionCS = v_PositionCS;\n\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\n\n    gl_FragColor = dephtNormal;\n}","import { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport glTFMetallicRoughnessGLSL from \"./glTFMetallicRoughness.glsl\";\nimport glTFPBRVS from \"./glTFPBR.vs\";\nimport glTFPBRFS from \"./glTFPBR.fs\";\nimport DepthVS from \"./glTFPBRDepth.vs\";\nimport DephtFS from \"./glTFPBRDepth.fs\";\nimport DepthNormalVS from \"./glTFPBRDepthNormal.vs\";\nimport DepthNormalFS from \"./glTFPBRDepthNormal.fs\";\nimport { Matrix3x3 } from \"../../maths/Matrix3x3\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nexport class glTFShader {\n    static init() {\n        this.Define_BaseColorMap = Shader3D.getDefineByName(\"BASECOLORMAP\");\n        this.Define_BaseColorMapTransform = Shader3D.getDefineByName(\"BASECOLORMAP_TRANSFORM\");\n        this.Define_MetallicRoughnessMap = Shader3D.getDefineByName(\"METALLICROUGHNESSMAP\");\n        this.Define_MetallicRoughnessMapTransform = Shader3D.getDefineByName(\"METALLICROUGHNESSMAP_TRANSFORM\");\n        this.Define_NormalMap = Shader3D.getDefineByName(\"NORMALMAP\");\n        this.Define_NormalMapTransform = Shader3D.getDefineByName(\"NORMALMAP_TRANSFORM\");\n        this.Define_OcclusionMap = Shader3D.getDefineByName(\"OCCLUSIONMAP\");\n        this.Define_OcclusionMapTransform = Shader3D.getDefineByName(\"OCCLUSIONMAP_TRANSFORM\");\n        this.Define_EmissionMap = Shader3D.getDefineByName(\"EMISSIONMAP\");\n        this.Define_EmissionMapTransform = Shader3D.getDefineByName(\"EMISSIONMAP_TRANSFORM\");\n        this.Define_ClearCoatMap = Shader3D.getDefineByName(\"CLEARCOATMAP\");\n        this.Define_ClearCoatMapTransform = Shader3D.getDefineByName(\"CLEARCOATMAP_TRANSFORM\");\n        this.Define_ClearCoatRoughnessMap = Shader3D.getDefineByName(\"CLEARCOAT_ROUGHNESSMAP\");\n        this.Define_ClearCoatRoughnessMapTransform = Shader3D.getDefineByName(\"CLEARCOAT_ROUGHNESSMAP_TRANSFORM\");\n        this.Define_ClearCoatNormalMapTransform = Shader3D.getDefineByName(\"CLEARCOAT_NORMALMAP_TRANSFORM\");\n        this.Define_AnisotropyMap = Shader3D.getDefineByName(\"ANISOTROPYMAP\");\n        this.Define_AnisotropyMapTransform = Shader3D.getDefineByName(\"ANISOTROPYMAP_TRANSFORM\");\n        this.Define_IridescenceMap = Shader3D.getDefineByName(\"IRIDESCENCEMAP\");\n        this.Define_IridescenceMapTransform = Shader3D.getDefineByName(\"IRIDESCENCEMAP_TRANSFORM\");\n        this.Define_IridescenceThicknessMap = Shader3D.getDefineByName(\"IRIDESCENCE_THICKNESSMAP\");\n        this.Define_IridescenceThicknessMapTransform = Shader3D.getDefineByName(\"IRIDESCENCE_THICKNESSMAP_TRANSFORM\");\n        this.Define_SheenColorMap = Shader3D.getDefineByName(\"SHEENCOLORMAP\");\n        this.Define_SheenColorMapTransform = Shader3D.getDefineByName(\"SHEENCOLORMAP_TRANSFORM\");\n        this.Define_SheenRoughnessMap = Shader3D.getDefineByName(\"SHEEN_ROUGHNESSMAP\");\n        this.Define_SheenRoughnessMapTransform = Shader3D.getDefineByName(\"SHEEN_ROUGHNESSMAP_TRANSFORM\");\n        this.Define_TransmissionMap = Shader3D.getDefineByName(\"TRANSMISSIONMAP\");\n        this.Define_TransmissionMapTransform = Shader3D.getDefineByName(\"TRANSMISSIONMAP_TRANSFORM\");\n        this.Define_VolumeThicknessMap = Shader3D.getDefineByName(\"THICKNESSMAP\");\n        this.Define_VolumeThicknessMapTransform = Shader3D.getDefineByName(\"THICKNESSMAP_TRANSFORM\");\n        this.Define_SpecularFactorMap = Shader3D.getDefineByName(\"SPECULARFACTORMAP\");\n        this.Define_SpecularFactorMapTransform = Shader3D.getDefineByName(\"SPECULARFACTORMAP_TRANSFORM\");\n        this.Define_SpecularColorMap = Shader3D.getDefineByName(\"SPECULARCOLORMAP\");\n        this.Define_SpecularColorMapTransform = Shader3D.getDefineByName(\"SPECULARCOLORMAP_TRANSFORM\");\n        let shader = Shader3D.find(glTFShader.name);\n        if (shader) {\n            return;\n        }\n        Shader3D.addInclude(\"glTFMetallicRoughness.glsl\", glTFMetallicRoughnessGLSL);\n        let uniformMap = {\n            \"u_AlphaTestValue\": ShaderDataType.Float,\n            \"u_BaseColorFactor\": ShaderDataType.Vector4,\n            \"u_BaseColorTexture\": ShaderDataType.Texture2D,\n            \"u_BaseColorMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_Specular\": ShaderDataType.Float,\n            \"u_MetallicFactor\": ShaderDataType.Float,\n            \"u_RoughnessFactor\": ShaderDataType.Float,\n            \"u_MetallicRoughnessTexture\": ShaderDataType.Texture2D,\n            \"u_MetallicRoughnessMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_NormalTexture\": ShaderDataType.Texture2D,\n            \"u_NormalMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_NormalScale\": ShaderDataType.Float,\n            \"u_OcclusionTexture\": ShaderDataType.Texture2D,\n            \"u_OcclusionMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_OcclusionStrength\": ShaderDataType.Float,\n            \"u_EmissionFactor\": ShaderDataType.Vector3,\n            \"u_EmissionTexture\": ShaderDataType.Texture2D,\n            \"u_EmissionMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_EmissionStrength\": ShaderDataType.Float,\n            \"u_ClearCoatFactor\": ShaderDataType.Float,\n            \"u_ClearCoatTexture\": ShaderDataType.Texture2D,\n            \"u_ClearCoatMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_ClearCoatRoughness\": ShaderDataType.Float,\n            \"u_ClearCoatRoughnessTexture\": ShaderDataType.Texture2D,\n            \"u_ClearCoatRoughnessMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_ClearCoatNormalTexture\": ShaderDataType.Texture2D,\n            \"u_ClearCoatNormalMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_ClearCoatNormalScale\": ShaderDataType.Float,\n            \"u_AnisotropyStrength\": ShaderDataType.Float,\n            \"u_AnisotropyRotation\": ShaderDataType.Float,\n            \"u_AnisotropyTexture\": ShaderDataType.Texture2D,\n            \"u_AnisotropyMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_Ior\": ShaderDataType.Float,\n            \"u_IridescenceFactor\": ShaderDataType.Float,\n            \"u_IridescenceTexture\": ShaderDataType.Texture2D,\n            \"u_IridescenceMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_IridescenceIor\": ShaderDataType.Float,\n            \"u_IridescenceThicknessMinimum\": ShaderDataType.Float,\n            \"u_IridescenceThicknessMaximum\": ShaderDataType.Float,\n            \"u_IridescenceThicknessTexture\": ShaderDataType.Texture2D,\n            \"u_IridescenceThicknessMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_SheenColorFactor\": ShaderDataType.Vector3,\n            \"u_SheenColorTexture\": ShaderDataType.Texture2D,\n            \"u_SheenColorMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_SheenRoughness\": ShaderDataType.Float,\n            \"u_SheenRoughnessTexture\": ShaderDataType.Texture2D,\n            \"u_SheenRoughnessMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_TransmissionFactor\": ShaderDataType.Float,\n            \"u_TransmissionTexture\": ShaderDataType.Texture2D,\n            \"u_TransmissionMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_VolumeThicknessFactor\": ShaderDataType.Float,\n            \"u_VolumeThicknessTexture\": ShaderDataType.Texture2D,\n            \"u_VoluemThicknessMapTransform\": ShaderDataType.Matrix3x3,\n            \"u_VolumeAttenuationDistance\": ShaderDataType.Float,\n            \"u_VolumeAttenuationColor\": ShaderDataType.Vector3,\n            \"u_SpecularFactor\": ShaderDataType.Float,\n            \"u_SpecularFactorTexture\": ShaderDataType.Texture2D,\n            \"u_SpecularFactorMapTransfrom\": ShaderDataType.Matrix3x3,\n            \"u_SpecularColorFactor\": ShaderDataType.Vector3,\n            \"u_SpecularColorTexture\": ShaderDataType.Texture2D,\n            \"u_SpecularColorMapTransform\": ShaderDataType.Matrix3x3,\n        };\n        let defaultValue = {\n            \"u_AlphaTestValue\": 0.5,\n            \"u_BaseColorFactor\": Vector4.ONE,\n            \"u_BaseColorMapTransform\": Matrix3x3.DEFAULT,\n            \"u_Specular\": 0.5,\n            \"u_MetallicFactor\": 1.0,\n            \"u_RoughnessFactor\": 1.0,\n            \"u_MetallicRoughnessMapTransform\": Matrix3x3.DEFAULT,\n            \"u_NormalMapTransform\": Matrix3x3.DEFAULT,\n            \"u_NormalScale\": 1.0,\n            \"u_OcclusionMapTransform\": Matrix3x3.DEFAULT,\n            \"u_OcclusionStrength\": 1.0,\n            \"u_EmissionFactor\": Vector3.ZERO,\n            \"u_EmissionMapTransform\": Matrix3x3.DEFAULT,\n            \"u_EmissionStrength\": 1.0,\n            \"u_SpecularFactor\": 1.0,\n            \"u_SpecularFactorMapTransfrom\": Matrix3x3.DEFAULT,\n            \"u_SpecularColorFactor\": Vector3.ONE,\n            \"u_SpecularColorMapTransform\": Matrix3x3.DEFAULT,\n            \"u_Ior\": 1.5,\n            \"u_ClearCoatFactor\": 0.0,\n            \"u_ClearCoatMapTransform\": Matrix3x3.DEFAULT,\n            \"u_ClearCoatRoughness\": 0.0,\n            \"u_ClearCoatRoughnessMapTransform\": Matrix3x3.DEFAULT,\n            \"u_ClearCoatNormalMapTransform\": Matrix3x3.DEFAULT,\n            \"u_ClearCoatNormalScale\": 1.0,\n            \"u_AnisotropyStrength\": 0.0,\n            \"u_AnisotropyRotation\": 0.0,\n            \"u_AnisotropyMapTransform\": Matrix3x3.DEFAULT,\n            \"u_IridescenceFactor\": 0.0,\n            \"u_IridescenceMapTransform\": Matrix3x3.DEFAULT,\n            \"u_IridescenceIor\": 1.33,\n            \"u_IridescenceThicknessMinimum\": 100,\n            \"u_IridescenceThicknessMaximum\": 400,\n            \"u_IridescenceThicknessMapTransform\": Matrix3x3.DEFAULT,\n            \"u_SheenColorFactor\": Vector3.ZERO,\n            \"u_SheenColorMapTransform\": Matrix3x3.DEFAULT,\n            \"u_SheenRoughness\": 0.0,\n            \"u_SheenRoughnessMapTransform\": Matrix3x3.DEFAULT,\n            \"u_TransmissionFactor\": 0.0,\n            \"u_TransmissionMapTransform\": Matrix3x3.DEFAULT,\n        };\n        shader = Shader3D.add(\"glTFPBR\", true, true);\n        shader.shaderType = ShaderFeatureType.D3;\n        let subShader = new SubShader(SubShader.DefaultAttributeMap, uniformMap, defaultValue);\n        shader.addSubShader(subShader);\n        let shadingPass = subShader.addShaderPass(glTFPBRVS, glTFPBRFS);\n        let depthPass = subShader.addShaderPass(DepthVS, DephtFS, \"ShadowCaster\");\n        let dephtNormalPass = subShader.addShaderPass(DepthNormalVS, DepthNormalFS, \"DepthNormal\");\n    }\n}\nglTFShader.ShaderName = \"glTFPBR\";\n","import { AnimationClip } from \"../d3/animation/AnimationClip\";\nimport { KeyframeNode } from \"../d3/animation/KeyframeNode\";\nimport { Material, MaterialRenderMode } from \"../resource/Material\";\nimport { PBRStandardMaterial } from \"../d3/core/material/PBRStandardMaterial\";\nimport { Mesh, skinnedMatrixCache } from \"../d3/resource/models/Mesh\";\nimport { URL } from \"../net/URL\";\nimport { ILaya } from \"../../ILaya\";\nimport { BufferUsage } from \"../RenderEngine/RenderEnum/BufferTargetType\";\nimport { HDREncodeFormat } from \"../RenderEngine/RenderEnum/HDREncodeFormat\";\nimport { IndexFormat } from \"../RenderEngine/RenderEnum/IndexFormat\";\nimport { VertexMesh } from \"../RenderEngine/RenderShader/VertexMesh\";\nimport { Animator } from \"../d3/component/Animator/Animator\";\nimport { AnimatorControllerLayer } from \"../d3/component/Animator/AnimatorControllerLayer\";\nimport { AnimatorState } from \"../d3/component/Animator/AnimatorState\";\nimport { MeshFilter } from \"../d3/core/MeshFilter\";\nimport { SkinnedMeshRenderer } from \"../d3/core/SkinnedMeshRenderer\";\nimport { Sprite3D } from \"../d3/core/Sprite3D\";\nimport { MorphTarget, MorphTargetChannel } from \"../d3/resource/models/MorphTarget\";\nimport { MorphTargetData } from \"../d3/resource/models/MorphTargetData\";\nimport { SubMesh } from \"../d3/resource/models/SubMesh\";\nimport { Matrix4x4 } from \"../maths/Matrix4x4\";\nimport { Vector3 } from \"../maths/Vector3\";\nimport { Vector4 } from \"../maths/Vector4\";\nimport { Loader } from \"../net/Loader\";\nimport { Prefab } from \"../resource/HierarchyResource\";\nimport { Base64Tool } from \"../utils/Base64Tool\";\nimport { Byte } from \"../utils/Byte\";\nimport { glTFShader } from \"./shader/glTFShader\";\nimport { PBRShaderLib } from \"../d3/shader/pbr/PBRShaderLib\";\nimport { Laya } from \"../../Laya\";\nimport { WrapMode } from \"../RenderEngine/RenderEnum/WrapMode\";\nimport { Laya3DRender } from \"../d3/RenderObjs/Laya3DRender\";\nimport { RenderState } from \"../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { MeshRenderer } from \"../d3/core/MeshRenderer\";\nimport { FloatKeyframe } from \"../maths/FloatKeyframe\";\nimport { QuaternionKeyframe } from \"../maths/QuaternionKeyframe\";\nimport { Vector3Keyframe } from \"../maths/Vector3Keyframe\";\nconst maxSubBoneCount = 24;\nexport class glTFResource extends Prefab {\n    static registerExtension(name, factory) {\n        this._Extensions[name] = factory;\n    }\n    get data() {\n        return this._data;\n    }\n    constructor() {\n        super();\n        this._buffers = {};\n        this._textures = [];\n        this._materials = [];\n        this._meshes = {};\n        this._extensions = new Map();\n        this._pendingOps = [];\n        this._scenes = [];\n        this._nodes = [];\n    }\n    loadBinary(basePath, progress) {\n        let data = this._data;\n        if (data.buffers) {\n            let promises = [];\n            data.buffers.forEach((buffer, i) => {\n                if (Base64Tool.isBase64String(buffer.uri)) {\n                    let bin = Base64Tool.decode(buffer.uri.replace(Base64Tool.reghead, \"\"));\n                    this._buffers[i] = bin;\n                }\n                else {\n                    let j = i;\n                    promises.push(ILaya.loader.fetch(URL.join(basePath, buffer.uri), \"arraybuffer\", progress === null || progress === void 0 ? void 0 : progress.createCallback(0.2))\n                        .then(bin => {\n                        this._buffers[j] = bin;\n                    }));\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    loadTextureFromInfo(info, sRGB, basePath, progress) {\n        let data = this._data;\n        let index = info.index;\n        let tex = data.textures[index];\n        let imgSource = tex.source;\n        let glTFImg = data.images[imgSource];\n        let samplerSource = tex.sampler;\n        let glTFSampler = data.samplers ? data.samplers[samplerSource] : undefined;\n        let constructParams = this.getTextureConstructParams(glTFImg, glTFSampler, sRGB);\n        let propertyParams = this.getTexturePropertyParams(glTFSampler);\n        if (glTFImg.bufferView != null) {\n            let bufferView = data.bufferViews[glTFImg.bufferView];\n            let buffer = this._buffers[bufferView.buffer];\n            let byteOffset = bufferView.byteOffset || 0;\n            let byteLength = bufferView.byteLength;\n            let arraybuffer = buffer.slice(byteOffset, byteOffset + byteLength);\n            return this.loadTextureFromBuffer(arraybuffer, glTFImg.mimeType, constructParams, propertyParams, progress).then(res => {\n                this._textures[index] = res;\n                this.addDep(res);\n                return res;\n            });\n        }\n        else {\n            return this.loadTexture(URL.join(basePath, glTFImg.uri), constructParams, propertyParams, progress).then(res => {\n                this._textures[index] = res;\n                this.addDep(res);\n                return res;\n            });\n        }\n    }\n    loadTextures(basePath, progress) {\n        let data = this._data;\n        let materials = data.materials;\n        let textures = data.textures;\n        let promises = [];\n        if (materials && textures) {\n            for (let glTFMaterial of data.materials) {\n                let pbrMetallicRoughness = glTFMaterial.pbrMetallicRoughness;\n                if (pbrMetallicRoughness) {\n                    if (pbrMetallicRoughness.baseColorTexture) {\n                        let sRGB = true;\n                        let promise = this.loadTextureFromInfo(pbrMetallicRoughness.baseColorTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n                        let sRGB = false;\n                        let promise = this.loadTextureFromInfo(pbrMetallicRoughness.metallicRoughnessTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n                if (glTFMaterial.normalTexture) {\n                    let sRGB = false;\n                    let promise = this.loadTextureFromInfo(glTFMaterial.normalTexture, sRGB, basePath, progress);\n                    promises.push(promise);\n                }\n                if (glTFMaterial.occlusionTexture) {\n                    let sRGB = false;\n                    let promise = this.loadTextureFromInfo(glTFMaterial.occlusionTexture, sRGB, basePath, progress);\n                    promises.push(promise);\n                }\n                if (glTFMaterial.emissiveTexture) {\n                    let sRGB = true;\n                    let promise = this.loadTextureFromInfo(glTFMaterial.emissiveTexture, sRGB, basePath, progress);\n                    promises.push(promise);\n                }\n            }\n        }\n        this._extensions.forEach(extension => {\n            if (extension.loadAdditionTextures) {\n                let promise = extension.loadAdditionTextures(basePath, progress);\n                promises.push(promise);\n            }\n        });\n        return Promise.all(promises);\n    }\n    importMaterials() {\n        return Promise.resolve().then(() => {\n            let data = this._data;\n            if (data.materials) {\n                data.materials.forEach((glTFMat, index) => {\n                    let mat = this.createMaterial(glTFMat);\n                    this._materials[index++] = mat;\n                    this.addDep(mat);\n                });\n            }\n        });\n    }\n    importMeshes() {\n        return Promise.resolve().then(() => {\n            let data = this._data;\n            if (data.meshes && data.nodes) {\n                data.nodes.forEach((glTFNode) => {\n                    var _a;\n                    if (glTFNode.mesh != null) {\n                        let glTFMesh = this._data.meshes[glTFNode.mesh];\n                        let glTFSkin = (_a = this._data.skins) === null || _a === void 0 ? void 0 : _a[glTFNode.skin];\n                        let key = glTFNode.mesh + (glTFNode.skin != null ? (\"_\" + glTFNode.skin) : \"\");\n                        let mesh = this._meshes[key];\n                        if (!mesh) {\n                            mesh = this.createMesh(glTFMesh, glTFSkin);\n                            this._meshes[key] = mesh;\n                            this.addDep(mesh);\n                        }\n                    }\n                });\n            }\n        });\n    }\n    _parse(data, createURL, progress) {\n        var _a, _b, _c;\n        if (!data.asset || data.asset.version !== \"2.0\") {\n            throw new Error(\"glTF version wrong!\");\n        }\n        this._data = data;\n        let basePath = URL.getPath(createURL);\n        this._idCounter = {};\n        (_a = data.extensionsUsed) === null || _a === void 0 ? void 0 : _a.forEach(value => {\n            let extensionFactory = glTFResource._Extensions[value];\n            if (!extensionFactory) {\n                console.warn(`glTF: unsupported used extension: ${value}`);\n            }\n            else {\n                this._extensions.set(value, extensionFactory(this));\n            }\n        });\n        (_b = data.extensionsRequired) === null || _b === void 0 ? void 0 : _b.forEach(value => {\n            let extensionFactory = glTFResource._Extensions[value];\n            if (!extensionFactory) {\n                console.warn(`glTF: unsupported required extension: ${value}`);\n            }\n        });\n        (_c = data.nodes) === null || _c === void 0 ? void 0 : _c.forEach(node => {\n            if (!node.name) {\n                let storeId = this.generateId(\"glTFNode\");\n                node.name = `node_${storeId}`;\n            }\n        });\n        let promise = this.loadBinary(basePath, progress);\n        promise = promise.then(() => {\n            return this.loadTextures(basePath, progress);\n        });\n        promise = promise.then(() => {\n            return this.importMeshes();\n        });\n        promise = promise.then(() => {\n            return this.importMaterials();\n        });\n        return promise.then(() => {\n            if (this._pendingOps.length > 0) {\n                return Promise.all(this._pendingOps).then(() => {\n                    this._idCounter = null;\n                });\n            }\n            else {\n                this._idCounter = null;\n                return Promise.resolve();\n            }\n        });\n    }\n    _parseglb(data, createURL, progress) {\n        var _a, _b, _c;\n        let basePath = URL.getPath(createURL);\n        this._idCounter = {};\n        let byte = new Byte(data);\n        let magic = byte.readUint32();\n        if (magic != 0x46546C67) {\n            throw new Error(\"glb fromat wrong!\");\n        }\n        let version = byte.readUint32();\n        if (version != 2) {\n            throw new Error(\"glb version wrong!\");\n        }\n        let length = byte.readUint32();\n        let firstChunkLength = byte.readUint32();\n        let firstChunkType = byte.readUint32();\n        if (firstChunkType != 0x4E4F534A) {\n            throw new Error(\"glb json chunk data wrong!\");\n        }\n        let firstChunkData = byte.readArrayBuffer(firstChunkLength);\n        let texDecoder = new TextDecoder();\n        let jsonStr = texDecoder.decode(firstChunkData);\n        let glTFObj = JSON.parse(jsonStr);\n        this._data = glTFObj;\n        let chunkLength = byte.readUint32();\n        let chunkType = byte.readUint32();\n        if (chunkType != 0x004E4942) {\n            throw new Error(\"glb bin chunk data wrong!\");\n        }\n        let firstBuffer = (_a = glTFObj.buffers) === null || _a === void 0 ? void 0 : _a[0];\n        firstBuffer.byteLength = firstBuffer.byteLength ? (Math.min(firstBuffer.byteLength, chunkLength)) : chunkLength;\n        this._buffers[0] = byte.readArrayBuffer(firstBuffer.byteLength);\n        (_b = glTFObj.extensionsUsed) === null || _b === void 0 ? void 0 : _b.forEach(value => {\n            let extensionFactory = glTFResource._Extensions[value];\n            if (!extensionFactory) {\n                console.warn(`glTF: unsupported used extension: ${value}`);\n            }\n            else {\n                this._extensions.set(value, extensionFactory(this));\n            }\n        });\n        (_c = glTFObj.extensionsRequired) === null || _c === void 0 ? void 0 : _c.forEach(value => {\n            let extensionFactory = glTFResource._Extensions[value];\n            if (!extensionFactory) {\n                console.warn(`glTF: unsupported required extension: ${value}`);\n            }\n        });\n        let promise = this.loadTextures(basePath, progress);\n        promise = promise.then(() => {\n            return this.importMeshes();\n        });\n        promise = promise.then(() => {\n            return this.importMaterials();\n        });\n        return promise.then(() => {\n            if (this._pendingOps.length > 0) {\n                return Promise.all(this._pendingOps).then(() => {\n                    this._idCounter = null;\n                });\n            }\n            else {\n                this._idCounter = null;\n                return Promise.resolve();\n            }\n        });\n    }\n    create() {\n        let data = this._data;\n        this._scenes.length = 0;\n        this._nodes.length = 0;\n        this._idCounter = {};\n        this.loadNodes(data.nodes);\n        this.buildHierarchy(data.nodes);\n        this.loadScenes(data.scenes);\n        this.loadAnimations(data.animations);\n        let defaultSceneIndex = (data.scene != undefined) ? data.scene : 0;\n        let defaultScene = this._scenes[defaultSceneIndex];\n        this._scenes.length = 0;\n        this._nodes.length = 0;\n        this._idCounter = null;\n        return defaultScene;\n    }\n    loadTextureFromBuffer(buffer, mimeType, constructParams, propertyParams, progress) {\n        let base64 = Base64Tool.encode(buffer);\n        let url = `data:${mimeType};base64,${base64}`;\n        return ILaya.loader.load({ url: url, constructParams: constructParams, propertyParams: propertyParams }, Loader.TEXTURE2D, progress === null || progress === void 0 ? void 0 : progress.createCallback());\n    }\n    loadTexture(url, constructParams, propertyParams, progress) {\n        return ILaya.loader.load({ url: url, constructParams: constructParams, propertyParams: propertyParams }, Loader.TEXTURE2D, progress === null || progress === void 0 ? void 0 : progress.createCallback());\n    }\n    generateId(context) {\n        let i = this._idCounter[context];\n        if (i == null)\n            i = 0;\n        else\n            i++;\n        this._idCounter[context] = i;\n        return i.toString();\n    }\n    getAccessorComponentsNum(type) {\n        switch (type) {\n            case \"SCALAR\": return 1;\n            case \"VEC2\": return 2;\n            case \"VEC3\": return 3;\n            case \"VEC4\": return 4;\n            case \"MAT2\": return 4;\n            case \"MAT3\": return 9;\n            case \"MAT4\": return 16;\n            default: return 0;\n        }\n    }\n    getAttributeNum(attriStr) {\n        switch (attriStr) {\n            case \"POSITION\": return 3;\n            case \"NORMAL\": return 3;\n            case \"COLOR\": return 4;\n            case \"UV\": return 2;\n            case \"UV1\": return 2;\n            case \"BLENDWEIGHT\": return 4;\n            case \"BLENDINDICES\": return 4;\n            case \"TANGENT\": return 4;\n            default: return 0;\n        }\n    }\n    _getTypedArrayConstructor(componentType) {\n        switch (componentType) {\n            case 5120: return Int8Array;\n            case 5121: return Uint8Array;\n            case 5122: return Int16Array;\n            case 5123: return Uint16Array;\n            case 5125: return Uint32Array;\n            case 5126: return Float32Array;\n        }\n    }\n    _getAccessorDateByteStride(componentType) {\n        switch (componentType) {\n            case 5120: return 1;\n            case 5121: return 1;\n            case 5122: return 2;\n            case 5123: return 2;\n            case 5125: return 4;\n            case 5126: return 4;\n        }\n    }\n    getBufferFormBufferView(bufferView, byteOffset, accessorType, componentType, count) {\n        let buffer = this._buffers[bufferView.buffer];\n        const constructor = this._getTypedArrayConstructor(componentType);\n        let componentCount = this.getAccessorComponentsNum(accessorType);\n        let res;\n        if (bufferView.byteStride) {\n            let vertexStride = bufferView.byteStride;\n            let dataByteStride = this._getAccessorDateByteStride(componentType);\n            let dataStride = vertexStride / dataByteStride;\n            let elementByteOffset = byteOffset || 0;\n            let elementOffset = elementByteOffset / dataByteStride;\n            let dataReader = new constructor(buffer, bufferView.byteOffset || 0, bufferView.byteLength / dataByteStride);\n            res = new constructor(count);\n            let resIndex = 0;\n            for (let index = 0; index < count; index++) {\n                let componentOffset = index * dataStride;\n                for (let i = 0; i < componentCount; i++) {\n                    res[resIndex++] = dataReader[componentOffset + elementOffset + i];\n                }\n            }\n        }\n        else {\n            let bufferOffset = (bufferView.byteOffset || 0) + (byteOffset || 0);\n            res = new constructor(buffer, bufferOffset, count);\n        }\n        return res;\n    }\n    getBufferwithAccessorIndex(accessorIndex) {\n        let accessor = this._data.accessors[accessorIndex];\n        if (!accessor)\n            return null;\n        let count = accessor.count;\n        let componentCount = this.getAccessorComponentsNum(accessor.type);\n        let accessorDataCount = count * componentCount;\n        let res;\n        let bufferView = this._data.bufferViews[accessor.bufferView];\n        if (bufferView) {\n            res = this.getBufferFormBufferView(bufferView, accessor.byteOffset, accessor.type, accessor.componentType, accessorDataCount);\n        }\n        else {\n            const constructor = this._getTypedArrayConstructor(accessor.componentType);\n            res = new constructor(accessorDataCount).fill(0);\n        }\n        if (accessor.sparse) {\n            let sparseCount = accessor.sparse.count;\n            let sparseIndices = accessor.sparse.indices;\n            let sparseIndicesBufferView = this._data.bufferViews[sparseIndices.bufferView];\n            let sparseIndicesData = this.getBufferFormBufferView(sparseIndicesBufferView, sparseIndices.byteOffset, accessor.type, sparseIndices.componentType, sparseCount);\n            let sparseValues = accessor.sparse.values;\n            let sparseValuesBufferView = this._data.bufferViews[sparseValues.bufferView];\n            let sparseValuesData = this.getBufferFormBufferView(sparseValuesBufferView, sparseValues.byteOffset, accessor.type, accessor.componentType, sparseCount * componentCount);\n            for (let index = 0; index < sparseCount; index++) {\n                let i = sparseIndicesData[index];\n                for (let componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n                    res[i * componentCount + componentIndex] = sparseValuesData[index * componentCount + componentIndex];\n                }\n            }\n        }\n        return res;\n    }\n    getTextureMipmap(glTFSampler) {\n        if (glTFSampler)\n            return glTFSampler.minFilter != 9729 &&\n                glTFSampler.minFilter != 9728;\n        else\n            return true;\n    }\n    getTextureFormat(glTFImage) {\n        if (glTFImage.mimeType === \"image/jpeg\") {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    getTextureFilterMode(glTFSampler) {\n        if (!glTFSampler) {\n            return 1;\n        }\n        if (glTFSampler.magFilter === 9728) {\n            return 0;\n        }\n        else if (this.getTextureMipmap(glTFSampler)) {\n            if (glTFSampler.minFilter === 9987)\n                return 2;\n            return 1;\n        }\n        return 1;\n    }\n    getTextureWrapMode(mode) {\n        mode = mode !== null && mode !== void 0 ? mode : 10497;\n        switch (mode) {\n            case 10497:\n                return WrapMode.Repeat;\n            case 33071:\n                return WrapMode.Clamp;\n            case 33648:\n                return WrapMode.Mirrored;\n            default:\n                return WrapMode.Repeat;\n        }\n        if (mode === 33071) {\n            return 1;\n        }\n        return 0;\n    }\n    getTextureConstructParams(glTFImage, glTFSampler, sRGB) {\n        let constructParams = [\n            0,\n            0,\n            this.getTextureFormat(glTFImage),\n            this.getTextureMipmap(glTFSampler),\n            false,\n            sRGB\n        ];\n        return constructParams;\n    }\n    getTexturePropertyParams(glTFSampler) {\n        if (!glTFSampler) {\n            return null;\n        }\n        let propertyParams = {\n            filterMode: this.getTextureFilterMode(glTFSampler),\n            wrapModeU: this.getTextureWrapMode(glTFSampler.wrapS),\n            wrapModeV: this.getTextureWrapMode(glTFSampler.wrapT),\n            anisoLevel: 1,\n            hdrEncodeFormat: HDREncodeFormat.NONE\n        };\n        return propertyParams;\n    }\n    getTextureWithInfo(glTFTextureInfo) {\n        if (glTFTextureInfo.texCoord) {\n            console.warn(\"glTF Loader: non 0 uv channel unsupported.\");\n        }\n        return this._textures[glTFTextureInfo.index];\n    }\n    getExtensionTextureInfo(info, extensionName) {\n        let extension = this._extensions.get(extensionName);\n        if (info.extensions && info.extensions[extensionName] && extension) {\n            if (extension.loadExtensionTextureInfo) {\n                return extension.loadExtensionTextureInfo(info);\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    applyMaterialRenderState(glTFMaterial, material) {\n        var _a;\n        let renderMode = glTFMaterial.alphaMode || \"OPAQUE\";\n        switch (renderMode) {\n            case \"OPAQUE\": {\n                material.materialRenderMode = MaterialRenderMode.RENDERMODE_OPAQUE;\n                break;\n            }\n            case \"BLEND\": {\n                material.materialRenderMode = MaterialRenderMode.RENDERMODE_TRANSPARENT;\n                break;\n            }\n            case \"MASK\": {\n                material.materialRenderMode = MaterialRenderMode.RENDERMODE_CUTOUT;\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n        material.alphaTestValue = (_a = glTFMaterial.alphaCutoff) !== null && _a !== void 0 ? _a : 0.5;\n        if (glTFMaterial.doubleSided) {\n            material.cull = RenderState.CULL_NONE;\n        }\n    }\n    setMaterialTextureProperty(material, texInfo, name, define, transformName, transformDefine) {\n        let tex = this.getTextureWithInfo(texInfo);\n        material.setTexture(name, tex);\n        if (define) {\n            material.setDefine(define, true);\n        }\n        if (transformDefine) {\n            let transformInfo = this.getExtensionTextureInfo(texInfo, \"KHR_texture_transform\");\n            if (transformInfo) {\n                material.setDefine(transformDefine, true);\n                material.setMatrix3x3(transformName, transformInfo.transform);\n            }\n        }\n    }\n    applyDefaultMaterialProperties(glTFMaterial, material) {\n        var _a, _b, _c, _d;\n        let pbrMetallicRoughness = glTFMaterial.pbrMetallicRoughness;\n        if (pbrMetallicRoughness) {\n            if (pbrMetallicRoughness.baseColorFactor) {\n                let baseColorFactor = material.getVector4(\"u_BaseColorFactor\");\n                baseColorFactor.fromArray(pbrMetallicRoughness.baseColorFactor);\n                material.setVector4(\"u_BaseColorFactor\", baseColorFactor);\n            }\n            if (pbrMetallicRoughness.baseColorTexture) {\n                this.setMaterialTextureProperty(material, pbrMetallicRoughness.baseColorTexture, \"u_BaseColorTexture\", glTFShader.Define_BaseColorMap, \"u_BaseColorMapTransform\", glTFShader.Define_BaseColorMapTransform);\n            }\n            let metallicFactor = (_a = pbrMetallicRoughness.metallicFactor) !== null && _a !== void 0 ? _a : 1.0;\n            material.setFloat(\"u_MetallicFactor\", metallicFactor);\n            let roughnessFactor = (_b = pbrMetallicRoughness.roughnessFactor) !== null && _b !== void 0 ? _b : 1.0;\n            material.setFloat(\"u_RoughnessFactor\", roughnessFactor);\n            if (pbrMetallicRoughness.metallicRoughnessTexture) {\n                this.setMaterialTextureProperty(material, pbrMetallicRoughness.metallicRoughnessTexture, \"u_MetallicRoughnessTexture\", glTFShader.Define_MetallicRoughnessMap, \"u_MetallicRoughnessMapTransform\", glTFShader.Define_MetallicRoughnessMapTransform);\n            }\n        }\n        if (glTFMaterial.normalTexture) {\n            this.setMaterialTextureProperty(material, glTFMaterial.normalTexture, \"u_NormalTexture\", glTFShader.Define_NormalMap, \"u_NormalMapTransform\", glTFShader.Define_NormalMapTransform);\n            let normalScale = (_c = glTFMaterial.normalTexture.scale) !== null && _c !== void 0 ? _c : 1.0;\n            material.setFloat(\"u_NormalScale\", normalScale);\n        }\n        if (glTFMaterial.occlusionTexture) {\n            this.setMaterialTextureProperty(material, glTFMaterial.occlusionTexture, \"u_OcclusionTexture\", glTFShader.Define_OcclusionMap, \"u_OcclusionMapTransform\", glTFShader.Define_OcclusionMapTransform);\n            let strength = (_d = glTFMaterial.occlusionTexture.strength) !== null && _d !== void 0 ? _d : 1.0;\n            material.setFloat(\"u_OcclusionStrength\", strength);\n        }\n        if (glTFMaterial.emissiveFactor) {\n            let emissionFactor = material.getVector3(\"u_EmissionFactor\");\n            emissionFactor.fromArray(glTFMaterial.emissiveFactor);\n            material.setVector3(\"u_EmissionFactor\", emissionFactor);\n            material.setDefine(PBRShaderLib.DEFINE_EMISSION, true);\n        }\n        if (glTFMaterial.emissiveTexture) {\n            material.setDefine(PBRShaderLib.DEFINE_EMISSION, true);\n            this.setMaterialTextureProperty(material, glTFMaterial.emissiveTexture, \"u_EmissionTexture\", glTFShader.Define_EmissionMap, \"u_EmissionMapTransform\", glTFShader.Define_EmissionMapTransform);\n        }\n        this.applyMaterialRenderState(glTFMaterial, material);\n        return;\n    }\n    createDefaultMaterial(glTFMaterial) {\n        let material = new Material();\n        material.setShaderName(glTFShader.ShaderName);\n        material.name = glTFMaterial.name ? glTFMaterial.name : \"\";\n        this.applyDefaultMaterialProperties(glTFMaterial, material);\n        return material;\n    }\n    createMaterial(glTFMaterial) {\n        let mat = null;\n        let propertiesExts = [];\n        for (const key in glTFMaterial.extensions) {\n            let extension = this._extensions.get(key);\n            if (extension) {\n                if (extension.createMaterial) {\n                    mat = extension.createMaterial(glTFMaterial);\n                }\n                if (extension.additionMaterialProperties) {\n                    propertiesExts.push(extension);\n                }\n            }\n        }\n        if (!mat) {\n            mat = this.createDefaultMaterial(glTFMaterial);\n        }\n        propertiesExts.forEach(extension => {\n            extension.additionMaterialProperties(glTFMaterial, mat);\n        });\n        return mat;\n    }\n    pickMeshMaterials(glTFMesh) {\n        let materials = [];\n        glTFMesh.primitives.forEach(primitive => {\n            if (primitive.material != undefined) {\n                let material = this._materials[primitive.material];\n                materials.push(material);\n            }\n            else {\n                let material = new PBRStandardMaterial();\n                materials.push(material);\n                this._materials.push(material);\n                primitive.material = this._materials.indexOf(material);\n            }\n        });\n        return materials;\n    }\n    loadScenes(glTFScenes) {\n        if (!glTFScenes)\n            return;\n        glTFScenes.forEach((glTFScene, index) => {\n            this._scenes[index] = this._loadScene(glTFScene);\n        });\n    }\n    _loadScene(glTFScene) {\n        return this._createSceneNode(glTFScene);\n    }\n    _createSceneNode(glTFScene) {\n        let glTFSceneNode = new Sprite3D(glTFScene.name || \"Scene\");\n        glTFScene.nodes.forEach(nodeIndex => {\n            let sprite = this._nodes[nodeIndex];\n            glTFSceneNode.addChild(sprite);\n        });\n        return glTFSceneNode;\n    }\n    applyTransform(glTFNode, sprite) {\n        if (glTFNode.matrix) {\n            let localMatrix = sprite.transform.localMatrix;\n            localMatrix.elements.set(glTFNode.matrix);\n            sprite.transform.localMatrix = localMatrix;\n        }\n        else {\n            let localPosition = sprite.transform.localPosition;\n            let localRotation = sprite.transform.localRotation;\n            let localScale = sprite.transform.localScale;\n            glTFNode.translation && localPosition.fromArray(glTFNode.translation);\n            glTFNode.rotation && localRotation.fromArray(glTFNode.rotation);\n            glTFNode.scale && localScale.fromArray(glTFNode.scale);\n            sprite.transform.localPosition = localPosition;\n            sprite.transform.localRotation = localRotation;\n            sprite.transform.localScale = localScale;\n        }\n    }\n    buildHierarchy(glTFNodes) {\n        glTFNodes.forEach((glTFNode, index) => {\n            let sprite = this._nodes[index];\n            if (glTFNode.children) {\n                glTFNode.children.forEach((childIndex) => {\n                    let child = this._nodes[childIndex];\n                    sprite.addChild(child);\n                });\n            }\n        });\n        glTFNodes.forEach((glTFNode, index) => {\n            let sprite = this._nodes[index];\n            if (glTFNode.skin != null) {\n                this.fixSkinnedSprite(glTFNode, sprite);\n            }\n        });\n    }\n    loadNodes(glTFNodes) {\n        if (!glTFNodes)\n            return;\n        glTFNodes.forEach((glTFNode, index) => {\n            this._nodes[index] = this.loadNode(glTFNode);\n        });\n    }\n    loadNode(glTFNode) {\n        return this.createSprite3D(glTFNode);\n    }\n    createSprite3D(glTFNode) {\n        let sprite;\n        if (glTFNode.skin != null) {\n            sprite = this.createSkinnedMeshSprite3D(glTFNode);\n            this.applyTransform(glTFNode, sprite);\n        }\n        else if (glTFNode.mesh != null) {\n            sprite = this.createMeshSprite3D(glTFNode);\n            this.applyTransform(glTFNode, sprite);\n        }\n        else {\n            sprite = new Sprite3D(glTFNode.name);\n            this.applyTransform(glTFNode, sprite);\n        }\n        let storeId = this.generateId(\"node\");\n        sprite.name = glTFNode.name || `node_${storeId}`;\n        sprite._extra.storeId = \"#\" + storeId;\n        return sprite;\n    }\n    createMeshSprite3D(glTFNode) {\n        let glTFMesh = this._data.meshes[glTFNode.mesh];\n        let mesh = this._meshes[glTFNode.mesh];\n        let materials = this.pickMeshMaterials(glTFMesh);\n        let sprite = new Sprite3D(glTFNode.name);\n        let filter = sprite.addComponent(MeshFilter);\n        let render = sprite.addComponent(MeshRenderer);\n        filter.sharedMesh = mesh;\n        render.sharedMaterials = materials;\n        render.receiveShadow = true;\n        render.castShadow = true;\n        if (glTFMesh.weights) {\n            glTFMesh.weights.forEach((weight, index) => {\n                let target = mesh.morphTargetData.getMorphChannelbyIndex(index);\n                render.setMorphChannelWeight(target.name, weight);\n            });\n        }\n        return sprite;\n    }\n    createSkinnedMeshSprite3D(glTFNode) {\n        let glTFMesh = this._data.meshes[glTFNode.mesh];\n        let mesh = this._meshes[glTFNode.mesh + \"_\" + glTFNode.skin];\n        let materials = this.pickMeshMaterials(glTFMesh);\n        let sprite = new Sprite3D(glTFNode.name);\n        let filter = sprite.addComponent(MeshFilter);\n        let render = sprite.addComponent(SkinnedMeshRenderer);\n        filter.sharedMesh = mesh;\n        render.sharedMaterials = materials;\n        render.receiveShadow = true;\n        render.castShadow = true;\n        if (glTFMesh.weights) {\n            glTFMesh.weights.forEach((weight, index) => {\n                let target = mesh.morphTargetData.getMorphChannelbyIndex(index);\n                render.setMorphChannelWeight(target.name, weight);\n            });\n        }\n        return sprite;\n    }\n    getArrributeBuffer(attributeAccessorIndex, layaDeclarStr, attributeMap, vertexDeclarArr) {\n        let attributeBuffer = this.getBufferwithAccessorIndex(attributeAccessorIndex);\n        if (!attributeBuffer)\n            return null;\n        vertexDeclarArr.push(layaDeclarStr);\n        let res = attributeBuffer;\n        attributeMap.set(layaDeclarStr, res);\n        return res;\n    }\n    getIndexBuffer(attributeAccessorIndex, vertexCount) {\n        let indexBuffer = this.getBufferwithAccessorIndex(attributeAccessorIndex);\n        if (indexBuffer) {\n            return new Uint32Array(indexBuffer).reverse();\n        }\n        else {\n            let indices = new Uint32Array(vertexCount);\n            for (let i = 0; i < vertexCount; i++) {\n                indices[i] = vertexCount - 1 - i;\n            }\n            return indices;\n        }\n    }\n    calculateFlatNormal(positions, indexArray) {\n        let normal = new Float32Array(positions.length);\n        for (let index = 0; index < indexArray.length; index += 3) {\n            let i0 = indexArray[index];\n            let i1 = indexArray[index + 1];\n            let i2 = indexArray[index + 2];\n            let p0x = positions[i0 * 3];\n            let p0y = positions[i0 * 3 + 1];\n            let p0z = positions[i0 * 3 + 2];\n            let p1x = positions[i1 * 3];\n            let p1y = positions[i1 * 3 + 1];\n            let p1z = positions[i1 * 3 + 2];\n            let p2x = positions[i2 * 3];\n            let p2y = positions[i2 * 3 + 1];\n            let p2z = positions[i2 * 3 + 2];\n            let x1 = p1x - p0x;\n            let y1 = p1y - p0y;\n            let z1 = p1z - p0z;\n            let x2 = p2x - p0x;\n            let y2 = p2y - p0y;\n            let z2 = p2z - p0z;\n            let yz = y1 * z2 - z1 * y2;\n            let xz = z1 * x2 - x1 * z2;\n            let xy = x1 * y2 - y1 * x2;\n            let invPyth = -1.0 / (Math.sqrt((yz * yz) + (xz * xz) + (xy * xy)));\n            let nx = yz * invPyth;\n            let ny = xz * invPyth;\n            let nz = xy * invPyth;\n            normal[i0 * 3] = nx;\n            normal[i1 * 3] = nx;\n            normal[i2 * 3] = nx;\n            normal[i0 * 3 + 1] = ny;\n            normal[i1 * 3 + 1] = ny;\n            normal[i2 * 3 + 1] = ny;\n            normal[i0 * 3 + 2] = nz;\n            normal[i1 * 3 + 2] = nz;\n            normal[i2 * 3 + 2] = nz;\n        }\n        return normal;\n    }\n    parseMeshwithSubMeshData(subDatas, layaMesh) {\n        let vertexCount = 0;\n        let indexCount = 0;\n        let vertexDecler = undefined;\n        subDatas.forEach(subData => {\n            vertexCount += subData.vertexCount;\n            indexCount += subData.indices.length;\n            vertexDecler = vertexDecler || subData.vertexDecler;\n        });\n        let vertexDeclaration = VertexMesh.getVertexDeclaration(vertexDecler, false);\n        let vertexByteStride = vertexDeclaration.vertexStride;\n        let vertexFloatStride = vertexByteStride / 4;\n        let vertexArray = new Float32Array(vertexFloatStride * vertexCount);\n        let indexArray;\n        let ibFormat = IndexFormat.UInt32;\n        if (vertexCount < 65536) {\n            indexArray = new Uint16Array(indexCount);\n            ibFormat = IndexFormat.UInt16;\n        }\n        else {\n            indexArray = new Uint32Array(indexCount);\n        }\n        this.fillMeshBuffers(subDatas, vertexArray, indexArray, vertexFloatStride);\n        this.generateMesh(vertexArray, indexArray, vertexDeclaration, ibFormat, subDatas, layaMesh);\n    }\n    fillMeshBuffers(subDatas, vertexArray, indexArray, vertexFloatStride) {\n        let ibPosOffset = 0;\n        let ibVertexOffset = 0;\n        let vbPosOffset = 0;\n        subDatas.forEach((subData) => {\n            let iAOffset = ibPosOffset;\n            let vertexCount = subData.vertexCount;\n            let subIb = subData.indices;\n            for (let index = 0; index < subIb.length; index++) {\n                indexArray[iAOffset + index] = subIb[index] + ibVertexOffset;\n            }\n            ibPosOffset += subIb.length;\n            ibVertexOffset += vertexCount;\n            const fillAttributeBuffer = (value, attriOffset, attriFloatCount = 0) => {\n                let startOffset = vbPosOffset + attriOffset;\n                for (let index = 0; index < vertexCount; index++) {\n                    for (let ac = 0; ac < attriFloatCount; ac++) {\n                        vertexArray[startOffset + index * vertexFloatStride + ac] = value[index * attriFloatCount + ac];\n                    }\n                }\n            };\n            let attriOffset = 0;\n            let attributeMap = subData.attributeMap;\n            let position = attributeMap.get(\"POSITION\");\n            (position) && (fillAttributeBuffer(position, attriOffset, 3), attriOffset += 3);\n            let normal = attributeMap.get(\"NORMAL\");\n            (normal) && (fillAttributeBuffer(normal, attriOffset, 3), attriOffset += 3);\n            let color = attributeMap.get(\"COLOR\");\n            (color) && (fillAttributeBuffer(color, attriOffset, 4), attriOffset += 4);\n            let uv = attributeMap.get(\"UV\");\n            (uv) && (fillAttributeBuffer(uv, attriOffset, 2), attriOffset += 2);\n            let uv1 = attributeMap.get(\"UV1\");\n            (uv1) && (fillAttributeBuffer(uv1, attriOffset, 2), attriOffset += 2);\n            let blendWeight = attributeMap.get(\"BLENDWEIGHT\");\n            (blendWeight) && (fillAttributeBuffer(blendWeight, attriOffset, 4), attriOffset += 4);\n            let blendIndices = attributeMap.get(\"BLENDINDICES\");\n            if (blendIndices) {\n                let blendIndicesUint8 = new Uint8Array(blendIndices);\n                let blendIndicesFloat32 = new Float32Array(blendIndicesUint8.buffer);\n                fillAttributeBuffer(blendIndicesFloat32, attriOffset, 1), attriOffset += 1;\n            }\n            let tangent = attributeMap.get(\"TANGENT\");\n            (tangent) && (fillAttributeBuffer(tangent, attriOffset, 4), attriOffset += 4);\n            vbPosOffset += vertexCount * vertexFloatStride;\n        });\n    }\n    splitSubMeshByBonesCount(attributeMap, morphtargets, indexArray, boneIndicesList, subIndexStartArray, subIndexCountArray) {\n        let start = 0;\n        let subIndexSet = new Set();\n        let boneIndexArray = attributeMap.get(\"BLENDINDICES\");\n        let vertexCount = boneIndexArray.length / 4;\n        let resArray = new Float32Array(boneIndexArray.length);\n        let flagArray = new Array(vertexCount).fill(false);\n        for (let i = 0, n = indexArray.length; i < n; i += 3) {\n            let triangleSet = new Set();\n            for (let j = i; j < i + 3; j++) {\n                let ibIndex = indexArray[j];\n                let boneIndexOffset = ibIndex * 4;\n                for (let k = 0; k < 4; k++) {\n                    triangleSet.add(boneIndexArray[boneIndexOffset + k]);\n                }\n            }\n            let tempSet = new Set([...subIndexSet, ...triangleSet]);\n            if (tempSet.size > maxSubBoneCount) {\n                let count = i - start;\n                subIndexStartArray.push(start);\n                subIndexCountArray.push(count);\n                let curBoneList = Array.from(subIndexSet);\n                boneIndicesList.push(new Uint16Array(curBoneList));\n                start = i;\n                subIndexSet = new Set(triangleSet);\n            }\n            else {\n                subIndexSet = tempSet;\n            }\n            if (i == n - 3) {\n                let count = i - start + 3;\n                subIndexStartArray.push(start);\n                subIndexCountArray.push(count);\n                start = i;\n                let curBoneList = Array.from(subIndexSet);\n                boneIndicesList.push(new Uint16Array(curBoneList));\n            }\n        }\n        let drawCount = boneIndicesList.length;\n        let newAttributeMap = new Map();\n        attributeMap.forEach((value, key) => {\n            let array = new Array();\n            newAttributeMap.set(key, array);\n        });\n        let newTargetMap = {};\n        for (const key in morphtargets.targets) {\n            let newMap = newTargetMap[key] = new Map();\n            let target = morphtargets.targets[key];\n            target.forEach((value, attri) => {\n                newMap.set(attri, new Array());\n            });\n        }\n        let curMaxIndex = vertexCount - 1;\n        for (let d = 0; d < drawCount; d++) {\n            let k = subIndexStartArray[d];\n            let l = subIndexCountArray[d];\n            let bl = boneIndicesList[d];\n            let batchFlag = new Array(vertexCount).fill(false);\n            let batchMap = new Map();\n            for (let area = 0; area < l; area++) {\n                let ci = indexArray[area + k];\n                let biStart = 4 * ci;\n                for (let cbi = biStart; cbi < biStart + 4; cbi++) {\n                    let oldBoneIndex = boneIndexArray[cbi];\n                    let newBoneIndex = bl.indexOf(oldBoneIndex);\n                    newBoneIndex = newBoneIndex == -1 ? 0 : newBoneIndex;\n                    if (flagArray[ci] && !batchFlag[ci]) {\n                        newAttributeMap.get(\"BLENDINDICES\").push(newBoneIndex);\n                    }\n                    else if (flagArray[ci] && batchFlag[ci]) {\n                    }\n                    else {\n                        resArray[cbi] = newBoneIndex;\n                    }\n                }\n                if (!flagArray[ci] && !batchFlag[ci]) {\n                    batchFlag[ci] = true;\n                    batchMap.set(ci, ci);\n                }\n                else if (!flagArray[ci] && batchFlag[ci]) {\n                    indexArray[area + k] = batchMap.get(ci);\n                }\n                else if (flagArray[ci] && !batchFlag[ci]) {\n                    batchFlag[ci] = true;\n                    curMaxIndex++;\n                    batchMap.set(ci, curMaxIndex);\n                    indexArray[area + k] = curMaxIndex;\n                    newAttributeMap.forEach((value, key) => {\n                        let attOffset = this.getAttributeNum(key);\n                        let oldArray = attributeMap.get(key);\n                        if (key !== \"BLENDINDICES\") {\n                            for (let index = 0; index < attOffset; index++) {\n                                value.push(oldArray[index + ci * attOffset]);\n                            }\n                        }\n                    });\n                    for (const key in newTargetMap) {\n                        let newMap = newTargetMap[key];\n                        let oldMap = morphtargets.targets[key];\n                        newMap.forEach((value, attri) => {\n                            let attOffset = this.getAttributeNum(attri);\n                            let oldArray = oldMap.get(attri);\n                            for (let index = 0; index < attOffset; index++) {\n                                value.push(oldArray[index + ci * attOffset]);\n                            }\n                        });\n                    }\n                }\n                else if (flagArray[ci] && batchFlag[ci]) {\n                    indexArray[area + k] = batchMap.get(ci);\n                }\n            }\n            batchFlag.forEach((value, index) => {\n                flagArray[index] = value || flagArray[index];\n            });\n        }\n        newAttributeMap.forEach((value, key) => {\n            let oldFloatArray = attributeMap.get(key);\n            if (key == \"BLENDINDICES\") {\n                oldFloatArray = resArray;\n            }\n            let newLength = oldFloatArray.length + value.length;\n            let newFloatArray = new Float32Array(newLength);\n            newFloatArray.set(oldFloatArray, 0);\n            newFloatArray.set(value, oldFloatArray.length);\n            attributeMap.set(key, newFloatArray);\n        });\n        for (const key in newTargetMap) {\n            let newMap = newTargetMap[key];\n            let oldMap = morphtargets.targets[key];\n            newMap.forEach((value, attri) => {\n                let oldArray = oldMap.get(attri);\n                let newLength = value.length + oldArray.length;\n                let newFloatArray = new Float32Array(newLength);\n                newFloatArray.set(oldArray, 0);\n                newFloatArray.set(value, oldArray.length);\n                oldMap.set(attri, newFloatArray);\n            });\n        }\n        boneIndexArray = null;\n    }\n    generateMesh(vertexArray, indexArray, vertexDeclaration, ibFormat, subDatas, layaMesh) {\n        let vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(vertexArray.byteLength, BufferUsage.Static, true);\n        vertexBuffer.vertexDeclaration = vertexDeclaration;\n        vertexBuffer.setData(vertexArray.buffer);\n        let indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(ibFormat, indexArray.length, BufferUsage.Static, true);\n        indexBuffer.setData(indexArray);\n        layaMesh._indexFormat = ibFormat;\n        layaMesh._indexBuffer = indexBuffer;\n        layaMesh._vertexBuffer = vertexBuffer;\n        layaMesh._setBuffer(vertexBuffer, indexBuffer);\n        layaMesh._vertexCount = vertexBuffer._byteLength / vertexDeclaration.vertexStride;\n        let reCalculateBounds = false;\n        let min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        let max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        let subMeshOffset = 0;\n        let subMeshCount = subDatas.length;\n        let subMeshes = new Array(subMeshCount);\n        for (let index = 0; index < subMeshCount; index++) {\n            let subData = subDatas[index];\n            let subMesh = new SubMesh(layaMesh);\n            subMeshes[index] = subMesh;\n            subMesh._vertexBuffer = vertexBuffer;\n            subMesh._indexBuffer = indexBuffer;\n            let subIndexStart = subMeshOffset;\n            subMeshOffset += subData.indices.length;\n            let subIndexCount = subData.indices.length;\n            subMesh._setIndexRange(subIndexStart, subIndexCount, ibFormat);\n            subMesh._boneIndicesList = subData.boneIndicesList;\n            subMesh._subIndexBufferStart = subData.subIndexStartArray;\n            subMesh._subIndexBufferCount = subData.subIndexCountArray;\n            for (let subIndex = 0; subIndex < subMesh._subIndexBufferStart.length; subIndex++) {\n                subMesh._subIndexBufferStart[subIndex] += subIndexStart;\n            }\n            if (subData.boundMax && subData.boundMin) {\n                min.x = Math.min(subData.boundMin[0], min.x);\n                min.y = Math.min(subData.boundMin[1], min.y);\n                min.z = Math.min(subData.boundMin[2], min.z);\n                max.x = Math.max(subData.boundMax[0], max.x);\n                max.y = Math.max(subData.boundMax[1], max.y);\n                max.z = Math.max(subData.boundMax[2], max.z);\n            }\n            else {\n                reCalculateBounds = true;\n            }\n        }\n        layaMesh._setSubMeshes(subMeshes);\n        if (reCalculateBounds) {\n            layaMesh.calculateBounds();\n        }\n        else {\n            layaMesh.bounds.setMin(min);\n            layaMesh.bounds.setMax(max);\n        }\n        let memorySize = vertexBuffer._byteLength + indexBuffer._byteLength;\n        layaMesh._setCPUMemory(memorySize);\n        layaMesh._setGPUMemory(memorySize);\n    }\n    applyglTFSkinData(mesh, subDatas, glTFSkin) {\n        if (!glTFSkin)\n            return;\n        let joints = glTFSkin.joints;\n        let inverseBindMatricesArray = new Float32Array(this.getBufferwithAccessorIndex(glTFSkin.inverseBindMatrices));\n        let boneCount = joints.length;\n        let boneNames = mesh._boneNames = [];\n        joints.forEach(nodeIndex => {\n            let node = this._data.nodes[nodeIndex];\n            boneNames.push(node.name);\n        });\n        mesh._inverseBindPoses = [];\n        mesh._inverseBindPosesBuffer = inverseBindMatricesArray.buffer;\n        for (let index = 0; index < boneCount; index++) {\n            let bindPosesArrayOffset = 16 * index;\n            let matElement = inverseBindMatricesArray.slice(bindPosesArrayOffset, bindPosesArrayOffset + 16);\n            mesh._inverseBindPoses[index] = new Matrix4x4(matElement[0], matElement[1], matElement[2], matElement[3], matElement[4], matElement[5], matElement[6], matElement[7], matElement[8], matElement[9], matElement[10], matElement[11], matElement[12], matElement[13], matElement[14], matElement[15], matElement);\n        }\n        let subCount = subDatas.length;\n        let skinnedCache = mesh._skinnedMatrixCaches;\n        skinnedCache.length = mesh._inverseBindPoses.length;\n        for (let subIndex = 0; subIndex < subCount; subIndex++) {\n            let submesh = mesh.getSubMesh(subIndex);\n            let drawCount = submesh._subIndexBufferStart.length;\n            for (let drawIndex = 0; drawIndex < drawCount; drawIndex++) {\n                let boneIndices = submesh._boneIndicesList[drawIndex];\n                for (let bni = 0; bni < boneIndices.length; bni++) {\n                    let bn = boneIndices[bni];\n                    skinnedCache[bn] || (skinnedCache[bn] = new skinnedMatrixCache(subIndex, drawIndex, bni));\n                }\n            }\n        }\n        for (let index = 0; index < skinnedCache.length; index++) {\n            if (!skinnedCache[index]) {\n                skinnedCache[index] = new skinnedMatrixCache(0, 0, 0);\n            }\n        }\n    }\n    applyMorphTarget(mesh, subDatas) {\n        let hasPosition = false;\n        let hasNormal = false;\n        let hasTangent = false;\n        subDatas.forEach(subData => {\n            hasPosition = subData.morphtargets.position || hasPosition;\n            hasNormal = subData.morphtargets.normal || hasNormal;\n            hasTangent = subData.morphtargets.tangent || hasTangent;\n        });\n        if (!(hasPosition || hasTangent || hasTangent)) {\n            return;\n        }\n        let vertexCount = mesh.vertexCount;\n        let morphData = new MorphTargetData();\n        morphData.vertexCount = vertexCount;\n        let decStr = [];\n        if (hasPosition)\n            decStr.push(\"POSITION\");\n        if (hasNormal)\n            decStr.push(\"NORMAL\");\n        if (hasTangent)\n            decStr.push(\"TANGENT\");\n        let morphVertexDec = VertexMesh.getVertexDeclaration(decStr.toLocaleString());\n        let targetVertexFloatStride = morphVertexDec.vertexStride / 4;\n        morphData.vertexDec = morphVertexDec;\n        let bounds = morphData.bounds;\n        let min = bounds.getMin();\n        let max = bounds.getMax();\n        min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        let subVertexOffset = 0;\n        for (let index = 0; index < subDatas.length; index++) {\n            let subData = subDatas[index];\n            min.x = Math.min(min.x, subData.morphtargets.boundMin[0]);\n            min.y = Math.min(min.y, subData.morphtargets.boundMin[1]);\n            min.z = Math.min(min.z, subData.morphtargets.boundMin[2]);\n            max.x = Math.max(max.x, subData.morphtargets.boundMax[0]);\n            max.y = Math.max(max.y, subData.morphtargets.boundMax[1]);\n            max.z = Math.max(max.z, subData.morphtargets.boundMax[2]);\n            let targets = subData.morphtargets.targets;\n            for (const targetName in targets) {\n                let channel = morphData.getMorphChannel(targetName);\n                if (!channel) {\n                    channel = new MorphTargetChannel();\n                    channel.name = targetName;\n                    let target = new MorphTarget();\n                    target.name = targetName;\n                    target.data = new Float32Array(vertexCount * targetVertexFloatStride).fill(0);\n                    channel.addTarget(target);\n                    morphData.addMorphChannel(channel);\n                }\n                let target = channel.getTargetByIndex(0);\n                let morphMap = targets[targetName];\n                for (let vertexIndex = 0; vertexIndex < subData.vertexCount; vertexIndex++) {\n                    let morphPosition = morphMap.get(\"POSITION\");\n                    if (morphPosition) {\n                        let posElement = morphVertexDec.getVertexElementByUsage(VertexMesh.MESH_POSITION0);\n                        let offset = posElement.offset / 4;\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset] = morphPosition[vertexIndex * 3];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 1] = morphPosition[vertexIndex * 3 + 1];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 2] = morphPosition[vertexIndex * 3 + 2];\n                    }\n                    let morphNormal = morphMap.get(\"NORMAL\");\n                    if (morphNormal) {\n                        let normalElement = morphVertexDec.getVertexElementByUsage(VertexMesh.MESH_NORMAL0);\n                        let offset = normalElement.offset / 4;\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset] = morphNormal[vertexIndex * 3];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 1] = morphNormal[vertexIndex * 3 + 1];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 2] = morphNormal[vertexIndex * 3 + 2];\n                    }\n                    let morphTangent = morphMap.get(\"TANGENT\");\n                    if (morphTangent) {\n                        let tangentElement = morphVertexDec.getVertexElementByUsage(VertexMesh.MESH_TANGENT0);\n                        let offset = tangentElement.offset / 4;\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset] = morphTangent[vertexIndex * 3];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 1] = morphTangent[vertexIndex * 3 + 1];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 2] = morphTangent[vertexIndex * 3 + 2];\n                        target.data[(vertexIndex + subVertexOffset) * targetVertexFloatStride + offset + 3] = subData.attributeMap.get(\"TANGENT\")[vertexIndex * 4 + 3];\n                    }\n                }\n            }\n            subVertexOffset += subData.vertexCount;\n        }\n        bounds.setMin(min);\n        bounds.setMax(max);\n        mesh.morphTargetData = morphData;\n        morphData.initData();\n    }\n    createMesh(glTFMesh, glTFSkin) {\n        let layaMesh = new Mesh();\n        let glTFMeshPrimitives = glTFMesh.primitives;\n        let morphWeights = glTFMesh.weights;\n        let boneCount = (glTFSkin) ? glTFSkin.joints.length : 0;\n        let subDatas = [];\n        glTFMeshPrimitives.forEach((glTFMeshPrimitive) => {\n            var _a;\n            let mode = glTFMeshPrimitive.mode;\n            if (mode == undefined)\n                mode = 4;\n            if (4 != mode) {\n                console.warn(\"glTF Loader: only support gl.TRIANGLES.\");\n                debugger;\n            }\n            let vertexDeclarArr = [];\n            let attributeMap = new Map();\n            let attributes = glTFMeshPrimitive.attributes;\n            let position = this.getArrributeBuffer(attributes.POSITION, \"POSITION\", attributeMap, vertexDeclarArr);\n            let vertexCount = position.length / 3;\n            let indexArray = this.getIndexBuffer(glTFMeshPrimitive.indices, vertexCount);\n            let positionAccessor = this._data.accessors[attributes.POSITION];\n            let normal = this.getArrributeBuffer(attributes.NORMAL, \"NORMAL\", attributeMap, vertexDeclarArr);\n            if (!normal) {\n                normal = this.calculateFlatNormal(position, indexArray);\n                vertexDeclarArr.push(\"NORMAL\");\n                attributeMap.set(\"NORMAL\", normal);\n            }\n            let color = this.getArrributeBuffer(attributes.COLOR_0, \"COLOR\", attributeMap, vertexDeclarArr);\n            let uv = this.getArrributeBuffer(attributes.TEXCOORD_0, \"UV\", attributeMap, vertexDeclarArr);\n            let uv1 = this.getArrributeBuffer(attributes.TEXCOORD_1, \"UV1\", attributeMap, vertexDeclarArr);\n            let blendWeight = this.getArrributeBuffer(attributes.WEIGHTS_0, \"BLENDWEIGHT\", attributeMap, vertexDeclarArr);\n            let blendIndices = this.getArrributeBuffer(attributes.JOINTS_0, \"BLENDINDICES\", attributeMap, vertexDeclarArr);\n            let tangent;\n            tangent = this.getArrributeBuffer(attributes.TANGENT, \"TANGENT\", attributeMap, vertexDeclarArr);\n            if (tangent) {\n                for (let tangentIndex = 0; tangentIndex < tangent.length; tangentIndex += 4) {\n                    tangent[tangentIndex + 3] *= -1;\n                }\n            }\n            let targets = glTFMeshPrimitive.targets;\n            let morphtargets = { weights: morphWeights, position: false, normal: false, tangent: false, targets: {}, boundMin: [Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE], boundMax: [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE] };\n            if (targets) {\n                let morphtargetMap;\n                let targetNames = ((_a = glTFMesh.extras) === null || _a === void 0 ? void 0 : _a.targetNames) || [];\n                morphtargetMap = morphtargets.targets;\n                targets.forEach((target, index) => {\n                    let targetName = targetNames[index] || `target_${index}`;\n                    let morph = new Map();\n                    morphtargetMap[targetName] = morph;\n                    let morphPosition = this.getBufferwithAccessorIndex(target.POSITION);\n                    let morphNormal = this.getBufferwithAccessorIndex(target.NORMAL);\n                    let morphTangent = this.getBufferwithAccessorIndex(target.TANGENT);\n                    if (morphPosition) {\n                        morph.set(\"POSITION\", morphPosition);\n                        morphtargets.position = true;\n                        if (position) {\n                            let vertexCount = position.length / 3;\n                            for (let i = 0; i < vertexCount; i++) {\n                                let offset = i * 3;\n                                let morphX = position[offset] + morphPosition[offset];\n                                let morphY = position[offset + 1] + morphPosition[offset + 1];\n                                let morphZ = position[offset + 2] + morphPosition[offset + 2];\n                                morphtargets.boundMin[0] = Math.min(morphX, morphtargets.boundMin[0]);\n                                morphtargets.boundMin[1] = Math.min(morphY, morphtargets.boundMin[1]);\n                                morphtargets.boundMin[2] = Math.min(morphZ, morphtargets.boundMin[2]);\n                                morphtargets.boundMax[0] = Math.max(morphX, morphtargets.boundMax[0]);\n                                morphtargets.boundMax[1] = Math.max(morphY, morphtargets.boundMax[1]);\n                                morphtargets.boundMax[2] = Math.max(morphZ, morphtargets.boundMax[2]);\n                            }\n                        }\n                    }\n                    if (morphNormal) {\n                        morph.set(\"NORMAL\", morphNormal);\n                        morphtargets.normal = true;\n                    }\n                    if (morphTangent) {\n                        morph.set(\"TANGENT\", morphTangent);\n                        morphtargets.tangent = true;\n                    }\n                });\n            }\n            let boneIndicesList = new Array();\n            let subIndexStartArray = [];\n            let subIndexCountArray = [];\n            if (glTFSkin) {\n                if (boneCount > maxSubBoneCount) {\n                    this.splitSubMeshByBonesCount(attributeMap, morphtargets, indexArray, boneIndicesList, subIndexStartArray, subIndexCountArray);\n                    vertexCount = attributeMap.get(\"POSITION\").length / 3;\n                }\n                else {\n                    subIndexStartArray[0] = 0;\n                    subIndexCountArray[0] = indexArray.length;\n                    boneIndicesList[0] = new Uint16Array(boneCount);\n                    for (let bi = 0; bi < boneCount; bi++) {\n                        boneIndicesList[0][bi] = bi;\n                    }\n                }\n            }\n            else {\n                subIndexStartArray[0] = 0;\n                subIndexCountArray[0] = indexArray.length;\n            }\n            let vertexDeclaration = vertexDeclarArr.toString();\n            let subData = new PrimitiveSubMesh();\n            subDatas.push(subData);\n            subData.attributeMap = attributeMap;\n            subData.boundMax = positionAccessor.max;\n            subData.boundMin = positionAccessor.min;\n            subData.morphtargets = morphtargets;\n            subData.indices = indexArray;\n            subData.vertexCount = vertexCount;\n            subData.vertexDecler = vertexDeclaration;\n            subData.boneIndicesList = boneIndicesList;\n            subData.subIndexStartArray = subIndexStartArray;\n            subData.subIndexCountArray = subIndexCountArray;\n        });\n        this.parseMeshwithSubMeshData(subDatas, layaMesh);\n        this.applyglTFSkinData(layaMesh, subDatas, glTFSkin);\n        this.applyMorphTarget(layaMesh, subDatas);\n        return layaMesh;\n    }\n    calSkinnedSpriteLocalBounds(skinned) {\n        let render = skinned.getComponent(SkinnedMeshRenderer);\n        let mesh = skinned.getComponent(MeshFilter).sharedMesh;\n        let rootBone = render.rootBone;\n        let oriRootMatrix = rootBone.transform.worldMatrix;\n        let invertRootMatrix = new Matrix4x4();\n        oriRootMatrix.invert(invertRootMatrix);\n        let indices = mesh.getIndices();\n        let positions = [];\n        let boneIndices = [];\n        let boneWeights = [];\n        mesh.getPositions(positions);\n        mesh.getBoneIndices(boneIndices);\n        mesh.getBoneWeights(boneWeights);\n        let oriBoneIndeices = [];\n        mesh._subMeshes.forEach((subMesh, index) => {\n            let bonelists = subMesh._boneIndicesList;\n            bonelists.forEach((bonelist, listIndex) => {\n                let start = subMesh._subIndexBufferStart[listIndex];\n                let count = subMesh._subIndexBufferCount[listIndex];\n                let endIndex = count + start;\n                for (let iindex = start; iindex < endIndex; iindex++) {\n                    let ii = indices[iindex];\n                    let boneIndex = boneIndices[ii];\n                    let x = bonelist[boneIndex.x];\n                    let y = bonelist[boneIndex.y];\n                    let z = bonelist[boneIndex.z];\n                    let w = bonelist[boneIndex.w];\n                    oriBoneIndeices[ii] = new Vector4(x, y, z, w);\n                }\n            });\n        });\n        let inverseBindPoses = mesh._inverseBindPoses;\n        let bones = render.bones;\n        let ubones = [];\n        let tempMat = new Matrix4x4();\n        bones.forEach((bone, index) => {\n            ubones[index] = new Matrix4x4();\n            Matrix4x4.multiply(invertRootMatrix, bone.transform.worldMatrix, tempMat);\n            Matrix4x4.multiply(tempMat, inverseBindPoses[index], ubones[index]);\n        });\n        let skinTransform = new Matrix4x4;\n        let resPos = new Vector3();\n        let min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        let max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        for (let index = 0; index < positions.length; index++) {\n            let pos = positions[index];\n            let boneIndex = oriBoneIndeices[index];\n            let boneWeight = boneWeights[index];\n            if (!(boneIndex && boneWeight)) {\n                continue;\n            }\n            for (let ei = 0; ei < 16; ei++) {\n                skinTransform.elements[ei] = ubones[boneIndex.x].elements[ei] * boneWeight.x;\n                skinTransform.elements[ei] += ubones[boneIndex.y].elements[ei] * boneWeight.y;\n                skinTransform.elements[ei] += ubones[boneIndex.z].elements[ei] * boneWeight.z;\n                skinTransform.elements[ei] += ubones[boneIndex.w].elements[ei] * boneWeight.w;\n            }\n            Vector3.transformV3ToV3(pos, skinTransform, resPos);\n            Vector3.min(min, resPos, min);\n            Vector3.max(max, resPos, max);\n        }\n        positions = null;\n        boneIndices = boneWeights = oriBoneIndeices = null;\n        indices = null;\n        ubones = null;\n        render.localBounds.setMin(min);\n        render.localBounds.setMax(max);\n        render.localBounds = render.localBounds;\n    }\n    fixSkinnedSprite(glTFNode, skinned) {\n        let skin = this._data.skins[glTFNode.skin];\n        let skinnedMeshRenderer = skinned.getComponent(SkinnedMeshRenderer);\n        skin.joints.forEach(nodeIndex => {\n            let bone = this._nodes[nodeIndex];\n            skinnedMeshRenderer.bones.push(bone);\n        });\n        if (skin.skeleton == undefined) {\n            skin.skeleton = skin.joints[0];\n        }\n        skinnedMeshRenderer.rootBone = this._nodes[skin.skeleton];\n        skinnedMeshRenderer.bones = skinnedMeshRenderer.bones;\n        this.calSkinnedSpriteLocalBounds(skinned);\n    }\n    getAnimationRoot(channels) {\n        const isContainNode = (nodeArr, findNodeIndex) => {\n            if (!nodeArr)\n                return false;\n            if (nodeArr.indexOf(findNodeIndex) == -1) {\n                for (let index = 0; index < nodeArr.length; index++) {\n                    let glTFNode = this._data.nodes[nodeArr[index]];\n                    if (isContainNode(glTFNode.children, findNodeIndex)) {\n                        return true;\n                    }\n                }\n            }\n            return true;\n        };\n        let target = channels[0].target;\n        let spriteIndex = target.node;\n        for (let index = 0; index < this._data.scenes.length; index++) {\n            let glTFScene = this._data.scenes[index];\n            if (isContainNode(glTFScene.nodes, spriteIndex)) {\n                return this._scenes[index];\n            }\n        }\n        return null;\n    }\n    getAnimationPath(root, curSprite) {\n        let paths = [];\n        if (root == curSprite)\n            return paths;\n        let sprite = curSprite;\n        while (sprite.parent != root) {\n            sprite = sprite.parent;\n            paths.push(sprite.name);\n        }\n        paths = paths.reverse();\n        paths.push(curSprite.name);\n        return paths;\n    }\n    loadAnimations(animations) {\n        if (!animations)\n            return;\n        animations.forEach((animation, index) => {\n            this.loadAnimation(animation);\n        });\n    }\n    loadAnimation(animation) {\n        return this.createAnimator(animation);\n    }\n    createAnimator(animation) {\n        let channels = animation.channels;\n        let samplers = animation.samplers;\n        let animatorRoot = this.getAnimationRoot(channels);\n        if (!animatorRoot) {\n            return null;\n        }\n        let animator = animatorRoot.getComponent(Animator);\n        if (!animator) {\n            animator = animatorRoot.addComponent(Animator);\n            let animatorLayer = new AnimatorControllerLayer(\"AnimatorLayer\");\n            animator.addControllerLayer(animatorLayer);\n            animatorLayer.defaultWeight = 1.0;\n        }\n        let clip = this.createAnimatorClip(animation, animatorRoot);\n        let animatorLayer = animator.getControllerLayer();\n        let animationName = clip.name;\n        if (animatorLayer.getAnimatorState(animationName)) {\n            animationName = clip.name = `${animationName}_${this.generateId(animationName)}`;\n        }\n        let animatorState = new AnimatorState();\n        animatorState.name = animationName;\n        animatorState.clip = clip;\n        animatorLayer.addState(animatorState);\n        animatorLayer.defaultState = animatorState;\n        animatorLayer.playOnWake = true;\n        return animator;\n    }\n    createAnimatorClip(animation, animatorRoot) {\n        let clip = new AnimationClip();\n        let duration = 0;\n        let channels = animation.channels;\n        let samplers = animation.samplers;\n        let clipNodes = [];\n        channels.forEach((channel, index) => {\n            var _a;\n            let target = channel.target;\n            let sampler = samplers[channel.sampler];\n            let targetPath = target.path;\n            let timeBuffer = this.getBufferwithAccessorIndex(sampler.input);\n            let outBuffer = this.getBufferwithAccessorIndex(sampler.output);\n            let timeArray = new Float32Array(timeBuffer);\n            let outArray = new Float32Array(outBuffer);\n            let sprite = this._nodes[target.node];\n            let animaPaths = this.getAnimationPath(animatorRoot, sprite);\n            if (targetPath == \"weights\") {\n                let mesh = (_a = sprite.getComponent(MeshFilter)) === null || _a === void 0 ? void 0 : _a.sharedMesh;\n                if (mesh && mesh.morphTargetData) {\n                    let ownerStr = sprite.getComponent(SkinnedMeshRenderer) ? \"SkinnedMeshRenderer\" : \"MeshRenderer\";\n                    let morphData = mesh.morphTargetData;\n                    let channelCount = morphData.channelCount;\n                    if (outArray.length / timeArray.length == channelCount) {\n                        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\n                            let morphChannel = morphData.getMorphChannelbyIndex(channelIndex);\n                            let channelName = morphChannel.name;\n                            let clipNode = {};\n                            clipNodes.push(clipNode);\n                            clipNode.paths = animaPaths;\n                            clipNode.interpolation = sampler.interpolation;\n                            clipNode.timeArray = timeArray;\n                            clipNode.valueArray = new Float32Array(timeArray.length);\n                            for (let i = 0; i < timeArray.length; i++) {\n                                clipNode.valueArray[i] = outArray[i * channelCount + channelIndex];\n                            }\n                            clipNode.propertyOwner = ownerStr;\n                            clipNode.propertise = [];\n                            clipNode.propertise.push(\"morphTargetValues\");\n                            clipNode.propertise.push(channelName);\n                            clipNode.propertyLength = clipNode.propertise.length;\n                            clipNode.type = 0;\n                            clipNode.callbackFunc = \"_changeMorphTargetValue\";\n                            clipNode.callbackParams = [channelName];\n                            clipNode.propertyChangePath = \"morphTargetValues\";\n                            clipNode.duration = clipNode.timeArray[clipNode.timeArray.length - 1];\n                            duration = Math.max(duration, clipNode.duration);\n                        }\n                    }\n                }\n            }\n            else {\n                let clipNode = {};\n                clipNodes.push(clipNode);\n                clipNode.timeArray = timeArray;\n                clipNode.valueArray = outArray;\n                let interpolation = sampler.interpolation;\n                clipNode.interpolation = interpolation;\n                clipNode.paths = animaPaths;\n                switch (targetPath) {\n                    case \"translation\":\n                        clipNode.propertyOwner = \"transform\";\n                        clipNode.propertyLength = 1;\n                        clipNode.propertise = [];\n                        clipNode.propertise.push(\"localPosition\");\n                        clipNode.type = 1;\n                        break;\n                    case \"rotation\":\n                        clipNode.propertyOwner = \"transform\";\n                        clipNode.propertyLength = 1;\n                        clipNode.propertise = [];\n                        clipNode.propertise.push(\"localRotation\");\n                        clipNode.type = 2;\n                        break;\n                    case \"scale\":\n                        clipNode.propertyOwner = \"transform\";\n                        clipNode.propertyLength = 1;\n                        clipNode.propertise = [];\n                        clipNode.propertise.push(\"localScale\");\n                        clipNode.type = 3;\n                        break;\n                    default:\n                        break;\n                }\n                clipNode.duration = clipNode.timeArray[clipNode.timeArray.length - 1];\n                duration = Math.max(duration, clipNode.duration);\n            }\n        });\n        clip.name = animation.name ? animation.name : `Animation_${this.generateId(\"Animation\")}`;\n        clip._duration = duration;\n        clip.islooping = true;\n        clip._frameRate = 30;\n        let nodeCount = clipNodes.length;\n        let nodes = clip._nodes;\n        nodes.count = nodeCount;\n        let nodesMap = clip._nodesMap = {};\n        let nodesDic = clip._nodesDic = {};\n        for (let i = 0; i < nodeCount; i++) {\n            let node = new KeyframeNode();\n            let glTFClipNode = clipNodes[i];\n            nodes.setNodeByIndex(i, node);\n            node._indexInList = i;\n            let type = node.type = glTFClipNode.type;\n            let pathLength = glTFClipNode.paths.length;\n            node._setOwnerPathCount(pathLength);\n            let tempPath = glTFClipNode.paths;\n            for (let j = 0; j < pathLength; j++) {\n                node._setOwnerPathByIndex(j, tempPath[j]);\n            }\n            let nodePath = node._joinOwnerPath(\"/\");\n            let mapArray = nodesMap[nodePath];\n            (mapArray) || (nodesMap[nodePath] = mapArray = []);\n            mapArray.push(node);\n            node.propertyOwner = glTFClipNode.propertyOwner;\n            let propertyLength = glTFClipNode.propertyLength;\n            node._setPropertyCount(propertyLength);\n            for (let j = 0; j < propertyLength; j++) {\n                node._setPropertyByIndex(j, glTFClipNode.propertise[j]);\n            }\n            let fullPath = nodePath + \".\" + node.propertyOwner + \".\" + node._joinProperty(\".\");\n            nodesDic[fullPath] = fullPath;\n            node.fullPath = fullPath;\n            node.callbackFunData = glTFClipNode.callbackFunc;\n            node.callParams = glTFClipNode.callbackParams;\n            node.propertyChangePath = glTFClipNode.propertyChangePath;\n            let keyframeCount = glTFClipNode.timeArray.length;\n            for (let j = 0; j < keyframeCount; j++) {\n                switch (type) {\n                    case 0:\n                        let floatKeyFrame = new FloatKeyframe();\n                        node._setKeyframeByIndex(j, floatKeyFrame);\n                        floatKeyFrame.time = glTFClipNode.timeArray[j];\n                        switch (glTFClipNode.interpolation) {\n                            case \"CUBICSPLINE\":\n                                {\n                                    floatKeyFrame.value = glTFClipNode.valueArray[3 * j + 1];\n                                    floatKeyFrame.inTangent = glTFClipNode.valueArray[3 * j + 0];\n                                    floatKeyFrame.outTangent = glTFClipNode.valueArray[3 * j + 2];\n                                }\n                                break;\n                            case \"STEP\":\n                                floatKeyFrame.value = glTFClipNode.valueArray[j];\n                                floatKeyFrame.inTangent = Infinity;\n                                floatKeyFrame.outTangent = Infinity;\n                                break;\n                            case \"LINEAR\":\n                            default:\n                                {\n                                    floatKeyFrame.value = glTFClipNode.valueArray[j];\n                                    let lastI = j == 0 ? j : j - 1;\n                                    let lastTime = glTFClipNode.timeArray[lastI];\n                                    let lastValue = glTFClipNode.valueArray[lastI];\n                                    let lastTimeDet = lastI == j ? 1 : (floatKeyFrame.time - lastTime);\n                                    floatKeyFrame.inTangent = (floatKeyFrame.value - lastValue) / lastTimeDet;\n                                    let nextI = j == keyframeCount - 1 ? j : j + 1;\n                                    let nextTime = glTFClipNode.timeArray[nextI];\n                                    let nextValue = glTFClipNode.valueArray[nextI];\n                                    let nextTimeDet = nextI == j ? 1 : (nextTime - floatKeyFrame.time);\n                                    floatKeyFrame.outTangent = (nextValue - floatKeyFrame.value) / nextTimeDet;\n                                    if (lastI == j) {\n                                        floatKeyFrame.inTangent = floatKeyFrame.outTangent;\n                                    }\n                                    if (nextI == j) {\n                                        floatKeyFrame.outTangent = floatKeyFrame.inTangent;\n                                    }\n                                }\n                                break;\n                        }\n                        break;\n                    case 1:\n                    case 3:\n                    case 4:\n                        let floatArrayKeyframe = new Vector3Keyframe();\n                        node._setKeyframeByIndex(j, floatArrayKeyframe);\n                        let startTimev3 = floatArrayKeyframe.time = glTFClipNode.timeArray[j];\n                        let inTangent = floatArrayKeyframe.inTangent;\n                        let outTangent = floatArrayKeyframe.outTangent;\n                        let value = floatArrayKeyframe.value;\n                        switch (glTFClipNode.interpolation) {\n                            case \"CUBICSPLINE\":\n                                value.setValue(glTFClipNode.valueArray[9 * j + 3], glTFClipNode.valueArray[9 * j + 4], glTFClipNode.valueArray[9 * j + 5]);\n                                inTangent.setValue(glTFClipNode.valueArray[9 * j + 0], glTFClipNode.valueArray[9 * j + 1], glTFClipNode.valueArray[9 * j + 2]);\n                                outTangent.setValue(glTFClipNode.valueArray[9 * j + 6], glTFClipNode.valueArray[9 * j + 7], glTFClipNode.valueArray[9 * j + 8]);\n                                break;\n                            case \"STEP\":\n                                value.setValue(glTFClipNode.valueArray[3 * j], glTFClipNode.valueArray[3 * j + 1], glTFClipNode.valueArray[3 * j + 2]);\n                                inTangent.setValue(Infinity, Infinity, Infinity);\n                                outTangent.setValue(Infinity, Infinity, Infinity);\n                                break;\n                            case \"LINEAR\":\n                            default:\n                                {\n                                    value.setValue(glTFClipNode.valueArray[3 * j], glTFClipNode.valueArray[3 * j + 1], glTFClipNode.valueArray[3 * j + 2]);\n                                    let lastI = j == 0 ? j : j - 1;\n                                    let lastTime = glTFClipNode.timeArray[lastI];\n                                    let lastX = glTFClipNode.valueArray[3 * lastI];\n                                    let lastY = glTFClipNode.valueArray[3 * lastI + 1];\n                                    let lastZ = glTFClipNode.valueArray[3 * lastI + 2];\n                                    let lastTimeDet = lastI == j ? 1 : startTimev3 - lastTime;\n                                    inTangent.x = (value.x - lastX) / lastTimeDet;\n                                    inTangent.y = (value.y - lastY) / lastTimeDet;\n                                    inTangent.z = (value.z - lastZ) / lastTimeDet;\n                                    let nextI = j == keyframeCount - 1 ? j : j + 1;\n                                    let nextTime = glTFClipNode.timeArray[nextI];\n                                    let nextX = glTFClipNode.valueArray[3 * nextI];\n                                    let nextY = glTFClipNode.valueArray[3 * nextI + 1];\n                                    let nextZ = glTFClipNode.valueArray[3 * nextI + 2];\n                                    let nestTimeDet = nextI == j ? 1 : nextTime - startTimev3;\n                                    outTangent.x = (nextX - value.x) / nestTimeDet;\n                                    outTangent.y = (nextY - value.y) / nestTimeDet;\n                                    outTangent.z = (nextZ - value.z) / nestTimeDet;\n                                    if (lastI == j) {\n                                        outTangent.cloneTo(inTangent);\n                                    }\n                                    if (nextI == j) {\n                                        inTangent.cloneTo(outTangent);\n                                    }\n                                }\n                                break;\n                        }\n                        break;\n                    case 2:\n                        let quaternionKeyframe = new QuaternionKeyframe();\n                        node._setKeyframeByIndex(j, quaternionKeyframe);\n                        let startTimeQu = quaternionKeyframe.time = glTFClipNode.timeArray[j];\n                        let inTangentQua = quaternionKeyframe.inTangent;\n                        let outTangentQua = quaternionKeyframe.outTangent;\n                        let valueQua = quaternionKeyframe.value;\n                        switch (glTFClipNode.interpolation) {\n                            case \"CUBICSPLINE\":\n                                valueQua.set(glTFClipNode.valueArray[12 * j + 4], glTFClipNode.valueArray[12 * j + 5], glTFClipNode.valueArray[12 * j + 6], glTFClipNode.valueArray[12 * j + 7]);\n                                inTangentQua.setValue(glTFClipNode.valueArray[12 * j + 0], glTFClipNode.valueArray[12 * j + 1], glTFClipNode.valueArray[12 * j + 2], glTFClipNode.valueArray[12 * j + 3]);\n                                outTangentQua.setValue(glTFClipNode.valueArray[12 * j + 8], glTFClipNode.valueArray[12 * j + 9], glTFClipNode.valueArray[12 * j + 10], glTFClipNode.valueArray[12 * j + 11]);\n                                break;\n                            case \"STEP\":\n                                valueQua.set(glTFClipNode.valueArray[4 * j + 0], glTFClipNode.valueArray[4 * j + 1], glTFClipNode.valueArray[4 * j + 2], glTFClipNode.valueArray[4 * j + 3]);\n                                inTangentQua.setValue(Infinity, Infinity, Infinity, Infinity);\n                                outTangentQua.setValue(Infinity, Infinity, Infinity, Infinity);\n                                break;\n                            case \"LINEAR\":\n                            default:\n                                {\n                                    valueQua.set(glTFClipNode.valueArray[4 * j + 0], glTFClipNode.valueArray[4 * j + 1], glTFClipNode.valueArray[4 * j + 2], glTFClipNode.valueArray[4 * j + 3]);\n                                    let lastI = j == 0 ? j : j - 1;\n                                    let lastTime = glTFClipNode.timeArray[lastI];\n                                    let lastX = glTFClipNode.valueArray[4 * lastI];\n                                    let lastY = glTFClipNode.valueArray[4 * lastI + 1];\n                                    let lastZ = glTFClipNode.valueArray[4 * lastI + 2];\n                                    let lastW = glTFClipNode.valueArray[4 * lastI + 3];\n                                    let lastTimeDet = lastI == j ? 1 : startTimeQu - lastTime;\n                                    inTangentQua.x = (valueQua.x - lastX) / lastTimeDet;\n                                    inTangentQua.y = (valueQua.y - lastY) / lastTimeDet;\n                                    inTangentQua.z = (valueQua.z - lastZ) / lastTimeDet;\n                                    inTangentQua.w = (valueQua.w - lastW) / lastTimeDet;\n                                    let nextI = j == keyframeCount - 1 ? j : j + 1;\n                                    let nextTime = glTFClipNode.timeArray[nextI];\n                                    let nextX = glTFClipNode.valueArray[4 * nextI];\n                                    let nextY = glTFClipNode.valueArray[4 * nextI + 1];\n                                    let nextZ = glTFClipNode.valueArray[4 * nextI + 2];\n                                    let nextW = glTFClipNode.valueArray[4 * nextI + 3];\n                                    if ((valueQua.x * nextX + valueQua.y * nextY + valueQua.z * nextZ + valueQua.w * nextW) < 0) {\n                                        nextX *= -1;\n                                        nextY *= -1;\n                                        nextZ *= -1;\n                                        nextW *= -1;\n                                        glTFClipNode.valueArray[4 * nextI] = nextX;\n                                        glTFClipNode.valueArray[4 * nextI + 1] = nextY;\n                                        glTFClipNode.valueArray[4 * nextI + 2] = nextZ;\n                                        glTFClipNode.valueArray[4 * nextI + 3] = nextW;\n                                    }\n                                    let nestTimeDet = nextI == j ? 1 : nextTime - startTimeQu;\n                                    outTangentQua.x = (nextX - valueQua.x) / nestTimeDet;\n                                    outTangentQua.y = (nextY - valueQua.y) / nestTimeDet;\n                                    outTangentQua.z = (nextZ - valueQua.z) / nestTimeDet;\n                                    outTangentQua.w = (nextW - valueQua.w) / nestTimeDet;\n                                    if (lastI == j) {\n                                        outTangentQua.cloneTo(inTangentQua);\n                                    }\n                                    if (nextI == j) {\n                                        inTangentQua.cloneTo(outTangentQua);\n                                    }\n                                }\n                                break;\n                        }\n                        break;\n                }\n            }\n        }\n        clipNodes = null;\n        return clip;\n    }\n}\nglTFResource._Extensions = {};\nclass SubMorphData {\n}\nclass PrimitiveSubMesh {\n    constructor() {\n    }\n}\nLaya.addInitCallback(() => glTFShader.init());\n","import { glTFResource } from \"../glTFResource\";\nimport { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFShader } from \"../shader/glTFShader\";\nconst ExtensionName = \"KHR_materials_anisotropy\";\nexport class KHR_materials_anisotropy {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_anisotropy;\n                if (extension) {\n                    if (extension.anisotropyTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.anisotropyTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a, _b;\n        let extension = glTFMaterial.extensions.KHR_materials_anisotropy;\n        let anisotropy = (_a = extension.anisotropyStrength) !== null && _a !== void 0 ? _a : 0.0;\n        let rotation = (_b = extension.anisotropyRotation) !== null && _b !== void 0 ? _b : 0.0;\n        material.setDefine(PBRShaderLib.DEFINE_ANISOTROPY, true);\n        material.setFloat(\"u_AnisotropyStrength\", anisotropy);\n        material.setFloat(\"u_AnisotropyRotation\", rotation);\n        if (extension.anisotropyTexture) {\n            let tex = this._resource.getTextureWithInfo(extension.anisotropyTexture);\n            material.setTexture(\"u_AnisotropyTexture\", tex);\n            material.setDefine(glTFShader.Define_AnisotropyMap, true);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_anisotropy(resource));\n","import { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFResource } from \"../glTFResource\";\nimport { glTFShader } from \"../shader/glTFShader\";\nconst ExtensionName = \"KHR_materials_clearcoat\";\nexport class KHR_materials_clearcoat {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_clearcoat;\n                if (extension) {\n                    if (extension.clearcoatTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.clearcoatTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (extension.clearcoatRoughnessTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.clearcoatRoughnessTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (extension.clearcoatNormalTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.clearcoatNormalTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a, _b, _c;\n        let extension = glTFMaterial.extensions.KHR_materials_clearcoat;\n        let clearCoat = (_a = extension.clearcoatFactor) !== null && _a !== void 0 ? _a : 0.0;\n        let clearCoatRoughness = (_b = extension.clearcoatRoughnessFactor) !== null && _b !== void 0 ? _b : 0.0;\n        material.setDefine(PBRShaderLib.DEFINE_CLEARCOAT, true);\n        material.setFloat(\"u_ClearCoatFactor\", clearCoat);\n        if (extension.clearcoatTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.clearcoatTexture, \"u_ClearCoatTexture\", glTFShader.Define_ClearCoatMap, \"u_ClearCoatMapTransform\", glTFShader.Define_ClearCoatMapTransform);\n        }\n        material.setFloat(\"u_ClearCoatRoughness\", clearCoatRoughness);\n        if (extension.clearcoatRoughnessTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.clearcoatRoughnessTexture, \"u_ClearCoatRoughnessTexture\", glTFShader.Define_ClearCoatRoughnessMap, \"u_ClearCoatRoughnessMapTransform\", glTFShader.Define_ClearCoatRoughnessMapTransform);\n        }\n        if (extension.clearcoatNormalTexture) {\n            material.setDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL, true);\n            this._resource.setMaterialTextureProperty(material, extension.clearcoatNormalTexture, \"u_ClearCoatNormalTexture\", null, \"u_ClearCoatNormalMapTransform\", glTFShader.Define_ClearCoatNormalMapTransform);\n            let scale = (_c = extension.clearcoatNormalTexture.scale) !== null && _c !== void 0 ? _c : 1.0;\n            material.setFloat(\"u_ClearCoatNormalScale\", scale);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_clearcoat(resource));\n","import { glTFResource } from \"../glTFResource\";\nconst ExtensionName = \"KHR_materials_emissive_strength\";\nexport class KHR_materials_emissive_strength {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a;\n        let extension = glTFMaterial.extensions.KHR_materials_emissive_strength;\n        let emissionStrength = (_a = extension.emissiveStrength) !== null && _a !== void 0 ? _a : 1.0;\n        material.setFloat(\"u_EmissionStrength\", emissionStrength);\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_emissive_strength(resource));\n","import { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFResource } from \"../glTFResource\";\nconst ExtensionName = \"KHR_materials_ior\";\nexport class KHR_materials_ior {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a;\n        let extension = glTFMaterial.extensions.KHR_materials_ior;\n        let ior = (_a = extension.ior) !== null && _a !== void 0 ? _a : 1.5;\n        material.setDefine(PBRShaderLib.DEFINE_IOR, true);\n        material.setFloat(\"u_Ior\", ior);\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_ior(resource));\n","import { glTFResource } from \"../glTFResource\";\nimport { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFShader } from \"../shader/glTFShader\";\nconst ExtensionName = \"KHR_materials_iridescence\";\nexport class KHR_materials_iridescence {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_iridescence;\n                if (extension) {\n                    if (extension.iridescenceTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.iridescenceTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (extension.iridescenceThicknessTexture) {\n                        let promise = this._resource.loadTextureFromInfo(extension.iridescenceThicknessTexture, false, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a, _b, _c, _d;\n        let extension = glTFMaterial.extensions.KHR_materials_iridescence;\n        let factor = (_a = extension.iridescenceFactor) !== null && _a !== void 0 ? _a : 0.0;\n        let ior = (_b = extension.iridescenceIor) !== null && _b !== void 0 ? _b : 1.3;\n        let thicknessMin = (_c = extension.iridescenceThicknessMinimum) !== null && _c !== void 0 ? _c : 100;\n        let thicknessMax = (_d = extension.iridescenceThicknessMaximum) !== null && _d !== void 0 ? _d : 400;\n        material.setDefine(PBRShaderLib.DEFINE_IRIDESCENCE, true);\n        material.setFloat(\"u_IridescenceFactor\", factor);\n        material.setFloat(\"u_IridescenceIor\", ior);\n        material.setFloat(\"u_IridescenceThicknessMinimum\", thicknessMin);\n        material.setFloat(\"u_IridescenceThicknessMaximum\", thicknessMax);\n        if (extension.iridescenceTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.iridescenceTexture, \"u_IridescenceTexture\", glTFShader.Define_IridescenceMap, \"u_IridescenceMapTransform\", glTFShader.Define_IridescenceMapTransform);\n        }\n        if (extension.iridescenceThicknessTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.iridescenceThicknessTexture, \"u_IridescenceThicknessTexture\", glTFShader.Define_IridescenceThicknessMap, \"u_IridescenceThicknessMapTransform\", glTFShader.Define_IridescenceThicknessMapTransform);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_iridescence(resource));\n","import { glTFResource } from \"../glTFResource\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFShader } from \"../shader/glTFShader\";\nconst ExtensionName = \"KHR_materials_sheen\";\nexport class KHR_materials_sheen {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_sheen;\n                if (extension) {\n                    if (extension.sheenColorTexture) {\n                        let sRGB = false;\n                        let promise = this._resource.loadTextureFromInfo(extension.sheenColorTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (extension.sheenRoughnessTexture) {\n                        let sRGB = false;\n                        let promise = this._resource.loadTextureFromInfo(extension.sheenRoughnessTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a;\n        let extension = glTFMaterial.extensions.KHR_materials_sheen;\n        material.setDefine(PBRShaderLib.DEFINE_SHEEN, true);\n        let sheenColorFactor = new Vector3(0, 0, 0);\n        if (extension.sheenColorFactor) {\n            sheenColorFactor.fromArray(extension.sheenColorFactor);\n        }\n        let sheenRoughnessFactor = (_a = extension.sheenRoughnessFactor) !== null && _a !== void 0 ? _a : 0.0;\n        material.setVector3(\"u_SheenColorFactor\", sheenColorFactor);\n        material.setFloat(\"u_SheenRoughness\", sheenRoughnessFactor);\n        if (extension.sheenColorTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.sheenColorTexture, \"u_SheenColorTexture\", glTFShader.Define_SheenColorMap, \"u_SheenColorMapTransform\", glTFShader.Define_SheenColorMapTransform);\n        }\n        if (extension.sheenRoughnessTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.sheenRoughnessTexture, \"u_SheenRoughnessTexture\", glTFShader.Define_SheenRoughnessMap, \"u_SheenRoughnessMapTransform\", glTFShader.Define_SheenRoughnessMapTransform);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_sheen(resource));\n","import { glTFResource } from \"../glTFResource\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { glTFShader } from \"../shader/glTFShader\";\nimport { Shader3D } from \"../../RenderEngine/RenderShader/Shader3D\";\nconst ExtensionName = \"KHR_materials_specular\";\nexport class KHR_materials_specular {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let promises = [];\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_specular;\n                if (extension) {\n                    if (extension.specularTexture) {\n                        let sRGB = false;\n                        let promise = this._resource.loadTextureFromInfo(extension.specularTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                    if (extension.specularColorTexture) {\n                        let sRGB = true;\n                        let promise = this._resource.loadTextureFromInfo(extension.specularColorTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n        }\n        return Promise.all(promises);\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a;\n        let extension = glTFMaterial.extensions.KHR_materials_specular;\n        let specularFactor = (_a = extension.specularFactor) !== null && _a !== void 0 ? _a : 1.0;\n        let specularColorFactor = new Vector3(1.0, 1.0, 1.0);\n        if (extension.specularColorFactor) {\n            specularColorFactor.fromArray(extension.specularColorFactor);\n        }\n        material.setDefine(Shader3D.getDefineByName(\"SPECULAR\"), true);\n        material.setFloat(\"u_SpecularFactor\", specularFactor);\n        material.setVector3(\"u_SpecularColorFactor\", specularColorFactor);\n        if (extension.specularTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.specularTexture, \"u_SpecularFactorTexture\", glTFShader.Define_SpecularFactorMap, \"u_SpecularFactorMapTransfrom\", glTFShader.Define_SpecularFactorMapTransform);\n        }\n        if (extension.specularColorTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.specularColorTexture, \"u_SpecularColorTexture\", glTFShader.Define_SpecularColorMap, \"u_SpecularColorMapTransform\", glTFShader.Define_SpecularColorMapTransform);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_specular(resource));\n","import { MaterialRenderMode } from \"../../resource/Material\";\nimport { glTFResource } from \"../glTFResource\";\nimport { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nimport { glTFShader } from \"../shader/glTFShader\";\nconst ExtensionName = \"KHR_materials_transmission\";\nexport class KHR_materials_transmission {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_transmission;\n                if (extension) {\n                    if (extension.transmissionTexture) {\n                        let sRGB = false;\n                        let promise = this._resource.loadTextureFromInfo(extension.transmissionTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a;\n        let extension = glTFMaterial.extensions.KHR_materials_transmission;\n        let transmissionFactor = (_a = extension.transmissionFactor) !== null && _a !== void 0 ? _a : 0.0;\n        material.materialRenderMode = MaterialRenderMode.RENDERMODE_CUSTOME;\n        material.renderQueue = 3000;\n        material.setDefine(PBRShaderLib.DEFINE_TRANSMISSION, true);\n        material.setFloat(\"u_TransmissionFactor\", transmissionFactor);\n        if (extension.transmissionTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.transmissionTexture, \"u_TransmissionTexture\", glTFShader.Define_TransmissionMap, \"u_TransmissionMapTransform\", glTFShader.Define_TransmissionMapTransform);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_transmission(resource));\n","import { UnlitMaterial } from \"../../d3/core/material/UnlitMaterial\";\nimport { glTFResource } from \"../glTFResource\";\nconst ExtensionName = \"KHR_materials_unlit\";\nexport class KHR_materials_unlit {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    createMaterial(glTFMaterial) {\n        let unlit = new UnlitMaterial();\n        let pbrMetallicRoughness = glTFMaterial.pbrMetallicRoughness;\n        if (pbrMetallicRoughness) {\n            if (pbrMetallicRoughness.baseColorFactor) {\n                let color = unlit.albedoColor;\n                color.fromArray(pbrMetallicRoughness.baseColorFactor);\n                color.toGamma(color);\n                unlit.albedoColor = color;\n            }\n            if (pbrMetallicRoughness.baseColorTexture) {\n                unlit.albedoTexture = this._resource.getTextureWithInfo(pbrMetallicRoughness.baseColorTexture);\n            }\n        }\n        this._resource.applyMaterialRenderState(glTFMaterial, unlit);\n        return unlit;\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_unlit(resource));\n","import { glTFResource } from \"../glTFResource\";\nimport { glTFShader } from \"../shader/glTFShader\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { PBRShaderLib } from \"../../d3/shader/pbr/PBRShaderLib\";\nconst ExtensionName = \"KHR_materials_volume\";\nexport class KHR_materials_volume {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    loadAdditionTextures(basePath, progress) {\n        let materials = this._resource.data.materials;\n        let textures = this._resource.data.textures;\n        if (materials && textures) {\n            let promises = [];\n            materials.forEach(material => {\n                var _a;\n                let extension = (_a = material.extensions) === null || _a === void 0 ? void 0 : _a.KHR_materials_volume;\n                if (extension) {\n                    if (extension.thicknessTexture) {\n                        let sRGB = false;\n                        let promise = this._resource.loadTextureFromInfo(extension.thicknessTexture, sRGB, basePath, progress);\n                        promises.push(promise);\n                    }\n                }\n            });\n            return Promise.all(promises);\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    additionMaterialProperties(glTFMaterial, material) {\n        var _a, _b;\n        let extension = glTFMaterial.extensions.KHR_materials_volume;\n        material.setDefine(PBRShaderLib.DEFINE_THICKNESS, true);\n        let thicknessFactor = (_a = extension.thicknessFactor) !== null && _a !== void 0 ? _a : 0.0;\n        let attenuationDistance = (_b = extension.attenuationDistance) !== null && _b !== void 0 ? _b : 65504.0;\n        material.setFloat(\"u_VolumeThicknessFactor\", thicknessFactor);\n        material.setFloat(\"u_VolumeAttenuationDistance\", attenuationDistance);\n        let attenuationColor = new Vector3(1, 1, 1);\n        if (extension.attenuationColor) {\n            attenuationColor.fromArray(extension.attenuationColor);\n        }\n        material.setVector3(\"u_VolumeAttenuationColor\", attenuationColor);\n        if (extension.thicknessTexture) {\n            this._resource.setMaterialTextureProperty(material, extension.thicknessTexture, \"u_VolumeThicknessTexture\", glTFShader.Define_VolumeThicknessMap, \"u_VoluemThicknessMapTransform\", glTFShader.Define_VolumeThicknessMapTransform);\n        }\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_materials_volume(resource));\n","import { glTFResource } from \"../glTFResource\";\nimport { Matrix3x3 } from \"../../maths/Matrix3x3\";\nimport { Vector2 } from \"../../maths/Vector2\";\nconst ExtensionName = \"KHR_texture_transform\";\nconst translation = new Matrix3x3();\nconst rotation = new Matrix3x3();\nconst offset = new Vector2;\nconst scale = new Vector2;\nexport class KHR_texture_transform {\n    constructor(resource) {\n        this.name = ExtensionName;\n        this._resource = resource;\n    }\n    createTransform(extension) {\n        var _a;\n        offset.setValue(0, 0);\n        if (extension.offset) {\n            offset.fromArray(extension.offset);\n        }\n        Matrix3x3.createFromTranslation(offset, translation);\n        let rot = (_a = extension.rotation) !== null && _a !== void 0 ? _a : 0;\n        Matrix3x3.createFromRotation(-rot, rotation);\n        scale.setValue(1, 1);\n        if (extension.scale) {\n            scale.fromArray(extension.scale);\n        }\n        let trans = new Matrix3x3();\n        Matrix3x3.multiply(translation, rotation, trans);\n        trans.scale(scale, trans);\n        return trans;\n    }\n    loadExtensionTextureInfo(info) {\n        var _a;\n        let extension = (_a = info.extensions) === null || _a === void 0 ? void 0 : _a.KHR_texture_transform;\n        let trans = this.createTransform(extension);\n        let texCoord = extension.texCoord;\n        return {\n            transform: trans,\n            texCoord: texCoord\n        };\n    }\n}\nglTFResource.registerExtension(ExtensionName, (resource) => new KHR_texture_transform(resource));\n","import { Loader } from \"../net/Loader\";\nimport { glTFResource } from \"./glTFResource\";\nimport \"./extensions/KHR_texture_transform\";\nimport \"./extensions/KHR_materials_anisotropy\";\nimport \"./extensions/KHR_materials_clearcoat\";\nimport \"./extensions/KHR_materials_emissive_strength\";\nimport \"./extensions/KHR_materials_ior\";\nimport \"./extensions/KHR_materials_iridescence\";\nimport \"./extensions/KHR_materials_sheen\";\nimport \"./extensions/KHR_materials_transmission\";\nimport \"./extensions/KHR_materials_volume\";\nimport \"./extensions/KHR_materials_specular\";\nimport \"./extensions/KHR_materials_unlit\";\nclass glTFLoader {\n    load(task) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.5), task.options).then((data) => {\n            let glTF = new glTFResource();\n            return glTF._parse(data, task.url, task.progress).then(() => glTF.onLoad());\n        });\n    }\n}\nLoader.registerLoader([\"gltf\"], glTFLoader);\nclass glbLoader {\n    load(task) {\n        return task.loader.fetch(task.url, \"arraybuffer\", task.progress.createCallback(0.5), task.options).then((data) => {\n            let glTF = new glTFResource();\n            return glTF._parseglb(data, task.url, task.progress).then(() => glTF.onLoad());\n        });\n    }\n}\nLoader.registerLoader([\"glb\"], glbLoader);\n"],"names":["Shader3D","ShaderDataType","Vector4","Matrix3x3","Vector3","ShaderFeatureType","SubShader","Prefab","Base64Tool","ILaya","URL","Byte","Loader","WrapMode","HDREncodeFormat","MaterialRenderMode","RenderState","PBRShaderLib","Material","PBRStandardMaterial","Sprite3D","MeshFilter","MeshRenderer","SkinnedMeshRenderer","VertexMesh","IndexFormat","Laya3DRender","BufferUsage","SubMesh","Matrix4x4","skinnedMatrixCache","MorphTargetData","MorphTargetChannel","MorphTarget","Mesh","Animator","AnimatorControllerLayer","AnimatorState","AnimationClip","KeyframeNode","FloatKeyframe","Vector3Keyframe","QuaternionKeyframe","Laya","ExtensionName","UnlitMaterial","Vector2"],"mappings":"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"}