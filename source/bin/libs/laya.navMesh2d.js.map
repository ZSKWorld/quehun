{"version":3,"file":"laya.navMesh2d.js","sources":["../../bin/tsc/layaAir/laya/navigation/2D/Navgiation2DUtils.js","../../bin/tsc/layaAir/laya/navigation/2D/Navigation2DManage.js","../../bin/tsc/layaAir/laya/navigation/2D/component/Nav2DAgent.js","../../bin/tsc/layaAir/laya/navigation/2D/NavMesh2D.js","../../bin/tsc/layaAir/laya/navigation/2D/component/NavMesh2DSurface.js","../../bin/tsc/layaAir/laya/navigation/2D/NavMesh2DObstacles.js","../../bin/tsc/layaAir/laya/navigation/2D/NavMesh2DLink.js","../../bin/tsc/layaAir/laya/navigation/2D/NavMesh2DModifierArea.js","../../bin/tsc/layaAir/laya/navigation/2D/ModuleDef.js"],"sourcesContent":["import { LayaGL } from \"../../layagl/LayaGL\";\nimport { Color } from \"../../maths/Color\";\nimport { Matrix } from \"../../maths/Matrix\";\nimport { Point } from \"../../maths/Point\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { Mesh2D, VertexMesh2D } from \"../../resource/Mesh2D\";\nimport { Utils } from \"../../utils/Utils\";\nimport { NavigationUtils } from \"../common/NavigationUtils\";\nlet tempVector3 = new Vector3();\nlet mat = new Matrix();\nlet point = new Point();\nconst transfromPoint = function (x, y) {\n    point.setTo(x, y);\n    return mat.transformPoint(point);\n};\nexport class Navgiation2DUtils {\n    static __init__() {\n        const areaColor = ['#800000', '#FFA500', '#FF0000', '#FFD700', '#F0E68C', '#808000', '#FFFF00', '#7CFC00', '#008000', '#98FB98', '#8FBC8F', '#00FFFF', '#E0FFFF', '#00BFFF', '#191970', '#0000FF'];\n        for (var i = 0; i < 16; i++) {\n            let color = new Color();\n            let data = areaColor[i];\n            color.r = parseInt(\"0x\" + data.substring(1, 3), 16) / 255;\n            color.g = parseInt(\"0x\" + data.substring(3, 5), 16) / 255;\n            color.b = parseInt(\"0x\" + data.substring(5, 7), 16) / 255;\n            color.a = 0.4;\n            this._colorMap.set(i, color);\n        }\n    }\n    static _setValue3(x, y, out) {\n        out.setValue(x, 0, y);\n    }\n    static _getSpriteGlobalPos(sprite, out) {\n        this._setValue3(sprite.globalTrans.x, sprite.globalTrans.y, out);\n    }\n    static _transfromVec2ToVec3(vec2, mat, out) {\n        out.x = mat.a * vec2.x + mat.c * vec2.y + mat.tx;\n        out.y = 0;\n        out.z = mat.b * vec2.x + mat.d * vec2.y + mat.ty;\n    }\n    static _getSpriteMatrix4x4(sprite, out) {\n        let mat = sprite.globalTrans.getMatrix();\n        out.elements[0] = mat.a;\n        out.elements[1] = 0;\n        out.elements[2] = mat.b;\n        out.elements[3] = 0;\n        out.elements[4] = 0;\n        out.elements[5] = 1;\n        out.elements[6] = 0;\n        out.elements[7] = 0;\n        out.elements[8] = mat.c;\n        out.elements[9] = 0;\n        out.elements[10] = mat.d;\n        out.elements[11] = 0;\n        out.elements[12] = mat.tx;\n        out.elements[13] = 0;\n        out.elements[14] = mat.ty;\n        out.elements[15] = 1;\n    }\n    static _getTransfromMatrix4x4(pos, rot, scale, out) {\n        out.identity();\n        let rate = Utils.toRadian(rot);\n        let sin = Math.sin(rate);\n        let cos = Math.cos(rate);\n        out.elements[0] = cos * scale.x;\n        out.elements[2] = sin * scale.x;\n        out.elements[8] = -sin * scale.y;\n        out.elements[10] = cos * scale.y;\n        out.elements[12] = pos.x;\n        out.elements[14] = pos.y;\n    }\n    static _getTitleData(title, vbDatas, size, ibs) {\n        let header = title.getheader();\n        if (!header)\n            return null;\n        let tvertCount = header.vertCount;\n        let tailTris = title.getdetailTris();\n        let indexMaps = new Map();\n        for (var i = 0; i < header.polyCount; i++) {\n            let p = title.getPolys(i);\n            let flags = p.flags;\n            if (!indexMaps.has(flags))\n                indexMaps.set(flags, []);\n            let indexs = indexMaps.get(flags);\n            let vertCount = p.vertCount;\n            let pverts = p.getVerts();\n            let pd = title.getPolyDetail(i);\n            let triCount = pd.triCount;\n            for (var j = 0; j < triCount; j++) {\n                let index = (pd.triBase + j) * 4;\n                for (var k = 0; k < 3; k++) {\n                    const kvalue = tailTris[index + NavigationUtils._TitleMeshIbOff[k]];\n                    if (kvalue < vertCount) {\n                        indexs.push(pverts[kvalue]);\n                    }\n                    else {\n                        indexs.push(pd.vertBase + kvalue - vertCount + tvertCount);\n                    }\n                }\n            }\n        }\n        let pointdatas = [];\n        let verts = title.getVerts();\n        for (var i = 0, n = verts.length; i < n; i += 3) {\n            let p = transfromPoint(verts[i], verts[i + 2]);\n            pointdatas.push(p.x, p.y);\n            pointdatas.push(verts[i] / size.x);\n            pointdatas.push(verts[i + 2] / size.z);\n        }\n        verts = title.getdetailVerts();\n        for (var i = 0, n = verts.length; i < n; i += 3) {\n            let p = transfromPoint(verts[i], verts[i + 2]);\n            pointdatas.push(p.x, p.y);\n            pointdatas.push(verts[i] / size.x);\n            pointdatas.push(verts[i + 2] / size.z);\n        }\n        indexMaps.forEach((values, key) => {\n            let color = this._colorMap.get(Math.log2(key) + 1);\n            let set = new Set(values);\n            let newIb = Array.from(set.values());\n            newIb.sort((a, b) => a - b);\n            const ibOffset = vbDatas.length / 9;\n            for (var i = 0, n = newIb.length; i < n; i++) {\n                let index = newIb[i] * 4;\n                vbDatas.push(pointdatas[index], pointdatas[index + 1], 0, color.r, color.g, color.b, color.a, pointdatas[index + 2], pointdatas[index + 3]);\n            }\n            values.forEach((ib, index) => {\n                ibs.push(newIb.indexOf(ib) + ibOffset);\n            });\n        });\n    }\n    static _updateMesh2DData(mesh2d, vbdata, ib, ibFormat, canRead = false) {\n        let vbArray = [];\n        {\n            let vertex = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n            vertex.vertexDeclaration = VertexMesh2D.getVertexDeclaration([\"POSITION,COLOR,UV\"], false)[0];\n            vertex.setDataLength(vbdata.buffer.byteLength);\n            vertex.setData(vbdata.buffer, 0, 0, vbdata.buffer.byteLength);\n            vbArray.push(vertex);\n        }\n        let indexBuffer = LayaGL.renderDeviceFactory.createIndexBuffer(BufferUsage.Dynamic);\n        indexBuffer._setIndexDataLength(ib.buffer.byteLength);\n        indexBuffer._setIndexData(ib, 0);\n        mesh2d._setBuffers(vbArray, indexBuffer);\n        let geometryArray = [];\n        let geometry = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElement);\n        geometry.bufferState = mesh2d._bufferState;\n        geometry.setDrawElemenParams(ib.length, 0);\n        geometry.indexFormat = ibFormat;\n        geometryArray.push(geometry);\n        mesh2d._setSubMeshes(geometryArray);\n        mesh2d._vertices = [vbdata];\n        mesh2d._indices = ib;\n        mesh2d._vertexCount = vbdata.length / 9;\n        if (canRead) {\n            mesh2d._vertices = [vbdata];\n            mesh2d._indices = ib;\n        }\n        return mesh2d;\n    }\n    static _createDebugMesh(navMesh, mesh = null, isGlobal = false) {\n        let m_navMesh = navMesh.navMesh;\n        let tileCount = m_navMesh.getMaxTiles();\n        let poses = [];\n        let indexs = [];\n        if (isGlobal) {\n            mat.identity();\n        }\n        else {\n            let sprite = navMesh._surface.owner;\n            sprite.globalTrans.getMatrix().copyTo(mat);\n            mat.invert();\n        }\n        Vector3.subtract(navMesh.navTileGrid.max, navMesh.navTileGrid.min, tempVector3);\n        for (var i = 0; i < tileCount; i++) {\n            this._getTitleData(m_navMesh.getTile(i), poses, tempVector3, indexs);\n        }\n        let vb = new Float32Array(poses);\n        let ib = new Uint16Array(indexs);\n        if (mesh == null) {\n            mesh = new Mesh2D();\n            mesh.canRead = true;\n        }\n        this._updateMesh2DData(mesh, vb, ib, IndexFormat.UInt16);\n        return mesh;\n    }\n}\nNavgiation2DUtils._colorMap = new Map();\nNavgiation2DUtils._vec2ToVec3 = function (value, out) {\n    out.setValue(value.x, 0, value.y);\n};\n","import { Laya } from \"../../../Laya\";\nimport { Scene } from \"../../display/Scene\";\nimport { BaseNavigationManager } from \"../common/BaseNavigationManager\";\nimport { NavigationConfig } from \"../common/NavigationConfig\";\nimport { NavTileCache } from \"../common/NavTileData\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nlet create2DObstacleData = function (slices, radiusOff = 0, radius = 1) {\n    let vertexs = new Float32Array(slices * 3);\n    const triCount = slices - 2;\n    let flags = new Uint8Array(triCount);\n    flags.fill(1);\n    let ibs = [];\n    for (var i = 2; i < slices; i++) {\n        ibs.push(0, i, i - 1);\n    }\n    var sliceAngle = (Math.PI * 2.0) / slices;\n    for (var i = 0; i < slices; i++) {\n        let triIndex = i * 3;\n        vertexs[triIndex] = radius * Math.cos(sliceAngle * i + radiusOff);\n        vertexs[triIndex + 2] = radius * Math.sin(sliceAngle * i + radiusOff);\n        vertexs[triIndex + 1] = 0;\n    }\n    let tileData = new NavTileCache();\n    tileData.triVertex = vertexs;\n    tileData.triIndex = new Uint32Array(ibs);\n    tileData.triFlag = flags;\n    tileData.boundMin.setValue(-radius, 0, -radius);\n    tileData.boundMax.setValue(radius, 0, radius);\n    return tileData;\n};\nexport var NavObstacles2DType;\n(function (NavObstacles2DType) {\n    NavObstacles2DType[NavObstacles2DType[\"RECT\"] = 0] = \"RECT\";\n    NavObstacles2DType[NavObstacles2DType[\"CIRCLE\"] = 1] = \"CIRCLE\";\n    NavObstacles2DType[NavObstacles2DType[\"CUSTOMER\"] = 2] = \"CUSTOMER\";\n})(NavObstacles2DType || (NavObstacles2DType = {}));\nexport class Navigation2DManage extends BaseNavigationManager {\n    static _getNavManager(comp) {\n        let scene = comp.owner.scene;\n        if (scene) {\n            return scene.getComponentElementManager(Navigation2DManage._managerName);\n        }\n        else {\n            return null;\n        }\n    }\n    static __initialize() {\n        return BaseNavigationManager._initialize(() => {\n            Navigation2DManage.__init__();\n            Navgiation2DUtils.__init__();\n        });\n    }\n    static __init__() {\n        this._obstacleMap.set(NavObstacles2DType.RECT, create2DObstacleData(4, Math.PI / 4, 1 / Math.sqrt(2)));\n        this._obstacleMap.set(NavObstacles2DType.CIRCLE, create2DObstacleData(60, 0));\n    }\n    static _getObstacleData(type) {\n        return this._obstacleMap.get(type);\n    }\n    constructor() {\n        super(Navigation2DManage._managerName);\n    }\n    _init() {\n        super._init();\n        let config = this.getNavConfig(NavigationConfig.defaltAgentName);\n        config.cellSize = 2;\n        config.tileSize = 256;\n    }\n}\nNavigation2DManage._managerName = \"navMesh2D\";\nNavigation2DManage._obstacleMap = new Map();\nScene.regManager(Navigation2DManage._managerName, Navigation2DManage);\nLaya.addBeforeInitCallback(Navigation2DManage.__initialize);\n","import { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { BaseNavAgent } from \"../../common/component/BaseNavAgent\";\nimport { Navgiation2DUtils } from \"../Navgiation2DUtils\";\nimport { Navigation2DManage } from \"../Navigation2DManage\";\nconst tempVector3 = new Vector3();\nexport class Nav2DAgent extends BaseNavAgent {\n    get destination() {\n        return this._destination;\n    }\n    set destination(value) {\n        value.cloneTo(this._destination);\n        Navgiation2DUtils._vec2ToVec3(this._destination, tempVector3);\n        this._setTarget(tempVector3);\n    }\n    constructor() {\n        super();\n        this._destination = new Vector2();\n        this._baseOffset = 0;\n        this._radius = 10;\n        this._speed = 100;\n        this._Acceleration = 300;\n    }\n    onAwake() {\n        super.onAwake();\n        this.owner.globalTrans.cache = true;\n    }\n    _getcollisionQueryRange() {\n        return this._getradius() * 12;\n    }\n    _getpathOptimizationRange() {\n        return this._getradius() * 300;\n    }\n    _getradius() {\n        return this._radius * Math.max(this.owner.globalTrans.scaleX, this.owner.globalTrans.scaleY);\n    }\n    _getheight() {\n        return 0.01;\n    }\n    _getpos(pos) {\n        Navgiation2DUtils._getSpriteGlobalPos(this.owner, pos);\n    }\n    _getManager() {\n        return Navigation2DManage._getNavManager(this);\n    }\n    _updatePosition(pos, dir) {\n        this.owner.globalTrans.setPos(pos.x, pos.z);\n    }\n}\n","import { BaseNavMesh } from \"../common/BaseNavMesh\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nexport class NavMesh2D extends BaseNavMesh {\n    constructor(config, min, max, surface) {\n        super(config, min, max, surface, false);\n        this._titileConfig._setMaxEdgeLen(1000);\n    }\n    _addTile(cache, binds, partitionType, maxSimplificationError) {\n        const config = this._grid.config;\n        config.cellHeight = 0.1;\n        config.agentHeight = 0.3;\n        config.agentMaxSlope = 45;\n        config.agentMaxClimb = 0.3;\n        super._addTile(cache, binds, partitionType, maxSimplificationError);\n        if (this._debugMesh) {\n            Navgiation2DUtils._createDebugMesh(this, this._debugMesh, true);\n        }\n    }\n    buildDebugMesh() {\n        if (this._debugMesh == null) {\n            this._debugMesh = Navgiation2DUtils._createDebugMesh(this, this._debugMesh, true);\n        }\n        return this._debugMesh;\n    }\n}\n","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { BaseNavMeshSurface } from \"../../common/component/BaseNavMeshSurface\";\nimport { Navigation2DManage } from \"../Navigation2DManage\";\nimport { NavMesh2D } from \"../NavMesh2D\";\nexport class NavMesh2DSurface extends BaseNavMeshSurface {\n    get areas() {\n        return this._navMeshAreas;\n    }\n    set areas(value) {\n        if (this._navMeshAreas.length > 0) {\n            this._navMeshAreas.forEach((area) => {\n                area._destroy();\n            });\n        }\n        this._navMeshAreas = value;\n        if (this._navMesh) {\n            this._navMeshAreas.forEach((area) => {\n                area._bindSurface(this);\n            });\n        }\n    }\n    get obstacles() {\n        return this._navMeshObstacles;\n    }\n    set obstacles(value) {\n        if (this._navMeshObstacles.length > 0) {\n            this._navMeshObstacles.forEach((obstacle) => {\n                obstacle._destroy();\n            });\n        }\n        this._navMeshObstacles = value;\n        if (this._navMesh) {\n            value.forEach((obstacle) => {\n                obstacle._bindSurface(this);\n            });\n        }\n    }\n    get navMeshLink() {\n        return this._navMeshLink;\n    }\n    set navMeshLink(value) {\n        if (this._navMeshLink.length > 0) {\n            this._navMeshLink.forEach((link) => {\n                link.destroy();\n            });\n        }\n        this._navMeshLink = value;\n        if (this._navMesh) {\n            value.forEach((link) => {\n                link._bindSurface(this);\n            });\n        }\n    }\n    constructor() {\n        super();\n        this._navMeshAreas = [];\n        this._navMeshObstacles = [];\n        this._navMeshLink = [];\n        this._transfrom = new Matrix4x4();\n    }\n    onAwake() {\n        super.onAwake();\n        this.owner.globalTrans.cache = true;\n        this._navMeshAreas.forEach((area) => {\n            area._bindSurface(this);\n        });\n        this._navMeshObstacles.forEach((obstacle) => {\n            obstacle._bindSurface(this);\n        });\n        this._navMeshLink.forEach((link) => {\n            link._bindSurface(this);\n        });\n    }\n    _getManager() {\n        return Navigation2DManage._getNavManager(this);\n    }\n    _crateNavMesh(config, min, max) {\n        return new NavMesh2D(config, min, max, this);\n    }\n}\n","import { Vector2 } from \"../../maths/Vector2\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nimport { NavModifleData } from \"../common/data/NavModifleData\";\nimport { NavTileData } from \"../common/NavTileData\";\nimport { Navigation2DManage, NavObstacles2DType } from \"./Navigation2DManage\";\nconst tempVec2 = new Vector2();\nexport class NavMesh2DObstacles {\n    get agentType() {\n        return this._modifierData.agentType;\n    }\n    set agentType(value) {\n        this._modifierData.agentType = value;\n    }\n    get areaFlag() {\n        return this._modifierData.areaFlag;\n    }\n    set areaFlag(value) {\n        this._modifierData.areaFlag = value;\n    }\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        value.cloneTo(this._position);\n        this._transfromChange();\n    }\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        if (value == this._rotation)\n            return;\n        this._rotation = value;\n        this._transfromChange();\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(value) {\n        value.cloneTo(this._scale);\n        this._transfromChange();\n    }\n    get datas() {\n        if (this._oriTiles)\n            return this._oriTiles._res;\n        return null;\n    }\n    set datas(value) {\n        if (this._oriTiles) {\n            this._oriTiles.destroy();\n            this._oriTiles = null;\n        }\n        if (value != null) {\n            this._oriTiles = new NavTileData(value);\n        }\n        this._changeData();\n        this._transfromChange();\n    }\n    get meshType() {\n        return this._meshType;\n    }\n    set meshType(value) {\n        if (this._meshType == value)\n            return;\n        this._meshType = value;\n        this._changeData();\n    }\n    get size() {\n        return this._size;\n    }\n    set size(value) {\n        value.cloneTo(this._size);\n        this._transfromChange();\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(value) {\n        this._radius = value;\n        this._transfromChange();\n    }\n    constructor() {\n        this._position = new Vector2();\n        this._rotation = 0;\n        this._scale = new Vector2(1, 1);\n        this._size = new Vector2();\n        this._radius = 50;\n        this._meshType = NavObstacles2DType.RECT;\n        this._modifierData = new NavModifleData();\n        this._changeData();\n        this._transfromChange();\n    }\n    _bindSurface(surface) {\n        this._modifierData._initSurface([surface]);\n    }\n    _destroy() {\n        this._modifierData._destory();\n    }\n    _changeData() {\n        switch (this._meshType) {\n            case NavObstacles2DType.RECT:\n                this._modifierData.datas = Navigation2DManage._getObstacleData(NavObstacles2DType.RECT);\n                break;\n            case NavObstacles2DType.CIRCLE:\n                this._modifierData.datas = Navigation2DManage._getObstacleData(NavObstacles2DType.CIRCLE);\n                break;\n            case NavObstacles2DType.CUSTOMER:\n                if (this._oriTiles) {\n                    this._modifierData.datas = this._oriTiles.getNavData(0);\n                }\n                else {\n                    this._modifierData.datas = null;\n                }\n                break;\n            default:\n                console.error(\"NavMesh2DObstacles:meshType error\");\n                break;\n        }\n    }\n    _transfromChange() {\n        this.scale.cloneTo(tempVec2);\n        if (this._meshType == NavObstacles2DType.RECT) {\n            tempVec2.x *= this._size.x;\n            tempVec2.y *= this._size.y;\n        }\n        else if (this._meshType == NavObstacles2DType.CIRCLE) {\n            tempVec2.x *= this._radius;\n            tempVec2.y *= this._radius;\n        }\n        Navgiation2DUtils._getTransfromMatrix4x4(this._position, this._rotation, tempVec2, this._modifierData._transfrom);\n        this._modifierData._transfrom.elements[5] = 0;\n        this._modifierData._refeahTransfrom();\n    }\n}\n","import { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { NavMeshLinkData } from \"../common/data/NavMeshLinkData\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nconst tempVec3 = new Vector3();\nexport class NavMesh2DLink {\n    get agentType() {\n        return this._agentType;\n    }\n    set agentType(value) {\n        this._agentType = value;\n    }\n    get areaFlag() {\n        return this._data.areaFlag;\n    }\n    set areaFlag(value) {\n        this._data.areaFlag = value;\n    }\n    get width() {\n        return this._data._width;\n    }\n    set width(value) {\n        this._data._updateWidth(value);\n    }\n    get bidirectional() {\n        return this._data._bidirectional;\n    }\n    set bidirectional(value) {\n        this._data._updateBidirectional(value);\n    }\n    get start() {\n        return this._start;\n    }\n    set start(value) {\n        value.cloneTo(this._start);\n        Navgiation2DUtils._vec2ToVec3(this._start, tempVec3);\n        this._data._updateStartPoint(tempVec3);\n    }\n    get end() {\n        return this._end;\n    }\n    set end(value) {\n        value.cloneTo(this._end);\n        Navgiation2DUtils._vec2ToVec3(this._end, tempVec3);\n        this._data._updateEndPoint(tempVec3);\n    }\n    constructor() {\n        this._start = new Vector2();\n        this._end = new Vector2();\n        this._data = new NavMeshLinkData();\n        this.width = 10;\n    }\n    _bindSurface(surface) {\n        this._data._initSurface([surface]);\n    }\n    destroy() {\n        this._data.destroy();\n    }\n}\n","import { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { ModifierVolumeData } from \"../common/data/ModifierVolumeData\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nconst tempVector3 = new Vector3();\nexport class NavMesh2DModifierArea {\n    get agentType() {\n        return this._areaData.agentType;\n    }\n    set agentType(value) {\n        this._areaData.agentType = value;\n    }\n    get areaFlag() {\n        return this._areaData.areaFlag;\n    }\n    set areaFlag(value) {\n        this._areaData.areaFlag = value;\n    }\n    get datas() {\n        return this._pointDatas;\n    }\n    set datas(value) {\n        this._pointDatas = value;\n        this._vector2dTo3d();\n    }\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        value.cloneTo(this._position);\n        this._transfromChange();\n    }\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        if (value == this._rotation)\n            return;\n        this._rotation = value;\n        this._transfromChange();\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(value) {\n        value.cloneTo(this._scale);\n        this._transfromChange();\n    }\n    constructor() {\n        this._position = new Vector2();\n        this._rotation = 0;\n        this._scale = new Vector2(1, 1);\n        this._pointDatas = [];\n        this._areaData = new ModifierVolumeData();\n    }\n    _bindSurface(surface) {\n        this._areaData._initSurface([surface]);\n    }\n    _destroy() {\n        this._areaData._destory();\n    }\n    _vector2dTo3d() {\n        let pointCount = this._pointDatas.length >> 1;\n        let index = 0;\n        let datas = this._areaData._datas;\n        datas.length = pointCount * 3;\n        for (var i = 0; i < pointCount; i++) {\n            index = i * 2;\n            Navgiation2DUtils._setValue3(this._pointDatas[index], this._pointDatas[index + 1], tempVector3);\n            index = i * 3;\n            datas[index] = tempVector3.x;\n            datas[index + 1] = tempVector3.y;\n            datas[index + 2] = tempVector3.z;\n        }\n        this._areaData._refeashData();\n    }\n    _transfromChange() {\n        Navgiation2DUtils._getTransfromMatrix4x4(this._position, this._rotation, this._scale, this._areaData._transfrom);\n        this._areaData._refeahTransfrom();\n    }\n}\n","import { ClassUtils } from \"../../utils/ClassUtils\";\nimport { Nav2DAgent } from \"./component/Nav2DAgent\";\nimport { NavMesh2D } from \"./NavMesh2D\";\nimport { Navigation2DManage } from \"./Navigation2DManage\";\nimport { Navgiation2DUtils } from \"./Navgiation2DUtils\";\nimport { NavMesh2DSurface } from \"./component/NavMesh2DSurface\";\nimport { NavMesh2DObstacles } from \"./NavMesh2DObstacles\";\nimport { NavMesh2DLink } from \"./NavMesh2DLink\";\nimport { NavMesh2DModifierArea } from \"./NavMesh2DModifierArea\";\nlet c = ClassUtils.regClass;\nc(\"Navgiation2DUtils\", Navgiation2DUtils);\nc(\"NavigationManager\", Navigation2DManage);\nc(\"Nav2DAgent\", Nav2DAgent);\nc(\"NavMesh2D\", NavMesh2D);\nc(\"NavMesh2DSurface\", NavMesh2DSurface);\nc(\"NavMesh2DLink\", NavMesh2DLink);\nc(\"NavMesh2DModifierArea\", NavMesh2DModifierArea);\nc(\"NavMesh2DObstacles\", NavMesh2DObstacles);\n"],"names":["tempVector3","Vector3","Matrix","Point","Color","Utils","NavigationUtils","LayaGL","BufferUsage","VertexMesh2D","MeshTopology","DrawType","Mesh2D","IndexFormat","NavTileCache","NavObstacles2DType","BaseNavigationManager","NavigationConfig","Scene","Laya","BaseNavAgent","Vector2","BaseNavMesh","BaseNavMeshSurface","Matrix4x4","NavTileData","NavModifleData","NavMeshLinkData","ModifierVolumeData","ClassUtils"],"mappings":"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"}