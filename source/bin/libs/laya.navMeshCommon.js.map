{"version":3,"file":"laya.navMeshCommon.js","sources":["../../bin/tsc/layaAir/laya/navigation/common/AreaMask.js","../../bin/tsc/layaAir/laya/navigation/common/NavMeshGrid.js","../../bin/tsc/layaAir/laya/navigation/common/NavigationPathData.js","../../bin/tsc/layaAir/laya/navigation/common/NavigationUtils.js","../../bin/tsc/layaAir/laya/navigation/common/TitleConfig.js","../../bin/tsc/layaAir/laya/navigation/common/BaseNavMesh.js","../../bin/tsc/layaAir/laya/navigation/common/RecastConfig.js","../../bin/tsc/layaAir/laya/navigation/common/NavigationConfig.js","../../bin/tsc/layaAir/laya/navigation/common/NavTileData.js","../../bin/tsc/layaAir/laya/navigation/common/data/CacheData.js","../../bin/tsc/layaAir/laya/navigation/common/ItemMapId.js","../../bin/tsc/layaAir/laya/navigation/common/component/BaseNavMeshSurface.js","../../bin/tsc/layaAir/laya/navigation/common/BaseNavigationManager.js","../../bin/tsc/layaAir/laya/navigation/common/ModuleDef.js","../../bin/tsc/layaAir/laya/navigation/common/NavAgentLinkAnim.js","../../bin/tsc/layaAir/laya/navigation/common/component/BaseNavAgent.js","../../bin/tsc/layaAir/laya/navigation/common/data/BaseData.js","../../bin/tsc/layaAir/laya/navigation/common/data/ModifierVolumeData.js","../../bin/tsc/layaAir/laya/navigation/common/data/NavMeshLinkData.js","../../bin/tsc/layaAir/laya/navigation/common/data/NavModifleData.js"],"sourcesContent":["export class AreaMask {\n    get excludeflag() {\n        return this._excludeflag;\n    }\n    get flag() {\n        return this._flags;\n    }\n    set flag(value) {\n        this._flags = value;\n        this._calculFlagVale();\n    }\n    constructor() {\n        this._flags = 7;\n    }\n    _setAreaMap(areaFlagMap) {\n        this._areaFlagMap = areaFlagMap;\n        this._calculFlagVale();\n    }\n    _calculFlagVale() {\n        if (!this._areaFlagMap)\n            return;\n        let flag = 0;\n        let excludeflag = 0;\n        this._areaFlagMap.forEach((value, key) => {\n            if (this._flags & value.flag) {\n                flag = flag | value.flag;\n            }\n            else {\n                excludeflag = excludeflag | value.flag;\n            }\n        });\n        this._flags = flag;\n        this._excludeflag = excludeflag;\n    }\n}\n","import { Vector2 } from \"../../maths/Vector2\";\nexport class NavMeshGrid {\n    get tileWidth() {\n        return this._config.tileSize * this._config.cellSize;\n    }\n    get max() {\n        return this._max;\n    }\n    get min() {\n        return this._min;\n    }\n    get config() {\n        return this._config;\n    }\n    get maxtiles() {\n        return this.maxXTileCount * this.maxZTileCount;\n    }\n    get maxXTileCount() {\n        return this._tileSize.x;\n    }\n    get maxZTileCount() {\n        return this._tileSize.y;\n    }\n    constructor(config, min, max) {\n        this._bordWidth = 0;\n        this._config = config;\n        this._min = min;\n        this._max = max;\n        this._tileSize = new Vector2();\n        this._cellSize = new Vector2();\n        this._updateBound();\n    }\n    _refeashBound(tile) {\n        tile._boundMin.cloneTo(this._min);\n        tile._boundMax.cloneTo(this._max);\n        this._updateBound();\n    }\n    getBoundTileIndex(min, max, isbord = false) {\n        let pMinx = min.x;\n        let pMinz = min.z;\n        let pMaxx = max.x;\n        let pMaxz = max.z;\n        if (isbord) {\n            pMinx -= this._bordWidth;\n            pMinz -= this._bordWidth;\n            pMaxx += this._bordWidth;\n            pMaxz += this._bordWidth;\n        }\n        let lists = [];\n        let minIx = Math.max(0, this._getTileXIndex(pMinx));\n        let maxIx = Math.min(this._tileSize.x - 1, this._getTileXIndex(pMaxx));\n        let minIz = Math.max(0, this._getTileZIndex(pMinz));\n        let maxIz = Math.min(this._tileSize.y - 1, this._getTileZIndex(pMaxz));\n        for (var z = minIz; z <= maxIz; z++) {\n            for (var x = minIx; x <= maxIx; x++) {\n                lists.push(z * this._tileSize.x + x);\n            }\n        }\n        return lists;\n    }\n    getTileIndexByPos(x, z) {\n        return this.getTileIndex(this._getTileXIndex(x), this._getTileZIndex(z));\n    }\n    getTileIndex(xIndex, zIndex) {\n        if (zIndex < 0 || zIndex >= this._tileSize.y) {\n            return -1;\n        }\n        if (xIndex < 0 || xIndex >= this._tileSize.x) {\n            return -1;\n        }\n        return zIndex * this._tileSize.x + xIndex;\n    }\n    _getTileXIndex(value) {\n        return this._getLeftValue(value - this._min.x);\n    }\n    _getTileZIndex(value) {\n        return this._getLeftValue(value - this._min.z);\n    }\n    _getLeftValue(value) {\n        return Math.floor(value / this.tileWidth);\n    }\n    _updateBound() {\n        this._bordWidth = this._config.cellSize * 3;\n        const max = this._max;\n        const min = this._min;\n        const tileWidth = this._config.cellSize * this._config.tileSize;\n        this._tileSize.x = Math.ceil((max.x - min.x) / tileWidth);\n        this._tileSize.y = Math.ceil((max.z - min.z) / tileWidth);\n        const cellSize = this._config.cellSize;\n        this._cellSize.x = Math.ceil((max.x - min.x) / cellSize);\n        this._cellSize.x = Math.ceil((max.z - min.z) / cellSize);\n    }\n}\n","import { Vector3 } from \"../../maths/Vector3\";\nexport class NavigationPathData {\n    get pos() {\n        return this._pos;\n    }\n    get flag() {\n        return this._flag;\n    }\n    constructor() {\n        this._flag = 0;\n        this._pos = new Vector3();\n    }\n}\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { NavigationPathData } from \"./NavigationPathData\";\nconst tempVec3 = new Vector3();\nconst tempVec31 = new Vector3();\nconst tempVec32 = new Vector3();\nconst tempVec33 = new Vector3();\nexport class NavigationUtils {\n    static _boundContentPoint(min, max, point) {\n        if (point.x > max.x || point.x < min.x)\n            return false;\n        if (point.y > max.y || point.y < min.y)\n            return false;\n        if (point.z > max.z || point.z < min.z)\n            return false;\n        return true;\n    }\n    static _boundInterection(min1, max1, min2, max2) {\n        var tempV0 = tempVec3;\n        var tempV1 = tempVec31;\n        var thisExtends = tempVec32;\n        Vector3.subtract(max1, min1, thisExtends);\n        Vector3.scale(thisExtends, 0.5, thisExtends);\n        var boundExtends = tempVec33;\n        Vector3.subtract(max2, min2, boundExtends);\n        Vector3.scale(boundExtends, 0.5, boundExtends);\n        tempV0.setValue(Math.max(max1.x, max2.x) - Math.min(min1.x, min2.x), Math.max(max1.y, max2.y) - Math.min(min1.y, min2.y), Math.max(max1.z, max2.z) - Math.min(min1.z, min2.z));\n        tempV1.setValue((thisExtends.x + boundExtends.x) * 2.0, (thisExtends.y + boundExtends.y) * 2.0, (thisExtends.z + boundExtends.z) * 2.0);\n        if ((tempV0.x) > (tempV1.x))\n            return -1;\n        if ((tempV0.y) > (tempV1.y))\n            return -1;\n        if ((tempV0.z) > (tempV1.z))\n            return -1;\n        return (tempV1.x - tempV0.x) * (tempV1.y - tempV0.y) * (tempV1.z - tempV0.z);\n    }\n    static _setDatastoArray(fllowPath, index, data, flag) {\n        let navData = fllowPath[index] ? fllowPath[index] : new NavigationPathData();\n        navData.pos.fromArray(data);\n        navData._flag = flag;\n        fllowPath[index] = navData;\n    }\n    static _inRange(v1, v2, radius, height, offIndex) {\n        const dx = v2[0] - v1[offIndex];\n        const dy = v2[1] - v1[offIndex + 1];\n        const dz = v2[2] - v1[offIndex + 2];\n        return (dx * dx + dz * dz) < radius * radius && Math.abs(dy) < height;\n    }\n    static _transfromBoundBox(min, max, transfrom, outMin, outMax) {\n        const center = tempVec3;\n        Vector3.lerp(min, max, 0.5, center);\n        const extent = tempVec31;\n        Vector3.subtract(max, min, extent);\n        Vector3.scale(extent, 0.5, extent);\n        Vector3.transformCoordinate(center, transfrom, center);\n        Vector3.TransformNormal(extent, transfrom, extent);\n        Vector3.subtract(center, extent, outMin);\n        Vector3.add(center, extent, outMax);\n    }\n    static _isFlags(data, flag) {\n        return data & flag.value;\n    }\n    static _addVector3ToArray(vec1, vec2, scale) {\n        let dest = [];\n        dest[0] = vec1.x + vec2.x * scale;\n        dest[1] = vec1.y + vec2.y * scale;\n        dest[2] = vec1.z + vec2.z * scale;\n        return dest;\n    }\n    static _getSteerTarget(navMesh, startRef, endRef, minTargetDist, paths, pathSize, out) {\n        const navQuery = navMesh.navQuery;\n        let data = navQuery.findStraightPath(startRef, endRef, paths, pathSize, 3);\n        let steerPath = data.steerPath;\n        let steerPathFlags = data.steerPathFlags;\n        let steerPathPolys = data.steerPathPolys;\n        let nsteerPath = data.nsteerPath;\n        if (!nsteerPath) {\n            return null;\n        }\n        let ns = 0;\n        while (ns < nsteerPath) {\n            if (this._isFlags(steerPathFlags[ns], this._recast.dtStraightPathFlags.DT_STRAIGHTPATH_OFFMESH_CONNECTION) ||\n                !this._inRange(steerPath, startRef, minTargetDist, 1000, ns * 3))\n                break;\n            ns++;\n        }\n        if (ns >= nsteerPath)\n            return null;\n        out.fromArray(steerPath, ns * 3);\n        return {\n            steerPosFlag: steerPathFlags[ns],\n            steerPosRef: steerPathPolys[ns]\n        };\n    }\n    static _dtMergeCorridorStartMoved(path, npath, maxPath, visited, nvisited) {\n        let furthestPath = -1;\n        let furthestVisited = -1;\n        for (var i = npath - 1; i >= 0; i--) {\n            let found = false;\n            for (let j = nvisited - 1; j >= 0; --j) {\n                if (path[i] == visited[j]) {\n                    furthestPath = i;\n                    furthestVisited = j;\n                    found = true;\n                }\n            }\n            if (found)\n                break;\n        }\n        if (furthestPath == -1 || furthestVisited == -1)\n            return npath;\n        const req = nvisited - furthestVisited;\n        const orig = Math.min(furthestPath + 1, npath);\n        let size = Math.max(0, npath - orig);\n        if (req + size > maxPath)\n            size = maxPath - req;\n        for (let i = 0; i < req; ++i)\n            path[i] = visited[(nvisited - 1) - i];\n        return req + size;\n    }\n    static _findFllowPath(navMesh, filter, startPos, endPos, steplength, minTarget, fllowPath) {\n        const navQuery = navMesh.navQuery;\n        const namesh = navMesh.navMesh;\n        const startRef = navQuery.findNearestPoly(startPos.toArray(), navMesh.extents, filter);\n        const endRef = navQuery.findNearestPoly(endPos.toArray(), navMesh.extents, filter);\n        let pathdata = navQuery.findPath(startRef, endRef, filter, NavigationUtils._MAX_POLYS);\n        let polys = pathdata.polys;\n        let m_npolys = polys.length;\n        let m_nsmoothPath = 0;\n        let steerPos = new Vector3();\n        let help1 = new Vector3();\n        let help2 = new Vector3();\n        if (polys.length > 0) {\n            let npolys = m_npolys;\n            let iterPos = navQuery.closestPointOnPolyByRefPointData(startRef);\n            let targetPos = navQuery.closestPointOnPoly(polys[npolys - 1], endRef.data);\n            this._setDatastoArray(fllowPath, m_nsmoothPath, iterPos, this._recast.dtStraightPathFlags.DT_STRAIGHTPATH_START.value);\n            m_nsmoothPath++;\n            while (npolys && m_nsmoothPath < NavigationUtils._MAX_SMOOTH) {\n                let steerData = this._getSteerTarget(navMesh, iterPos, targetPos, minTarget, polys, npolys, steerPos);\n                if (steerData == null) {\n                    break;\n                }\n                help1.fromArray(iterPos);\n                let steerPosFlag = steerData.steerPosFlag;\n                let steerPosRef = steerData.steerPosRef;\n                let endOfPath = this._isFlags(steerPosFlag, this._recast.dtStraightPathFlags.DT_STRAIGHTPATH_END) ? true : false;\n                let offMeshConnection = this._isFlags(steerPosFlag, this._recast.dtStraightPathFlags.DT_STRAIGHTPATH_OFFMESH_CONNECTION) ? true : false;\n                Vector3.subtract(steerPos, help1, help2);\n                let len = help2.length();\n                if ((endOfPath || offMeshConnection) && len < steplength)\n                    len = 1;\n                else\n                    len = steplength / len;\n                let moveTgt = this._addVector3ToArray(help1, help2, len);\n                let surfacedata = navQuery.moveAlongSurface(polys[0], iterPos, moveTgt, filter, 16);\n                let result = surfacedata.resultPos;\n                let visited = surfacedata.visited;\n                polys = this._recast.mergeCorridorStartMoved(polys, NavigationUtils._MAX_POLYS, Array.from(visited));\n                polys = this._recast.fixupShortcuts(polys, navQuery);\n                npolys = polys.length;\n                let heightData = navQuery.getPolyHeight(polys[0], result);\n                result[1] = heightData.height;\n                iterPos = result;\n                let isRange = this._inRange(iterPos, steerPos.toArray(), minTarget, 1.0, 0);\n                if (endOfPath && isRange) {\n                    iterPos = targetPos;\n                    if (m_nsmoothPath < NavigationUtils._MAX_SMOOTH) {\n                        this._setDatastoArray(fllowPath, m_nsmoothPath, iterPos, this._recast.dtStraightPathFlags.DT_STRAIGHTPATH_END.value);\n                        m_nsmoothPath++;\n                    }\n                    break;\n                }\n                else if (offMeshConnection && isRange) {\n                    let startPos = [0, 0, 0];\n                    let endPos = [0, 0, 0];\n                    let prevRef = 0, polyRef = polys[0];\n                    let npos = 0;\n                    while (npos < npolys && polyRef != steerPosRef) {\n                        prevRef = polyRef;\n                        polyRef = polys[npos];\n                        npos++;\n                    }\n                    for (let i = npos; i < npolys; ++i) {\n                        polys[i - npos] = polys[i];\n                    }\n                    npolys -= npos;\n                    let status = namesh.getOffMeshConnectionPolyEndPoints(prevRef, polyRef, startPos, endPos);\n                    if (this._statusSucceed(status)) {\n                        if (m_nsmoothPath < NavigationUtils._MAX_SMOOTH) {\n                            this._setDatastoArray(fllowPath, m_nsmoothPath, startPos, steerPosFlag);\n                            m_nsmoothPath++;\n                            if (m_nsmoothPath & 1) {\n                                this._setDatastoArray(fllowPath, m_nsmoothPath, startPos, steerPosFlag);\n                                m_nsmoothPath++;\n                            }\n                        }\n                        iterPos = endPos;\n                        heightData = navQuery.getPolyHeight(polys[0], iterPos);\n                        iterPos[1] = heightData.height;\n                    }\n                }\n                if (m_nsmoothPath < NavigationUtils._MAX_SMOOTH) {\n                    this._setDatastoArray(fllowPath, m_nsmoothPath, iterPos, steerPosFlag);\n                    m_nsmoothPath++;\n                }\n            }\n        }\n        fllowPath.length = m_nsmoothPath;\n    }\n    static _initialize(Recast) {\n        NavigationUtils._recast = Recast;\n        NavigationUtils._dtCrowdAgentParams = new Recast.dtCrowdAgentParams();\n        NavigationUtils._TemprefPoint = {};\n        NavigationUtils._TemprefPoint1 = {};\n    }\n    static _getRecast() {\n        return NavigationUtils._recast;\n    }\n    static _createNavMesh() {\n        return new this._recast.dtNavMesh();\n    }\n    static _createNavMeshQuery() {\n        return new this._recast.dtNavMeshQuery();\n    }\n    static _createRefPointData() {\n        return new this._recast.dtRefPointData();\n    }\n    static _createMeshOffLink() {\n        return new this._recast.dtOffMeshConnection();\n    }\n    static _createConvexVolume() {\n        return new this._recast.dtConvexVolume();\n    }\n    static _createQueryFilter() {\n        return new this._recast.dtQueryFilter();\n    }\n    static _createCrowd() {\n        return new this._recast.dtCrowd();\n    }\n    static _createdtNavTileData() {\n        return new this._recast.dtNavTileData();\n    }\n    static _createdtNavTileCache() {\n        return new this._recast.dtNavTileCache();\n    }\n    static _getCrowdAgentParams() {\n        return this._dtCrowdAgentParams;\n    }\n    static _freeNavMeshQuery(data) {\n        this._recast.dtFreeNavMeshQuery(data);\n    }\n    static _freeNavMesh(data) {\n        this._recast.dtFreeNavMesh(data);\n    }\n    static _freeCrowd(data) {\n        this._recast.dtFreeCrowd(data);\n    }\n    static _free(data) {\n        this._recast.dtFree(data);\n    }\n    static _freeLayaData(data) {\n        this._recast._free(data);\n    }\n    static _statusSucceed(data) {\n        return this._recast.dtStatusSucceed(data);\n    }\n    static _updateCrowd(crowd, dt) {\n        return this._recast.updateCrowd(crowd, dt);\n    }\n}\nNavigationUtils._MAX_SMOOTH = 2048;\nNavigationUtils._MAX_POLYS = 256;\nNavigationUtils._TitleMeshIbOff = [0, 2, 1];\n","export class TitleConfig {\n    constructor() {\n        this.tx = 0;\n        this.ty = 0;\n        this.maxSimplificationError = 0.9;\n        this.bmin = [0, 0, 0];\n        this.bmax = [0, 0, 0];\n    }\n    _setOff(tx, ty) {\n        this.tx = tx;\n        this.ty = ty;\n    }\n    _setMin(value) {\n        this.bmin[0] = value.x;\n        this.bmin[1] = value.y;\n        this.bmin[2] = value.z;\n    }\n    _setMax(value) {\n        this.bmax[0] = value.x;\n        this.bmax[1] = value.y;\n        this.bmax[2] = value.z;\n    }\n    _setAgent(height, radius, maxClimb) {\n        this.agentHeight = height;\n        this.agentRadius = radius;\n        this.agentMaxClimb = maxClimb;\n    }\n    _setMaxEdgeLen(value) {\n        this.maxEdgeLen = Math.ceil(value);\n    }\n}\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { NavMeshGrid } from \"./NavMeshGrid\";\nimport { NavigationUtils } from \"./NavigationUtils\";\nimport { TitleConfig } from \"./TitleConfig\";\nconst CROW_MAX_FILTER = 16;\nconst tempVec3 = new Vector3();\nexport class BaseNavMesh {\n    get extents() {\n        return this._extents;\n    }\n    get navMesh() {\n        return this._navMesh;\n    }\n    get navQuery() {\n        return this._navQuery;\n    }\n    get crowd() {\n        return this._crowd;\n    }\n    get navTileGrid() {\n        return this._grid;\n    }\n    get is3D() {\n        return this._is3D;\n    }\n    constructor(config, min, max, surface, is3D = true) {\n        this._extents = [2, 4, 2];\n        this._maxAgents = 128;\n        this._is3D = true;\n        this._grid = new NavMeshGrid(config, min, max);\n        this._surface = surface;\n        this._is3D = is3D;\n        this._titileConfig = new TitleConfig();\n        this._navcreateedTileMaps = new Set();\n        this._delayCreates = new Map();\n        this._allAgents = new Map();\n        this._fiterMap = new Map();\n        this._creatNavMesh();\n    }\n    _getFilter(areaMask) {\n        let excludeflag = areaMask.excludeflag;\n        if (this._fiterMap.has(excludeflag)) {\n            return this._fiterMap.get(excludeflag);\n        }\n        let size = this._fiterMap.size;\n        if (size >= CROW_MAX_FILTER) {\n            console.error(\"Not max \" + CROW_MAX_FILTER + \".\");\n            return null;\n        }\n        let fiter = this._crowd.getFilter(size);\n        fiter.setIncludeFlags(areaMask.flag);\n        fiter.setExcludeFlags(excludeflag);\n        fiter.queryFilterType = size;\n        this._fiterMap.set(excludeflag, fiter);\n        return fiter;\n    }\n    _createAgents(agent) {\n        agent._filter = this._getFilter(agent._areaMask);\n        let params = NavigationUtils._getCrowdAgentParams();\n        params.radius = agent._getradius();\n        params.collisionQueryRange = agent._getcollisionQueryRange();\n        params.pathOptimizationRange = agent._getpathOptimizationRange();\n        params.height = agent._getheight();\n        params.maxAcceleration = agent.maxAcceleration;\n        params.maxSpeed = agent.speed;\n        params.obstacleAvoidanceType = agent.quality;\n        params.separationWeight = agent.priority;\n        params.queryFilterType = agent._filter.queryFilterType;\n        params.updateFlags = agent._getUpdateFlags();\n        agent._getpos(tempVec3);\n        let refPoint = this._navQuery.findNearestPoly(tempVec3.toArray(), this._extents, agent._filter);\n        agent._agentId = this._crowd.addAgent(refPoint.data, params);\n        agent._crowAgent = this._crowd.getAgent(agent._agentId);\n        this._allAgents.set(agent._agentId, agent);\n    }\n    _addAgent(agent) {\n        agent._getpos(tempVec3);\n        let tileIndex = this._grid.getTileIndexByPos(tempVec3.x, tempVec3.z);\n        if (this._navcreateedTileMaps.has(tileIndex)) {\n            this._createAgents(agent);\n        }\n        else {\n            if (!this._delayCreates.has(tileIndex)) {\n                this._delayCreates.set(tileIndex, []);\n            }\n            this._delayCreates.get(tileIndex).push(agent);\n        }\n    }\n    _removeAgent(agent) {\n        if (agent._agentId == null) {\n            agent._getpos(tempVec3);\n            let tileIndex = this._grid.getTileIndexByPos(tempVec3.x, tempVec3.z);\n            if (this._delayCreates.has(tileIndex)) {\n                let lists = this._delayCreates.get(tileIndex);\n                let index = lists.indexOf(agent);\n                if (index >= 0) {\n                    lists.splice(index, 1);\n                }\n            }\n        }\n        else {\n            this._crowd.removeAgent(agent._agentId);\n            this._allAgents.delete(agent._agentId);\n            agent._agentId = null;\n            agent._crowAgent = null;\n        }\n    }\n    _getPolyFlags(pos, fiter = null) {\n        const polyRef = this._findNearestPoly(pos, fiter, tempVec3);\n        return this._navMesh.getPolyFlags(polyRef);\n    }\n    _getPolyArea(pos, fiter = null) {\n        const polyRef = this._findNearestPoly(pos, fiter, tempVec3);\n        return this._navMesh.getPolyArea(polyRef);\n    }\n    _findNearestPoly(pos, fiter = null, out) {\n        if (!fiter)\n            fiter = this._defatfilter;\n        let poly = this._navQuery.findNearestPoly(pos.toArray(), this.extents, fiter);\n        out.fromArray(poly.data);\n        return poly.polyRef;\n    }\n    _findFllowPath(fllowPaths, startPos, endPos, speed, filter = null) {\n        if (!filter)\n            filter = this._defatfilter;\n        let tileIndex = this._grid.getTileIndexByPos(startPos.x, startPos.z);\n        if (this._navcreateedTileMaps.has(tileIndex)) {\n            NavigationUtils._findFllowPath(this, filter, startPos, endPos, speed * 0.1, 0.01, fllowPaths);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    _findDistanceToWall(pos, filter = null) {\n        if (!filter)\n            filter = this._defatfilter;\n        let posref = this._navQuery.findNearestPoly(pos.toArray(), this.extents, filter);\n        let data = this._navQuery.findDistanceToWall(posref, filter, 100);\n        if (NavigationUtils._statusSucceed(data.Status))\n            return data;\n        else\n            return null;\n    }\n    _requestMoveTarget(agent, destination) {\n        agent._getpos(tempVec3);\n        let tileIndex = this._grid.getTileIndexByPos(tempVec3.x, tempVec3.z);\n        if (this._navcreateedTileMaps.has(tileIndex)) {\n            let refPoint = this._navQuery.findNearestPoly(destination.toArray(), this._extents, agent._filter);\n            this.crowd.requestMoveTarget(agent._agentId, refPoint);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    _creatNavMesh() {\n        this._navMesh = NavigationUtils._createNavMesh();\n        this._navQuery = NavigationUtils._createNavMeshQuery();\n        this._crowd = NavigationUtils._createCrowd();\n        this._navMeshLink = NavigationUtils._createMeshOffLink();\n        this._navConvexVolume = NavigationUtils._createConvexVolume();\n        let surface = this._surface;\n        let manager = surface._manager;\n        for (var i = 0; i < CROW_MAX_FILTER; i++) {\n            manager.setFilterCost(this._crowd.getFilter(i));\n        }\n        this._defatfilter = this._getFilter(manager._deflatAllMask);\n        this._navConvexVolume.setIs3D(this._is3D);\n    }\n    _navMeshInit() {\n        let config = this._grid.config;\n        let min = this._grid.min;\n        let max = this._grid.max;\n        this._navMesh.init(min.toArray(), max.toArray(), config.cellSize, config.tileSize);\n        this._navQuery.init(this._navMesh, 2048);\n        this._crowd.init(this._maxAgents, config.agentRadius, this.navMesh);\n    }\n    _updateNavMesh(dt) {\n        let datas = NavigationUtils._updateCrowd(this._crowd, dt);\n        this._allAgents.forEach((agent, index) => {\n            let off = agent._agentId * 6;\n            let pos = [datas[off], datas[off + 1], datas[off + 2]];\n            let vel = [datas[off + 3], datas[off + 4], datas[off + 5]];\n            agent._updateNavMesh(pos, vel);\n        });\n    }\n    _addNavMeshLink(index, start, end, width, bidirectional, areaFlag) {\n        this._navMeshLink.addOffMeshConnection(index, start.toArray(), end.toArray(), width, bidirectional ? 1 : 0, areaFlag);\n    }\n    _removeNavMeshLink(index) {\n        this._navMeshLink.deleteOffMeshConnection(index);\n    }\n    _updateConvexVolume(index, buffer, miny, maxy, areaType) {\n        this._navConvexVolume.addCovexVoume(index, buffer, miny, maxy, areaType);\n        return true;\n    }\n    _deleteConvexVoume(index) {\n        if (index < 0)\n            return false;\n        this._navConvexVolume.deleteCovexVoume(index);\n        return true;\n    }\n    _addTile(cache, binds, partitionType, maxSimplificationError) {\n        if (binds.length <= 0)\n            return;\n        const config = this._grid.config;\n        this._titileConfig.partitionType = partitionType;\n        this._titileConfig._setAgent(config.agentHeight, config.agentRadius, config.agentMaxClimb);\n        this._titileConfig._setOff(cache.x, cache.y);\n        this._titileConfig._setMin(cache.boundMin);\n        this._titileConfig._setMax(cache.boundMax);\n        this._titileConfig.maxSimplificationError = maxSimplificationError;\n        this._removeTile(cache.x, cache.y);\n        let ptrs = [];\n        binds.forEach((value) => {\n            ptrs.push(value.$$.ptr);\n        });\n        this._navMesh.addTile(config, this._titileConfig, ptrs, this._navMeshLink, this._navConvexVolume);\n        const tileIndex = this._grid.getTileIndex(cache.x, cache.y);\n        this._navcreateedTileMaps.add(tileIndex);\n        if (this._delayCreates.has(tileIndex)) {\n            const delaylists = this._delayCreates.get(tileIndex);\n            delaylists.forEach((nav) => {\n                this._createAgents(nav);\n            });\n            this._delayCreates.delete(tileIndex);\n        }\n    }\n    _removeTile(tileX, tileY) {\n        this._navMesh.removeTile(tileX, tileY);\n        this._navcreateedTileMaps.delete(this._grid.getTileIndex(tileX, tileY));\n    }\n    _clearn() {\n        this._allAgents.forEach((agent) => {\n            this._removeAgent(agent);\n        });\n        this._allAgents.clear();\n    }\n    _destroy() {\n        if (this._navMesh) {\n            NavigationUtils._freeNavMesh(this._navMesh);\n            this._navMesh = null;\n        }\n        if (this._navQuery) {\n            NavigationUtils._freeNavMeshQuery(this._navQuery);\n            this._navQuery = null;\n        }\n        if (this._navMeshLink) {\n            NavigationUtils._free(this._navMeshLink);\n            this._navMeshLink = null;\n        }\n        if (this._navConvexVolume) {\n            NavigationUtils._free(this._navConvexVolume);\n            this._navConvexVolume = null;\n        }\n        if (this._crowd) {\n            NavigationUtils._freeCrowd(this._crowd);\n            this._crowd = null;\n        }\n    }\n}\n","export class RecastConfig {\n    set cellSize(value) {\n        this._cellSize = value;\n        this._dirtyFlag++;\n    }\n    get cellSize() {\n        return this._cellSize;\n    }\n    constructor() {\n        this._dirtyFlag = 0;\n        this._cellSize = 0.2;\n        this.cellHeight = 0.3;\n        this.agentMaxSlope = 45;\n        this.agentHeight = 2;\n        this.agentMaxClimb = 0.3;\n        this.agentRadius = 0.2;\n        this.tileSize = 32;\n    }\n    clone() {\n        let data = new RecastConfig();\n        this.cloneTo(data);\n        return data;\n    }\n    cloneTo(destObject) {\n        destObject.agentName = this.agentName;\n        destObject.cellSize = this.cellSize;\n        destObject.cellHeight = this.cellHeight;\n        destObject.agentMaxSlope = this.agentMaxSlope;\n        destObject.agentHeight = this.agentHeight;\n        destObject.agentMaxClimb = this.agentMaxClimb;\n        destObject.agentRadius = this.agentRadius;\n        destObject.tileSize = this.tileSize;\n    }\n}\n","export var PartitionType;\n(function (PartitionType) {\n    PartitionType[PartitionType[\"PARTITION_WATERSHED\"] = 0] = \"PARTITION_WATERSHED\";\n    PartitionType[PartitionType[\"PARTITION_MONOTONE\"] = 1] = \"PARTITION_MONOTONE\";\n    PartitionType[PartitionType[\"PARTITION_LAYERS\"] = 2] = \"PARTITION_LAYERS\";\n})(PartitionType || (PartitionType = {}));\n;\nexport var UpdateFlags;\n(function (UpdateFlags) {\n    UpdateFlags[UpdateFlags[\"DT_CROWD_ANTICIPATE_TURNS\"] = 1] = \"DT_CROWD_ANTICIPATE_TURNS\";\n    UpdateFlags[UpdateFlags[\"DT_CROWD_OBSTACLE_AVOIDANCE\"] = 2] = \"DT_CROWD_OBSTACLE_AVOIDANCE\";\n    UpdateFlags[UpdateFlags[\"DT_CROWD_SEPARATION\"] = 4] = \"DT_CROWD_SEPARATION\";\n    UpdateFlags[UpdateFlags[\"DT_CROWD_OPTIMIZE_VIS\"] = 8] = \"DT_CROWD_OPTIMIZE_VIS\";\n    UpdateFlags[UpdateFlags[\"DT_CROWD_OPTIMIZE_TOPO\"] = 16] = \"DT_CROWD_OPTIMIZE_TOPO\";\n})(UpdateFlags || (UpdateFlags = {}));\n;\nexport var CrowdAgentState;\n(function (CrowdAgentState) {\n    CrowdAgentState[CrowdAgentState[\"DT_CROWDAGENT_STATE_INVALID\"] = 0] = \"DT_CROWDAGENT_STATE_INVALID\";\n    CrowdAgentState[CrowdAgentState[\"DT_CROWDAGENT_STATE_WALKING\"] = 1] = \"DT_CROWDAGENT_STATE_WALKING\";\n    CrowdAgentState[CrowdAgentState[\"DT_CROWDAGENT_STATE_OFFMESH\"] = 2] = \"DT_CROWDAGENT_STATE_OFFMESH\";\n})(CrowdAgentState || (CrowdAgentState = {}));\n;\nexport var ObstacleAvoidanceType;\n(function (ObstacleAvoidanceType) {\n    ObstacleAvoidanceType[ObstacleAvoidanceType[\"NoObstacle\"] = 0] = \"NoObstacle\";\n    ObstacleAvoidanceType[ObstacleAvoidanceType[\"LowQuality\"] = 1] = \"LowQuality\";\n    ObstacleAvoidanceType[ObstacleAvoidanceType[\"MedQuality\"] = 2] = \"MedQuality\";\n    ObstacleAvoidanceType[ObstacleAvoidanceType[\"GoodQuality\"] = 3] = \"GoodQuality\";\n    ObstacleAvoidanceType[ObstacleAvoidanceType[\"HighQuality\"] = 4] = \"HighQuality\";\n})(ObstacleAvoidanceType || (ObstacleAvoidanceType = {}));\nexport var NavigationConfig;\n(function (NavigationConfig) {\n    NavigationConfig[\"defaltAgentName\"] = \"humanoid\";\n    NavigationConfig[\"defaltUnWalk\"] = \"unwalk\";\n    NavigationConfig[\"defaltWalk\"] = \"walk\";\n    NavigationConfig[\"defaltJump\"] = \"jump\";\n})(NavigationConfig || (NavigationConfig = {}));\nexport class NavAreaFlag {\n    get flag() {\n        return 1 << this.index;\n    }\n}\n","import { Vector3 } from \"../../maths/Vector3\";\nimport { Byte } from \"../../utils/Byte\";\nimport { NavigationUtils } from \"./NavigationUtils\";\nconst readNavTileCache = function (byte, navData) {\n    navData._dirtyFlag = byte.getFloat32();\n    const min = navData._boundMin;\n    min.x = byte.getFloat32();\n    min.y = byte.getFloat32();\n    min.z = byte.getFloat32();\n    const max = navData._boundMax;\n    max.x = byte.getFloat32();\n    max.y = byte.getFloat32();\n    max.z = byte.getFloat32();\n    let navCount = byte.readUint16();\n    for (var i = 0; i < navCount; i++) {\n        let nav = navData._oriTiles[i] = new NavTileCache();\n        const min = nav._boundMin;\n        min.x = byte.getFloat32();\n        min.y = byte.getFloat32();\n        min.z = byte.getFloat32();\n        const max = nav._boundMax;\n        max.x = byte.getFloat32();\n        max.y = byte.getFloat32();\n        max.z = byte.getFloat32();\n        nav.x = byte.readUint16();\n        nav.y = byte.readUint16();\n        let vertStart = byte.readUint32();\n        let vertCount = byte.readUint32();\n        let indexStart = byte.readUint32();\n        let indexCount = byte.readUint32();\n        let flagStart = byte.readUint32();\n        let flagCount = byte.readUint32();\n        byte.pos = vertStart;\n        nav.triVertex = new Float32Array(byte.readArrayBuffer(vertCount));\n        byte.pos = indexStart;\n        nav.triIndex = new Uint32Array(byte.readArrayBuffer(indexCount));\n        byte.pos = flagStart;\n        nav.triFlag = new Uint8Array(byte.readArrayBuffer(flagCount));\n    }\n};\nexport class NavTileCache {\n    constructor() {\n        this._bindData = NavigationUtils._createdtNavTileData();\n        this._boundMax = new Vector3();\n        this._boundMin = new Vector3();\n        this.x = this.y = 0;\n    }\n    set triVertex(data) {\n        this._triVertex = data;\n        this._bindData.setTriVertex(data);\n    }\n    get triVertex() {\n        return this._triVertex;\n    }\n    set triIndex(data) {\n        this._triIndex = data;\n        this._bindData.setTriIndex(data);\n    }\n    get triIndex() {\n        return this._triIndex;\n    }\n    set triFlag(data) {\n        this._triFlag = data;\n        this._bindData.setTriFlag(data);\n    }\n    get triFlag() {\n        return this._triFlag;\n    }\n    get boundMin() {\n        return this._boundMin;\n    }\n    get boundMax() {\n        return this._boundMax;\n    }\n    get bindData() {\n        return this._bindData;\n    }\n    destroy() {\n        if (this._bindData) {\n            NavigationUtils._free(this._bindData);\n            this._bindData = null;\n        }\n    }\n}\nexport class NavTileData {\n    constructor(res) {\n        this._dirtyFlag = 0;\n        this._boundMax = new Vector3();\n        this._boundMin = new Vector3();\n        this._res = res;\n        this._oriTiles = [];\n        this._parse();\n    }\n    _parse() {\n        var readData = new Byte(this._res.data);\n        readData.pos = 0;\n        var version = readData.readUTFString();\n        switch (version) {\n            case \"LAYANAV:0101\":\n                readNavTileCache(readData, this);\n                break;\n        }\n    }\n    get dirtyFlag() {\n        return this._dirtyFlag;\n    }\n    getNavData(index) {\n        return this._oriTiles[index];\n    }\n    get length() {\n        return this._oriTiles.length;\n    }\n    destroy() {\n        this._oriTiles.forEach(element => {\n            element.destroy();\n        });\n        this._oriTiles = null;\n        this._res = null;\n    }\n}\n","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nconst helpTempSet = new Set();\nexport class CacheData {\n    constructor(surface) {\n        this._cacheflag = 0;\n        this._transfrom = new Matrix4x4();\n        this._min = new Vector3();\n        this._max = new Vector3();\n        this._surface = surface;\n        this._titleIndex = new Set();\n    }\n    _setUpdateDataHander(handler) {\n        this._flagChangeHander = handler;\n    }\n    _setTileHander(handler) {\n        this._tileHander = handler;\n    }\n    _updateTransfrom(mat) {\n        if (mat.equalsOtherMatrix(this._transfrom))\n            return;\n        mat.cloneTo(this._transfrom);\n        this._setCacheFlag(CacheData.TransfromFlag);\n    }\n    _updateAreaFlag(flag) {\n        if (this._areaFlag == flag)\n            return;\n        this._areaFlag = flag;\n        this._setCacheFlag(CacheData.AreaFlag);\n    }\n    get areaFlag() {\n        return this._areaFlag;\n    }\n    _cacheBound(min, max) {\n        if (!Vector3.equals(this._min, min)) {\n            min.cloneTo(this._min);\n            this._setCacheFlag(CacheData.MinFlag);\n        }\n        if (!Vector3.equals(this._max, max)) {\n            max.cloneTo(this._max);\n            this._setCacheFlag(CacheData.MaxFlag);\n        }\n    }\n    set _cacheData(data) {\n        if (this._data == data)\n            return;\n        this._data = data;\n        this._setCacheFlag(CacheData.DataFlag);\n    }\n    get _cacheData() {\n        return this._data;\n    }\n    _destroy() {\n        this._setCacheFlag(CacheData.DeleteFlag);\n    }\n    _setCacheFlag(type) {\n        this._cacheflag |= type;\n        this._surface._delayCacheMap.add(this);\n    }\n    _getCacheFlag(type) {\n        return (this._cacheflag & type) != 0;\n    }\n    _updateCache() {\n        if (this._cacheflag == 0)\n            return;\n        this._titleIndex.forEach((index) => {\n            this._surface._buildTileList.add(index);\n        });\n        if (this._getCacheFlag(CacheData.DeleteFlag)) {\n            this._cacheflag = 0;\n            return;\n        }\n        let flags = this._surface._manager.getArea(this._areaFlag);\n        if (this._flagChangeHander)\n            this._flagChangeHander.runWith([this, flags.index]);\n        helpTempSet.clear();\n        let index = this._surface._navMesh.navTileGrid.getBoundTileIndex(this._min, this._max, false);\n        index.forEach((index) => {\n            helpTempSet.add(index);\n            this._surface._buildTileList.add(index);\n        });\n        if (this._tileHander)\n            this._tileHander.runWith([this, this._titleIndex, helpTempSet]);\n        this._titleIndex.clear();\n        helpTempSet.forEach((index) => {\n            this._titleIndex.add(index);\n        });\n        this._cacheflag = 0;\n    }\n    _resetData() {\n        this._titleIndex.clear();\n        this._setCacheFlag(CacheData.ResetDataFlag);\n    }\n}\nCacheData.TransfromFlag = 1;\nCacheData.AreaFlag = 2;\nCacheData.MinFlag = 4;\nCacheData.MaxFlag = 8;\nCacheData.DataFlag = 16;\nCacheData.DeleteFlag = 32;\nCacheData.OtherDataFlag = 64;\nCacheData.ResetDataFlag = 128;\n","export class ItemMapId {\n    constructor(maxCount) {\n        this._idMap = new Map();\n        this._idArray = new Array();\n        for (var i = 0; i < maxCount; i++) {\n            this._idArray.push(i);\n        }\n    }\n    haveId() {\n        return this._idArray.length > 0;\n    }\n    getId(value) {\n        if (this._idMap.has(value)) {\n            return this._idMap.get(value);\n        }\n        if (this._idArray.length > 0) {\n            let id = this._idArray.shift();\n            this._idMap.set(value, id);\n            return id;\n        }\n        return -1;\n    }\n    removeItem(value) {\n        if (this._idMap.has(value)) {\n            let id = this._idMap.get(value);\n            this._idArray.push(id);\n            this._idMap.delete(value);\n            this._idArray.sort((a, b) => { return a - b; });\n            return id;\n        }\n        else {\n            return -1;\n        }\n    }\n}\n","import { Component } from \"../../../components/Component\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { NavTileData } from \"../NavTileData\";\nimport { NavigationConfig, PartitionType } from \"../NavigationConfig\";\nimport { NavigationUtils } from \"../NavigationUtils\";\nimport { CacheData } from \"../data/CacheData\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { ItemMapId } from \"../ItemMapId\";\nexport class BaseNavMeshSurface extends Component {\n    set agentType(value) {\n        if (this._agentType == value)\n            return;\n        this._agentType = value;\n        if (this._oriTiles == null)\n            return;\n        let tileCount = this._oriTiles.length;\n        for (var i = 0; i < tileCount; i++) {\n            this._buildTileList.add(i);\n        }\n    }\n    get agentType() {\n        return this._agentType;\n    }\n    set areaFlag(value) {\n        this._cachedata._updateAreaFlag(value);\n    }\n    get areaFlag() {\n        return this._cachedata.areaFlag;\n    }\n    set asyn(value) {\n        this._needAsyn = value;\n    }\n    get asyn() {\n        return this._needAsyn;\n    }\n    set partitionType(value) {\n        this._partitionType = value;\n    }\n    get partitionType() {\n        return this._partitionType;\n    }\n    get min() {\n        return this._boundMin;\n    }\n    get max() {\n        return this._boundMax;\n    }\n    set datas(value) {\n        this._datas = value;\n        this._updateNavData();\n    }\n    get datas() {\n        return this._datas;\n    }\n    set maxSimplificationError(value) {\n        if (this._maxSimplificationError == value)\n            return;\n        this._maxSimplificationError = value;\n        this._cachedata._setCacheFlag(CacheData.OtherDataFlag);\n    }\n    get maxSimplificationError() {\n        return this._maxSimplificationError;\n    }\n    constructor() {\n        super();\n        this._maxSimplificationError = 0.9;\n        this._agentType = NavigationConfig.defaltAgentName;\n        this._boundMin = new Vector3();\n        this._boundMax = new Vector3();\n        this._needAsyn = false;\n        this.runInEditor = true;\n        this._singleton = false;\n        this._delayCacheMap = new Set();\n        this._buildTileList = new Set();\n        this._featureCache = new Map();\n        this._partitionType = PartitionType.PARTITION_WATERSHED;\n        this._cachedata = this._createCacheData();\n        this._cachedata._setUpdateDataHander(new Handler(this, this._updateOrigTileCache, undefined, false));\n        this._cachedata._cacheData = [];\n        this._cacheDataMap = new Map();\n        this._meshlinkOffMaps = new ItemMapId(256);\n        this._meshVolumeMaps = new ItemMapId(256);\n    }\n    cleanAllTile() {\n        if (!this._oriTiles)\n            return;\n        for (var i = 0, n = this._oriTiles.length; i < n; i++) {\n            let tile = this._oriTiles.getNavData(i);\n            this._navMesh._removeTile(tile.x, tile.y);\n        }\n    }\n    rebuildTile(pos) {\n        let index = this._navMesh.navTileGrid.getTileIndexByPos(pos.x, pos.z);\n        this._buildTileList.add(index);\n    }\n    getPolyFlags(pos, fiter = null) {\n        if (this._navMesh == null)\n            return -1;\n        return this._navMesh._getPolyFlags(pos, fiter);\n    }\n    findNearestPoly(pos, fiter = null, out) {\n        if (this._navMesh == null)\n            return null;\n        return this._navMesh._findNearestPoly(pos, fiter, out);\n    }\n    findFllowPath(outPaths, startPos, endPos, speed, filter = null) {\n        if (this._navMesh == null)\n            return false;\n        return this._navMesh._findFllowPath(outPaths, startPos, endPos, speed, filter);\n    }\n    findDistanceToWall(pos, filter) {\n        if (this._navMesh == null)\n            return null;\n        return this._navMesh._findDistanceToWall(pos, filter);\n    }\n    _updateOrigTileCache(cache, areaflags) {\n        if (!cache._getCacheFlag(CacheData.AreaFlag))\n            return;\n        let datas = cache._cacheData;\n        let tileCount = datas.length;\n        if (cache._getCacheFlag(CacheData.DataFlag | CacheData.AreaFlag)) {\n            for (var i = 0; i < tileCount; i++) {\n                datas[i].setFlag(areaflags);\n            }\n        }\n    }\n    _createCacheData() {\n        return new CacheData(this);\n    }\n    _getCahceData(data) {\n        let cacheData = this._cacheDataMap.get(data);\n        if (cacheData == null) {\n            cacheData = this._createCacheData();\n            this._cacheDataMap.set(data, cacheData);\n        }\n        return cacheData;\n    }\n    _removeCacheData(data) {\n        let cacheData = this._cacheDataMap.get(data);\n        if (cacheData == null)\n            return null;\n        this._cacheDataMap.delete(data);\n        cacheData._destroy();\n        this._navMesh._deleteConvexVoume(cacheData.id);\n        return cacheData;\n    }\n    _crateNavMesh(config, min, max) {\n        throw new Error(\"BaseNavMeshSurface: must override this function\");\n    }\n    _updateNavData() {\n        this._featureCache.clear();\n        this._cleanBindData();\n        if (this._navMesh)\n            this._navMesh._clearn();\n        if (this._datas) {\n            this._oriTiles = new NavTileData(this._datas);\n            if (this._navMesh) {\n                this._navMesh.navTileGrid._refeashBound(this._oriTiles);\n                this._navMesh._navMeshInit();\n            }\n            let bindDatas = [];\n            for (var i = 0, n = this._oriTiles.length; i < n; i++) {\n                let bindData = NavigationUtils._createdtNavTileCache();\n                bindData.init(this._oriTiles.getNavData(i).bindData);\n                this._featureCache.set(i, new Set([bindData]));\n                bindDatas.push(bindData);\n            }\n            this._cachedata._cacheBound(this._oriTiles._boundMin, this._oriTiles._boundMax);\n            this._cachedata._cacheData = bindDatas;\n            this._cacheDataMap.forEach((value) => { value._resetData(); });\n        }\n        else {\n            this._oriTiles = null;\n            this._buildTileList.clear();\n        }\n    }\n    _getManager() {\n        throw new Error(\"BaseNavMeshSurface: must override this function\");\n    }\n    _onEnable() {\n        this._manager = this._getManager();\n        if (!this._navMesh) {\n            this._navMesh = this._crateNavMesh(this._manager.getNavConfig(this._agentType), this._boundMin, this._boundMax);\n            if (this._oriTiles) {\n                this._navMesh.navTileGrid._refeashBound(this._oriTiles);\n                this._navMesh._navMeshInit();\n            }\n        }\n        this._manager.regNavMeshSurface(this);\n    }\n    _update(dt) {\n        if (this._oriTiles == null)\n            return;\n        this._delayCacheMap.forEach((value) => { value._updateCache(); });\n        this._delayCacheMap.clear();\n        if (this._needAsyn) {\n            this._buildOneTileMesh();\n        }\n        else {\n            this._buildAllTileMesh();\n        }\n        if (dt > 0)\n            this._navMesh._updateNavMesh(dt);\n    }\n    _buildOneTileMesh() {\n        if (this._buildTileList.size == 0)\n            return;\n        const setIter = this._buildTileList.keys();\n        let tileIndex = setIter.next().value;\n        let oritile = this._oriTiles.getNavData(tileIndex);\n        var featureCache = this._featureCache.get(tileIndex);\n        this._navMesh._addTile(oritile, [...featureCache], this._partitionType, this._maxSimplificationError);\n        this._buildTileList.delete(tileIndex);\n    }\n    _buildAllTileMesh() {\n        while (this._buildTileList.size > 0) {\n            this._buildOneTileMesh();\n        }\n    }\n    _onDisable() {\n        this.cleanAllTile();\n        this._manager.removeNavMeshSurface(this);\n    }\n    _onDestroy() {\n        if (this._oriTiles)\n            this._oriTiles = null;\n    }\n    _cloneTo(dest) {\n        let surface = dest;\n        surface._agentType = this._agentType;\n        surface.areaFlag = this.areaFlag;\n        surface._partitionType = this._partitionType;\n        super._cloneTo(dest);\n    }\n    _cleanBindData() {\n        let bindDatas = this._cachedata._cacheData;\n        bindDatas.forEach((value) => {\n            NavigationUtils._freeLayaData(value);\n        });\n        this._cachedata._titleIndex.clear();\n        this._cachedata._cacheData = [];\n    }\n    _addModifileNavMesh(navModifile) {\n        return this._getCahceData(navModifile);\n    }\n    _removeModifileNavMesh(navModifile) {\n        this._removeCacheData(navModifile);\n    }\n    _addModifileLink(link) {\n        let cache = this._getCahceData(link);\n        let linkId = this._meshlinkOffMaps.getId(link);\n        if (linkId == -1) {\n            return null;\n        }\n        cache.id = linkId;\n        return cache;\n    }\n    _addConvexVoume(volume) {\n        let cache = this._getCahceData(volume);\n        let volumeId = this._meshVolumeMaps.getId(cache);\n        if (volumeId == -1) {\n            return null;\n        }\n        cache.id = volumeId;\n        return cache;\n    }\n    _deleteCovexVoume(volume) {\n        this._removeCacheData(volume);\n    }\n}\n","import { SingletonList } from \"../../utils/SingletonList\";\nimport { AreaMask } from \"./AreaMask\";\nimport { NavigationUtils } from \"./NavigationUtils\";\nimport { RecastConfig } from \"./RecastConfig\";\nimport { NavAreaFlag, NavigationConfig } from \"./NavigationConfig\";\nimport { BaseNavMeshSurface } from \"./component/BaseNavMeshSurface\";\nimport { Node } from \"../../display/Node\";\nexport class BaseNavigationManager {\n    static _initialize(callback) {\n        if (NavigationUtils._getRecast() != null) {\n            callback && callback();\n            return Promise.resolve();\n        }\n        else {\n            if (window.Recast) {\n                return window.Recast().then((Recast) => {\n                    NavigationUtils._initialize(Recast);\n                    callback && callback();\n                    return Promise.resolve();\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        }\n    }\n    static findNavMeshSurface(surfaces, sprite, agentFlags) {\n        let array = sprite.getComponents(BaseNavMeshSurface);\n        if (array && array.length > 0) {\n            array.forEach(element => {\n                (agentFlags.indexOf(element.agentType) >= 0) && surfaces.push(element);\n            });\n        }\n        let parat = sprite.parent;\n        if (parat && (parat instanceof Node)) {\n            BaseNavigationManager.findNavMeshSurface(surfaces, parat, agentFlags);\n        }\n    }\n    constructor(name) {\n        this._navConfigMap = new Map();\n        this._areaFlagMap = new Map();\n        this._naveMeshMaps = new Map();\n        this._naveMeshLinkMaps = new Map();\n        this.name = name;\n        this._deflatAllMask = new AreaMask();\n        this._init();\n    }\n    destroy() {\n    }\n    _init() {\n        let config = new RecastConfig();\n        config.agentName = NavigationConfig.defaltAgentName;\n        this.regNavConfig(config);\n        let area = new NavAreaFlag();\n        area.name = NavigationConfig.defaltUnWalk;\n        area.cost = 1;\n        area.index = 0;\n        this.regArea(area);\n        area = new NavAreaFlag();\n        area.name = NavigationConfig.defaltWalk;\n        area.cost = 1;\n        area.index = 1;\n        this.regArea(area);\n        area = new NavAreaFlag();\n        area.name = NavigationConfig.defaltJump;\n        area.cost = 1;\n        area.index = 2;\n        this.regArea(area);\n        this._deflatAllMask._setAreaMap(this._areaFlagMap);\n        this._deflatAllMask.flag = 3;\n    }\n    _getLinkIdByNavMeshSurfaces(a, b) {\n        if (a.id < b.id) {\n            return a.id + \"_\" + b.id;\n        }\n        else {\n            return b.id + \"_\" + a.id;\n        }\n    }\n    Init(data) {\n        if (!data)\n            return;\n        const agents = data.agents;\n        if (agents) {\n            for (var i = 0, n = agents.length; i < n; i++) {\n                let agent = agents[i];\n                let config = this.getNavConfig(agent.agentName);\n                if (!config) {\n                    config = new RecastConfig();\n                    config.agentName = agent.agentName;\n                    this.regNavConfig(config);\n                }\n                config.cellSize = agent.cellSize;\n                config.cellHeight = agent.cellHeight;\n                config.agentMaxSlope = agent.agentMaxSlope;\n                config.agentHeight = agent.agentHeight;\n                config.agentRadius = agent.agentRadius;\n                config.agentMaxClimb = agent.agentMaxClimb;\n                config.tileSize = agent.tileSize;\n            }\n        }\n        const areas = data.areas;\n        if (areas) {\n            for (var i = 0, n = areas.length; i < n; i++) {\n                let area = this.getArea(areas[i].name);\n                if (!area) {\n                    area = new NavAreaFlag();\n                    area.name = areas[i].name;\n                    this.regArea(area);\n                }\n                area.index = areas[i].index;\n                area.cost = areas[i].cost;\n            }\n            let flag = 0;\n            this._areaFlagMap.forEach((value, key) => {\n                flag = flag | value.flag;\n            });\n            this._deflatAllMask.flag = flag;\n        }\n    }\n    setFilterCost(filer) {\n        this._areaFlagMap.forEach((value) => {\n            filer.setAreaCost(value.flag, value.cost);\n        });\n    }\n    update(dt) {\n        let delta = Math.min(dt, 0.3);\n        this._naveMeshMaps.forEach((lists) => {\n            for (var i = 0, n = lists.length; i < n; i++) {\n                lists.elements[i]._update(delta);\n            }\n        });\n    }\n    regNavConfig(config) {\n        this._navConfigMap.set(config.agentName, config);\n    }\n    getNavConfig(type) {\n        return this._navConfigMap.get(type);\n    }\n    regArea(area) {\n        this._areaFlagMap.set(area.name, area);\n    }\n    getArea(type) {\n        return this._areaFlagMap.get(type);\n    }\n    getAreaFlagMap() {\n        return this._areaFlagMap;\n    }\n    regNavMeshLink(start, end, link) {\n        if (start == end)\n            return;\n        if (start.agentType != end.agentType)\n            return;\n        let key = this._getLinkIdByNavMeshSurfaces(start, end);\n        if (!this._naveMeshLinkMaps.has(key)) {\n            this._naveMeshLinkMaps.set(key, Array());\n        }\n        this._naveMeshLinkMaps.get(key).push(link);\n    }\n    removeMeshLink(start, end, link) {\n        if (start == end)\n            return;\n        if (start.agentType != end.agentType)\n            return;\n        let key = this._getLinkIdByNavMeshSurfaces(start, end);\n        if (!this._naveMeshLinkMaps.has(key)) {\n            return;\n        }\n        let links = this._naveMeshLinkMaps.get(key);\n        let index = links.indexOf(link);\n        if (index >= 0) {\n            links.splice(index, 1);\n        }\n    }\n    getNavMeshLink(from, to) {\n        let key = this._getLinkIdByNavMeshSurfaces(from, to);\n        if (!this._naveMeshLinkMaps.has(key)) {\n            return null;\n        }\n        return this._naveMeshLinkMaps.get(key);\n    }\n    regNavMeshSurface(nav) {\n        if (!nav) {\n            console.error(\"cannot regist empyt NavMeshSurface.\");\n            return;\n        }\n        const agentType = nav.agentType;\n        let surfaces = this._naveMeshMaps.get(agentType);\n        if (surfaces == null) {\n            surfaces = new SingletonList();\n            this._naveMeshMaps.set(agentType, surfaces);\n        }\n        surfaces.add(nav);\n    }\n    removeNavMeshSurface(nav) {\n        if (!nav) {\n            console.error(\"cannot remove empyt NavMeshSurface.\");\n            return;\n        }\n        const agentType = nav.agentType;\n        let surfaces = this._naveMeshMaps.get(agentType);\n        if (surfaces == null) {\n            return;\n        }\n        surfaces.remove(nav);\n    }\n    getNavMeshSurface(pos, agentType) {\n        if (!this._naveMeshMaps.has(agentType))\n            return null;\n        let surfaces = this._naveMeshMaps.get(agentType);\n        for (var i = 0, n = surfaces.length; i < n; i++) {\n            let nav = surfaces.elements[i];\n            if (NavigationUtils._boundContentPoint(nav.min, nav.max, pos)) {\n                return surfaces.elements[i];\n            }\n        }\n        return null;\n    }\n    getNavMeshSurfaces(pos) {\n        var surfaces = [];\n        this._naveMeshMaps.forEach((datas) => {\n            for (var i = 0, n = datas.length; i < n; i++) {\n                let nav = datas.elements[i];\n                if (NavigationUtils._boundContentPoint(nav.min, nav.max, pos)) {\n                    surfaces.push(datas.elements[i]);\n                }\n            }\n        });\n        return surfaces;\n    }\n    getNavMeshSurfacesByBound(min, max, type) {\n        var surfaces = [];\n        this._naveMeshMaps.forEach((datas) => {\n            for (var i = 0, n = datas.length; i < n; i++) {\n                let nav = datas.elements[i];\n                if (nav.agentType != type)\n                    continue;\n                if (NavigationUtils._boundInterection(nav.min, nav.max, min, max) >= 0) {\n                    surfaces.push(datas.elements[i]);\n                }\n            }\n        });\n        return surfaces;\n    }\n}\n","import { ClassUtils } from \"../../utils/ClassUtils\";\nimport { AreaMask } from \"./AreaMask\";\nimport { NavigationUtils } from \"./NavigationUtils\";\nimport { NavMeshGrid } from \"./NavMeshGrid\";\nimport { RecastConfig } from \"./RecastConfig\";\nlet c = ClassUtils.regClass;\nc(\"NavMeshGrid\", NavMeshGrid);\nc(\"RecastConfig\", RecastConfig);\nc(\"NavigationUtils\", NavigationUtils);\nc(\"AreaMask\", AreaMask);\n","import { Laya } from \"../../../Laya\";\nimport { Vector3 } from \"../../maths/Vector3\";\nexport class NavAgentLinkAnim {\n    constructor() {\n        this._startPos = new Vector3();\n        this._endPos = new Vector3();\n        this._initPos = new Vector3();\n        this._active = false;\n    }\n    _clearn() {\n        this._active = false;\n        this._isStart = false;\n        this._runTime = 0;\n    }\n    _setStartPos(value) {\n        value.cloneTo(this._startPos);\n    }\n    _getSartPos() {\n        return this._startPos;\n    }\n    _setEndPos(value) {\n        value.cloneTo(this._endPos);\n    }\n    _getEndPos() {\n        return this._endPos;\n    }\n    _nearerStartPos(value) {\n        return Vector3.distance(this._startPos, value) < 0.2;\n    }\n    _nearerEndPos(value) {\n        return Vector3.distance(this._endPos, value) < 0.1;\n    }\n    _start(maxSpeed, postions) {\n        this._isStart = true;\n        this._runTime = 0;\n        this._totalTime = Vector3.distance(this._startPos, this._endPos) / maxSpeed;\n        postions.cloneTo(this._initPos);\n    }\n    _update(position, dir) {\n        if (!this._isStart)\n            return;\n        this._runTime += Laya.timer.delta * 0.001;\n        const ta = this._totalTime * 0.05;\n        if (this._runTime < ta) {\n            const t = this._tween(this._runTime, 0, ta);\n            Vector3.lerp(this._initPos, this._startPos, t, position);\n        }\n        else {\n            const t = this._tween(this._runTime, ta, this._totalTime);\n            Vector3.lerp(this._startPos, this._endPos, t, position);\n        }\n        Vector3.subtract(this._endPos, this._startPos, dir);\n        dir.y = 0;\n        Vector3.normalize(dir, dir);\n    }\n    _tween(t, t0, t1) {\n        let value = (t - t0) / (t1 - t0);\n        return Math.max(Math.min(1, value), 0);\n    }\n}\n","import { Component } from \"../../../components/Component\";\nimport { MathUtils3D } from \"../../../maths/MathUtils3D\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { AreaMask } from \"../AreaMask\";\nimport { NavAgentLinkAnim } from \"../NavAgentLinkAnim\";\nimport { CrowdAgentState, ObstacleAvoidanceType, UpdateFlags } from \"../NavigationConfig\";\nimport { NotImplementedError } from \"../../../utils/Error\";\nconst tempVector3 = new Vector3();\nconst tempVector31 = new Vector3();\nexport class BaseNavAgent extends Component {\n    set radius(value) {\n        this._radius = value;\n        if (this._crowAgent) {\n            let params = this._crowAgent.getparams();\n            const radius = this._getradius();\n            params.radius = radius;\n            params.collisionQueryRange = radius * 12;\n            params.pathOptimizationRange = radius * 30;\n        }\n    }\n    get radius() {\n        return this._radius;\n    }\n    set height(value) {\n        this._height = value;\n        if (this._crowAgent) {\n            this._crowAgent.getparams().height = this._getheight();\n        }\n    }\n    get height() {\n        return this._height;\n    }\n    set speed(value) {\n        this._speed = value;\n        if (this._crowAgent) {\n            this._crowAgent.getparams().maxSpeed = this._speed;\n        }\n    }\n    get speed() {\n        return this._speed;\n    }\n    set maxAcceleration(value) {\n        this._maxAcceleration = value;\n        if (this._crowAgent) {\n            this._crowAgent.getparams().maxAcceleration = this._speed;\n        }\n    }\n    get maxAcceleration() {\n        return this._maxAcceleration;\n    }\n    set angularSpeed(value) {\n        this._angularSpeed = value;\n    }\n    get angularSpeed() {\n        return this._angularSpeed;\n    }\n    set quality(value) {\n        if (this._quality == value)\n            return;\n        this._quality = value;\n        if (this._crowAgent) {\n            let params = this._crowAgent.getparams();\n            params.updateFlags = this._getUpdateFlags();\n            params.obstacleAvoidanceType = this._quality;\n        }\n    }\n    get quality() {\n        return this._quality;\n    }\n    set priority(value) {\n        if (this._priority == value)\n            return;\n        this._priority = value;\n        if (this._crowAgent) {\n            let params = this._crowAgent.getparams();\n            params.updateFlags = this._getUpdateFlags();\n            params.separationWeight = this._priority;\n        }\n    }\n    get priority() {\n        return this._priority;\n    }\n    get isOnNavMesh() {\n        return this._crowAgent != null;\n    }\n    get isOnOffMeshLink() {\n        if (!this.isOnNavMesh)\n            return this._navAgentLinkAnim._active;\n        return this._crowAgent.state == CrowdAgentState.DT_CROWDAGENT_STATE_OFFMESH;\n    }\n    set agentType(value) {\n        if (value == this._agentType)\n            return;\n        this._agentType = value;\n        if (this._crowAgent) {\n            this._removeAgent();\n            this._addAgent();\n        }\n    }\n    get agentType() {\n        return this._agentType;\n    }\n    set areaMask(value) {\n        this._areaMask.flag = value;\n    }\n    get areaMask() {\n        return this._areaMask.flag;\n    }\n    constructor() {\n        super();\n        this._targetPos = new Vector3();\n        this._agentType = null;\n        this._speed = 3.5;\n        this._maxAcceleration = 10;\n        this._angularSpeed = 120;\n        this._radius = 0.5;\n        this._height = 2;\n        this._quality = ObstacleAvoidanceType.MedQuality;\n        this._priority = 0;\n        this._baseOffset = 1;\n        this._navAgentLinkAnim = new NavAgentLinkAnim();\n        this._areaMask = new AreaMask();\n        this._curentSpeed = new Vector3();\n    }\n    onUpdate() {\n        if (this._crowAgent != null)\n            return;\n        if (!this._navAgentLinkAnim._active)\n            return;\n        let position = tempVector3;\n        let dir = tempVector31;\n        this._navAgentLinkAnim._update(position, dir);\n        if (this._navAgentLinkAnim._nearerEndPos(position)) {\n            this._addAgent();\n            this._navAgentLinkAnim._clearn();\n            this._setTarget(this._targetPos);\n        }\n        this._updatePosition(position, dir);\n    }\n    isStop() {\n        return MathUtils3D.isZero(this._curentSpeed.length());\n    }\n    getCurrentPath() {\n        if (!this._currentNaveSurface) {\n            this._fllowPath.length = 0;\n        }\n        else {\n            this._getpos(tempVector3);\n            this._currentNaveSurface.findFllowPath(this._fllowPath, tempVector3, this._targetPos, this._speed, this._filter);\n        }\n        return this._fllowPath;\n    }\n    findDistanceToWall() {\n        if (this._crowAgent) {\n            this._getpos(tempVector3);\n            return this._currentNaveSurface.findDistanceToWall(tempVector3, this._filter);\n        }\n        else {\n            return null;\n        }\n    }\n    _setTarget(value) {\n        value.cloneTo(this._targetPos);\n        if (!this._navManager)\n            return;\n        if (this._currentNaveSurface == null || !this._currentNaveSurface.enabled)\n            return;\n        let targetSurface = this._navManager.getNavMeshSurface(value, this._agentType);\n        if (targetSurface == this._currentNaveSurface) {\n            this._currentNaveSurface._navMesh._requestMoveTarget(this, this._targetPos);\n            return;\n        }\n        let linkes = this._navManager.getNavMeshLink(this._currentNaveSurface, targetSurface);\n        if (linkes == null)\n            return;\n        let link = null;\n        let distance = Number.MAX_VALUE;\n        let isstart;\n        linkes.forEach((value) => {\n            if (value._startNavSurfaces.indexOf(this._currentNaveSurface) >= 0) {\n                let dis = value.getDistance();\n                if (dis < distance) {\n                    dis = distance;\n                    link = value;\n                    isstart = true;\n                }\n            }\n            else if (value._endNavSurfaces.indexOf(this._currentNaveSurface) >= 0 && value._bidirectional) {\n                let dis = value.getDistance();\n                if (dis < distance) {\n                    dis = distance;\n                    link = value;\n                    isstart = false;\n                }\n            }\n        });\n        if (link == null) {\n            return;\n        }\n        this._navAgentLinkAnim.targetSurface = targetSurface;\n        this._navAgentLinkAnim._active = true;\n        if (isstart) {\n            this._navAgentLinkAnim._setStartPos(link.globalStart);\n            this._navAgentLinkAnim._setEndPos(link.globalEnd);\n        }\n        else {\n            this._navAgentLinkAnim._setStartPos(link.globalEnd);\n            this._navAgentLinkAnim._setEndPos(link.globalStart);\n        }\n        let startPos = this._navAgentLinkAnim._getSartPos();\n        let refPoint = this._currentNaveSurface._navMesh._findNearestPoly(startPos, this._filter, startPos);\n        if (refPoint >= 0) {\n            this._currentNaveSurface._navMesh._requestMoveTarget(this, startPos);\n        }\n    }\n    _getpos(vec) {\n        throw new NotImplementedError();\n    }\n    _getcollisionQueryRange() {\n        return this.radius * 12;\n    }\n    _getpathOptimizationRange() {\n        return this.radius * 30;\n    }\n    _getManager() {\n        throw new Error(\"BaseNavMeshSurface: must override this function\");\n    }\n    _onEnable() {\n        super._onEnable();\n        this._fllowPath = [];\n        let manager = this._navManager = this._getManager();\n        this._areaMask._setAreaMap(manager.getAreaFlagMap());\n        this._addAgent();\n    }\n    _addAgent() {\n        if (this._navManager == null)\n            return;\n        this._getpos(tempVector3);\n        let surface = this._navManager.getNavMeshSurface(tempVector3, this._agentType);\n        if (surface == null) {\n            console.error(\"not get the NavMeshSurface in this position.\");\n            return;\n        }\n        this._currentNaveSurface = surface;\n        this._currentNaveSurface._navMesh._addAgent(this);\n    }\n    _removeAgent() {\n        if (this._currentNaveSurface == null || this._agentId == null || this._crowAgent == null)\n            return;\n        this._currentNaveSurface._navMesh._removeAgent(this);\n        this._currentNaveSurface = null;\n    }\n    _getheight() {\n        throw new NotImplementedError();\n    }\n    _getradius() {\n        throw new NotImplementedError();\n    }\n    _getUpdateFlags() {\n        let updateFlags = UpdateFlags.DT_CROWD_ANTICIPATE_TURNS | UpdateFlags.DT_CROWD_OPTIMIZE_VIS | UpdateFlags.DT_CROWD_OPTIMIZE_TOPO;\n        if (this._quality > 0) {\n            updateFlags |= UpdateFlags.DT_CROWD_OBSTACLE_AVOIDANCE;\n        }\n        if (this._priority > 0) {\n            updateFlags |= UpdateFlags.DT_CROWD_SEPARATION;\n        }\n        return updateFlags;\n    }\n    _onDestroy() {\n        super._onDestroy();\n        this._removeAgent();\n    }\n    _updateNavMesh(pos, dir) {\n        if (this._crowAgent == null)\n            return;\n        let position = tempVector3;\n        let direction = tempVector31;\n        position.fromArray(pos);\n        direction.fromArray(dir);\n        let isNearerStart = false;\n        if (this._navAgentLinkAnim._active) {\n            isNearerStart = this._navAgentLinkAnim._nearerStartPos(position);\n        }\n        if (isNearerStart) {\n            this._removeAgent();\n            this._navAgentLinkAnim._start(this._speed, position);\n        }\n        direction.cloneTo(this._curentSpeed);\n        this._updatePosition(position, direction);\n    }\n    _updatePosition(pos, dir) {\n        throw new NotImplementedError();\n    }\n    _cloneTo(dest) {\n        let agent = dest;\n        agent.agentType = this.agentType;\n        agent.speed = this._speed;\n        agent.angularSpeed = this.angularSpeed;\n        agent.radius = this.radius;\n        agent.height = this.height;\n        agent.areaMask = this.areaMask;\n        agent.quality = this.quality;\n        agent.priority = this.priority;\n        agent.maxAcceleration = this.maxAcceleration;\n        super._cloneTo(dest);\n    }\n}\n","import { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { CacheData } from \"./CacheData\";\nimport { NavigationConfig } from \"../NavigationConfig\";\nexport class BaseData {\n    constructor() {\n        this._transfrom = new Matrix4x4();\n        this._min = new Vector3();\n        this._max = new Vector3();\n        this._agentType = NavigationConfig.defaltAgentName;\n        this._areaFlags = NavigationConfig.defaltUnWalk;\n        this._cacheDatas = [];\n    }\n    set agentType(value) {\n        this._agentType = value;\n    }\n    get agentType() {\n        return this._agentType;\n    }\n    set areaFlag(value) {\n        this._areaFlags = value;\n        this._cacheDatas.forEach(element => {\n            element._updateAreaFlag(value);\n        });\n    }\n    get areaFlag() {\n        return this._areaFlags;\n    }\n    _refeashData() {\n        this._cacheDatas.forEach(element => {\n            element._setCacheFlag(CacheData.DataFlag);\n        });\n    }\n    _refeahTransfrom() {\n        this._cacheDatas.forEach(element => {\n            element._updateTransfrom(this._transfrom);\n        });\n    }\n    _refeahBound() {\n        this._cacheDatas.forEach(element => {\n            element._cacheBound(this._min, this._max);\n        });\n    }\n}\n","import { Vector3 } from \"../../../maths/Vector3\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { CacheData } from \"./CacheData\";\nimport { BaseData } from \"./BaseData\";\nimport { Matrix4x4 } from \"../../../maths/Matrix4x4\";\nimport { NavigationUtils } from \"../NavigationUtils\";\nconst tempVec3 = new Vector3();\nconst tempMat = new Matrix4x4();\nexport class ModifierVolumeData extends BaseData {\n    constructor(yOff = 0.1) {\n        super();\n        this._datas = [];\n        this._yOffset = 0.1;\n        this._yOffset = yOff;\n    }\n    _updateBuffer(cache, flag) {\n        let mesh = cache._surface._navMesh;\n        if (cache._getCacheFlag(CacheData.TransfromFlag) || cache._getCacheFlag(CacheData.DataFlag)) {\n            if (mesh.is3D) {\n                if (this._buffer == null) {\n                    this._buffer = new Float32Array(22);\n                }\n                this._max.setValue(1, 1, 1);\n                this._min.setValue(-1, -1, -1);\n                NavigationUtils._transfromBoundBox(this._min, this._max, this._transfrom, this._min, this._max);\n                this._buffer[0] = this._min.x;\n                this._buffer[1] = this._min.y;\n                this._buffer[2] = this._min.z;\n                this._buffer[3] = this._max.x;\n                this._buffer[4] = this._max.y;\n                this._buffer[5] = this._max.z;\n                this._transfrom.invert(tempMat);\n                this._buffer.set(tempMat.elements, 6);\n                cache._cacheBound(this._min, this._max);\n            }\n            else {\n                if (this._buffer == null || this._buffer.length != this._datas.length) {\n                    this._buffer = new Float32Array(this._datas.length);\n                }\n                let count = this._datas.length / 3;\n                this._max.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n                this._min.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n                for (var i = 0; i < count; i++) {\n                    tempVec3.setValue(this._datas[i * 3], this._datas[i * 3 + 1], this._datas[i * 3 + 2]);\n                    Vector3.transformCoordinate(tempVec3, this._transfrom, tempVec3);\n                    this._buffer[i * 3] = tempVec3.x;\n                    this._buffer[i * 3 + 1] = tempVec3.y;\n                    this._buffer[i * 3 + 2] = tempVec3.z;\n                    this._max.x = Math.max(this._max.x, tempVec3.x);\n                    this._max.y = Math.max(this._max.y, tempVec3.y);\n                    this._max.z = Math.max(this._max.z, tempVec3.z);\n                    this._min.x = Math.min(this._min.x, tempVec3.x);\n                    this._min.y = Math.min(this._min.y, tempVec3.y);\n                    this._min.z = Math.min(this._min.z, tempVec3.z);\n                }\n                this._min.x -= this._yOffset;\n                this._max.y += this._yOffset;\n                cache._cacheBound(this._min, this._max);\n            }\n        }\n        mesh._updateConvexVolume(cache.id, this._buffer, this._min.y, this._max.y, flag);\n    }\n    _initSurface(surface) {\n        this._cacheDatas = [];\n        surface.forEach(element => {\n            let cache = element._addConvexVoume(this);\n            cache._setUpdateDataHander(Handler.create(this, this._updateBuffer, undefined, false));\n            this._cacheDatas.push(cache);\n            cache._updateAreaFlag(this._areaFlags);\n            cache._updateTransfrom(this._transfrom);\n            cache._setCacheFlag(CacheData.DataFlag);\n        });\n    }\n    _destory() {\n        this._cacheDatas.forEach(element => {\n            element._surface._deleteCovexVoume(this);\n        });\n        this._cacheDatas = [];\n    }\n}\n","import { Vector3 } from \"../../../maths/Vector3\";\nimport { Handler } from \"../../../utils/Handler\";\nimport { BaseData } from \"./BaseData\";\nimport { CacheData } from \"./CacheData\";\nexport class NavMeshLinkData extends BaseData {\n    constructor() {\n        super();\n        this._startPoint = new Vector3();\n        this._endPoint = new Vector3();\n        this._width = 1;\n        this._bidirectional = true;\n        this.globalStart = new Vector3();\n        this.globalEnd = new Vector3();\n        this._startNavSurfaces = [];\n        this._endNavSurfaces = [];\n        this._regisgMaps = [];\n    }\n    _updateWidth(value) {\n        if (this._width == value)\n            return;\n        this._width = value;\n        this._updateData(CacheData.OtherDataFlag);\n    }\n    _updateBidirectional(value) {\n        if (this._bidirectional == value)\n            return;\n        this._bidirectional = value;\n        this._updateData(CacheData.OtherDataFlag);\n    }\n    _updateStartPoint(value) {\n        if (Vector3.equals(this._startPoint, value))\n            return;\n        value.cloneTo(this._startPoint);\n        this._updateData(CacheData.DataFlag);\n    }\n    _updateEndPoint(value) {\n        if (Vector3.equals(this._endPoint, value))\n            return;\n        value.cloneTo(this._endPoint);\n        this._updateData(CacheData.DataFlag);\n    }\n    _updateData(flag) {\n        this._cacheDatas.forEach(element => {\n            element._setCacheFlag(flag);\n        });\n    }\n    _initSurface(surface) {\n        this._cacheDatas.length = 0;\n        surface.forEach(element => {\n            let cache = element._addModifileLink(this);\n            cache._setUpdateDataHander(Handler.create(this, this._updateBuffer, undefined, false));\n            this._cacheDatas.push(cache);\n            cache._updateAreaFlag(this._areaFlags);\n            cache._updateTransfrom(this._transfrom);\n            cache._setCacheFlag(CacheData.DataFlag);\n        });\n    }\n    _updateBuffer(cache, areaFlag) {\n        if (cache._getCacheFlag(CacheData.DataFlag | CacheData.TransfromFlag)) {\n            Vector3.transformCoordinate(this._startPoint, this._transfrom, this.globalStart);\n            Vector3.transformCoordinate(this._endPoint, this._transfrom, this.globalEnd);\n        }\n        let surface = cache._surface;\n        let manager = surface._manager;\n        var starts = manager.getNavMeshSurfaces(this.globalStart);\n        var ends = manager.getNavMeshSurfaces(this.globalEnd);\n        for (var i = starts.length - 1; i >= 0; i--) {\n            let surface = starts[i];\n            let index = ends.indexOf(surface);\n            if (index < 0) {\n                continue;\n            }\n            ends.splice(index, 1);\n            starts.splice(i);\n            surface._navMesh._addNavMeshLink(cache.id, this.globalStart, this.globalEnd, this._width, this._bidirectional, areaFlag);\n        }\n        if (ends.length > 0 && starts.length > 0) {\n            starts.forEach((value) => {\n                this._startNavSurfaces.push(value);\n            });\n            ends.forEach((value) => {\n                this._endNavSurfaces.push(value);\n            });\n            for (var i = 0, n = starts.length; i < n; i++) {\n                for (var j = 0, k = ends.length; j < k; j++) {\n                    manager.regNavMeshLink(starts[i], ends[j], this);\n                }\n            }\n        }\n    }\n    getDistance() {\n        return Vector3.distance(this._startPoint, this._endPoint);\n    }\n    destroy() {\n        this._cacheDatas.forEach(element => {\n            element._destroy();\n        });\n    }\n}\n","import { Handler } from \"../../../utils/Handler\";\nimport { CacheData } from \"./CacheData\";\nimport { NavigationUtils } from \"../NavigationUtils\";\nimport { BaseData } from \"./BaseData\";\nexport class NavModifleData extends BaseData {\n    set datas(value) {\n        if (this._datas == value)\n            return;\n        this._datas = value;\n        this._refeashData();\n    }\n    get datas() {\n        return this._datas;\n    }\n    constructor() {\n        super();\n        this._bindData = NavigationUtils._createdtNavTileCache();\n    }\n    _updateBuffer(cache, flag) {\n        if (this._datas == null)\n            return;\n        if (cache._getCacheFlag(CacheData.DataFlag)) {\n            this._bindData.init(this._datas.bindData);\n        }\n        if (cache._getCacheFlag(CacheData.DataFlag | CacheData.AreaFlag)) {\n            this._bindData.setFlag(flag);\n        }\n        if (cache._getCacheFlag(CacheData.DataFlag | CacheData.TransfromFlag)) {\n            this._bindData.transfromData(this._transfrom.elements);\n            NavigationUtils._transfromBoundBox(this._datas._boundMin, this._datas._boundMax, this._transfrom, this._min, this._max);\n            cache._cacheBound(this._min, this._max);\n        }\n    }\n    _updateTileIndexs(cache, oldTileIndex, newTileIndexs) {\n        let surface = cache._surface;\n        oldTileIndex.forEach((index) => {\n            surface._featureCache.get(index).delete(this._bindData);\n        });\n        if (this._datas == null)\n            return;\n        newTileIndexs.forEach((index) => {\n            surface._featureCache.get(index).add(this._bindData);\n        });\n    }\n    _initSurface(surface) {\n        this._cacheDatas = [];\n        surface.forEach(element => {\n            let cache = element._addModifileNavMesh(this);\n            cache._setUpdateDataHander(Handler.create(this, this._updateBuffer, undefined, false));\n            cache._setTileHander(Handler.create(this, this._updateTileIndexs, undefined, false));\n            this._cacheDatas.push(cache);\n            cache._updateAreaFlag(this._areaFlags);\n            cache._updateTransfrom(this._transfrom);\n            cache._setCacheFlag(CacheData.DataFlag);\n        });\n    }\n    _destory() {\n        this._cacheDatas.forEach(element => {\n            let surface = element._surface;\n            let oldTileIndex = element._titleIndex;\n            oldTileIndex.forEach((index) => {\n                surface._featureCache.get(index).delete(this._bindData);\n            });\n            surface._removeModifileNavMesh(this);\n        });\n        this._cacheDatas = [];\n    }\n}\n"],"names":["Vector2","Vector3","tempVec3","PartitionType","UpdateFlags","CrowdAgentState","ObstacleAvoidanceType","NavigationConfig","Byte","Matrix4x4","Component","Handler","Node","SingletonList","ClassUtils","Laya","MathUtils3D","NotImplementedError"],"mappings":"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"}