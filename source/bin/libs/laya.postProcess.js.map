{"version":3,"file":"laya.postProcess.js","sources":["../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/Bloom.vs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomDownsample13.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomDownsample4.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomPrefilter13.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomPrefilter4.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomUpsampleBox.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/BloomUpsampleTent.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/Composite.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Bloom/Composite.vs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Sampling.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/StdLib.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/Colors.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/BloomEffect.js","../../bin/tsc/layaAir/laya/d3/shader/postprocess/BlitScreen.vs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/BlitLUTScreen.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ColorGrading.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/Tonemapping.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/LUT.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/LUTBuilder.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/lib/UtillitiesColor.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/lib/TransformCommon.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/lib/RRTCommon.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/lib/ODTCommon.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/lib/Tonescales.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/rrt/RRT.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/odt/ODT_sRGB_100nits.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/ACES.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ColorGradEffect/ACES/ACESShaderLib.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/ColorGradEffect.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/FullScreenVert.vs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/CoC.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/Prefilter.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/BlurV.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/BlurH.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/GaussianDoF/Composite.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/GaussianDoF.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/LensFlares/LensFlareGeometry.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/LensFlares/LensFlareCMD.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/LensFlare/LensFlare.vs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/LensFlare/LensFlare.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/LensFlares/LensFlareShaderInit.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/LensFlares/LensFlareEffect.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/LensFlareSettingsLoader.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ScalableAO/FragAO.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ScalableAO/AoBlurHorizontal.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ScalableAO/AOComposition.fs","../../bin/tsc/layaAir/laya/d3/postProcessEffect/shader/ScalableAO/AmbientOcclusion.glsl","../../bin/tsc/layaAir/laya/d3/postProcessEffect/ScalableAO.js","../../bin/tsc/layaAir/laya/d3/postProcessEffect/ModuleDef.js"],"sourcesContent":["#define SHADER_NAME BloomVS\n\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\n    position.y = -position.y;\n    #endif\n    return position;\n}\nvoid main()\n{\n    gl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n    v_Texcoord0 = a_PositionTexcoord.zw;\n    gl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME BloomDownSample13FS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample13()\n{\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = color;\n}\n\nvoid main()\n{\n    fragDownsample13();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BloomDownSample4FS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample4()\n{\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = color;\n}\n\nvoid main()\n{\n    fragDownsample4();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BloomPreFilter13FS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n\n    mediump float autoExposure = autoExposureSampler.r;\n    color *= autoExposure;\n    color = min(vec4(u_Params.x), color); // clamp to max\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n    return color;\n}\n\nvoid fragPrefilter13()\n{\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main()\n{\n    fragPrefilter13();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BloomPreFilter4FS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n\n    mediump float autoExposure = autoExposureSampler.r;\n    color *= autoExposure;\n    color = min(vec4(u_Params.x), color); // clamp to max\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n    return color;\n}\n\nvoid fragPrefilter4()\n{\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main()\n{\n    fragPrefilter4();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BloomUpSampleBoxFS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\n{\n    mediump vec4 color = texture2D(u_BloomTex, uv);\n#ifdef Gamma_u_BloomTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_BloomTex\n    return bloom + color;\n}\n\nvoid fragUpsampleBox()\n{\n    mediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n    gl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main()\n{\n    fragUpsampleBox();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BloomUpSampleTentFS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\n{\n    mediump vec4 color = texture2D(u_BloomTex, uv);\n#ifdef Gamma_u_BloomTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_BloomTex\n    return bloom + color;\n}\n\nvoid fragUpsampleTent()\n{\n    mediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n    gl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main()\n{\n    fragUpsampleTent();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME CompositeFS\n\n#include \"Color.glsl\";\n#include \"Colors.glsl\";\n#include \"Sampling.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, v_Texcoord0);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n    mediump float autoExposure = autoExposureSampler.r;\n\n    mediump vec4 color = vec4(0.0);\n    color = texture2D(u_MainTex, v_Texcoord0);\n#ifdef Gamma_u_MainTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_MainTex\n\n    color.rgb *= autoExposure;\n\n#if defined(BLOOM) || defined(BLOOM_LOW)\n    #ifdef BLOOM\n    mediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n    #else\n    mediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n    #endif\n\n    // UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\n    // but considering we use a cover-style scale on the dirt texture the difference\n    // isn't massive so we chose to save a few ALUs here instead in case lens distortion\n    // is active\n    mediump vec4 dirt = vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\n    #ifdef Gamma_u_Bloom_DirtTex\n    dirt = gammaToLinear(dirt);\n    #endif // Gamma_u_Bloom_DirtTex\n\n    // Additive bloom (artist friendly)\n    bloom *= u_Bloom_Settings.y;\n    dirt *= u_Bloom_Settings.z;\n    mediump vec4 bloomColor = u_Bloom_Color;\n    color += bloom * bloomColor;\n    color += dirt * bloom;\n#endif\n\n    mediump vec4 finalColor = color;\n    // finalColor = linearToSRGB(finalColor);\n    // finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\n    gl_FragColor = finalColor;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME CompositeVS\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY\n    position.y = -position.y;\n    #endif\n    return position;\n}\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}","\n// todo only sampler u_MainTex\nvec4 samplerTex(sampler2D tex, vec2 uv)\n{\n    vec4 mainSampler = texture2D(tex, uv);\n#ifdef Gamma_u_MainTex\n    mainSampler = gammaToLinear(mainSampler);\n#endif // Gamma_u_MainTex\n\n    return mainSampler;\n}\n\n// Better, temporally stable box filtering\n// [Jimenez14] http://goo.gl/eomGso\n// . . . . . . .\n// . A . B . C .\n// . . D . E . .\n// . F . G . H .\n// . . I . J . .\n// . K . L . M .\n// . . . . . . .\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    mediump vec4 A = samplerTex(tex, uv + texelSize * vec2(-1.0, -1.0));\n    mediump vec4 B = samplerTex(tex, uv + texelSize * vec2(0.0, -1.0));\n    mediump vec4 C = samplerTex(tex, uv + texelSize * vec2(1.0, -1.0));\n    mediump vec4 D = samplerTex(tex, uv + texelSize * vec2(-0.5, -0.5));\n    mediump vec4 E = samplerTex(tex, uv + texelSize * vec2(0.5, -0.5));\n    mediump vec4 F = samplerTex(tex, uv + texelSize * vec2(-1.0, 0.0));\n    mediump vec4 G = samplerTex(tex, uv);\n    mediump vec4 H = samplerTex(tex, uv + texelSize * vec2(1.0, 0.0));\n    mediump vec4 I = samplerTex(tex, uv + texelSize * vec2(-0.5, 0.5));\n    mediump vec4 J = samplerTex(tex, uv + texelSize * vec2(0.5, 0.5));\n    mediump vec4 K = samplerTex(tex, uv + texelSize * vec2(-1.0, 1.0));\n    mediump vec4 L = samplerTex(tex, uv + texelSize * vec2(0.0, 1.0));\n    mediump vec4 M = samplerTex(tex, uv + texelSize * vec2(1.0, 1.0));\n\n    mediump vec2 scale = vec2(0.5, 0.125);\n    mediump vec2 div = (1.0 / 4.0) * scale;\n\n    mediump vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n\n    return o;\n}\n\n// Standard box filtering\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.xw);\n    s += samplerTex(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}\n\n// 9-tap bilinear upsampler (tent filter)\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\n// . 2 . 4 . 2 .\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\n\n    mediump vec4 s = samplerTex(tex, uv - d.xy);\n    s += samplerTex(tex, uv - d.wy) * 2.0;\n    s += samplerTex(tex, uv - d.zy);\n\n    s += samplerTex(tex, uv + d.zw) * 2.0;\n    s += samplerTex(tex, uv) * 4.0;\n    s += samplerTex(tex, uv + d.xw) * 2.0;\n\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.wy) * 2.0;\n    s += samplerTex(tex, uv + d.xy);\n\n    return s * (1.0 / 16.0);\n}\n\n// Standard box filtering\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\n\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.xw);\n    s += samplerTex(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\n\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nmediump vec4 safeHDR(mediump vec4 c)\n{\n    return min(c, HALF_MAX);\n}\n\nfloat max3(float a, float b, float c)\n{\n    return max(max(a, b), c);\n}\n\nvec3 positivePow(vec3 base, vec3 power)\n{\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\n}","#include \"StdLib.glsl\";\n\n#define EPSILON 1.0e-4\n\n// Quadratic color thresholding\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\n\t// Pixel brightness\n\tmediump float br = max3(color.r, color.g, color.b);\n\n\t// Under-threshold part: quadratic curve\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\n\trq = curve.z * rq * rq;\n\n\t// Combine and apply the brightness response curve.\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\n\n\treturn color;\n}\n\n\n\n//\n// sRGB transfer functions\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\n//\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn c * c;\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\n// \t#else\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\n// \t\treturn linearRGB;\n// \t#endif\n// }\n\n// mediump vec4 sRGBToLinear(mediump vec4 c){\n//     return vec4(sRGBToLinear(c.rgb), c.a);\n// }\n\n\n\n// mediump vec3 linearToSRGB(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn sqrt(c);\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\n// \t#else\n// \t\tmediump vec3 sRGBLo = c * 12.92;\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\n// \t\treturn sRGB;\n// \t#endif\n// }\n\n// mediump vec4 linearToSRGB(mediump vec4 c){\n//     return vec4(linearToSRGB(c.rgb), c.a);\n// }","import BloomVS from \"./shader/Bloom/Bloom.vs\";\nimport BloomDownsample13PS from \"./shader/Bloom/BloomDownsample13.fs\";\nimport BloomDownsample4PS from \"./shader/Bloom/BloomDownsample4.fs\";\nimport BloomPrefilter13PS from \"./shader/Bloom/BloomPrefilter13.fs\";\nimport BloomPrefilter4PS from \"./shader/Bloom/BloomPrefilter4.fs\";\nimport BloomUpsampleBoxPS from \"./shader/Bloom/BloomUpsampleBox.fs\";\nimport BloomUpsampleTentPS from \"./shader/Bloom/BloomUpsampleTent.fs\";\nimport CompositePS from \"./shader/Bloom/Composite.fs\";\nimport CompositeVS from \"./shader/Bloom/Composite.vs\";\nimport SamplingGLSL from \"./shader/Sampling.glsl\";\nimport StdLibGLSL from \"./shader/StdLib.glsl\";\nimport ColorsGLSL from \"./shader/Colors.glsl\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { RenderState } from \"../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { PostProcess } from \"../core/render/postProcessBase/PostProcess\";\nimport { PostProcessEffect } from \"../core/render/postProcessBase/PostProcessEffect\";\nimport { Laya } from \"../../../Laya\";\nexport class BloomEffect extends PostProcessEffect {\n    static init() {\n        Shader3D.addInclude(\"StdLib.glsl\", StdLibGLSL);\n        Shader3D.addInclude(\"Colors.glsl\", ColorsGLSL);\n        Shader3D.addInclude(\"Sampling.glsl\", SamplingGLSL);\n        var attributeMap = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n        var uniformMap = {\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n            \"u_AutoExposureTex\": ShaderDataType.Texture2D,\n            \"u_Threshold\": ShaderDataType.Vector4,\n            \"u_Params\": ShaderDataType.Vector4,\n            \"u_BloomTex\": ShaderDataType.Texture2D,\n            \"u_SampleScale\": ShaderDataType.Float,\n        };\n        var shader = Shader3D.add(\"PostProcessBloom\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        var subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        var shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter13PS);\n        var renderState = shaderPass.renderState;\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        shaderPass = subShader.addShaderPass(BloomVS, BloomPrefilter4PS);\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample13PS);\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        shaderPass = subShader.addShaderPass(BloomVS, BloomDownsample4PS);\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleTentPS);\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        shaderPass = subShader.addShaderPass(BloomVS, BloomUpsampleBoxPS);\n        renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n        BloomEffect.CompositeInit();\n        BloomEffect.__initDefine__();\n    }\n    static CompositeInit() {\n        let attributeMap = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\n        };\n        let uniformMap = {\n            'u_MainTex': ShaderDataType.Texture2D,\n            'u_BloomTex': ShaderDataType.Texture2D,\n            'u_AutoExposureTex': ShaderDataType.Texture2D,\n            'u_Bloom_DirtTex': ShaderDataType.Texture2D,\n            'u_BloomTex_TexelSize': ShaderDataType.Vector4,\n            'u_Bloom_DirtTileOffset': ShaderDataType.Vector4,\n            'u_Bloom_Settings': ShaderDataType.Vector4,\n            'u_Bloom_Color': ShaderDataType.Color,\n        };\n        let shader = Shader3D.add(\"PostProcessComposite\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let shaderPass = subShader.addShaderPass(CompositeVS, CompositePS);\n        let renderState = shaderPass.renderState;\n        renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        renderState.depthWrite = false;\n        renderState.cull = RenderState.CULL_NONE;\n        renderState.blend = RenderState.BLEND_DISABLE;\n    }\n    static __initDefine__() {\n        BloomEffect.SHADERVALUE_MAINTEX = Shader3D.propertyNameToID(\"u_MainTex\");\n        BloomEffect.SHADERVALUE_AUTOEXPOSURETEX = Shader3D.propertyNameToID(\"u_AutoExposureTex\");\n        BloomEffect.SHADERVALUE_SAMPLESCALE = Shader3D.propertyNameToID(\"u_SampleScale\");\n        BloomEffect.SHADERVALUE_THRESHOLD = Shader3D.propertyNameToID(\"u_Threshold\");\n        BloomEffect.SHADERVALUE_PARAMS = Shader3D.propertyNameToID(\"u_Params\");\n        BloomEffect.SHADERVALUE_BLOOMTEX = Shader3D.propertyNameToID(\"u_BloomTex\");\n    }\n    get clamp() {\n        return this._clamp;\n    }\n    set clamp(value) {\n        this._clamp = value;\n    }\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    get fastMode() {\n        return this._fastMode;\n    }\n    set fastMode(value) {\n        this._fastMode = value;\n    }\n    get dirtTexture() {\n        return this._dirtTexture;\n    }\n    set dirtTexture(value) {\n        this._dirtTexture && this._dirtTexture._removeReference(1);\n        this._dirtTexture = value;\n        this._dirtTexture && this._dirtTexture._addReference(1);\n    }\n    get intensity() {\n        return this._intensity;\n    }\n    set intensity(value) {\n        this._intensity = Math.max(value, 0.0);\n    }\n    get threshold() {\n        return this._threshold;\n    }\n    set threshold(value) {\n        this._threshold = Math.max(value, 0.0);\n    }\n    get softKnee() {\n        return this._softKnee;\n    }\n    set softKnee(value) {\n        this._softKnee = Math.min(Math.max(value, 0.0), 1.0);\n    }\n    get diffusion() {\n        return this._diffusion;\n    }\n    set diffusion(value) {\n        this._diffusion = Math.min(Math.max(value, 1), 10);\n    }\n    get anamorphicRatio() {\n        return this._anamorphicRatio;\n    }\n    set anamorphicRatio(value) {\n        this._anamorphicRatio = Math.min(Math.max(value, -1.0), 1.0);\n    }\n    get dirtIntensity() {\n        return this._dirtIntensity;\n    }\n    set dirtIntensity(value) {\n        this._dirtIntensity = Math.max(value, 0.0);\n    }\n    constructor() {\n        super();\n        this._shader = null;\n        this._shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\n        this._linearColor = new Color();\n        this._bloomTextureTexelSize = new Vector4();\n        this._shaderThreshold = new Vector4();\n        this._shaderParams = new Vector4();\n        this._pyramid = null;\n        this._intensity = 0.0;\n        this._threshold = 1.0;\n        this._softKnee = 0.5;\n        this._diffusion = 7.0;\n        this._anamorphicRatio = 0.0;\n        this._dirtIntensity = 0.0;\n        this._shaderSetting = new Vector4();\n        this._dirtTileOffset = new Vector4();\n        this._fastMode = false;\n        this._dirtTexture = null;\n        this.singleton = true;\n        this.active = true;\n        this.intensity = 1.0;\n        this.threshold = 1.0;\n        this.softKnee = 0.5;\n        this.clamp = 65472;\n        this.diffusion = 7;\n        this.anamorphicRatio = 0;\n        this.color = new Color(1.0, 1.0, 1.0, 1.0);\n    }\n    effectInit(postprocess) {\n        super.effectInit(postprocess);\n        this._shader = Shader3D.find(\"PostProcessBloom\");\n        this._pyramid = new Array(BloomEffect.MAXPYRAMIDSIZE * 2);\n    }\n    getCameraDepthTextureModeFlag() {\n        return 0;\n    }\n    release(postprocess) {\n        super.release(postprocess);\n        this._shader = null;\n        this._pyramid = [];\n    }\n    render(context) {\n        var cmd = context.command;\n        var viewport = context.camera.viewport;\n        this._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX, Texture2D.whiteTexture);\n        var ratio = this._anamorphicRatio;\n        var rw = ratio < 0 ? -ratio : 0;\n        var rh = ratio > 0 ? ratio : 0;\n        var tw = Math.floor(viewport.width / (2 - rw));\n        var th = Math.floor(viewport.height / (2 - rh));\n        var s = Math.max(tw, th);\n        var logs;\n        logs = Math.log2(s) + this._diffusion - 10;\n        var logsInt = Math.floor(logs);\n        var iterations = Math.min(Math.max(logsInt, 1), BloomEffect.MAXPYRAMIDSIZE);\n        var sampleScale = 0.5 + logs - logsInt;\n        this._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE, sampleScale);\n        var lthresh = Color.gammaToLinearSpace(this.threshold);\n        var knee = lthresh * this._softKnee + 1e-5;\n        this._shaderThreshold.setValue(lthresh, lthresh - knee, knee * 2, 0.25 / knee);\n        this._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD, this._shaderThreshold);\n        var lclamp = Color.gammaToLinearSpace(this.clamp);\n        this._shaderParams.setValue(lclamp, 0, 0, 0);\n        this._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS, this._shaderParams);\n        var qualityOffset = this.fastMode ? 1 : 0;\n        var lastDownTexture = context.indirectTarget;\n        for (var i = 0; i < iterations; i++) {\n            var downIndex = i * 2;\n            var upIndex = downIndex + 1;\n            var subShader = i == 0 ? BloomEffect.SUBSHADER_PREFILTER13 + qualityOffset : BloomEffect.SUBSHADER_DOWNSAMPLE13 + qualityOffset;\n            var mipDownTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\n            mipDownTexture.filterMode = FilterMode.Bilinear;\n            this._pyramid[downIndex] = mipDownTexture;\n            if (i !== iterations - 1) {\n                var mipUpTexture = RenderTexture.createFromPool(tw, th, RenderTargetFormat.R8G8B8A8, RenderTargetFormat.None, false, 1, false, true);\n                mipUpTexture.filterMode = FilterMode.Bilinear;\n                this._pyramid[upIndex] = mipUpTexture;\n            }\n            cmd.blitScreenTriangle(lastDownTexture, mipDownTexture, null, this._shader, this._shaderData, subShader);\n            lastDownTexture = mipDownTexture;\n            tw = Math.max(Math.floor(tw / 2), 1);\n            th = Math.max(Math.floor(th / 2), 1);\n        }\n        var lastUpTexture = this._pyramid[(iterations - 1) * 2];\n        for (i = iterations - 2; i >= 0; i--) {\n            downIndex = i * 2;\n            upIndex = downIndex + 1;\n            mipDownTexture = this._pyramid[downIndex];\n            mipUpTexture = this._pyramid[upIndex];\n            cmd.setShaderDataTexture(this._shaderData, BloomEffect.SHADERVALUE_BLOOMTEX, mipDownTexture);\n            cmd.blitScreenTriangle(lastUpTexture, mipUpTexture, null, this._shader, this._shaderData, BloomEffect.SUBSHADER_UPSAMPLETENT + qualityOffset);\n            lastUpTexture = mipUpTexture;\n        }\n        var linearColor = this._linearColor;\n        this.color.toLinear(linearColor);\n        var intensity = Math.pow(2, this._intensity / 10.0) - 1.0;\n        var shaderSettings = this._shaderSetting;\n        this._shaderSetting.setValue(sampleScale, intensity, this._dirtIntensity, iterations);\n        var usedirtTexture = this._dirtTexture ? this._dirtTexture : Texture2D.blackTexture;\n        var dirtRatio = usedirtTexture.width / usedirtTexture.height;\n        var screenRatio = viewport.width / viewport.height;\n        var dirtTileOffset = this._dirtTileOffset;\n        if (dirtRatio > screenRatio)\n            dirtTileOffset.setValue(screenRatio / dirtRatio, 1.0, (1.0 - dirtTileOffset.x) * 0.5, 0.0);\n        else if (dirtRatio < screenRatio)\n            dirtTileOffset.setValue(1.0, dirtRatio / screenRatio, 0.0, (1.0 - dirtTileOffset.y) * 0.5);\n        var compositeShaderData = context.compositeShaderData;\n        if (this.fastMode)\n            compositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW);\n        else\n            compositeShaderData.addDefine(PostProcess.SHADERDEFINE_BLOOM);\n        this._bloomTextureTexelSize.setValue(1.0 / lastUpTexture.width, 1.0 / lastUpTexture.height, lastUpTexture.width, lastUpTexture.height);\n        compositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET, dirtTileOffset);\n        compositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS, shaderSettings);\n        compositeShaderData.setColor(PostProcess.SHADERVALUE_BLOOM_COLOR, linearColor);\n        compositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX, usedirtTexture);\n        compositeShaderData.setTexture(PostProcess.SHADERVALUE_BLOOMTEX, lastUpTexture);\n        compositeShaderData.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize);\n        let _compositeShader = Shader3D.find(\"PostProcessComposite\");\n        cmd.blitScreenTriangle(context.indirectTarget, context.destination, context.camera._screenOffsetScale, _compositeShader, compositeShaderData, 0);\n        for (i = 0; i < iterations; i++) {\n            downIndex = i * 2;\n            upIndex = downIndex + 1;\n            RenderTexture.recoverToPool(this._pyramid[downIndex]);\n            (i !== 0 && i !== iterations - 1) && (RenderTexture.recoverToPool(this._pyramid[upIndex]));\n        }\n        context.deferredReleaseTextures.push(lastUpTexture);\n    }\n}\nBloomEffect.SUBSHADER_PREFILTER13 = 0;\nBloomEffect.SUBSHADER_PREFILTER4 = 1;\nBloomEffect.SUBSHADER_DOWNSAMPLE13 = 2;\nBloomEffect.SUBSHADER_DOWNSAMPLE4 = 3;\nBloomEffect.SUBSHADER_UPSAMPLETENT = 4;\nBloomEffect.SUBSHADER_UPSAMPLEBOX = 5;\nBloomEffect.MAXPYRAMIDSIZE = 16;\nLaya.addInitCallback(() => BloomEffect.init());\n","#define SHADER_NAME BlitVS\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\n\n    v_Texcoord0 = a_PositionTexcoord.zw;\n}","#define SHADER_NAME BlitLUTFS\n\n#include \"Color.glsl\";\n\n#include \"ColorGrading.glsl\";\n#include \"LUT.glsl\";\n\nuniform sampler2D u_Lut;\nuniform vec4 u_LutParams; // w postExposure\n\n#ifdef CUSTOMLUT\nuniform sampler2D u_CustomLut;\nuniform vec4 u_CustomLutParams;\n#endif // CUSTOMLUT\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\n#ifdef Gamma_u_MainTex\n    gl_FragColor = gammaToLinear(gl_FragColor);\n#endif // Gamma_u_MainTex\n\n    vec3 color = gl_FragColor.rgb;\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\n    color *= u_LutParams.w;\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\n\n#ifdef CUSTOMLUT\n\n    float contrib = u_CustomLutParams.w;\n    vec3 gamma = linearToGamma(color);\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\n    gamma = mix(gamma, userLut, contrib);\n    color = gammaToLinear(gamma);\n\n#endif // CUSTOMLUT\n\n    gl_FragColor.rgb = color;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n","#if !defined(ColorGrading_lib)\n    #define ColorGrading_lib\n\nconst float ACEScc_MAX = 1.4679964;\nconst float ACEScc_MIDGRAY = 0.4135884;\n\nconst float LogC_cut = 0.011361;\nconst float LogC_a = 5.555556;\nconst float LogC_b = 0.047996;\nconst float LogC_c = 0.244161;\nconst float LogC_d = 0.386036;\nconst float LogC_e = 5.301883;\nconst float LogC_f = 0.092819;\n\nfloat linearToLogC(float x)\n{\n    float o;\n    if (x > LogC_cut)\n\t{\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\n\t}\n    else\n\t{\n\t    o = LogC_e * x + LogC_f;\n\t}\n    return o;\n}\n\nvec3 linearToLogC(vec3 x)\n{\n    vec3 logc;\n    logc.x = linearToLogC(x.x);\n    logc.y = linearToLogC(x.y);\n    logc.z = linearToLogC(x.z);\n    return logc;\n}\n\nfloat logCToLinear(float x)\n{\n    float o;\n    if (x > LogC_e * LogC_cut + LogC_f)\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\n    else\n\to = (x - LogC_f) / LogC_e;\n    return o;\n}\n\nvec3 logCToLinear(vec3 x)\n{\n    vec3 linear;\n    linear.x = logCToLinear(x.x);\n    linear.y = logCToLinear(x.y);\n    linear.z = logCToLinear(x.z);\n    return linear;\n}\n\n// Hue, Saturation, Value\n// Ranges:\n//  Hue [0.0, 1.0]\n//  Sat [0.0, 1.0]\n//  Lum [0.0, HALF_MAX]\nvec3 RgbToHsv(vec3 c)\n{\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    const float e = 1.0e-4;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 HsvToRgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\n}\n\nfloat RotateHue(float value, float low, float hi)\n{\n    return (value < low)\n            ? value + hi\n            : (value > hi)\n                ? value - hi\n                : value;\n}\n\n\nconst mat3 Linear_to_LMS_MAT = mat3(\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\n\nconst mat3 LMS_to_Linear_MAT = mat3(\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\n\n// white balance\nuniform vec3 u_ColorBalance;\n\n// split toning\nuniform vec4 u_SplitShadows;\nuniform vec3 u_Splithighlights;\n\n// shadows, midtones, highlights\nuniform vec3 u_Shadows;\nuniform vec3 u_Midtones;\nuniform vec3 u_Highlights;\nuniform vec4 u_Limits;\n\n// lift, gamma, gain\nuniform vec3 u_Lift;\nuniform vec3 u_Gamma;\nuniform vec3 u_Gain;\n\n//color adjusted\nuniform vec4 u_ColorFilter;\nuniform vec4 u_HueSatCon;\n\nfloat luminance(in vec3 color)\n{\n    #ifdef ACES\n    float luma = dot(color, AP1_RGB2Y);\n    #else\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\n    #endif // ACES\n    return luma;\n}\n\nvec3 softlight(vec3 base, vec3 blend)\n{\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\n    vec3 t = step(0.5, blend);\n    return r2 * t + (1.0 - t) * r1;\n}\n\n// input linear sRGB\n// if ACES tonemap, calculate in ACEScg, return ACEScg\n// else calculate in logC, return linear sRGB\nvec3 colorGrade(in vec3 color)\n{\n    // White balance in LMS space\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\n    colorLMS *= u_ColorBalance.xyz;\n    color = LMS_to_Linear_MAT * colorLMS;\n\n    // Do contrast in log after white balance\n    #ifdef ACES\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\n    #else\n        vec3 colorLog = linearToLogC(color);\n    #endif\n    \n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\n\n\n    #ifdef ACES\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\n    #else\n        color = logCToLinear(colorLog);\n    #endif // ACES\n\n    // Color filter is just an unclipped multiplier\n    color = color * u_ColorFilter.rgb;\n\n    color = max(vec3(0.0), color);\n\n    // split toning\n    float balance = u_SplitShadows.w;\n    vec3 gamma = linearToGamma(color);\n    float splitLuma = saturate(luminance(color)) + balance;\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\n    gamma = softlight(gamma, splitShadows);\n    gamma = softlight(gamma, splitHeighlights);\n    color = gammaToLinear(gamma);\n\n    // shadows, midtones, highlights\n    float luma = luminance(color);\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\n\n    // Lift, gamma, gain\n    color = color * u_Gain.xyz + u_Lift.xyz;\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\n    \n    // HSV operations\n    vec3 hsv = RgbToHsv(color);\n    // Hue Shift & Hue Vs Hue\n    float hue = hsv.x + u_HueSatCon.x;\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\n    color = HsvToRgb(hsv);\n\n    // Global saturation\n    luma = luminance(color);\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\n    \n    return color;\n}\n\n#endif // ColorGrading_lib","#if !defined(Tonemapping_lib)\n    #define Tonemapping_lib\n\n// ACES Tonemapping color grading in ACEScg space\nvec3 tonemap(in vec3 ap1)\n{\n    vec3 color = ap1;\n\n    #ifdef ACES\n    vec3 aces = AP1_to_AP0_MAT * color;\n    vec3 oces = RRT(aces);\n    color = ODT_sRGB_100nits(oces);\n    #endif // ACES\n\n    // todo other tonemap\n\n    return color;\n}\n\n#endif // Tonemapping_lib","#if !defined(LUT_lib)\n    #define LUT_lib\n\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\n{\n    uvw.z *= scaleOffset.z;\n\n    float shift = floor(uvw.z);\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\n    uvw.x += shift * scaleOffset.y;\n\n    uvw.xyz = mix(\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\n\tuvw.z - shift);\n    return uvw;\n}\n\n#endif // LUT_lib","#define SHADER_NAME LutBuilder\n\n#include \"Color.glsl\";\n\n#ifdef ACES\n    #include \"ACES.glsl\";\n#endif // ACES\n\n#include \"ColorGrading.glsl\";\n\n#include \"Tonemapping.glsl\";\n\nvarying vec2 v_Texcoord0;\n\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\nvec3 lutValue(vec2 uv, vec4 params)\n{\n    vec3 color;\n    uv -= params.yz;\n    color.r = fract(uv.x * params.x);\n    color.b = uv.x - color.r / params.x;\n    color.g = uv.y;\n    return color * params.w;\n}\n\n// internal lut logC space\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n    vec3 color = lutValue(uv, u_LutParams);\n    color = logCToLinear(color);\n    vec3 grade = colorGrade(color);\n    vec3 tone = tonemap(grade);\n\n    gl_FragColor = vec4(tone, 1.0);\n}","#if !defined(UtillitiesColor_lib)\n#define UtillitiesColor_lib\n\n// Transformations between CIE XYZ tristimulus values and CIE x,y\n// chromaticity coordinates\nvec3 XYZ_2_xyY(vec3 XYZ)\n{\n    vec3 xyY;\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\n    xyY.x = XYZ.x / divisor;\n    xyY.y = XYZ.y / divisor;\n    xyY.z = XYZ.y;\n    return xyY;\n}\n\nvec3 xyY_2_XYZ(vec3 xyY)\n{\n    vec3 XYZ;\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\n    XYZ.y = xyY.z;\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\n    return XYZ;\n}\n\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\n{\n    float r = rgb.r;\n    float g = rgb.g;\n    float b = rgb.b;\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\n    k = max(MEDIUMP_FLT_MIN, k);\n    float chroma = sqrt(k);\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\n}\n\nfloat rgb_2_yc(vec3 rgb)\n{\n    return rgb_2_yc(rgb, 1.75);\n}\n\n// Transformations from RGB to other color representations\n\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\nfloat rgb_2_hue(vec3 rgb)\n{\n    float hue;\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\n    //     // hue = FLT_NAN;\n    //     // todo FLT_NAN\n    //     hue = 0.0;\n    // } else {\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\n    // }\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\n    else\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\n\n    if (hue < 0.0) {\n        hue = hue + 360.0;\n    }\n\n    return hue;\n}\n\n#endif // UtillitiesColor_lib","#if !defined(TransformCommon_lib)\n    #define TransformCommon_lib\n\nconst float TINY = 1e-10;\n\n// sRGB D65 to AP0 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP0_MAT = mat3(\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\n\n// sRGB D65 to AP1 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP1_MAT = mat3(\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\n\nconst mat3 AP1_to_XYZ_MAT = mat3(\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\n\nconst mat3 AP0_to_AP1_MAT = mat3(\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\n\nconst mat3 AP1_to_AP0_MAT = mat3(\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\n\nconst mat3 XYZ_to_AP1_MAT = mat3(\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\n\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\n\nfloat ACES_to_ACEScc(float x)\n{\n    // if (x <= 0.0)\n    // return -0.35828683;\n    // else if (x < pow(2.0, -15.0))\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\n    // else\n    // return (log2(x) + 9.72) / 17.52;\n\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\n}\n\nvec3 ACES_to_ACEScc(vec3 x)\n{\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\n    x.x = ACES_to_ACEScc(x.x);\n    x.y = ACES_to_ACEScc(x.y);\n    x.z = ACES_to_ACEScc(x.z);\n\n    return x;\n}\n\nfloat ACEScc_to_ACES(float x)\n{\n    if (x < -0.3013698630)\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\n\treturn pow(2.0, x * 17.52 - 9.72);\n    else\n\treturn MEDIUMP_FLT_MAX;\n}\n\nvec3 ACEScc_to_ACES(vec3 x)\n{\n    x.x = ACEScc_to_ACES(x.x);\n    x.y = ACEScc_to_ACES(x.y);\n    x.z = ACEScc_to_ACES(x.z);\n    return x;\n}\n\nfloat rgb_2_saturation(vec3 rgb)\n{\n    float rgbmax = vecmax(rgb);\n    float rgbmin = vecmin(rgb);\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\n}\n\n#endif // TransformCommon_lib","#if !defined(RRTCommon_lib)\n#define RRTCommon_lib\n\n// \"Glow\" module constants\nconst float RRT_GLOW_GAIN = 0.05;\nconst float RRT_GLOW_MID = 0.08;\n\n// Red modifier constants\nconst float RRT_RED_SCALE = 0.82;\nconst float RRT_RED_PIVOT = 0.03;\nconst float RRT_RED_HUE = 0.;\nconst float RRT_RED_WIDTH = 135.;\n\n// Desaturation contants\nconst float RRT_SAT_FACTOR = 0.96;\n\n// ------- Glow module functions\n\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\n{\n    float glowGainOut;\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\n        glowGainOut = glowGainIn;\n    } else if (ycIn >= 2.0 * glowMid) {\n        glowGainOut = 0.0;\n    } else {\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\n    }\n    return glowGainOut;\n}\n\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\nfloat sigmoid_shaper(float x)\n{\n    float t = max(1.0 - abs(x * 0.5), 0.0);\n    float y = 1.0 + sign(x) * (1.0 - t * t);\n\n    return y * 0.5;\n}\n\n// ------- Red modifier functions\nfloat center_hue(float hue, float centerH)\n{\n    float hueCentered = hue - centerH;\n    if (hueCentered < -180.0) {\n        hueCentered = hueCentered + 360.0;\n    } else if (hueCentered > 180.0) {\n        hueCentered -= 360.0;\n    }\n    return hueCentered;\n}\n\n#endif // RRTCommon_lib","#if !defined(ODTCommon_lib)\n#define ODTCommon_lib\n\nconst float CINEMA_WHITE = 48.0;\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\n\n// Gamma compensation factor\nconst float DIM_SURROUND_GAMMA = 0.9811;\n\n// Saturation compensation factor\nconst float ODT_SAT_FACTOR = 0.93;\n\n// white point D60 to D65\n// ACES white point D60\nconst mat3 D60_to_D65_MAT = mat3(\n    vec3(0.987224, -0.00759836, 0.00307257),\n    vec3(-0.00611327, 1.00186, -0.00509595),\n    vec3(0.0159533, 0.00533002, 1.08168));\n\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\n{\n    return (Y - Ymin) / (Ymax - Ymin);\n}\n\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\n{\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\n    vec3 xyY = XYZ_2_xyY(XYZ);\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\n    XYZ = xyY_2_XYZ(xyY);\n\n    return XYZ * XYZ_to_AP1_MAT;\n}\n\n#endif // ODTCommon_lib","#if !defined(Tonescales_lib)\n#define Tonescales_lib\n\nconst mat3 M = mat3(\n    vec3(0.5, -1.0, 0.5),\n    vec3(-1.0, 1.0, 0.5),\n    vec3(0.5, 0.0, 0.0));\n\nfloat segmented_spline_c5_fwd(float x)\n{\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\n#else\n    const float coefsLow_0 = -4.0000000000;\n    const float coefsLow_1 = -4.0000000000;\n    const float coefsLow_2 = -3.1573765773;\n    const float coefsLow_3 = -0.4852499958;\n    const float coefsLow_4 = 1.8477324706;\n    const float coefsLow_5 = 1.8477324706;\n\n    const float coefsHigh_0 = -0.7185482425;\n    const float coefsHigh_1 = 2.0810307172;\n    const float coefsHigh_2 = 3.6681241237;\n    const float coefsHigh_3 = 4.0000000000;\n    const float coefsHigh_4 = 4.0000000000;\n    const float coefsHigh_5 = 4.0000000000;\n#endif // GRAPHICS_API_GLES3\n\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\n    const vec2 midPoint = vec2(0.18, 4.8);\n    const vec2 maxPoint = vec2(47185.92, 10000.);\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.0;\n\n    const int N_KNOTS_LOW = 4;\n    const int N_KNOTS_HIGH = 4;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        }\n#endif // GRAPHICS_API_GLES3\n\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        }\n#endif // #ifdef GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n    return pow(10.0, logy);\n}\n\nfloat segmented_spline_c9_fwd(float x)\n{\n// ODT_48nits\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\n#else\n    const float coefsLow_0 = -1.6989700043;\n    const float coefsLow_1 = -1.6989700043;\n    const float coefsLow_2 = -1.4779000000;\n    const float coefsLow_3 = -1.2291000000;\n    const float coefsLow_4 = -0.8648000000;\n    const float coefsLow_5 = -0.4480000000;\n    const float coefsLow_6 = 0.0051800000;\n    const float coefsLow_7 = 0.4511080334;\n    const float coefsLow_8 = 0.9113744414;\n    const float coefsLow_9 = 0.9113744414;\n\n    const float coefsHigh_0 = 0.5154386965;\n    const float coefsHigh_1 = 0.8470437783;\n    const float coefsHigh_2 = 1.1358000000;\n    const float coefsHigh_3 = 1.3802000000;\n    const float coefsHigh_4 = 1.5197000000;\n    const float coefsHigh_5 = 1.5985000000;\n    const float coefsHigh_6 = 1.6467000000;\n    const float coefsHigh_7 = 1.6746091357;\n    const float coefsHigh_8 = 1.6878733390;\n    const float coefsHigh_9 = 1.6878733390;\n#endif // GRAPHICS_API_GLES3\n\n    // todo const\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\n\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.04;\n\n    const int N_KNOTS_LOW = 8;\n    const int N_KNOTS_HIGH = 8;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else if (j == 3) {\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        } else if (j == 4) {\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\n        } else if (j == 5) {\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\n        } else if (j == 6) {\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else if (j == 3) {\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        } else if (j == 4) {\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\n        } else if (j == 5) {\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\n        } else if (j == 6) {\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n\n    return pow(10.0, logy);\n}\n\n#endif // Tonescales_lib","#if !defined(RRT_lib)\n#define RRT_lib\n\n#include \"ACES_RRTCommon.glsl\";\n\n/**\n * @param ACES AP0\n * @returns OCES\n */\nvec3 RRT(vec3 aces)\n{\n    // --- Glow module --- //\n    float saturation = rgb_2_saturation(aces);\n    float ycIn = rgb_2_yc(aces);\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\n\n    aces *= addedGlow;\n\n    // --- Red modifier --- //\n    float hue = rgb_2_hue(aces);\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\n\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\n    hueWeight *= hueWeight;\n\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\n\n    // --- ACES to RGB rendering space --- //\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\n\n    // --- Global desaturation --- //\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\n\n    // --- Apply the tonescale independently in rendering-space RGB --- //\n    vec3 rgbPost;\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\n\n    // --- RGB rendering space to OCES --- //\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\n\n    return rgbOces;\n}\n\n#endif // RRT_lib","#if !defined(ODT_sRGB_100nits_lib)\n#define ODT_sRGB_100nits_lib\n\n#include \"ACES_ODTCommon.glsl\";\n\n// CIE XYZ to REC.709\nconst mat3 XYZ_to_REC709_MAT = mat3(\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\n\nconst float DISPGAMMA = 2.4;\nconst float OFFSET = 0.055;\n\nvec3 ODT_sRGB_100nits(vec3 oces)\n{\n    // OCES to RGB rendering space\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\n\n    // Apply the tonescale independently in rendering-space RGB\n    vec3 rgbPost;\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\n\n    // Scale luminance to linear code value\n    vec3 linearCV;\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\n\n    // Apply gamma adjustment to compensate for dim surround\n    linearCV = darkSurround_to_dimSurround(linearCV);\n\n    // Convert to display primary encoding\n    // Rendering space RGB to XYZ\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\n\n    // Apply CAT from ACES white point to assumed observer adapted white point\n    XYZ = D60_to_D65_MAT * XYZ;\n\n    // CIE XYZ to display primaries\n    linearCV = XYZ_to_REC709_MAT * XYZ;\n\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\n    return linearCV;\n}\n\n#endif // ODT_sRGB_100nits_lib","// Academy Color Encoding System (ACES) software and tools are provided by the\n// Academy under the following terms and conditions: A worldwide, royalty-free,\n// non-exclusive right to copy, modify, create derivatives, and use, in source\n// and binary forms, is hereby granted, subject to acceptance of this license.\n\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\n// Portions contributed by others as indicated. All rights reserved.\n\n// Performance of any of the aforementioned acts indicates acceptance to be\n// bound by the following terms and conditions:\n\n// Copies of source code, in whole or in part, must retain the above copyright\n// notice, this list of conditions and the Disclaimer of Warranty.\n\n// Use in binary form must retain the above copyright notice, this list of\n// conditions and the Disclaimer of Warranty in the documentation and/or other\n// materials provided with the distribution.\n\n// Nothing in this license shall be deemed to grant any rights to trademarks,\n// copyrights, patents, trade secrets or any other intellectual property of\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\n\n// Neither the name \"A.M.P.A.S.\" nor the name of any other contributors to this\n// software may be used to endorse or promote products derivative of or based on\n// this software without express prior written permission of A.M.P.A.S. or the\n// contributors, as appropriate.\n\n// This license shall be construed pursuant to the laws of the State of\n// California, and any disputes related thereto shall be subject to the\n// jurisdiction of the courts therein.\n\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\n// CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\n// OR UNDISCLOSED.\n\n#if !defined(ACES_lib)\n#define ACES_lib\n\n#include \"ACES_TransformCommon.glsl\";\n#include \"ACES_UtillitiesColor.glsl\";\n#include \"ACES_Tonescales.glsl\";\n\n#include \"ACES_RRT.glsl\";\n#include \"ACES_ODT_sRGB_100nits.glsl\";\n\n// idt\n\n// linear D65 sRGB to D60 ACES AP0\nvec3 sRGB_to_AP0(vec3 sRGB)\n{\n    return sRGB_to_AP0_MAT * sRGB;\n}\n\n// linear D65 sRGB to D60 ACES AP1\nvec3 sRGB_to_AP1(vec3 sRGB)\n{\n    return sRGB_to_AP1_MAT * sRGB;\n}\n\n// lmt\n// todo\n\n#endif // ACES_lib","import UtillitiesColorGLSL from \"./lib/UtillitiesColor.glsl\";\nimport TransformCommonGLSL from \"./lib/TransformCommon.glsl\";\nimport RRTCommonGLSL from \"./lib/RRTCommon.glsl\";\nimport ODTCommonGLSL from \"./lib/ODTCommon.glsl\";\nimport TonescalesGLSL from \"./lib/Tonescales.glsl\";\nimport RRTGLSL from \"./rrt/RRT.glsl\";\nimport ODT_sRGB_100nits_GLSL from \"./odt/ODT_sRGB_100nits.glsl\";\nimport ACESGLSL from \"./ACES.glsl\";\nimport { Shader3D } from \"../../../../../RenderEngine/RenderShader/Shader3D\";\nexport class ACESShaderLib {\n    static init() {\n        Shader3D.addInclude(\"ACES_UtillitiesColor.glsl\", UtillitiesColorGLSL);\n        Shader3D.addInclude(\"ACES_TransformCommon.glsl\", TransformCommonGLSL);\n        Shader3D.addInclude(\"ACES_Tonescales.glsl\", TonescalesGLSL);\n        Shader3D.addInclude(\"ACES_RRTCommon.glsl\", RRTCommonGLSL);\n        Shader3D.addInclude(\"ACES_ODTCommon.glsl\", ODTCommonGLSL);\n        Shader3D.addInclude(\"ACES_RRT.glsl\", RRTGLSL);\n        Shader3D.addInclude(\"ACES_ODT_sRGB_100nits.glsl\", ODT_sRGB_100nits_GLSL);\n        Shader3D.addInclude(\"ACES.glsl\", ACESGLSL);\n    }\n}\n","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { RenderState } from \"../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\nimport { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\nimport { Material } from \"../../resource/Material\";\nimport { RenderTexture } from \"../../resource/RenderTexture\";\nimport { Texture2D } from \"../../resource/Texture2D\";\nimport { PostProcessEffect } from \"../core/render/postProcessBase/PostProcessEffect\";\nimport BlitVS from \"../shader/postprocess/BlitScreen.vs\";\nimport BlitLUTShader from \"./shader/ColorGradEffect/BlitLUTScreen.fs\";\nimport ColorGradingGLSL from \"./shader/ColorGradEffect/ColorGrading.glsl\";\nimport TonemappingGLSL from \"./shader/ColorGradEffect/Tonemapping.glsl\";\nimport LUTGLSL from \"./shader/ColorGradEffect/LUT.glsl\";\nimport LUTBuilderFS from \"./shader/ColorGradEffect/LUTBuilder.fs\";\nimport { Laya } from \"../../../Laya\";\nimport { ACESShaderLib } from \"./shader/ColorGradEffect/ACES/ACESShaderLib\";\nexport var ToneMappingType;\n(function (ToneMappingType) {\n    ToneMappingType[ToneMappingType[\"None\"] = 0] = \"None\";\n    ToneMappingType[ToneMappingType[\"ACES\"] = 1] = \"ACES\";\n})(ToneMappingType || (ToneMappingType = {}));\nexport class ColorGradEffect extends PostProcessEffect {\n    static init() {\n        ColorGradEffect.__initDefine__();\n        Shader3D.addInclude(\"ColorGrading.glsl\", ColorGradingGLSL);\n        Shader3D.addInclude(\"Tonemapping.glsl\", TonemappingGLSL);\n        Shader3D.addInclude(\"LUT.glsl\", LUTGLSL);\n        let attributeMap = {\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n        let uniformMap = {\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n        };\n        let shader = Shader3D.add(\"blitLUTShader\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(BlitVS, BlitLUTShader);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        pass.renderState.depthWrite = false;\n        pass.renderState.cull = RenderState.CULL_NONE;\n        pass.renderState.blend = RenderState.BLEND_DISABLE;\n        ColorGradEffect.lutBuilderInit();\n    }\n    static lutBuilderInit() {\n        let attributeMap = {\n            \"a_PositionTexcoord\": [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n        let uniformMap = {\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n            \"u_LutParams\": ShaderDataType.Vector4\n        };\n        let shader = Shader3D.add(\"LUTBuilder\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let pass = subShader.addShaderPass(BlitVS, LUTBuilderFS);\n        pass.renderState.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        pass.renderState.depthWrite = false;\n        pass.renderState.cull = RenderState.CULL_NONE;\n        pass.renderState.blend = RenderState.BLEND_DISABLE;\n        pass.statefirst = true;\n    }\n    static __initDefine__() {\n        ColorGradEffect.SHADERDEFINE_ACES = Shader3D.getDefineByName(\"ACES\");\n        ColorGradEffect.SHADERDEFINE_CUSTOMLUT = Shader3D.getDefineByName(\"CUSTOMLUT\");\n        ColorGradEffect.SHADERVALUE_LUT = Shader3D.propertyNameToID(\"u_Lut\");\n        ColorGradEffect.SHADERVALUE_LUTPARAMS = Shader3D.propertyNameToID(\"u_LutParams\");\n        ColorGradEffect.SHADERVALUE_CUSTOMLUT = Shader3D.propertyNameToID(\"u_CustomLut\");\n        ColorGradEffect.SHADERVALUE_CUSTOMLUTPARAMS = Shader3D.propertyNameToID(\"u_CustomLutParams\");\n    }\n    get toneMapping() {\n        return this._toneMapping;\n    }\n    set toneMapping(value) {\n        if (value == this._toneMapping)\n            return;\n        this._needBuildLUT = true;\n        this._toneMapping = value;\n    }\n    get enableSplitTone() {\n        return this._enableSplitTone;\n    }\n    set enableSplitTone(value) {\n        this._enableSplitTone = value;\n        this._needBuildLUT = true;\n    }\n    get splitShadow() {\n        return this._splitShadow;\n    }\n    set splitShadow(value) {\n        this._needBuildLUT = true;\n        value.cloneTo(this._splitShadow);\n    }\n    get splithighlights() {\n        return this._splithighlights;\n    }\n    set splithighlights(value) {\n        if (this._splithighlights.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._splithighlights);\n    }\n    get splitBalance() {\n        return this._splitBalance;\n    }\n    set splitBalance(value) {\n        this._needBuildLUT = true;\n        this._splitBalance = value;\n    }\n    get enableSMH() {\n        return this._enableSMH;\n    }\n    set enableSMH(value) {\n        this._needBuildLUT = true;\n        this._enableSMH = value;\n    }\n    get shadows() {\n        return this._shadows;\n    }\n    set shadows(value) {\n        if (this._shadows.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._shadows);\n    }\n    get midtones() {\n        return this._midtones;\n    }\n    set midtones(value) {\n        if (this._midtones.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._midtones);\n    }\n    get highlights() {\n        return this._highlights;\n    }\n    set highlights(value) {\n        if (this._highlights.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._highlights);\n    }\n    get shadowLimitStart() {\n        return this._limits.x;\n    }\n    set shadowLimitStart(value) {\n        this._needBuildLUT = true;\n        this._limits.x = Math.min(value, this.shadowLimitEnd);\n    }\n    get shadowLimitEnd() {\n        return this._limits.y;\n    }\n    set shadowLimitEnd(value) {\n        this._needBuildLUT = true;\n        this._limits.y = Math.max(value, this.shadowLimitStart);\n    }\n    get highLightLimitStart() {\n        return this._limits.z;\n    }\n    set highLightLimitStart(value) {\n        this._needBuildLUT = true;\n        this._limits.z = Math.min(value, this.highLightLimitEnd);\n    }\n    get highLightLimitEnd() {\n        return this._limits.w;\n    }\n    set highLightLimitEnd(value) {\n        this._needBuildLUT = true;\n        this._limits.w = Math.max(this.highLightLimitStart, value);\n    }\n    get enableLiftGammaGain() {\n        return this._enableLiftGammaGain;\n    }\n    set enableLiftGammaGain(value) {\n        this._needBuildLUT = true;\n        this._enableLiftGammaGain = value;\n    }\n    get lift() {\n        return this._lift;\n    }\n    set lift(value) {\n        if (this.lift.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._lift);\n    }\n    get gamma() {\n        return this._gamma;\n    }\n    set gamma(value) {\n        if (this._gamma.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._gamma);\n    }\n    get gain() {\n        return this._gain;\n    }\n    set gain(value) {\n        if (this._gain.equal(value))\n            return;\n        this._needBuildLUT = true;\n        value.cloneTo(this._gain);\n    }\n    _StandardIlluminantY(x) {\n        return 2.87 * x - 3 * x * x - 0.27509507;\n    }\n    ;\n    _CIExyToLMS(x, y) {\n        let Y = 1;\n        let X = Y * x / y;\n        let Z = Y * (1 - x - y) / y;\n        let L = 0.7328 * X + 0.4296 * Y - 0.1624 * Z;\n        let M = -0.7036 * X + 1.6975 * Y + 0.0061 * Z;\n        let S = 0.0030 * X + 0.0136 * Y + 0.9834 * Z;\n        return new Vector3(L, M, S);\n    }\n    _ColorBalanceToLMSCoeffs(temperature, tint) {\n        let t1 = temperature / 65.0;\n        let t2 = tint / 65.0;\n        let x = 0.31271 - t1 * (t1 < 0 ? 0.1 : 0.05);\n        let y = this._StandardIlluminantY(x) + t2 * 0.05;\n        let w1 = new Vector3(0.949237, 1.03542, 1.08728);\n        let w2 = this._CIExyToLMS(x, y);\n        this._balance.set(w1.x / w2.x, w1.y / w2.y, w1.z / w2.z);\n    }\n    get enableBalance() {\n        return this._enableBalance;\n    }\n    set enableBalance(value) {\n        this._needBuildLUT = true;\n        this._enableBalance = value;\n    }\n    get tint() {\n        return this._tint;\n    }\n    set tint(value) {\n        this._needBuildLUT = true;\n        this._tint = value;\n        this._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\n    }\n    get temperature() {\n        return this._temperature;\n    }\n    set temperature(value) {\n        this._needBuildLUT = true;\n        this._temperature = value;\n        this._ColorBalanceToLMSCoeffs(this._temperature, this._tint);\n    }\n    get enableColorAdjust() {\n        return this._enableColorAdjust;\n    }\n    set enableColorAdjust(value) {\n        this._needBuildLUT = true;\n        this._enableColorAdjust = value;\n    }\n    get postExposure() {\n        return this._postExposure;\n    }\n    set postExposure(value) {\n        this._postExposure = value;\n    }\n    get contrast() {\n        return this._contrast;\n    }\n    set contrast(value) {\n        this._needBuildLUT = true;\n        this._contrast = value;\n    }\n    get colorFilter() {\n        return this._colorFilter;\n    }\n    set colorFilter(value) {\n        this._needBuildLUT = true;\n        value.cloneTo(this._colorFilter);\n    }\n    get HueShift() {\n        return this._HueShift;\n    }\n    set HueShift(value) {\n        this._needBuildLUT = true;\n        this._HueShift = value;\n    }\n    get saturation() {\n        return this._saturation;\n    }\n    set saturation(value) {\n        this._needBuildLUT = true;\n        this._saturation = value;\n    }\n    constructor() {\n        super();\n        this._needBuildLUT = false;\n        this._lutBuilderMat = new Material();\n        this._lutSize = 32;\n        this._enableSplitTone = false;\n        this._splitShadow = new Vector3(0.5, 0.5, 0.5);\n        this._splitBalance = 0;\n        this._splithighlights = new Vector3(0.5, 0.5, 0.5);\n        this._u_SplitShadow = new Vector4(0, 0, 0);\n        this._enableSMH = false;\n        this._shadows = new Vector3(1, 1, 1);\n        this._midtones = new Vector3(1, 1, 1);\n        this._highlights = new Vector3(1, 1, 1);\n        this._limits = new Vector4(0, 0.33, 0.55, 1);\n        this._enableLiftGammaGain = false;\n        this._lift = new Vector3(0, 0, 0);\n        this._gamma = new Vector3(1, 1, 1);\n        this._gain = new Vector3(1, 1, 1);\n        this._enableBalance = false;\n        this._balance = new Vector3();\n        this._tint = 0;\n        this._temperature = 0;\n        this._enableColorAdjust = false;\n        this._postExposure = 1;\n        this._contrast = 1;\n        this._colorFilter = new Color(1, 1, 1);\n        this._HueShift = 0;\n        this._saturation = 1;\n        this._HueSatCon = new Vector4(0, 1, 1, 0);\n        this.default_balance = new Vector3(1, 1, 1);\n        this.default_splitShadow = new Vector4(0.5, 0.5, 0.5, 0.0);\n        this.default_splithighlights = new Vector3(0.5, 0.5, 0.5);\n        this.default_shadow = new Vector3(1, 1, 1);\n        this.default_midtones = new Vector3(1, 1, 1);\n        this.default_highlight = new Vector3(1, 1, 1);\n        this.default_limint = new Vector4(0.0, 0.3, 0.55, 1.0);\n        this.default_lift = new Vector3(0, 0, 0);\n        this.default_gamma = new Vector3(1, 1, 1);\n        this.default_gain = new Vector3(1, 1, 1);\n        this.default_ColorFilter = new Color(1, 1, 1, 1);\n        this.default_HueSatCon = new Vector4(0, 1, 1, 0);\n        this.singleton = true;\n        this.active = true;\n        this._needBuildLUT = true;\n        this._toneMapping = ToneMappingType.None;\n        this._blitlutParams = new Vector4();\n        this._lutShaderData = LayaGL.renderDeviceFactory.createShaderData(null);\n        this.lutSize = 32;\n        this._lutBuilderMat = new Material();\n    }\n    get lutSize() {\n        return this._lutSize;\n    }\n    set lutSize(value) {\n        if (value > 32)\n            return;\n        this._lutSize = value;\n        if (this._lutTex)\n            this._lutTex.destroy();\n        this._lutTex = new RenderTexture(this._lutSize * this._lutSize, this._lutSize, RenderTargetFormat.R16G16B16A16, null, false, 1, false, false);\n        this._lutTex.anisoLevel = 1;\n        this._lutTex.wrapModeU = WrapMode.Clamp;\n        this._lutTex.wrapModeV = WrapMode.Clamp;\n        this._lutTex.filterMode = FilterMode.Bilinear;\n    }\n    _buildLUT() {\n        if (!this._needBuildLUT)\n            return;\n        let lutHeight = this.lutSize;\n        let lutWidth = this.lutSize * this.lutSize;\n        let lutParams = new Vector4(lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeight / (lutHeight - 1));\n        this._lutBuilderMat.setVector4(\"u_LutParams\", lutParams);\n        if (this.enableBalance) {\n            this._ColorBalanceToLMSCoeffs(this.temperature, this.tint);\n            this._lutBuilderMat.setVector3(\"u_ColorBalance\", this._balance);\n        }\n        else {\n            this._lutBuilderMat.setVector3(\"u_ColorBalance\", this.default_balance);\n        }\n        if (this.enableSplitTone) {\n            this._u_SplitShadow.setValue(this._splitShadow.x, this._splitShadow.y, this._splitShadow.z, this.splitBalance);\n            this._lutBuilderMat.setVector4(\"u_SplitShadows\", this._u_SplitShadow);\n            this._lutBuilderMat.setVector3(\"u_Splithighlights\", this._splithighlights);\n        }\n        else {\n            this._lutBuilderMat.setVector4(\"u_SplitShadows\", this.default_splitShadow);\n            this._lutBuilderMat.setVector3(\"u_Splithighlights\", this.default_splithighlights);\n        }\n        if (this.enableSMH) {\n            this._lutBuilderMat.setVector3(\"u_Shadows\", this._shadows);\n            this._lutBuilderMat.setVector3(\"u_Midtones\", this._midtones);\n            this._lutBuilderMat.setVector3(\"u_Highlights\", this._highlights);\n            this._lutBuilderMat.setVector4(\"u_Limits\", this._limits);\n        }\n        else {\n            this._lutBuilderMat.setVector3(\"u_Shadows\", this.default_shadow);\n            this._lutBuilderMat.setVector3(\"u_Midtones\", this.default_midtones);\n            this._lutBuilderMat.setVector3(\"u_Highlights\", this.default_highlight);\n            this._lutBuilderMat.setVector4(\"u_Limits\", this.default_limint);\n        }\n        if (this._enableLiftGammaGain) {\n            this._lutBuilderMat.setVector3(\"u_Lift\", this._lift);\n            this._lutBuilderMat.setVector3(\"u_Gamma\", this._gamma);\n            this._lutBuilderMat.setVector3(\"u_Gain\", this._gain);\n        }\n        else {\n            this._lutBuilderMat.setVector3(\"u_Lift\", this.default_lift);\n            this._lutBuilderMat.setVector3(\"u_Gamma\", this.default_gamma);\n            this._lutBuilderMat.setVector3(\"u_Gain\", this.default_gain);\n        }\n        if (this.enableColorAdjust) {\n            this._HueSatCon.setValue(this._HueShift, this.saturation, this._contrast, 0.0);\n            this._lutBuilderMat.setColor(\"u_ColorFilter\", this._colorFilter);\n            this._lutBuilderMat.setVector4(\"u_HueSatCon\", this._HueSatCon);\n        }\n        else {\n            this._lutBuilderMat.setColor(\"u_ColorFilter\", this.default_ColorFilter);\n            this._lutBuilderMat.setVector4(\"u_HueSatCon\", this.default_HueSatCon);\n        }\n        if (this._toneMapping == ToneMappingType.ACES) {\n            this._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_ACES);\n        }\n        else {\n            this._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_ACES);\n        }\n        this._postProcess._context.command.blitScreenQuadByMaterial(Texture2D.whiteTexture, this._lutTex, null, this._lutBuilderMat);\n    }\n    effectInit(postprocess) {\n        super.effectInit(postprocess);\n        this._lutBuilderMat.setShaderName(\"LUTBuilder\");\n        this._LUTShader = Shader3D.find(\"blitLUTShader\");\n        postprocess._enableColorGrad = true;\n        postprocess._ColorGradEffect = this;\n        this._postProcess = postprocess;\n    }\n    release(postprocess) {\n        super.release(postprocess);\n        postprocess._enableColorGrad = false;\n        postprocess._ColorGradEffect = null;\n    }\n    render(context) {\n        let cmd = context.command;\n        let source = context.indirectTarget;\n        if (true) {\n            this._blitlutParams.setValue(1 / this._lutTex.width, 1 / this._lutTex.height, this._lutTex.height - 1, this.enableColorAdjust ? this._postExposure : 1);\n            this._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\n            this._lutShaderData.setTexture(ColorGradEffect.SHADERVALUE_LUT, this._lutTex);\n            this._lutShaderData.setVector(ColorGradEffect.SHADERVALUE_LUTPARAMS, this._blitlutParams);\n        }\n        else {\n            this._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT);\n        }\n        cmd.blitScreenTriangle(source, context.destination, null, this._LUTShader, this._lutShaderData);\n    }\n}\nLaya.addInitCallback(() => ACESShaderLib.init());\nLaya.addInitCallback(() => ColorGradEffect.init());\n","#define SHADER_NAME SCREENVS\n\nvarying vec2 v_Texcoord0;\n\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\n    position.y = -position.y;\n    #endif\n    return position;\n}\n\nvoid main() {\t\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}","#define SHADER_NAME COCFS\n\n#ifdef CAMERA_NORMALDEPTH\nuniform sampler2D u_CameraDepthNormalTexture;\n#else\nuniform sampler2D u_CameraDepthTexture;\n#endif\n\nvarying vec2 v_Texcoord0;\n\n// Z buffer to linear 0..1 depth\nfloat Linear01Depth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\n}\n\n// Z buffer to linear depth\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\n}\n\nfloat DecodeFloatRG(vec2 enc)\n{\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\n    return dot(enc, kDecodeDot);\n}\n\nvoid DecodeDepthNormal(vec4 enc, out float depth)\n{\n    depth = DecodeFloatRG(enc.zw);\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n#ifdef CAMERA_NORMALDEPTH\n    vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, uv);\n    float depth = 0.0;\n    DecodeDepthNormal(depthNormal, depth);\n    depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\n#else\n    float depth = texture2D(u_CameraDepthTexture, uv).x;\n#endif\n\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\n    float farStart = u_CoCParams.x;\n    float farEnd = u_CoCParams.y;\n\n    float coc = (depth - farStart) / (farEnd - farStart);\n    coc = clamp(coc, 0.0, 1.0);\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\n}\n","#define SHADER_NAME PrefilterFS\n\n#include \"Color.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nconst int kCount = 5;\nvec2 kTaps[5];\n\nvoid main()\n{\n\n    kTaps[0] = vec2(0.0, 0.0);\n    kTaps[1] = vec2(0.9, -0.4);\n    kTaps[2] = vec2(-0.9, 0.4);\n    kTaps[3] = vec2(0.4, 0.9);\n    kTaps[4] = vec2(-0.4, -0.9);\n\n    vec3 colorAcc = vec3(0.0);\n    float farCoCAcc = 0.0;\n    for (int i = 0; i < kCount; i++)\n\t{\n\t    vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\n\t    vec3 tapColor = texture2D(u_MainTex, uv).rgb;\n#ifdef Gamma_u_MainTex\n\t    tapColor = gammaToLinear(tapColor);\n#endif // Gamma_u_MainTex\n\n\t    float coc = texture2D(u_FullCoCTex, uv).r;\n\n\t    colorAcc += tapColor * coc;\n\t    farCoCAcc += coc;\n\t}\n    vec3 color = colorAcc * (1.0 / float(kCount));\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\n\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\n    // color *= farCoC;\n\n    gl_FragColor = vec4(color, farCoC);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME BlurVFS\n\n#include \"Color.glsl\";\n\nvarying vec2 v_Texcoord0;\n\n// todo 3 & 5\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\nvec4 Blur(vec2 dir, float premultiply)\n{\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    halfColor = gammaToLinear(halfColor);\n#endif // Gamma_u_MainTex\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++)\n\t{\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\n#ifdef Gamma_u_MainTex\n\t    samp = gammaToLinear(samp);\n#endif // Gamma_u_MainTex\n\t    float sampCoC = samp.w;\n\t    vec3 sampColor = samp.xyz;\n\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n\t    acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\n\t}\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, 1.0);\n}\n\nvoid main()\n{\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n","#define SHADER_NAME BlurHFS\n\n#include \"Color.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\nvec4 Blur(vec2 dir, float premultiply)\n{\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    halfColor = gammaToLinear(halfColor);\n#endif // Gamma_u_MainTex\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++)\n\t{\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\n#ifdef Gamma_u_MainTex\n\t    samp = gammaToLinear(samp);\n#endif // Gamma_u_MainTex\n\t    float sampCoC = samp.a;\n\t    vec3 sampColor = samp.rgb;\n\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n\t    acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\n\t}\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, samp0CoC);\n}\n\nvoid main()\n{\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#define SHADER_NAME CompositeFS\n\n#include \"Color.glsl\";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n#ifdef BLITSCREEN_INVERTY\n    uv.y = 1.0 - uv.y;\n#endif\n    vec3 baseColor = texture2D(u_MainTex, uv).rgb;\n#ifdef Gamma_u_MainTex\n    baseColor = gammaToLinear(baseColor);\n#endif // Gamma_u_MainTex\n\n    vec4 samplevalue = texture2D(u_BlurCoCTex, uv);\n    vec3 farColor = samplevalue.rgb;\n    float coc = texture2D(u_FullCoCTex, uv).r;\n\n    vec3 dstColor = vec3(0.0);\n    float dstAlpha = 1.0;\n\n    float blend = sqrt(coc * 3.14 * 2.0);\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\n\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","import FullScreenVert from \"./shader/GaussianDoF/FullScreenVert.vs\";\nimport CoCFS from \"./shader/GaussianDoF/CoC.fs\";\nimport PrefilterFS from \"./shader/GaussianDoF/Prefilter.fs\";\nimport BlurVFS from \"./shader/GaussianDoF/BlurV.fs\";\nimport BlurHFS from \"./shader/GaussianDoF/BlurH.fs\";\nimport CompositeFS from \"./shader/GaussianDoF/Composite.fs\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { RenderState } from \"../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { FilterMode } from \"../../RenderEngine/RenderEnum/FilterMode\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\nimport { DepthTextureMode, RenderTexture } from \"../../resource/RenderTexture\";\nimport { PostProcessEffect } from \"../core/render/postProcessBase/PostProcessEffect\";\nimport { Laya } from \"../../../Laya\";\nexport class GaussianDoF extends PostProcessEffect {\n    static init() {\n        GaussianDoF.SOURCESIZE = Shader3D.propertyNameToID(\"u_SourceSize\");\n        GaussianDoF.ZBUFFERPARAMS = Shader3D.propertyNameToID(\"u_ZBufferParams\");\n        GaussianDoF.COCPARAMS = Shader3D.propertyNameToID(\"u_CoCParams\");\n        GaussianDoF.DEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthTexture\");\n        GaussianDoF.NORMALDEPTHTEXTURE = Shader3D.propertyNameToID(\"u_CameraDepthNormalTexture\");\n        GaussianDoF.FULLCOCTEXTURE = Shader3D.propertyNameToID(\"u_FullCoCTex\");\n        GaussianDoF.DOWNSAMPLESCALE = Shader3D.propertyNameToID(\"u_DownSampleScale\");\n        GaussianDoF.BLURCOCTEXTURE = Shader3D.propertyNameToID(\"u_BlurCoCTex\");\n        GaussianDoF.SHADERDEFINE_DEPTHNORMALTEXTURE = Shader3D.getDefineByName(\"CAMERA_NORMALDEPTH\");\n        let attributeMap = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4],\n        };\n        let uniformMap = {\n            \"u_MainTex\": ShaderDataType.Texture2D,\n            \"u_MainTex_TexelSize\": ShaderDataType.Vector4,\n            \"u_OffsetScale\": ShaderDataType.Vector4,\n            \"u_ZBufferParams\": ShaderDataType.Vector4,\n            \"u_CoCParams\": ShaderDataType.Vector3,\n            \"u_FullCoCTex\": ShaderDataType.Texture2D,\n            \"u_SourceSize\": ShaderDataType.Vector4,\n            \"u_DownSampleScale\": ShaderDataType.Vector4,\n            \"u_BlurCoCTex\": ShaderDataType.Texture2D,\n        };\n        let shader = Shader3D.add(\"GaussianDoF\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let cocSubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(cocSubShader);\n        let cocPass = cocSubShader.addShaderPass(FullScreenVert, CoCFS);\n        cocPass.statefirst = true;\n        cocPass.renderState.cull = RenderState.CULL_NONE;\n        let prefilterSubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(prefilterSubShader);\n        let prefilterPass = prefilterSubShader.addShaderPass(FullScreenVert, PrefilterFS);\n        prefilterPass.statefirst = true;\n        prefilterPass.renderState.cull = RenderState.CULL_NONE;\n        let blurHSubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(blurHSubShader);\n        let blurHPass = blurHSubShader.addShaderPass(FullScreenVert, BlurHFS);\n        blurHPass.statefirst = true;\n        blurHPass.renderState.cull = RenderState.CULL_NONE;\n        let blurVSubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(blurVSubShader);\n        let blurVPass = blurVSubShader.addShaderPass(FullScreenVert, BlurVFS);\n        blurVPass.statefirst = true;\n        blurVPass.renderState.cull = RenderState.CULL_NONE;\n        let compositeSubShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(compositeSubShader);\n        let compositePass = compositeSubShader.addShaderPass(FullScreenVert, CompositeFS);\n        compositePass.statefirst = true;\n        compositePass.renderState.cull = RenderState.CULL_NONE;\n    }\n    constructor() {\n        super();\n        this._shader = Shader3D.find(\"GaussianDoF\");\n        this._shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, new Vector3(10, 30, 1));\n        this._zBufferParams = new Vector4();\n        this._sourceSize = new Vector4();\n        this._dowmSampleScale = new Vector4();\n    }\n    get farStart() {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).x;\n    }\n    set farStart(value) {\n        let cocParams = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.x = value;\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n    get farEnd() {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).y;\n    }\n    set farEnd(value) {\n        let cocParams = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.y = Math.max(cocParams.x, value);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n    get maxRadius() {\n        return this._shaderData.getVector3(GaussianDoF.COCPARAMS).z;\n    }\n    set maxRadius(value) {\n        let cocParams = this._shaderData.getVector3(GaussianDoF.COCPARAMS);\n        cocParams.z = Math.min(value, 2);\n        this._shaderData.setVector3(GaussianDoF.COCPARAMS, cocParams);\n    }\n    _setupShaderValue(context) {\n        let camera = context.camera;\n        this._dowmSampleScale.setValue(0.5, 0.5, 2.0, 2.0);\n        this._shaderData.setVector(GaussianDoF.DOWNSAMPLESCALE, this._dowmSampleScale);\n        let far = camera.farPlane;\n        let near = camera.nearPlane;\n        this._zBufferParams.setValue(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near);\n        this._shaderData.setVector(GaussianDoF.ZBUFFERPARAMS, this._zBufferParams);\n    }\n    getCameraDepthTextureModeFlag() {\n        return DepthTextureMode.Depth;\n    }\n    render(context) {\n        let cmd = context.command;\n        this._setupShaderValue(context);\n        let source = context.source;\n        let shader = this._shader;\n        let shaderData = this._shaderData;\n        let dataTexFormat = RenderTargetFormat.R16G16B16A16;\n        let fullCoC = RenderTexture.createFromPool(source.width, source.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(source, fullCoC, null, shader, shaderData, 0);\n        fullCoC.filterMode = FilterMode.Bilinear;\n        this._shaderData.setTexture(GaussianDoF.FULLCOCTEXTURE, fullCoC);\n        let prefilterTex = RenderTexture.createFromPool(source.width / 2, source.height / 2, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(source, prefilterTex, null, shader, shaderData, 1);\n        prefilterTex.filterMode = FilterMode.Bilinear;\n        this._sourceSize.setValue(prefilterTex.width, prefilterTex.height, 1.0 / prefilterTex.width, 1.0 / prefilterTex.height);\n        this._shaderData.setShaderData(GaussianDoF.SOURCESIZE, ShaderDataType.Vector4, this._sourceSize);\n        let blurHTex = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(prefilterTex, blurHTex, null, this._shader, this._shaderData, 2);\n        let blurVTex = RenderTexture.createFromPool(prefilterTex.width, prefilterTex.height, dataTexFormat, RenderTargetFormat.None, false, 1);\n        cmd.blitScreenTriangle(blurHTex, blurVTex, null, this._shader, this._shaderData, 3);\n        blurVTex.filterMode = FilterMode.Bilinear;\n        blurVTex.anisoLevel = 1;\n        fullCoC.filterMode = FilterMode.Point;\n        this._shaderData.setTexture(GaussianDoF.BLURCOCTEXTURE, blurVTex);\n        let finalTex = RenderTexture.createFromPool(source.width, source.height, source.colorFormat, source.depthStencilFormat, false, 1);\n        cmd.blitScreenTriangle(source, context.destination, null, this._shader, this._shaderData, 4);\n        RenderTexture.recoverToPool(fullCoC);\n        RenderTexture.recoverToPool(prefilterTex);\n        RenderTexture.recoverToPool(blurHTex);\n        RenderTexture.recoverToPool(blurVTex);\n        context.deferredReleaseTextures.push(finalTex);\n    }\n}\nLaya.addInitCallback(() => GaussianDoF.init());\n","import { BufferUsage } from \"../../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexDeclaration } from \"../../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../../renders/VertexElementFormat\";\nimport { BufferState } from \"../../../webgl/utils/BufferState\";\nimport { GeometryElement } from \"../../core/GeometryElement\";\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\nexport class LensFlareElementGeomtry extends GeometryElement {\n    static init() {\n        let quadSize = 0.1;\n        LensFlareElementGeomtry.lensQuadVertices = new Float32Array([\n            quadSize, quadSize, 1, 1,\n            -quadSize, quadSize, 0, 1,\n            -quadSize, -quadSize, 0, 0,\n            quadSize, -quadSize, 1, 0\n        ]);\n        LensFlareElementGeomtry.lensQuadIndex = new Uint16Array([0, 2, 1, 0, 3, 2]);\n        LensFlareElementGeomtry.vertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, 0)]);\n        LensFlareElementGeomtry.instanceVertexDeclaration = new VertexDeclaration(16, [new VertexElement(0, VertexElementFormat.Vector4, 1)]);\n    }\n    constructor() {\n        super(MeshTopology.Triangles, DrawType.DrawElementInstance);\n        this.indexFormat = IndexFormat.UInt16;\n        this._createBuffer();\n    }\n    _createBuffer() {\n        this._vertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(LensFlareElementGeomtry.lensQuadVertices.length * 4, BufferUsage.Dynamic, false);\n        this._vertexBuffer.vertexDeclaration = LensFlareElementGeomtry.vertexDeclaration;\n        this._vertexBuffer.setData(LensFlareElementGeomtry.lensQuadVertices.buffer);\n        this._instanceVertexBuffer = Laya3DRender.renderOBJCreate.createVertexBuffer3D(LensFlareElementGeomtry.lensFlareElementMax * 4 * 4, BufferUsage.Dynamic, false);\n        this._instanceVertexBuffer.instanceBuffer = true;\n        this._instanceVertexBuffer.vertexDeclaration = LensFlareElementGeomtry.instanceVertexDeclaration;\n        this._indexBuffer = Laya3DRender.renderOBJCreate.createIndexBuffer3D(IndexFormat.UInt16, LensFlareElementGeomtry.lensQuadIndex.length, BufferUsage.Static, false);\n        this._indexBuffer.setData(LensFlareElementGeomtry.lensQuadIndex);\n        this.bufferState = new BufferState();\n        this.bufferState.applyState([this._vertexBuffer, this._instanceVertexBuffer], this._indexBuffer);\n        this._updateRenderParams(null);\n    }\n    get instanceBuffer() {\n        return this._instanceVertexBuffer;\n    }\n    _getType() {\n        return LensFlareElementGeomtry._type;\n    }\n    _prepareRender(state) {\n        return true;\n    }\n    destroy() {\n        super.destroy();\n        this._vertexBuffer.destroy();\n        this._instanceVertexBuffer.destroy();\n        this.bufferState.destroy();\n        this._indexBuffer.destroy();\n    }\n    _updateRenderParams(state) {\n        this.clearRenderParams();\n        this.setDrawElemenParams(LensFlareElementGeomtry.lensQuadIndex.length, 0);\n    }\n}\nLensFlareElementGeomtry.PositionUV = 0;\nLensFlareElementGeomtry.PositionRotationScale = 1;\nLensFlareElementGeomtry.lensFlareElementMax = 20;\nLensFlareElementGeomtry._type = GeometryElement._typeCounter++;\n","import { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { Material, MaterialRenderMode } from \"../../../resource/Material\";\nimport { Utils } from \"../../../utils/Utils\";\nimport { RenderContext3D } from \"../../core/render/RenderContext3D\";\nimport { RenderElement } from \"../../core/render/RenderElement\";\nimport { Laya3DRender } from \"../../RenderObjs/Laya3DRender\";\nimport { LensFlareEffect } from \"./LensFlareEffect\";\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\nexport class LensFlareCMD {\n    get instanceCount() {\n        return this._instanceCount;\n    }\n    set instanceCount(value) {\n        this._instanceCount = value;\n    }\n    constructor() {\n        this._instanceCount = 1;\n        this._transform3D = Laya3DRender.Render3DModuleDataFactory.createTransform(null);\n        this._renderElement = new RenderElement();\n        this._renderElement._renderElementOBJ.isRender = true;\n        this._lensFlareGeometry = new LensFlareElementGeomtry();\n        this._renderElement.setTransform(this._transform3D);\n        this._renderElement.setGeometry(this._lensFlareGeometry);\n        this._initMaterial();\n    }\n    _initMaterial() {\n        this._materials = new Material();\n        this._materials.lock = true;\n        this._materials.setShaderName(\"LensFlare\");\n        this._materials.materialRenderMode = MaterialRenderMode.RENDERMODE_ADDTIVE;\n        this._materials.depthTest = RenderState.DEPTHTEST_ALWAYS;\n        this._materials.cull = RenderState.CULL_NONE;\n        this._renderElement.material = this._materials;\n        this._renderElement.subShaderIndex = 0;\n    }\n    set center(value) {\n        this._materials.setVector2(\"u_FlareCenter\", value);\n    }\n    set rotate(value) {\n        this._materials.setFloat(\"u_rotate\", value);\n    }\n    get lensFlareElement() {\n        return this._lensFlareElementData;\n    }\n    set lensFlareElement(value) {\n        this._lensFlareElementData = value;\n        this.applyElementData();\n    }\n    applyElementData() {\n        this._materials.setTexture(\"u_FlareTexture\", this._lensFlareElementData.texture);\n        this._materials.setColor(\"u_Tint\", this._lensFlareElementData.tint);\n        this._materials.setFloat(\"u_TintIntensity\", this._lensFlareElementData.intensity);\n        this._materials.setVector2(\"u_Postionoffset\", this._lensFlareElementData.positionOffset);\n        this._materials.setFloat(\"u_Angularoffset\", this._lensFlareElementData.angularOffset);\n        if (this._lensFlareElementData.autoRotate) {\n            this._materials.addDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE);\n        }\n        else {\n            this._materials.removeDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE);\n        }\n        this._lensFlareGeometry.instanceCount = 1;\n        let testFloat = new Float32Array([this._lensFlareElementData.startPosition, Utils.toAngle(this._lensFlareElementData.rotation), this._lensFlareElementData.scale.x, this._lensFlareElementData.scale.y]);\n        this._lensFlareGeometry.instanceBuffer.setData(testFloat.buffer, 0, 0, testFloat.length * 4);\n    }\n    run(cmd) {\n        var context = RenderContext3D._instance;\n        this._materials.setFloat(\"u_aspectRatio\", context.camera.viewport.height / context.camera.viewport.width);\n        cmd.drawRenderElement(this._renderElement);\n    }\n    recover() {\n    }\n    destroy() {\n        this._materials.lock = false;\n        this._materials.destroy();\n    }\n}\n","#define SHADER_NAME LENSFLARESVS\n//attribute vec4 a_PositionTexcoord;\n// x: startPosition y: rotation zw: scale\n// attribute vec4 a_DistanceRotationScale;\n\nvarying vec2 v_Texcoord0;\n\nvec2 rotateVector(vec2 pos, vec2 center, float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    vec2 offset = pos - center;\n    vec2 rotatedOffset = vec2(\n        offset.x * cosAngle - offset.y * sinAngle,\n        offset.x * sinAngle + offset.y * cosAngle\n    );\n    return center + rotatedOffset;\n}\n\nvec2 rotateVec2(float rad,vec2 pos){\n    float s = sin(rad);\n    float c = cos(rad);\n    float x = pos.x*c-pos.y*s;\n    float y = pos.x*s+c*pos.y;\n    return vec2(x,y);\n}\n\nvec2 scaleVec2(vec2 scale,vec2 pos){\n    float x = scale.x * pos.x;\n    float y = scale.y * pos.y;\n    return vec2(x,y);\n}\n\nvec2 transVec2(vec2 trans,vec2 pos){\n    float x = pos.x + trans.x;\n    float y = pos.y + trans.y;\n    return vec2(x,y);\n}\n\n\nvoid main(){\n    vec2 center = u_FlareCenter;\n    vec2 deltaPos = -2.0 * center;\n    vec2 lenFlarePosition = vec2(a_PositionTexcoord.x, a_PositionTexcoord.y);\n    // aspectRadio scale\n    vec2 aspectRadio = vec2(u_aspectRatio, 1.0);\n    //缩放\n    vec2 scale = vec2(a_DistanceRotationScale.z, a_DistanceRotationScale.w);\n    lenFlarePosition = scaleVec2(scale,lenFlarePosition);\n    //旋转\n    // float rad = acos(dot(normalize(center),vec2(0.0,1.0)));\n    // angular offset\n    #ifdef LENSFLAREAUTOROTATE\n        lenFlarePosition = rotateVec2(u_rotate, lenFlarePosition);\n        float texRotate = a_DistanceRotationScale.y;\n        lenFlarePosition = rotateVec2(texRotate, lenFlarePosition);\n    #endif\n    float angularoffset = u_Angularoffset;\n    lenFlarePosition = rotateVector(lenFlarePosition, center, angularoffset);\n    lenFlarePosition = scaleVec2(aspectRadio,lenFlarePosition);\n    //平移\n    lenFlarePosition = center + deltaPos * a_DistanceRotationScale.x + lenFlarePosition + u_Postionoffset;\n    gl_Position = vec4(lenFlarePosition.x, lenFlarePosition.y, 0.0, 1.0);\n    v_Texcoord0 = a_PositionTexcoord.zw;\n}\n","#define SHADER_NAME LENSFLARESFS\n\nvarying vec2 v_Texcoord0;\n\nvoid main(){\n      gl_FragColor = texture2D(u_FlareTexture, v_Texcoord0)* u_Tint * u_TintIntensity;\n}","import LensFlareVS from \"../shader/LensFlare/LensFlare.vs\";\nimport LensFlareFS from \"../shader/LensFlare/LensFlare.fs\";\nimport { Color } from \"../../../maths/Color\";\nimport { ShaderDataType } from \"../../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { RenderState } from \"../../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { Shader3D, ShaderFeatureType } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../../RenderEngine/RenderShader/SubShader\";\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\nexport class LensFlareShaderInit {\n    static init() {\n        let attribute = {\n            'a_PositionTexcoord': [LensFlareElementGeomtry.PositionUV, ShaderDataType.Vector4],\n            'a_DistanceRotationScale': [LensFlareElementGeomtry.PositionRotationScale, ShaderDataType.Vector4],\n        };\n        let uniformMap = {\n            \"u_Tint\": ShaderDataType.Color,\n            \"u_TintIntensity\": ShaderDataType.Float,\n            \"u_FlareTexture\": ShaderDataType.Texture2D,\n            \"u_FlareCenter\": ShaderDataType.Vector2,\n            \"u_aspectRatio\": ShaderDataType.Float,\n            \"u_rotate\": ShaderDataType.Float,\n            \"u_Postionoffset\": ShaderDataType.Vector2,\n            \"u_Angularoffset\": ShaderDataType.Float,\n        };\n        let defaultValue = {\n            \"u_Tint\": Color.WHITE,\n            \"u_aspectRatio\": 1\n        };\n        let shader = Shader3D.add(\"LensFlare\", true, false);\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let subshader = new SubShader(attribute, uniformMap, defaultValue);\n        shader.addSubShader(subshader);\n        let pass = subshader.addShaderPass(LensFlareVS, LensFlareFS);\n        pass.statefirst = true;\n        pass.renderState.cull = RenderState.CULL_NONE;\n    }\n}\n","import { Laya } from \"../../../../Laya\";\nimport { Color } from \"../../../maths/Color\";\nimport { Vector2 } from \"../../../maths/Vector2\";\nimport { Vector3 } from \"../../../maths/Vector3\";\nimport { Vector4 } from \"../../../maths/Vector4\";\nimport { Shader3D } from \"../../../RenderEngine/RenderShader/Shader3D\";\nimport { Resource } from \"../../../resource/Resource\";\nimport { Texture2D } from \"../../../resource/Texture2D\";\nimport { Utils } from \"../../../utils/Utils\";\nimport { LightType } from \"../../core/light/Light\";\nimport { PostProcessEffect } from \"../../core/render/postProcessBase/PostProcessEffect\";\nimport { LensFlareCMD } from \"./LensFlareCMD\";\nimport { LensFlareElementGeomtry } from \"./LensFlareGeometry\";\nimport { LensFlareShaderInit } from \"./LensFlareShaderInit\";\nexport class LensFlareElement {\n    constructor() {\n        this._active = true;\n        this._tint = new Color(1, 1, 1, 1);\n        this._intensity = 1;\n        this._texture = Texture2D.whiteTexture;\n        this._positionOffset = new Vector2(0, 0);\n        this._scale = new Vector2(1, 1);\n        this._autoRotate = false;\n        this._rotation = 0;\n        this._startPosition = 0.0;\n        this._angularOffset = 0;\n        this._aspectRatio = false;\n        this._modulateByLightColor = false;\n        this._translationScale = new Vector2(1, 1);\n    }\n    get active() {\n        return this._active;\n    }\n    set active(value) {\n        this._active = value;\n    }\n    get tint() {\n        return this._tint;\n    }\n    set tint(value) {\n        this._tint = value;\n    }\n    get intensity() {\n        return this._intensity;\n    }\n    set intensity(value) {\n        this._intensity = value;\n    }\n    get texture() {\n        return this._texture;\n    }\n    set texture(value) {\n        this._texture = value;\n    }\n    get positionOffset() {\n        return this._positionOffset;\n    }\n    set positionOffset(value) {\n        this._positionOffset = value;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(value) {\n        this._scale = value;\n    }\n    get autoRotate() {\n        return this._autoRotate;\n    }\n    set autoRotate(value) {\n        this._autoRotate = value;\n    }\n    get rotation() {\n        return this._rotation;\n    }\n    set rotation(value) {\n        this._rotation = value;\n    }\n    get startPosition() {\n        return this._startPosition;\n    }\n    set startPosition(value) {\n        this._startPosition = value;\n    }\n    get angularOffset() {\n        return this._angularOffset;\n    }\n    set angularOffset(value) {\n        this._angularOffset = value;\n    }\n}\nexport class LensFlareData extends Resource {\n    constructor() {\n        super(false);\n        this.elements = [];\n    }\n}\nexport class LensFlareEffect extends PostProcessEffect {\n    static __initDefine__() {\n        LensFlareEffect.SHADERDEFINE_AUTOROTATE = Shader3D.getDefineByName(\"LENSFLAREAUTOROTATE\");\n    }\n    static init() {\n        LensFlareElementGeomtry.init();\n        LensFlareShaderInit.init();\n        LensFlareEffect.__initDefine__();\n    }\n    get lensFlareData() {\n        return this._lensFlareData;\n    }\n    set lensFlareData(value) {\n        if (!value)\n            return;\n        this._flareCMDS.length = 0;\n        for (let i = 0; i < value.elements.length; i++) {\n            let ele = value.elements[i];\n            if (!ele.active)\n                continue;\n            var cmd = new LensFlareCMD();\n            cmd.lensFlareElement = ele;\n            this._flareCMDS.push(cmd);\n        }\n        this._lensFlareData = value;\n        this._needUpdate = true;\n    }\n    get bindLight() {\n        return this._light;\n    }\n    set bindLight(light) {\n        if (!light)\n            return;\n        this._light = light;\n        this._needUpdate = true;\n    }\n    get effectIntensity() {\n        return this._effectIntensity;\n    }\n    set effectIntensity(value) {\n        this._effectIntensity = value;\n        this._needUpdate = true;\n    }\n    get effectScale() {\n        return this._effectScale;\n    }\n    set effectScale(value) {\n        this._effectScale = value;\n        this._needUpdate = true;\n    }\n    constructor() {\n        super();\n        this._effectIntensity = 1;\n        this._effectScale = 1;\n        this._needUpdate = false;\n        this.singleton = false;\n        this._flareCMDS = [];\n        this._flareCMDS.push(new LensFlareCMD());\n        this._center = new Vector2();\n    }\n    _updateEffectData(cmd) {\n        if (this._flareCMDS.length == 0)\n            return;\n        for (let i = 0; i < this._flareCMDS.length; i++) {\n            this._flareCMDS[i].center = this._center;\n            this._flareCMDS[i].rotate = this._rotate;\n            if (this._needUpdate) {\n                let cmdEle = this._flareCMDS[i].lensFlareElement;\n                if (!cmdEle)\n                    continue;\n                cmdEle.intensity *= this.effectIntensity;\n                let scale = cmdEle.scale;\n                scale.setValue(scale.x * this.effectScale, scale.y * this.effectScale);\n                cmdEle.scale = scale;\n                this._flareCMDS[i].applyElementData();\n            }\n            this._flareCMDS[i].run(cmd);\n        }\n        this._needUpdate = false;\n    }\n    caculateDirCenter(camera) {\n        this._light.direction.cloneTo(_tempV3);\n        Vector3.scale(_tempV3, -10, _tempV3);\n        Vector3.add(camera.transform.position, _tempV3, _tempV3);\n        Vector3.transformV3ToV4(_tempV3, camera.projectionViewMatrix, _tempV4);\n        this._center.setValue(_tempV4.x / _tempV4.w, _tempV4.y / _tempV4.w);\n        var angle = Utils.toAngle(Math.atan2(this._center.x, this._center.y));\n        angle = (angle < 0) ? angle + 360 : angle;\n        angle = Math.round(angle);\n        this._rotate = Math.PI * 2.0 - Math.PI / 180 * angle;\n    }\n    caculatePointCenter(camera) {\n        this._needUpdate = true;\n    }\n    caculateSpotCenter(value) {\n        this._needUpdate = true;\n    }\n    render(context) {\n        var cmd = context.command;\n        let source = context.indirectTarget;\n        cmd.setRenderTarget(source, false, false);\n        if (!this._light)\n            return;\n        switch (this._light.lightType) {\n            case LightType.Directional:\n                this.caculateDirCenter(context.camera);\n                break;\n            case LightType.Point:\n                break;\n            case LightType.Spot:\n                break;\n        }\n        if (Math.abs(this._center.x) > 1.0 || Math.abs(this._center.y) > 1.0)\n            return;\n        this._updateEffectData(cmd);\n        cmd.blitScreenQuad(source, context.destination);\n    }\n    release(postprocess) {\n        this._needUpdate = false;\n    }\n}\nconst _tempV3 = new Vector3();\nconst _tempV4 = new Vector4();\nLaya.addInitCallback(() => LensFlareEffect.init());\n","import { Loader } from \"../../net/Loader\";\nimport { URL } from \"../../net/URL\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { LensFlareData } from \"../postProcessEffect/LensFlares/LensFlareEffect\";\nexport class LensFlareSettingsLoader {\n    load(task) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(), task.options).then(data => {\n            if (!data)\n                return null;\n            let ret = new LensFlareData();\n            let basePath = URL.getPath(task.url);\n            let promises = [];\n            let elements = data.elements;\n            if (elements)\n                for (let i = elements.length - 1; i >= 0; i--) {\n                    let e = elements[i];\n                    if (e.texture && e.texture._$uuid && '' != e.texture._$uuid) {\n                        let url = URL.getResURLByUUID(e.texture._$uuid);\n                        if (!url.startsWith(\"res://\"))\n                            url = URL.join(basePath, url);\n                        promises.push(task.loader.load(url).then((t) => {\n                            e.texture = t;\n                        }));\n                    }\n                    if (e.tint) {\n                        e.tint = new Color(e.tint.r, e.tint.g, e.tint.b, e.tint.a);\n                    }\n                    if (e.positionOffset) {\n                        e.positionOffset = new Vector2(e.positionOffset.x, e.positionOffset.y);\n                    }\n                    if (e.scale) {\n                        e.scale = new Vector2(e.scale.x, e.scale.y);\n                    }\n                }\n            return Promise.all(promises).then(() => {\n                ret.elements = elements;\n                return ret;\n            });\n        });\n    }\n}\nLoader.registerLoader([\"lensflare\"], LensFlareSettingsLoader);\n","#define SHADER_NAME OcclusionEstimationFS\n\n#include \"DepthNormalUtil.glsl\";\n\n#include \"AmbientOcclusion.glsl\";\n\n#define FIX_SAMPLING_PATTERN\n\n// Check if the camera is perspective.\n// (returns 1.0 when orthographic)\nfloat CheckPerspective(float x)\n{\n    // todo ortho\n    return mix(x, 1.0, 0.0);\n}\n\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\n{\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\n}\n\n// Pseudo random number generator with 2D coordinates\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat UVRandom(float u, float v)\n{\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\n    return fract(43758.5453 * sin(f));\n}\n\nvec2 CosSin(float theta)\n{\n    // float sn, cs;\n    // sincos(theta, sn, cs);\n    float sn = sin(theta);\n    float cs = cos(theta);\n    return vec2(cs, sn);\n}\n\nfloat GradientNoise(vec2 uv)\n{\n    uv = floor(uv * u_MainTex_TexelSize.zw);\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\n    return fract(52.9829189 * fract(f));\n}\n\n// Sample point picker\nvec3 PickSamplePoint(vec2 uv, float index)\n{\n#if defined(FIX_SAMPLING_PATTERN)\n    float gn = GradientNoise(uv * DOWNSAMPLE);\n    float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\n    float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\n#else\n    float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\n    float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\n#endif\n\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\n    return v * l;\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n    mat3 proj = mat3(u_Projection);\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\n\n    vec3 norm_o;\n    float depth_o = SampleDepthNormal(uv, norm_o);\n\n    // Reconstruct the view-space position.\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\n\n    float ao = 0.0;\n\n    for (int s = 0; s < int(SAMPLE_COUNT); s++)\n\t{\n\t    float s_float = float(s);\n\t    vec3 v_s1 = PickSamplePoint(uv, s_float);\n\n\t    v_s1 = faceforward(v_s1, -norm_o, v_s1);\n\t    vec3 vpos_s1 = vpos_o + v_s1;\n\n\t    // Reproject the sample point\n\t    vec3 spos_s1 = proj * vpos_s1;\n\t    vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\n\n\t    float depth_s1 = SampleDepth(uv_s1_01);\n\n\t    vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\n\t    vec3 v_s2 = vpos_s2 - vpos_o;\n\n\t    float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\n\t    float a2 = dot(v_s2, v_s2) + EPSILON;\n\n\t    ao += a1 / a2;\n\t}\n\n    ao *= RADIUS;\n\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\n\n    gl_FragColor = PackAONormal(ao, norm_o);\n}\n\n/**\n    0.8741,     0,          0,          0,\n    0,          1.7320,     0,          0,\n    0,          0,          -1.0152,    -1,\n    0,          0,          -0.3046,    0\n**/","#define SHADER_NAME AOBlurHorizontal\n//质量\n#define BLUR_HIGH_QUALITY 0\n\nvarying vec2 v_Texcoord0;\n\n// uniform vec2 u_Delty;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\n\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\nvec4 PackAONormal(float ao, vec3 normal)\n{\n    return vec4(ao, normal * 0.5 + 0.5);\n}\n\nvoid main()\n{\n    vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0 * u_Delty.x, u_Delty.y * u_MainTex_TexelSize.y * 2.0);\n    vec2 uv = v_Texcoord0;\n\n// #if defined(BLUR_HIGH_QUALITY) //兼容WGSL\n\n    // High quality 7-tap Gaussian with adaptive sampling\n    vec2 uvtran = uv;\n    vec4 p0 = texture2D(u_MainTex, uv);\n    uvtran = uv - delta;\n    vec4 p1a = texture2D(u_MainTex, uvtran);\n    uvtran = uv + delta;\n    vec4 p1b = texture2D(u_MainTex, uvtran);\n    uvtran = uv - delta * 2.0;\n    vec4 p2a = texture2D(u_MainTex, uvtran);\n    uvtran = uv + delta * 2.0;\n    vec4 p2b = texture2D(u_MainTex, uvtran);\n    uvtran = uv - delta * 3.2307692308;\n    vec4 p3a = texture2D(u_MainTex, uvtran);\n    ;\n    uvtran = uv + delta * 3.2307692308;\n    vec4 p3b = texture2D(u_MainTex, uvtran);\n    ;\n\n    vec3 n0 = GetPackedNormal(p0);\n\n    float w0 = 0.37004405286;\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\n\n    float s;\n    s = GetPackedAO(p0) * w0;\n    s += GetPackedAO(p1a) * w1a;\n    s += GetPackedAO(p1b) * w1b;\n    s += GetPackedAO(p2a) * w2a;\n    s += GetPackedAO(p2b) * w2b;\n    s += GetPackedAO(p3a) * w3a;\n    s += GetPackedAO(p3b) * w3b;\n\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\n\n// #else\n\n//     // Fater 5-tap Gaussian with linear sampling\n//     vec4 p0 = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\n//     vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\n//     vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\n//     vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\n//     vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\n\n//     vec2 uvtran = uv;\n//     vec4 p0 = texture2D(u_MainTex, uv);\n//     uvtran = uv - delta * 1.3846153846;\n//     vec4 p1a = texture2D(u_MainTex, uvtran);\n//     uvtran = uv + delta * 1.3846153846;\n//     vec4 p1b = texture2D(u_MainTex, uvtran);\n//     uvtran = uv - delta * 3.2307692308;\n//     vec4 p2a = texture2D(u_MainTex, uvtran);\n//     uvtran = uv + delta * 3.2307692308;\n//     vec4 p2b = texture2D(u_MainTex, uvtran);\n\n//     vec3 n0 = GetPackedNormal(p0);\n\n//     float w0 = 0.2270270270;\n//     float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\n//     float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\n//     float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\n//     float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\n\n//     float s;\n//     s = GetPackedAO(p0) * w0;\n//     s += GetPackedAO(p1a) * w1a;\n//     s += GetPackedAO(p1b) * w1b;\n//     s += GetPackedAO(p2a) * w2a;\n//     s += GetPackedAO(p2b) * w2b;\n\n//     s /= w0 + w1a + w1b + w2a + w2b;\n\n// #endif\n\n    gl_FragColor = PackAONormal(s, n0);\n}","#define SHADER_NAME AOComposition\n\n#include \"Color.glsl\";\n\n#define BLUR_HIGH_QUALITY 0\n\nvarying vec2 v_Texcoord0;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\n// Geometry-aware bilateral filter (single pass/small kernel)\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\n{\n    vec4 p0 = texture2D(tex, uv);\n    vec2 uvtran = uv + vec2(-delta.x, -delta.y);\n    vec4 p1 = texture2D(tex, uvtran);\n    uvtran = uv + vec2(delta.x, -delta.y);\n    vec4 p2 = texture2D(tex, uvtran);\n    uvtran = uv + vec2(-delta.x, delta.y);\n    vec4 p3 = texture2D(tex, uvtran);\n    uvtran = uv + delta;\n    vec4 p4 = texture2D(tex, uvtran);\n\n    vec3 n0 = GetPackedNormal(p0);\n\n    float w0 = 1.0;\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\n\n    float s;\n    s = GetPackedAO(p0) * w0;\n    s += GetPackedAO(p1) * w1;\n    s += GetPackedAO(p2) * w2;\n    s += GetPackedAO(p3) * w3;\n    s += GetPackedAO(p4) * w4;\n\n    return s / (w0 + w1 + w2 + w3 + w4);\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n    vec2 delty = u_MainTex_TexelSize.xy;\n    float ao = BlurSmall(u_compositionAoTexture, uv, delty);\n    vec4 albedo = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    albedo = gammaToLinear(albedo);\n#endif // Gamma_u_MainTex\n    vec4 aocolor = vec4(ao * u_AOColor.rgb, ao);\n    albedo.rgb = albedo.rgb * (1.0 - ao) + ao * u_AOColor.rgb * ao;\n    gl_FragColor = albedo;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}","#include \"Camera.glsl\";\n// const \n#define TWO_PI 6.2831852\n\n#define EPSILON         1.0e-4\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nconst float kContrast = 0.6;\nconst float kGeometryCoeff = 0.8;\nconst float kBeta = 0.002;\n\n\n// varying\nvarying vec2 v_Texcoord0;\n\n#if defined(AO_High)\n\t#define SAMPLE_COUNT 12\n#elif defined(AO_MEDIUM)\n\t#define SAMPLE_COUNT 8\n#else\n\t#define SAMPLE_COUNT 4\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n\n#define INTENSITY u_AOParams.x\n#define RADIUS u_AOParams.y\n#define DOWNSAMPLE u_AOParams.z\n\nfloat PositivePow(float base, float power)\n{\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\n}\n\n\n// Boundary check for depth sampler\n// (returns a very large value if it lies out of bounds)\nfloat CheckBounds(vec2 uv, float d) \n{\n    float ob = 0.0;\n    // todo\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \n    {\n        ob = 1.0;\n    }\n    if (d <= 0.00001) {\n        ob += 1.0;\n    }\n\n    return ob * 1e8;\n}\n\nfloat SampleDepth(vec2 uv) \n{\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\n}\n\nvec3 SampleNormal(vec2 uv) \n{\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\n}\n\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \n{\n    normal = SampleNormal(uv);\n    return SampleDepth(uv);\n}\n\n// Normal vector comparer (for geometry-aware weighting)\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\n}\n\n// Accessors for packed AO/normal buffer\nvec4 PackAONormal(float ao, vec3 n) \n{\n    return vec4(ao, n * 0.5 + 0.5);\n}\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat GetPackAO(vec4 p)\n{\n    return p.r;\n}\n\n\n","import BlitScreenVS from \"../shader/postprocess/BlitScreen.vs\";\nimport FragAO from \"./shader/ScalableAO/FragAO.fs\";\nimport AoBlurHorizontal from \"./shader/ScalableAO/AoBlurHorizontal.fs\";\nimport AOComposition from \"./shader/ScalableAO/AOComposition.fs\";\nimport AmbientOcclusion from \"./shader/ScalableAO/AmbientOcclusion.glsl\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { RenderState } from \"../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { RenderTargetFormat } from \"../../RenderEngine/RenderEnum/RenderTargetFormat\";\nimport { WrapMode } from \"../../RenderEngine/RenderEnum/WrapMode\";\nimport { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { VertexMesh } from \"../../RenderEngine/RenderShader/VertexMesh\";\nimport { DepthTextureMode, RenderTexture } from \"../../resource/RenderTexture\";\nimport { BaseCamera } from \"../core/BaseCamera\";\nimport { PostProcessEffect } from \"../core/render/postProcessBase/PostProcessEffect\";\nimport { Laya } from \"../../../Laya\";\nexport var AOQUALITY;\n(function (AOQUALITY) {\n    AOQUALITY[AOQUALITY[\"High\"] = 0] = \"High\";\n    AOQUALITY[AOQUALITY[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    AOQUALITY[AOQUALITY[\"LOWEST\"] = 2] = \"LOWEST\";\n})(AOQUALITY || (AOQUALITY = {}));\nexport class ScalableAO extends PostProcessEffect {\n    static init() {\n        ScalableAO.BlurDelty = Shader3D.propertyNameToID(\"u_Delty\");\n        ScalableAO.AOColor = Shader3D.propertyNameToID(\"u_AOColor\");\n        ScalableAO.aoTexture = Shader3D.propertyNameToID(\"u_compositionAoTexture\");\n        ScalableAO.AOParams = Shader3D.propertyNameToID('u_AOParams');\n        ScalableAO.SourceTex = Shader3D.propertyNameToID('u_SourceTex');\n        ScalableAO.SHADERDEFINE_AOHigh = Shader3D.getDefineByName(\"AO_High\");\n        ScalableAO.SHADERDEFINE_AOMEDIUM = Shader3D.getDefineByName(\"AO_MEDIUM\");\n        ScalableAO.SHADERDEFINE_LOWEST = Shader3D.getDefineByName(\"AO_LOWEST\");\n        Shader3D.addInclude(\"AmbientOcclusion.glsl\", AmbientOcclusion);\n        let attributeMap = {\n            'a_PositionTexcoord': [VertexMesh.MESH_POSITION0, ShaderDataType.Vector4]\n        };\n        let uniformMap = {\n            'u_OffsetScale': ShaderDataType.Vector4,\n            'u_MainTex': ShaderDataType.Texture2D,\n            'u_MainTex_TexelSize': ShaderDataType.Vector4,\n            'u_Delty': ShaderDataType.Vector2,\n            'u_PlugTime': ShaderDataType.Vector4,\n            'u_AOParams': ShaderDataType.Vector3,\n            'u_BlurVector': ShaderDataType.Vector2,\n            'u_AOColor': ShaderDataType.Color,\n            'u_compositionAoTexture': ShaderDataType.Texture2D\n        };\n        let shader = Shader3D.add(\"ScalableAO\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        let subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let aoPass = subShader.addShaderPass(BlitScreenVS, FragAO);\n        aoPass.statefirst = true;\n        aoPass.renderState.cull = RenderState.CULL_NONE;\n        shader = Shader3D.add(\"AOBlurHorizontal\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let blurPass = subShader.addShaderPass(BlitScreenVS, AoBlurHorizontal);\n        blurPass.statefirst = true;\n        blurPass.renderState.cull = RenderState.CULL_NONE;\n        shader = Shader3D.add(\"AOComposition\");\n        shader.shaderType = ShaderFeatureType.PostProcess;\n        subShader = new SubShader(attributeMap, uniformMap);\n        shader.addSubShader(subShader);\n        let compositionPass = subShader.addShaderPass(BlitScreenVS, AOComposition);\n        compositionPass.statefirst = true;\n        compositionPass.renderState.cull = RenderState.CULL_NONE;\n    }\n    constructor() {\n        super();\n        this._aoParams = new Vector3();\n        this._aoQuality = AOQUALITY.MEDIUM;\n        this._shader = Shader3D.find(\"ScalableAO\");\n        this._shaderData = LayaGL.renderDeviceFactory.createShaderData(null);\n        this._aoParams = new Vector3(0.12, 0.15, 1);\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n        this._shaderData.setVector(BaseCamera.DEPTHZBUFFERPARAMS, new Vector4());\n        this._aoBlurHorizontalShader = Shader3D.find(\"AOBlurHorizontal\");\n        this._aoComposition = Shader3D.find(\"AOComposition\");\n        this.aoQuality = AOQUALITY.MEDIUM;\n    }\n    get aoColor() {\n        return this._shaderData.getColor(ScalableAO.AOColor);\n    }\n    set aoColor(value) {\n        this._shaderData.setColor(ScalableAO.AOColor, value);\n    }\n    get intensity() {\n        return this._aoParams.x;\n    }\n    set intensity(value) {\n        this._aoParams.x = value;\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n    }\n    get radius() {\n        return this._aoParams.y;\n    }\n    set radius(value) {\n        this._aoParams.y = value;\n        this._shaderData.setVector3(ScalableAO.AOParams, this._aoParams);\n    }\n    get aoQuality() {\n        return this._aoQuality;\n    }\n    set aoQuality(value) {\n        this._aoQuality = value;\n        switch (value) {\n            case AOQUALITY.High:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                break;\n            case AOQUALITY.MEDIUM:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                break;\n            case AOQUALITY.LOWEST:\n                this._shaderData.addDefine(ScalableAO.SHADERDEFINE_LOWEST);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh);\n                this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM);\n                break;\n        }\n    }\n    getCameraDepthTextureModeFlag() {\n        return DepthTextureMode.DepthAndDepthNormals;\n    }\n    render(context) {\n        let cmd = context.command;\n        let viewport = context.camera.viewport;\n        let camera = context.camera;\n        camera.depthTextureMode |= DepthTextureMode.DepthNormals;\n        camera.depthTextureMode |= DepthTextureMode.Depth;\n        let depthNormalTexture = camera.depthNormalTexture;\n        let depthTexture = camera.depthTexture;\n        if (!depthNormalTexture || !depthTexture) {\n            return;\n        }\n        depthNormalTexture.wrapModeU = WrapMode.Clamp;\n        depthNormalTexture.wrapModeV = WrapMode.Clamp;\n        let source = context.source;\n        let width = source.width;\n        let height = source.height;\n        let textureFormat = source.colorFormat;\n        let depthFormat = RenderTargetFormat.None;\n        let finalTex = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\n        let shader = this._shader;\n        let shaderData = this._shaderData;\n        cmd.blitScreenTriangle(context.source, finalTex, null, shader, shaderData, 0);\n        let blurTex = RenderTexture.createFromPool(width, height, textureFormat, depthFormat, false, 1);\n        cmd.blitScreenTriangle(finalTex, blurTex, null, this._aoBlurHorizontalShader, shaderData, 0);\n        cmd.setShaderDataVector2(shaderData, ScalableAO.BlurDelty, ScalableAO.deltyVector);\n        cmd.blitScreenTriangle(blurTex, finalTex, null, this._aoBlurHorizontalShader, this._shaderData, 0);\n        cmd.setShaderDataTexture(shaderData, ScalableAO.aoTexture, finalTex);\n        cmd.blitScreenTriangle(context.source, context.destination, null, this._aoComposition, this._shaderData, 0);\n        context.deferredReleaseTextures.push(finalTex);\n        context.deferredReleaseTextures.push(blurTex);\n    }\n}\nScalableAO.deltyHorizontal = new Vector2(1.0, 0.0);\nScalableAO.deltyVector = new Vector2(0.0, 1.0);\nLaya.addInitCallback(() => ScalableAO.init());\n","import { ClassUtils } from \"../../utils/ClassUtils\";\nimport { BloomEffect } from \"./BloomEffect\";\nimport { ColorGradEffect } from \"./ColorGradEffect\";\nimport { GaussianDoF } from \"./GaussianDoF\";\nimport { LensFlareEffect, LensFlareElement, LensFlareData } from \"./LensFlares/LensFlareEffect\";\nimport { ScalableAO } from \"./ScalableAO\";\nlet c = ClassUtils.regClass;\nc(\"BloomEffect\", BloomEffect);\nc(\"GaussianDoF\", GaussianDoF);\nc(\"ScalableAO\", ScalableAO);\nc(\"ColorGradEffect\", ColorGradEffect);\nc(\"LensFlareEffect\", LensFlareEffect);\nc(\"LensFlareElement\", LensFlareElement);\nc(\"LensFlareData\", LensFlareData);\n"],"names":["PostProcessEffect","Shader3D","VertexMesh","ShaderDataType","ShaderFeatureType","SubShader","RenderState","LayaGL","Color","Vector4","Texture2D","RenderTexture","RenderTargetFormat","FilterMode","PostProcess","Laya","ToneMappingType","BlitVS","Vector3","Material","WrapMode","DepthTextureMode","GeometryElement","VertexDeclaration","VertexElement","VertexElementFormat","MeshTopology","DrawType","IndexFormat","Laya3DRender","BufferUsage","BufferState","RenderElement","MaterialRenderMode","Utils","RenderContext3D","Vector2","Resource","LightType","URL","Loader","AOQUALITY","BaseCamera","ClassUtils"],"mappings":"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"}