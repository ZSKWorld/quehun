{"version":3,"file":"laya.spine.js","sources":["../../bin/tsc/layaAir/laya/spine/ExternalSkin.js","../../bin/tsc/layaAir/laya/spine/ExternalSkinItem.js","../../bin/tsc/layaAir/laya/spine/files/SpineVertex.glsl","../../bin/tsc/layaAir/laya/spine/files/SpineFragment.glsl","../../bin/tsc/layaAir/laya/spine/files/SpineStandard.vs","../../bin/tsc/layaAir/laya/spine/files/SpineStandard.fs","../../bin/tsc/layaAir/laya/spine/mesh/SpineMeshUtils.js","../../bin/tsc/layaAir/laya/spine/material/SpineShaderInit.js","../../bin/tsc/layaAir/laya/spine/mesh/SpineMeshBase.js","../../bin/tsc/layaAir/laya/spine/mesh/SpineVirtualMesh.js","../../bin/tsc/layaAir/laya/spine/normal/SpineNormalRenderBase.js","../../bin/tsc/layaAir/laya/spine/normal/SpineSkeletonRenderer.js","../../bin/tsc/layaAir/laya/spine/mesh/SpineWasmVirturalMesh.js","../../bin/tsc/layaAir/laya/spine/normal/SpineWasmRender.js","../../bin/tsc/layaAir/laya/spine/SpineAdapter.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineNormalRender.js","../../bin/tsc/layaAir/laya/spine/optimize/change/ChangeDeform.js","../../bin/tsc/layaAir/laya/spine/optimize/change/ChangeDrawOrder.js","../../bin/tsc/layaAir/laya/spine/optimize/change/ChangeRGBA.js","../../bin/tsc/layaAir/laya/spine/optimize/change/ChangeSlot.js","../../bin/tsc/layaAir/laya/spine/optimize/AnimationRender.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineOptimizeConst.js","../../bin/tsc/layaAir/laya/spine/optimize/AttachmentParse.js","../../bin/tsc/layaAir/laya/spine/optimize/MultiRenderData.js","../../bin/tsc/layaAir/laya/spine/optimize/IBCreator.js","../../bin/tsc/layaAir/laya/spine/optimize/SlotUtils.js","../../bin/tsc/layaAir/laya/spine/optimize/AnimationRenderProxy.js","../../bin/tsc/layaAir/laya/spine/optimize/SkinRenderUpdate.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineOptimizeRender.js","../../bin/tsc/layaAir/laya/spine/optimize/VBCreator.js","../../bin/tsc/layaAir/laya/spine/optimize/SketonOptimise.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineEmptyRender.js","../../bin/tsc/layaAir/laya/spine/Spine2DRenderNode.js","../../bin/tsc/layaAir/laya/spine/SpineSkeleton.js","../../bin/tsc/layaAir/laya/spine/SpineTemplet.js","../../bin/tsc/layaAir/laya/spine/SpineTexture.js","../../bin/tsc/layaAir/laya/spine/SpineTempletLoader.js","../../bin/tsc/layaAir/laya/spine/ModuleDef.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineBakeScript.js","../../bin/tsc/layaAir/laya/spine/optimize/SpineInstanceBatch.js"],"sourcesContent":["import { ILaya } from \"../../ILaya\";\nimport { Loader } from \"../net/Loader\";\nexport class ExternalSkin {\n    constructor() {\n        this.normal = false;\n    }\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        this._source = value;\n        if (value) {\n            ILaya.loader.load(value, Loader.SPINE).then((templet) => {\n                if (!this._source || templet && !templet.isCreateFromURL(this._source))\n                    return;\n                this.templet = templet;\n            });\n        }\n        else\n            this.templet = null;\n    }\n    get items() {\n        return this._items;\n    }\n    set items(value) {\n        this._items = value;\n    }\n    get templet() {\n        return this._templet;\n    }\n    set templet(value) {\n        this.init(value);\n    }\n    init(templet) {\n        this._templet = templet;\n        if (!this._templet) {\n            return;\n        }\n        this.flush();\n    }\n    flush() {\n        var _a, _b, _c;\n        let targetTemplet = (_a = this.target) === null || _a === void 0 ? void 0 : _a.templet;\n        let skeletonData = (_b = this._templet) === null || _b === void 0 ? void 0 : _b.skeletonData;\n        if (this._items && skeletonData\n            && targetTemplet\n            && targetTemplet._textures) {\n            for (let i = this._items.length - 1; i >= 0; i--) {\n                let o = this._items[i];\n                let attachmentStr = o.attachment;\n                let slot = o.slot;\n                let skinStr = o.skin;\n                if (attachmentStr && slot && skinStr) {\n                    let attachment = null;\n                    let skins = skeletonData.skins;\n                    for (let j = skins.length - 1; j >= 0; j--) {\n                        if (skins[j].name == skinStr) {\n                            let skin = skins[j];\n                            let attachments = skin.attachments;\n                            for (let j = attachments.length - 1; j >= 0; j--) {\n                                attachment = (_c = attachments[j]) === null || _c === void 0 ? void 0 : _c[attachmentStr];\n                                if (attachment) {\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    if (attachment) {\n                        let regionPage = attachment.region.page;\n                        targetTemplet.setTexture(regionPage.name, regionPage.texture.realTexture);\n                        let slotObj = this.target.getSkeleton().findSlot(slot);\n                        if (slotObj) {\n                            slotObj.setAttachment(attachment);\n                        }\n                    }\n                }\n            }\n            this.normal = this._templet !== targetTemplet;\n        }\n        else {\n            this.normal = false;\n        }\n    }\n}\n","export class ExternalSkinItem {\n    get skin() {\n        return this._skin;\n    }\n    set skin(value) {\n        this._skin = value;\n    }\n    get slot() {\n        return this._slot;\n    }\n    set slot(value) {\n        this._slot = value;\n    }\n    get attachment() {\n        return this._attachment;\n    }\n    set attachment(value) {\n        this._attachment = value;\n    }\n}\n","#if !defined(SpineVertex_lib)\n    #define SpineVertex_lib\n\n#ifdef SPINE_SIMPLE\n    uniform vec4 u_SimpleAnimatorParams;\n    uniform sampler2D u_SimpleAnimatorTexture;\n    uniform float u_SimpleAnimatorTextureSize;\n\n    vec4 getBonePosBake(float FramePos, float boneIndices , float weight , vec2 pos , float offset){\n        vec2 uv = vec2(0.0,0.0);\n        //float 2 * 4\n        float PixelPos = FramePos + boneIndices * 2.0;\n        float halfOffset = offset * 0.5;\n        float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\n\n        uv.y = floor(uvoffset) * offset + halfOffset;\n        uv.x = mod(PixelPos, u_SimpleAnimatorTextureSize) * offset + halfOffset;\n        \n        vec4 up = texture2D(u_SimpleAnimatorTexture, uv);\n        uv.x += offset;\n        vec4 down = texture2D(u_SimpleAnimatorTexture, uv);\n        // vec4 up = vec4(1.0,1.0 ,1.0 ,0.0 );\n        // vec4 down = vec4( 1.0,1.0 ,1.0 ,0.0 );\n        float x = pos.x*up.x + pos.y*up.y +up.z;\n        float y = pos.x*down.x + pos.y*down.y +down.z;\n        pos.x=x*weight;\n        pos.y=y*weight;\n        return vec4(pos,0.,1.0);\n    }\n#endif\n\n#if defined(SPINE_FAST) || defined(SPINE_RB)\n    uniform vec4 u_sBone[200];\n    vec4 getBonePos(float fboneId,float weight,vec2 pos){\n        int boneId=int(fboneId);\n        vec4 up= u_sBone[boneId*2];\n        vec4 down=u_sBone[boneId*2+1];\n        float x = pos.x*up.x + pos.y*up.y +up.z ;\n        float y = pos.x*down.x + pos.y*down.y +down.z;\n        pos.x=x*weight;\n        pos.y=y*weight;\n        return vec4(pos,0.,1.0);\n    }\n#endif\n\nuniform vec2 u_size;\nuniform vec4 u_color;\n\n\nvec4 getSpinePos(){\n\n    #ifdef SPINE_SIMPLE\n        #ifdef GPU_INSTANCE\n            float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\n\t    #else // GPU_INSTANCE\n            float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\n\t    #endif // GPU_INSTANCE\n\n        float offset = 1.0 / u_SimpleAnimatorTextureSize;\n\n        return getBonePosBake(currentPixelPos,a_BoneId,a_weight,a_position,offset)\n        +getBonePosBake(currentPixelPos,a_PosWeightBoneID_2.w,a_PosWeightBoneID_2.z,a_PosWeightBoneID_2.xy,offset)\n        +getBonePosBake(currentPixelPos,a_PosWeightBoneID_3.w,a_PosWeightBoneID_3.z,a_PosWeightBoneID_3.xy,offset)\n        +getBonePosBake(currentPixelPos,a_PosWeightBoneID_4.w,a_PosWeightBoneID_4.z,a_PosWeightBoneID_4.xy,offset);\n    #else\n        #ifdef SPINE_FAST\n            return getBonePos(a_BoneId,a_weight,a_position)\n            +getBonePos(a_PosWeightBoneID_2.w,a_PosWeightBoneID_2.z,a_PosWeightBoneID_2.xy)\n            +getBonePos(a_PosWeightBoneID_3.w,a_PosWeightBoneID_3.z,a_PosWeightBoneID_3.xy)\n            +getBonePos(a_PosWeightBoneID_4.w,a_PosWeightBoneID_4.z,a_PosWeightBoneID_4.xy);\n        #endif\n        \n        #ifdef SPINE_RB\n            return getBonePos(a_BoneId,1.0,a_position);\n            //return vec4(pos,0.,1.);\n        #endif\n    #endif // SPINE_SIMPLE\n    //spine Texture\n    return vec4(a_position.x,a_position.y,0.,1.);\n\n}\n\nvoid getGlobalPos(vec4 pos, out vec2 globalPos){\n    #ifdef GPU_INSTANCE\n        vec3 down =a_NMatrix_1;\n        vec3 up =a_NMatrix_0;\n    #else\n        vec3 down =u_NMatrix_1;\n        vec3 up =u_NMatrix_0;\n    #endif\n    float x=up.x*pos.x+up.y*pos.y+up.z;\n    float y=down.x*pos.x+down.y*pos.y-down.z;\n\n    globalPos = vec2(x,-y);\n}\n\nvec4 getScreenPos(vec4 pos){\n    #ifdef GPU_INSTANCE\n        vec3 down =a_NMatrix_1;\n        vec3 up =a_NMatrix_0;\n    #else\n        vec3 down =u_NMatrix_1;\n        vec3 up =u_NMatrix_0;\n    #endif\n    float x=up.x*pos.x+up.y*pos.y+up.z;\n    float y= -1.0 * (down.x*pos.x+down.y*pos.y-down.z);\n    \n    #ifdef CAMERA2D\n       vec2 posT= (u_view2D *vec3(x,y,1.0)).xy+u_baseRenderSize2D/2.;\n       x = posT.x;\n       y = posT.y;\n    #endif  \n    v_cliped = getClipedInfo(vec2(x,y));\n    return vec4((x/u_baseRenderSize2D.x-0.5)*2.0,(0.5 - y/u_baseRenderSize2D.y)*2.0,pos.z,1.0);\n}\n\nvoid getVertexInfo(vec4 pos, inout vertexInfo info){\n    info.pos = pos.xy;\n    info.color = vec4(1.0);\n    #ifdef COLOR\n        info.color = a_color;\n    #endif\n    info.color *= u_baseRenderColor;\n\n    #ifdef PREMULTIPLYALPHA\n        info.color.rgb = info.color.rgb * info.color.a;\n    #endif\n    \n    #ifdef UV\n        info.uv = a_uv;\n    #endif\n\n    #ifdef LIGHT2D_ENABLE\n        vec2 global;\n        vec3 stageInv0 = vec3(u_LightAndShadow2DStageMat0.x, u_LightAndShadow2DStageMat0.y, u_LightAndShadow2DStageMat0.z);\n        vec3 stageInv1 = vec3(u_LightAndShadow2DStageMat1.x, u_LightAndShadow2DStageMat1.y, u_LightAndShadow2DStageMat1.z);\n        invertMat(stageInv0, stageInv1); //获取stage的逆矩阵\n        getGlobalPos(pos, global); //先获得完整世界变换的位置\n        transfrom(global, stageInv0, stageInv1, global); //先去除stage变换\n        transfrom(global, u_LightAndShadow2DSceneInv0, u_LightAndShadow2DSceneInv1, global); //再去除scene变换\n        transfrom(global, u_LightAndShadow2DStageMat0, u_LightAndShadow2DStageMat1, global); //再恢复stage变换\n        //现在global中的值就和生成光影图时的值一致了，基于这个值生成光影图采样uv坐标\n        info.lightUV.x = (global.x - u_LightAndShadow2DParam.x) / u_LightAndShadow2DParam.z;\n        info.lightUV.y = 1.0 - (global.y - u_LightAndShadow2DParam.y) / u_LightAndShadow2DParam.w;\n    #endif\n}\n\n#endif // SpineVertex_lib","#if !defined(SpineFragment_lib)\n        #define SpineFragment_lib\n        \n        #include \"Sprite2DFrag.glsl\";\n    \nvec4 getColor(){\n    vec4 color = texture2D(u_spineTexture, v_texcoord.xy);//vec4(1.0,0.0,0.0,1.0);\n    #ifndef GAMMATEXTURE\n        //linear\n        #ifdef GAMMASPACE\n            color.xyz = linearToGamma(color.xyz);    \n        #endif\n    #else\n        //gamma\n        #ifndef GAMMASPACE\n            color.xyz = gammaToLinear(color.xyz);\n        #endif\n    #endif\n    \n    vec4 final;\n    #ifdef TWOCOLORTINT\n        final.a = color.a * v_color.a;\n        final.xyz = ((color.a - 1.0) * v_color2.a + 1.0 - color.xyz) * v_color2.xyz + color.xyz * v_color.xyz;\n    #else\n        final = color * v_color;\n    #endif\n\n    return final;\n}\n\n#endif //SpineFragment_lib","#define SHADER_NAME SpineStandardVS\n\n#include \"Sprite2DVertex.glsl\";\n\n#include \"SpineVertex.glsl\";\n\nvarying vec4 v_color2;\n\nvoid main()\n{\n    vec4 pos = getSpinePos();\n    vertexInfo info;\n    getVertexInfo(pos, info);\n    v_texcoord = info.uv;\n    v_color = info.color;\n    \n    #ifdef COLOR2\n        v_color2 = a_color2;\n    #else\n        v_color2 = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n\n    #ifdef PREMULTIPLYALPHA\n        v_color2.xyz = v_color2.xyz * v_color.a;\n    #endif\n\n    #ifdef LIGHT2D_ENABLE\n        lightAndShadow(info);\n    #endif\n\n    gl_Position = getScreenPos(pos);\n}","#define SHADER_NAME SpineStandardFS\n\nvarying vec4 v_color2;\n\n#include \"SpineFragment.glsl\";\n\n#ifdef COLOR_FILTER\n    uniform vec4 u_colorAlpha;\n    uniform mat4 u_colorMat;\n#endif\n\nvoid main(){\n    clip();\n    gl_FragColor = getColor();\n\n    #ifdef COLOR_FILTER\n        mat4 alphaMat = u_colorMat;\n\n        alphaMat[0][3] *= gl_FragColor.a;\n        alphaMat[1][3] *= gl_FragColor.a;\n        alphaMat[2][3] *= gl_FragColor.a;\n\n        gl_FragColor = gl_FragColor * alphaMat;\n        gl_FragColor += u_colorAlpha / 255.0 * gl_FragColor.a;\n    #endif\n\n    #ifdef LIGHT2D_ENABLE\n        lightAndShadow(gl_FragColor);\n    #endif\n}","import { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { RenderCapable } from \"../../RenderEngine/RenderEnum/RenderCapable\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { VertexElement } from \"../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../renders/VertexElementFormat\";\nimport { Mesh2D } from \"../../resource/Mesh2D\";\nexport class SpineMeshUtils {\n    static createMesh(type, vbCreator, ibCreator, isDynamic = false, uploadBuffer = true) {\n        let mesh = new Mesh2D;\n        let vertexBuffers = [];\n        let usage = isDynamic ? BufferUsage.Dynamic : BufferUsage.Static;\n        let vertexBuffer = LayaGL.renderDeviceFactory.createVertexBuffer(usage);\n        let vertexDeclaration = vbCreator.vertexDeclaration;\n        let vertexStride = vertexDeclaration.vertexStride;\n        vertexBuffer.vertexDeclaration = vertexDeclaration;\n        let vbByteLength = vbCreator.maxVertexCount * vertexStride;\n        let vbUploadLength = vbCreator.vbLength * Float32Array.BYTES_PER_ELEMENT;\n        vertexBuffer.setDataLength(vbByteLength);\n        if (uploadBuffer) {\n            vertexBuffer.setData(vbCreator.vb.buffer, 0, 0, vbUploadLength);\n        }\n        vertexBuffers.push(vertexBuffer);\n        mesh._vertexCount = vbByteLength / vertexStride;\n        mesh._vertexBuffers = vertexBuffers;\n        let ibByteLength = ibCreator.maxIndexCount * ibCreator.size;\n        let ibUploadLength = ibCreator.ibLength;\n        let indexbuffer = LayaGL.renderDeviceFactory.createIndexBuffer(usage);\n        indexbuffer.indexType = ibCreator.type;\n        indexbuffer.indexCount = ibCreator.maxIndexCount;\n        indexbuffer._setIndexDataLength(ibByteLength);\n        if (uploadBuffer) {\n            indexbuffer._setIndexData(ibCreator.ib, 0);\n        }\n        mesh._indexBuffer = indexbuffer;\n        let state = mesh._bufferState;\n        state.applyState(vertexBuffers, indexbuffer);\n        let subMeshes = [];\n        let multi = ibCreator.outRenderData;\n        for (let i = 0, len = multi.renderData.length; i < len; i++) {\n            let data = multi.renderData[i];\n            let geometry = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElement);\n            geometry.bufferState = state;\n            geometry.setDrawElemenParams(data.length, data.offset * ibCreator.size);\n            geometry.indexFormat = ibCreator.type;\n            subMeshes.push(geometry);\n        }\n        mesh._setSubMeshes(subMeshes);\n        var memorySize = vbByteLength + ibByteLength;\n        mesh._setCPUMemory(memorySize);\n        mesh._setGPUMemory(memorySize);\n        return mesh;\n    }\n    static createMeshDynamic(vertexDeclaration) {\n        let mesh = new Mesh2D;\n        let vertexBuffers = [];\n        let usage = BufferUsage.Dynamic;\n        let vertexBuffer = LayaGL.renderDeviceFactory.createVertexBuffer(usage);\n        vertexBuffer.vertexDeclaration = vertexDeclaration;\n        vertexBuffers.push(vertexBuffer);\n        mesh._vertexBuffers = vertexBuffers;\n        let indexbuffer = LayaGL.renderDeviceFactory.createIndexBuffer(usage);\n        mesh._indexBuffer = indexbuffer;\n        let state = mesh._bufferState;\n        state.applyState(vertexBuffers, indexbuffer);\n        return mesh;\n    }\n    static _updateSpineSubMesh(mesh, frameData) {\n        let subMeshCount = mesh.subMeshCount;\n        let mulitRenderData = frameData.mulitRenderData;\n        if (!mulitRenderData)\n            return false;\n        let renderdata = mulitRenderData.renderData;\n        let rdLength = renderdata.length;\n        let needUpdate = subMeshCount != rdLength;\n        let subMeshes = mesh._subMeshes;\n        if (needUpdate) {\n            let flen = Math.max(rdLength, subMeshCount);\n            let state = mesh._bufferState;\n            for (let i = 0; i < flen; i++) {\n                let submesh = subMeshes[i];\n                let data = renderdata[i];\n                if (data) {\n                    if (!submesh) {\n                        submesh = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElement);\n                        submesh.bufferState = state;\n                        subMeshes[i] = submesh;\n                    }\n                    submesh.indexFormat = frameData.type;\n                    submesh.clearRenderParams();\n                    submesh.setDrawElemenParams(data.length, data.offset * frameData.size);\n                }\n                else {\n                    submesh.destroy();\n                }\n            }\n            subMeshes.length = rdLength;\n        }\n        else {\n            for (let i = 0; i < subMeshCount; i++) {\n                let submesh = subMeshes[i];\n                let data = renderdata[i];\n                submesh.indexFormat = frameData.type;\n                submesh.clearRenderParams();\n                submesh.setDrawElemenParams(data.length, data.offset * frameData.size);\n            }\n        }\n        return needUpdate;\n    }\n    static getVertexDeclaration(vertexFlag) {\n        var verDec = SpineMeshUtils._vertexDeclarationMap[vertexFlag];\n        if (!verDec) {\n            var subFlags = vertexFlag.split(\",\");\n            var elements = [];\n            var offset = 0;\n            for (var i = 0, n = subFlags.length; i < n; i++) {\n                var element;\n                switch (subFlags[i]) {\n                    case \"COLOR2\":\n                        element = new VertexElement(offset, VertexElementFormat.Vector4, 11);\n                        offset += 16;\n                        break;\n                    case \"BONE\":\n                        element = new VertexElement(offset, VertexElementFormat.Single, 3);\n                        elements.push(element);\n                        offset += 4;\n                        element = new VertexElement(offset, VertexElementFormat.Single, 4);\n                        elements.push(element);\n                        offset += 4;\n                        element = new VertexElement(offset, VertexElementFormat.Vector4, 5);\n                        elements.push(element);\n                        offset += 16;\n                        element = new VertexElement(offset, VertexElementFormat.Vector4, 6);\n                        elements.push(element);\n                        offset += 16;\n                        element = new VertexElement(offset, VertexElementFormat.Vector4, 7);\n                        offset += 16;\n                        break;\n                    case \"RIGIDBODY\":\n                        element = new VertexElement(offset, VertexElementFormat.Single, 4);\n                        offset += 4;\n                        break;\n                    case \"UV\":\n                        element = new VertexElement(offset, VertexElementFormat.Vector2, 0);\n                        offset += 8;\n                        break;\n                    case \"COLOR\":\n                        element = new VertexElement(offset, VertexElementFormat.Vector4, 1);\n                        offset += 16;\n                        break;\n                    case \"POSITION\":\n                        element = new VertexElement(offset, VertexElementFormat.Vector2, 2);\n                        offset += 8;\n                        break;\n                    default:\n                        throw \"VertexMesh: unknown vertex flag.\";\n                }\n                elements.push(element);\n            }\n            verDec = new VertexDeclaration(offset, elements);\n            SpineMeshUtils._vertexDeclarationMap[vertexFlag] = verDec;\n        }\n        return verDec;\n    }\n    static getIndexFormat(vertexCount) {\n        let type = IndexFormat.UInt32;\n        if (vertexCount < 256 && LayaGL.renderEngine.getCapable(RenderCapable.Element_Index_Uint8)) {\n            type = IndexFormat.UInt8;\n        }\n        else if (vertexCount < 65536) {\n            type = IndexFormat.UInt16;\n        }\n        return type;\n    }\n}\nSpineMeshUtils._vertexDeclarationMap = {};\n","import { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport spineVertex from \"../files/SpineVertex.glsl\";\nimport spineFragment from \"../files/SpineFragment.glsl\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport spineStandardVS from \"../files/SpineStandard.vs\";\nimport spineStandardFS from \"../files/SpineStandard.fs\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { Laya } from \"../../../Laya\";\nimport { RenderState } from \"../../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../renders/VertexElementFormat\";\nimport { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nexport class SpineShaderInit {\n    static SetSpineBlendMode(value, mat, premultipliedAlpha = true) {\n        switch (value) {\n            case 1:\n                mat.blend = RenderState.BLEND_ENABLE_ALL;\n                mat.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n                mat.blendDst = RenderState.BLENDPARAM_ONE;\n                break;\n            case 3:\n                mat.blend = RenderState.BLEND_ENABLE_SEPERATE;\n                mat.blendSrcRGB = RenderState.BLENDPARAM_ONE;\n                mat.blendSrcAlpha = RenderState.BLENDPARAM_ONE;\n                mat.blendDstRGB = RenderState.BLENDPARAM_ONE_MINUS_SRC_COLOR;\n                mat.blendDstAlpha = RenderState.BLENDPARAM_ONE;\n                break;\n            case 2:\n                mat.blend = RenderState.BLEND_ENABLE_ALL;\n                mat.blendSrc = RenderState.BLENDPARAM_DST_COLOR;\n                mat.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n                break;\n            default:\n                mat.blend = RenderState.BLEND_ENABLE_ALL;\n                mat.blendSrc = premultipliedAlpha ? RenderState.BLENDPARAM_ONE : RenderState.BLENDPARAM_SRC_ALPHA;\n                mat.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n        }\n    }\n    static initSpineMaterial(mat) {\n        mat.alphaTest = false;\n        mat.depthWrite = false;\n        mat.cull = RenderState.CULL_NONE;\n        mat.blend = RenderState.BLEND_ENABLE_ALL;\n        mat.blendSrc = RenderState.BLENDPARAM_SRC_ALPHA;\n        mat.blendDst = RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;\n        mat.depthTest = RenderState.DEPTHTEST_OFF;\n    }\n    static changeVertexDefine(shaderData, mesh) {\n        let hasTwoColor = false;\n        let vertexBuffers = mesh.vertexBuffers;\n        for (let i = 0; i < vertexBuffers.length; i++) {\n            let vertexBuffer = vertexBuffers[i];\n            let vertexDeclaration = vertexBuffer.vertexDeclaration;\n            let vertexElement = vertexDeclaration.getVertexElementByUsage(11);\n            if (vertexElement) {\n                hasTwoColor = true;\n                break;\n            }\n        }\n        if (hasTwoColor) {\n            shaderData.addDefine(SpineShaderInit.SPINE_COLOR2);\n        }\n        else {\n            shaderData.removeDefine(SpineShaderInit.SPINE_COLOR2);\n        }\n    }\n    static init() {\n        Shader3D.addInclude(\"SpineVertex.glsl\", spineVertex);\n        Shader3D.addInclude(\"SpineFragment.glsl\", spineFragment);\n        SpineShaderInit.BONEMAT = Shader3D.propertyNameToID(\"u_sBone\");\n        SpineShaderInit.SpineTexture = Shader3D.propertyNameToID(\"u_spineTexture\");\n        SpineShaderInit.SPINE_FAST = Shader3D.getDefineByName(\"SPINE_FAST\");\n        SpineShaderInit.SPINE_RB = Shader3D.getDefineByName(\"SPINE_RB\");\n        SpineShaderInit.SPINE_UV = Shader3D.getDefineByName(\"UV\");\n        SpineShaderInit.SPINE_COLOR = Shader3D.getDefineByName(\"COLOR\");\n        SpineShaderInit.SPINE_PREMULTIPLYALPHA = Shader3D.getDefineByName(\"PREMULTIPLYALPHA\");\n        SpineShaderInit.SIMPLE_SIMPLEANIMATORPARAMS = Shader3D.propertyNameToID(\"u_SimpleAnimatorParams\");\n        SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTexture\");\n        SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURESIZE = Shader3D.propertyNameToID(\"u_SimpleAnimatorTextureSize\");\n        SpineShaderInit.SPINE_SIMPLE = Shader3D.getDefineByName(\"SPINE_SIMPLE\");\n        SpineShaderInit.SPINE_GPU_INSTANCE = Shader3D.getDefineByName(\"GPU_INSTANCE\");\n        SpineShaderInit.SPINE_TWOCOLORTINT = Shader3D.getDefineByName(\"TWOCOLORTINT\");\n        SpineShaderInit.SPINE_COLOR2 = Shader3D.getDefineByName(\"COLOR2\");\n        const commandUniform = LayaGL.renderDeviceFactory.createGlobalUniformMap(\"Spine2D\");\n        commandUniform.addShaderUniform(SpineShaderInit.BONEMAT, \"u_sBone\", ShaderDataType.Buffer);\n        commandUniform.addShaderUniform(SpineShaderInit.SIMPLE_SIMPLEANIMATORPARAMS, \"u_SimpleAnimatorParams\", ShaderDataType.Vector4);\n        commandUniform.addShaderUniform(SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURE, \"u_SimpleAnimatorTexture\", ShaderDataType.Texture2D);\n        commandUniform.addShaderUniform(SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURESIZE, \"u_SimpleAnimatorTextureSize\", ShaderDataType.Float);\n        let shader = Shader3D.add(\"SpineStandard\", true, false);\n        shader.shaderType = ShaderFeatureType.D2_BaseRednerNode2D;\n        let uniformMap = {\n            \"u_spineTexture\": ShaderDataType.Texture2D\n        };\n        let subShader = new SubShader(SpineShaderInit.textureSpineAttribute, uniformMap);\n        shader.addSubShader(subShader);\n        let shadingPass = subShader.addShaderPass(spineStandardVS, spineStandardFS);\n        SpineShaderInit.SpineNormalVertexDeclaration = SpineMeshUtils.getVertexDeclaration(\"UV,COLOR,POSITION,COLOR2\");\n        SpineShaderInit.instanceNMatrixDeclaration = new VertexDeclaration(24, [\n            new VertexElement(0, VertexElementFormat.Vector3, 8),\n            new VertexElement(12, VertexElementFormat.Vector3, 9),\n        ]);\n        SpineShaderInit.instanceSimpleAnimatorDeclaration = new VertexDeclaration(16, [\n            new VertexElement(0, VertexElementFormat.Vector4, 10),\n        ]);\n    }\n}\nSpineShaderInit.textureSpineAttribute = {\n    'a_uv': [0, ShaderDataType.Vector2],\n    'a_color': [1, ShaderDataType.Vector4],\n    'a_position': [2, ShaderDataType.Vector2],\n    \"a_weight\": [3, ShaderDataType.Float],\n    \"a_BoneId\": [4, ShaderDataType.Float],\n    'a_PosWeightBoneID_2': [5, ShaderDataType.Vector4],\n    'a_PosWeightBoneID_3': [6, ShaderDataType.Vector4],\n    'a_PosWeightBoneID_4': [7, ShaderDataType.Vector4],\n    'a_NMatrix_0': [8, ShaderDataType.Vector3],\n    'a_NMatrix_1': [9, ShaderDataType.Vector3],\n    'a_SimpleTextureParams': [10, ShaderDataType.Vector4],\n    \"a_color2\": [11, ShaderDataType.Vector4],\n};\nLaya.addAfterInitCallback(SpineShaderInit.init);\n","import { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { SpineShaderInit } from \"../material/SpineShaderInit\";\nexport class SpineMeshBase {\n    get material() {\n        return this._material;\n    }\n    set material(value) {\n        this._material = value;\n        this.element.materialShaderData = this._material._shaderValues;\n        this.element.subShader = this._material._shader.getSubShaderAt(0);\n    }\n    constructor(material) {\n        this.verticesLength = 0;\n        this.indicesLength = 0;\n        this.vertexBufferLength = 0;\n        this.indexBufferLength = 0;\n        this.init();\n        this.material = material;\n    }\n    init() {\n        let geo = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElement);\n        let mesh = LayaGL.renderDeviceFactory.createBufferState();\n        geo.bufferState = mesh;\n        let vb = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n        let ib = LayaGL.renderDeviceFactory.createIndexBuffer(BufferUsage.Dynamic);\n        vb.vertexDeclaration = this.vertexDeclarition;\n        mesh.applyState([vb], ib);\n        geo.indexFormat = IndexFormat.UInt16;\n        this.geo = geo;\n        this.vb = vb;\n        this.ib = ib;\n        this.element = LayaGL.render2DRenderPassFactory.createRenderElement2D();\n        this.element.nodeCommonMap = [\"BaseRender2D\", \"spine2D\"];\n        this.element.canotPool = true;\n        this.element.geometry = geo;\n        this.element.renderStateIsBySprite = false;\n    }\n    get vertexDeclarition() {\n        return SpineShaderInit.SpineNormalVertexDeclaration;\n    }\n    draw() {\n        let vb = this.vb;\n        let ib = this.ib;\n        let vblen = this.verticesLength * 4;\n        let iblen = this.indicesLength * 2;\n        if (vblen > this.vertexBufferLength) {\n            vb.setDataLength(vblen);\n            this.vertexBufferLength = vblen;\n        }\n        if (iblen > this.indexBufferLength) {\n            ib._setIndexDataLength(iblen);\n            this.indexBufferLength = iblen;\n        }\n        vb.setData(this.vertexArray.buffer, 0, this.vertexArray.byteOffset, vblen);\n        ib._setIndexData(new Uint16Array(this.indexArray.buffer, this.indexArray.byteOffset, iblen / 2), 0);\n        this.geo.clearRenderParams();\n        this.geo.setDrawElemenParams(iblen / 2, 0);\n        this.element.geometry = this.geo;\n    }\n    drawByData(vertices, vblength, indices, iblength) {\n        this.vertexArray = vertices;\n        this.indexArray = indices;\n        this.verticesLength = vblength;\n        this.indicesLength = iblength;\n        this.draw();\n    }\n    clear() {\n        this.verticesLength = 0;\n        this.indicesLength = 0;\n    }\n    destroy() {\n        this.clear();\n        this.vb.destroy();\n        this.ib.destroy();\n        this.geo.destroy();\n        this.element.destroy();\n    }\n    _cloneTo(target) {\n        target.verticesLength = this.verticesLength;\n        target.indicesLength = this.indicesLength;\n        target.vertexArray = new Float32Array(this.vertexArray);\n        target.indexArray = new Uint16Array(this.indexArray);\n    }\n}\nSpineMeshBase.maxVertex = 10922;\n","import { SpineMeshBase } from \"./SpineMeshBase\";\nexport class SpineVirtualMesh extends SpineMeshBase {\n    constructor(material) {\n        super(material);\n        if (SpineVirtualMesh.vertexArray == null) {\n            SpineVirtualMesh.vertexArray = new Float32Array(SpineMeshBase.maxVertex * SpineVirtualMesh.vertexSize_TwoColor);\n            SpineVirtualMesh.indexArray = new Uint16Array(SpineMeshBase.maxVertex * 3);\n        }\n        this.vertexArray = SpineVirtualMesh.vertexArray;\n        this.indexArray = SpineVirtualMesh.indexArray;\n    }\n    appendVerticesClip(vertices, indices) {\n        let indicesLength = indices.length;\n        let verticesLength = vertices.length;\n        let vertexSize = SpineVirtualMesh.vertexSize_TwoColor;\n        let vertexBuffer = this.vertexArray;\n        let before = this.verticesLength;\n        let indexStart = before / vertexSize;\n        let vlen = before;\n        for (let j = 0; j < verticesLength; vlen += vertexSize, j += vertexSize) {\n            vertexBuffer[vlen] = vertices[j + 6];\n            vertexBuffer[vlen + 1] = vertices[j + 7];\n            vertexBuffer[vlen + 2] = vertices[j + 2];\n            vertexBuffer[vlen + 3] = vertices[j + 3];\n            vertexBuffer[vlen + 4] = vertices[j + 4];\n            vertexBuffer[vlen + 5] = vertices[j + 5];\n            vertexBuffer[vlen + 6] = vertices[j];\n            vertexBuffer[vlen + 7] = vertices[j + 1];\n            vertexBuffer[vlen + 8] = vertices[j + 8];\n            vertexBuffer[vlen + 9] = vertices[j + 9];\n            vertexBuffer[vlen + 10] = vertices[j + 10];\n            vertexBuffer[vlen + 11] = vertices[j + 11];\n        }\n        this.verticesLength = before + verticesLength;\n        let indicesArray = this.indexArray;\n        for (let i = this.indicesLength, j = 0; j < indicesLength; i++, j++)\n            indicesArray[i] = indices[j] + indexStart;\n        this.indicesLength += indicesLength;\n    }\n    canAppend(verticesLength, indicesLength) {\n        return this.verticesLength + verticesLength < SpineVirtualMesh.maxVertex * SpineVirtualMesh.vertexSize_TwoColor && this.indicesLength + indicesLength < SpineVirtualMesh.maxVertex * 3;\n    }\n    appendVertices(vertices, verticesLength, indices, indicesLength, finalColor, darkColor, uvs) {\n        let vertexSize = SpineVirtualMesh.vertexSize_TwoColor;\n        let indexStart = this.verticesLength / vertexSize;\n        let vertexBuffer = this.vertexArray;\n        let before = this.verticesLength;\n        for (let u = 0, v = 0, n = verticesLength; v < n; v += vertexSize, u += 2) {\n            let size = before + v;\n            vertexBuffer[size] = uvs[u];\n            vertexBuffer[size + 1] = uvs[u + 1];\n            vertexBuffer[size + 2] = finalColor.r;\n            vertexBuffer[size + 3] = finalColor.g;\n            vertexBuffer[size + 4] = finalColor.b;\n            vertexBuffer[size + 5] = finalColor.a;\n            vertexBuffer[size + 6] = vertices[v];\n            vertexBuffer[size + 7] = vertices[v + 1];\n            vertexBuffer[size + 8] = darkColor.r;\n            vertexBuffer[size + 9] = darkColor.g;\n            vertexBuffer[size + 10] = darkColor.b;\n            vertexBuffer[size + 11] = darkColor.a;\n        }\n        this.verticesLength = before + verticesLength;\n        let indicesArray = this.indexArray;\n        for (let i = this.indicesLength, j = 0; j < indicesLength; i++, j++)\n            indicesArray[i] = indices[j] + indexStart;\n        this.indicesLength += indicesLength;\n    }\n}\nSpineVirtualMesh.vertexSize = 8;\nSpineVirtualMesh.vertexSize_TwoColor = 12;\n","export class SpineNormalRenderBase {\n    constructor() {\n        this.vmeshs = [];\n        this.nextBatchIndex = 0;\n    }\n    clearBatch() {\n        for (var i = 0; i < this.vmeshs.length; i++) {\n            this.vmeshs[i].clear();\n        }\n        this.nextBatchIndex = 0;\n    }\n    nextBatch(material, spineRenderNode) {\n        if (this.vmeshs.length == this.nextBatchIndex) {\n            let vmesh = this.createMesh(material);\n            this.vmeshs.push(vmesh);\n            spineRenderNode._renderElements[this.nextBatchIndex++] = vmesh.element;\n            vmesh.element.value2DShaderData = spineRenderNode._spriteShaderData;\n            return vmesh;\n        }\n        let vmesh = this.vmeshs[this.nextBatchIndex];\n        spineRenderNode._renderElements[this.nextBatchIndex++] = vmesh.element;\n        vmesh.material = material;\n        return vmesh;\n    }\n    destroy() {\n        for (var i = 0; i < this.vmeshs.length; i++) {\n            this.vmeshs[i].destroy();\n        }\n        this.vmeshs.length = 0;\n    }\n}\n","import { SpineVirtualMesh } from \"../mesh/SpineVirtualMesh\";\nimport { SpineNormalRenderBase } from \"./SpineNormalRenderBase\";\nconst QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\nexport class SpineSkeletonRenderer extends SpineNormalRenderBase {\n    createMesh(material) {\n        return new SpineVirtualMesh(material);\n    }\n    constructor(templet) {\n        super();\n        this.templet = templet;\n        if (SpineSkeletonRenderer.vertices == null) {\n            SpineSkeletonRenderer.vertices = spine.Utils.newFloatArray(12 * 1024);\n        }\n        this.renderable = { vertices: null, numVertices: 0, numFloats: 0 };\n        this.clipper = new spine.SkeletonClipping();\n        this.tempColor = new spine.Color();\n        this.tempColor2 = new spine.Color();\n    }\n    draw(skeleton, renderNode, slotRangeStart, slotRangeEnd) {\n        let clipper = this.clipper;\n        this.clearBatch();\n        let twoColorTint = true;\n        let blendMode = null;\n        let renderable = this.renderable;\n        let uvs;\n        let triangles;\n        let drawOrder = skeleton.drawOrder;\n        let attachmentColor;\n        let skeletonColor = skeleton.color;\n        let vertexSize = SpineVirtualMesh.vertexSize_TwoColor;\n        let inRange = false;\n        if (slotRangeStart == -1)\n            inRange = true;\n        let virtualMesh;\n        let spineTex;\n        let staticVetices = SpineSkeletonRenderer.vertices;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let clippedVertexSize = clipper.isClipping() ? 2 : vertexSize;\n            let slot = drawOrder[i];\n            if (!slot.bone.active) {\n                clipper.clipEndWithSlot(slot);\n                continue;\n            }\n            if (slotRangeStart >= 0 && slotRangeStart == slot.data.index) {\n                inRange = true;\n            }\n            if (!inRange) {\n                clipper.clipEndWithSlot(slot);\n                continue;\n            }\n            if (slotRangeEnd >= 0 && slotRangeEnd == slot.data.index) {\n                inRange = false;\n            }\n            let attachment = slot.getAttachment();\n            let texture;\n            if (attachment instanceof window.spine.RegionAttachment) {\n                let region = attachment;\n                renderable.vertices = staticVetices;\n                renderable.numVertices = 4;\n                renderable.numFloats = clippedVertexSize << 2;\n                if (attachment.sequence != null)\n                    attachment.sequence.apply(slot, attachment);\n                this.computeWorldVertices_RegionAttachment(region, slot.bone, renderable.vertices, 0, clippedVertexSize, -skeleton.x, -skeleton.y);\n                triangles = QUAD_TRIANGLES;\n                uvs = region.uvs;\n                texture = region.region.page.texture;\n                attachmentColor = region.color;\n            }\n            else if (attachment instanceof window.spine.MeshAttachment) {\n                let mesh = attachment;\n                renderable.vertices = staticVetices;\n                renderable.numVertices = (mesh.worldVerticesLength >> 1);\n                renderable.numFloats = renderable.numVertices * clippedVertexSize;\n                if (renderable.numFloats > renderable.vertices.length) {\n                    renderable.vertices = staticVetices = window.spine.Utils.newFloatArray(renderable.numFloats);\n                }\n                if (attachment.sequence != null)\n                    attachment.sequence.apply(slot, attachment);\n                this.computeWorldVertices_MeshAttachment(mesh, slot, 0, mesh.worldVerticesLength, renderable.vertices, 0, clippedVertexSize, -skeleton.x, -skeleton.y);\n                triangles = mesh.triangles;\n                texture = mesh.region.page.texture;\n                uvs = mesh.uvs;\n                attachmentColor = mesh.color;\n            }\n            else if (attachment instanceof window.spine.ClippingAttachment) {\n                let clip = (attachment);\n                this.clipStart(this.clipper, slot, clip, -skeleton.x, -skeleton.y);\n                continue;\n            }\n            else {\n                clipper.clipEndWithSlot(slot);\n                continue;\n            }\n            if (texture) {\n                let slotColor = slot.color;\n                let finalColor = this.tempColor;\n                finalColor.r = skeletonColor.r * slotColor.r * attachmentColor.r;\n                finalColor.g = skeletonColor.g * slotColor.g * attachmentColor.g;\n                finalColor.b = skeletonColor.b * slotColor.b * attachmentColor.b;\n                finalColor.a = skeletonColor.a * slotColor.a * attachmentColor.a;\n                let darkColor = this.tempColor2;\n                if (!slot.darkColor)\n                    darkColor.set(0, 0, 0, 1.0);\n                else {\n                    darkColor.setFromColor(slot.darkColor);\n                }\n                let slotBlendMode = slot.data.blendMode;\n                let needNewMat = false;\n                if (slotBlendMode != blendMode) {\n                    blendMode = slotBlendMode;\n                    needNewMat = true;\n                }\n                if (spineTex != texture) {\n                    spineTex = texture;\n                    needNewMat = true;\n                }\n                if (needNewMat) {\n                    virtualMesh && virtualMesh.draw();\n                    let mat = renderNode.templet.getMaterial(texture.realTexture, blendMode);\n                    virtualMesh = this.nextBatch(mat, renderNode);\n                    virtualMesh.clear();\n                }\n                if (clipper.isClipping()) {\n                    clipper.clipTriangles(renderable.vertices, renderable.numFloats, triangles, triangles.length, uvs, finalColor, darkColor, twoColorTint);\n                    if (!virtualMesh.canAppend(clipper.clippedVertices.length, clipper.clippedTriangles.length)) {\n                        virtualMesh.draw();\n                        virtualMesh = this.nextBatch(virtualMesh.material, renderNode);\n                        virtualMesh.clear();\n                    }\n                    virtualMesh.appendVerticesClip(clipper.clippedVertices, clipper.clippedTriangles);\n                }\n                else {\n                    if (!virtualMesh.canAppend(renderable.numFloats, triangles.length)) {\n                        virtualMesh.draw();\n                        virtualMesh = this.nextBatch(virtualMesh.material, renderNode);\n                        virtualMesh.clear();\n                    }\n                    if (finalColor.a != 0) {\n                        virtualMesh.appendVertices(renderable.vertices, renderable.numFloats, triangles, triangles.length, finalColor, darkColor, uvs);\n                    }\n                }\n            }\n            clipper.clipEndWithSlot(slot);\n        }\n        clipper.clipEnd();\n        virtualMesh && virtualMesh.draw();\n    }\n    clipStart(clipper, slot, clip, ofx, ofy) {\n        if (clipper.clipAttachment)\n            return 0;\n        clipper.clipAttachment = clip;\n        let n = clip.worldVerticesLength;\n        let vertices = spine.Utils.setArraySize(clipper.clippingPolygon, n);\n        this.computeWorldVertices_MeshAttachment(clip, slot, 0, n, vertices, 0, 2, ofx, ofy);\n        let clippingPolygon = clipper.clippingPolygon;\n        spine.SkeletonClipping.makeClockwise(clippingPolygon);\n        let clippingPolygons = clipper.clippingPolygons = clipper.triangulator.decompose(clippingPolygon, clipper.triangulator.triangulate(clippingPolygon));\n        for (let i = 0, n = clippingPolygons.length; i < n; i++) {\n            let polygon = clippingPolygons[i];\n            spine.SkeletonClipping.makeClockwise(polygon);\n            polygon.push(polygon[0]);\n            polygon.push(polygon[1]);\n        }\n        return clippingPolygons.length;\n    }\n    computeWorldVertices_RegionAttachment(attachment, bone, worldVertices, offset, stride, ofx, ofy) {\n        let vertexOffset = attachment.offset;\n        let x = bone.worldX + ofx, y = bone.worldY + ofy;\n        let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n        let offsetX = 0, offsetY = 0;\n        offsetX = vertexOffset[0];\n        offsetY = vertexOffset[1];\n        worldVertices[offset] = offsetX * a + offsetY * b + x;\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[2];\n        offsetY = vertexOffset[3];\n        worldVertices[offset] = offsetX * a + offsetY * b + x;\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[4];\n        offsetY = vertexOffset[5];\n        worldVertices[offset] = offsetX * a + offsetY * b + x;\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[6];\n        offsetY = vertexOffset[7];\n        worldVertices[offset] = offsetX * a + offsetY * b + x;\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    }\n    computeWorldVertices_MeshAttachment(attachment, slot, start, count, worldVertices, offset, stride, ofx, ofy) {\n        count = offset + (count >> 1) * stride;\n        let skeleton = slot.bone.skeleton;\n        let deformArray = slot.deform;\n        let vertices = attachment.vertices;\n        let bones = attachment.bones;\n        if (bones == null) {\n            if (deformArray.length > 0)\n                vertices = deformArray;\n            let bone = slot.bone;\n            let x = bone.worldX + ofx;\n            let y = bone.worldY + ofy;\n            let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n            for (let v = start, w = offset; w < count; v += 2, w += stride) {\n                let vx = vertices[v], vy = vertices[v + 1];\n                worldVertices[w] = vx * a + vy * b + x;\n                worldVertices[w + 1] = vx * c + vy * d + y;\n            }\n            return;\n        }\n        let v = 0, skip = 0;\n        for (let i = 0; i < start; i += 2) {\n            let n = bones[v];\n            v += n + 1;\n            skip += n;\n        }\n        let skeletonBones = skeleton.bones;\n        if (deformArray.length == 0) {\n            for (let w = offset, b = skip * 3; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX + ofx) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY + ofy) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n        else {\n            let deform = deformArray;\n            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3, f += 2) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX + ofx) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY + ofy) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n    }\n}\n","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { SpineMeshBase } from \"./SpineMeshBase\";\nexport class SpineWasmVirturalMesh extends SpineMeshBase {\n    constructor(material) {\n        super(material);\n        this._renderElement2D = LayaGL.render2DRenderPassFactory.createRenderElement2D();\n        this._renderElement2D.geometry = this.geo;\n        this._renderElement2D.nodeCommonMap = [\"BaseRender2D\", \"spine2D\"];\n    }\n    destroy() {\n        super.destroy();\n        this._renderElement2D.destroy();\n    }\n}\n","import { SpineAdapter } from \"../SpineAdapter\";\nimport { SpineWasmVirturalMesh } from \"../mesh/SpineWasmVirturalMesh\";\nimport { SpineNormalRenderBase } from \"./SpineNormalRenderBase\";\nexport class SpineWasmRender extends SpineNormalRenderBase {\n    constructor(templet) {\n        super();\n        this.vmeshs = [];\n        this.nextBatchIndex = 0;\n        this.templet = templet;\n    }\n    createMesh(material) {\n        return new SpineWasmVirturalMesh(material);\n    }\n    draw(skeleton, renderNode, slotRangeStart, slotRangeEnd) {\n        this.nextBatchIndex = 0;\n        SpineAdapter.drawSkeleton((vbLen, ibLen, texturePath, blendMode) => {\n            let mat = renderNode.templet.getMaterial(this.templet.getTexture(texturePath), blendMode.value);\n            let mesh = this.nextBatch(mat, renderNode);\n            mesh.drawByData(SpineAdapter._vbArray, vbLen, SpineAdapter._ibArray, ibLen);\n        }, skeleton, true, slotRangeStart, slotRangeEnd);\n    }\n}\n","import { Laya } from \"../../Laya\";\nimport { SpineSkeletonRenderer } from \"./normal/SpineSkeletonRenderer\";\nimport { SpineWasmRender } from \"./normal/SpineWasmRender\";\nexport class SpineAdapter {\n    static initialize() {\n        if (window.Spine) {\n            SpineAdapter.isWasm = true;\n            return window.Spine().then((spine) => {\n                SpineAdapter._spine = spine;\n                window.spine = spine;\n                SpineAdapter.initClass();\n                SpineAdapter.bindBuffer(10922 * 12, 10922 * 3);\n                SpineAdapter.allAdpat();\n                return Promise.resolve();\n            });\n        }\n        else if (window.spine) {\n            SpineAdapter.isWasm = false;\n            SpineAdapter.adaptJS();\n            SpineAdapter.allAdpat();\n        }\n    }\n    static createNormalRender(templet) {\n        return SpineAdapter.isWasm ? new SpineWasmRender(templet) : new SpineSkeletonRenderer(templet);\n    }\n    static allAdpat() {\n        let ns = window.spine;\n        let stateProto = ns.AnimationState.prototype;\n        stateProto.oldApply = stateProto.apply;\n        stateProto.applyCache = function (skeleton) {\n        };\n        stateProto.getCurrentPlayTimeOld = function (trackIndex) {\n            return this.getCurrentOld(trackIndex).getAnimationTime();\n        };\n        stateProto.getCurrentPlayTime = stateProto.getCurrentPlayTimeOld;\n        stateProto.getCurrentPlayTimeByCache = function (trackIndex) {\n            let entry = this.getCurrent(trackIndex);\n            let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n            let duration = animationEnd - animationStart;\n            entry.trackLast = entry.nextTrackLast;\n            let trackLastWrapped = entry.trackLast % duration;\n            let animationTime = entry.getAnimationTime();\n            let complete = false;\n            if (entry.loop)\n                complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\n            else\n                complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n            if (complete) {\n                this.dispatchEvent(entry, \"complete\", null);\n                entry.nextAnimationLast = -1;\n                entry.nextTrackLast = -1;\n                return 0;\n            }\n            entry.nextAnimationLast = animationTime;\n            entry.nextTrackLast = entry.trackTime;\n            let animationLast = entry.animationLast;\n            return Math.max(animationLast, 0);\n        };\n        let skeletonProto = ns.Skeleton.prototype;\n        skeletonProto.oldUpdateWorldTransform = skeletonProto.updateWorldTransform;\n        skeletonProto.updateWorldTransformCache = function () {\n        };\n        ns.AnimationState.prototype.dispatchEvent = function (entry, type, event) {\n            this.eventsObject[type](entry, event);\n        };\n    }\n    static adaptJS() {\n        let ns = window.spine;\n        if (ns) {\n            ns.AnimationState.prototype.oldAddListener = ns.AnimationState.prototype.addListener;\n            ns.AnimationState.prototype.addListener = function (data) {\n                this.eventsObject = data;\n                this.oldAddListener(data);\n            };\n            let sketonDataProto = ns.SkeletonData.prototype;\n            sketonDataProto.getAnimationsSize = function () { return this.animations.length; };\n            sketonDataProto.getAnimationByIndex = function (index) { return this.animations[index]; };\n            sketonDataProto.getSkinIndexByName = function (name) {\n                let skins = this.skins;\n                for (let i = 0, n = skins.length; i < n; i++) {\n                    if (skins[i].name == name) {\n                        return i;\n                    }\n                }\n                return -1;\n            };\n            let skeletonProto = ns.Skeleton.prototype;\n            skeletonProto.showSkinByIndex = function (index) {\n                this.setSkin(this.data.skins[index]);\n            };\n            let stateProto = ns.AnimationState.prototype;\n            stateProto.getCurrentOld = stateProto.getCurrent;\n            stateProto.getCurrent = function (trackIndex) {\n                let result = this.getCurrentOld(trackIndex);\n                this.currentTrack = result;\n                return result;\n            };\n        }\n    }\n    static initClass() {\n        let ns = window.spine;\n        let stateProto = ns.AnimationState.prototype;\n        stateProto.addListener = function (data) {\n            this.eventsObject = data;\n            this.setListener(SpineAdapter._spine.AnimationStateListenerObject.implement({\n                callback: (state, type, entry, event) => {\n                    data[SpineAdapter.stateMap[type.value]](entry, event);\n                }\n            }));\n        };\n        stateProto.getCurrentOld = stateProto.getCurrent;\n        stateProto.setAnimationOld = stateProto.setAnimation;\n        stateProto.setAnimation = function (trackIndex, animationName, loop) {\n            if (this.__tracks) {\n                this.__tracks.length = 0;\n            }\n            return this.setAnimationOld(trackIndex, animationName, loop);\n        };\n        stateProto.getCurrent = function (trackIndex) {\n            let result;\n            let __tracks = this.__tracks;\n            if (!__tracks) {\n                __tracks = this.__tracks = [];\n                result = this.getCurrentOld(trackIndex);\n                __tracks[trackIndex] = result;\n            }\n            else {\n                result = __tracks[trackIndex];\n            }\n            if (!result) {\n                result = this.getCurrentOld(trackIndex);\n                __tracks[trackIndex] = result;\n            }\n            this.currentTrack = result;\n            return result;\n        };\n        ns.TextureAtlas = TextureAtlas;\n        Object.defineProperty(ns.Skin.prototype, \"attachments\", {\n            get: function () {\n                return this.getAttachments();\n            }\n        });\n        let skeletonProto = ns.Skeleton.prototype;\n        Object.defineProperty(skeletonProto, \"slots\", {\n            get: function () {\n                return this.getSlots();\n            }\n        });\n        Object.defineProperty(skeletonProto, \"data\", {\n            get: function () {\n                return this.getData();\n            }\n        });\n        Object.defineProperty(skeletonProto, \"bones\", {\n            get: function () {\n                return this.getBones();\n            }\n        });\n        Object.defineProperty(skeletonProto, \"color\", {\n            get: function () {\n                return this.getColor();\n            }\n        });\n        let skeletonDataProto = ns.SkeletonData.prototype;\n        Object.defineProperty(skeletonDataProto, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        Object.defineProperty(skeletonDataProto, \"skins\", {\n            get: function () {\n                return this.getSkins();\n            }\n        });\n        Object.defineProperty(skeletonDataProto, \"slots\", {\n            get: function () {\n                return this.getSlots();\n            }\n        });\n        let animationProto = ns.Animation.prototype;\n        Object.defineProperty(animationProto, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        Object.defineProperty(animationProto, \"duration\", {\n            get: function () {\n                return this.getDuration();\n            }\n        });\n        Object.defineProperty(animationProto, \"timelines\", {\n            get: function () {\n                return this.getTimelines();\n            }\n        });\n        Object.defineProperty(skeletonDataProto, \"animations\", {\n            get: function () {\n                return this.getAnimations();\n            }\n        });\n        Object.defineProperty(ns.Skin.prototype, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        let slotDataProto = ns.SlotData.prototype;\n        Object.defineProperty(slotDataProto, \"boneData\", {\n            get: function () {\n                return this.getBoneData();\n            }\n        });\n        Object.defineProperty(slotDataProto, \"color\", {\n            get: function () {\n                return this.getColor();\n            }\n        });\n        Object.defineProperty(slotDataProto, \"index\", {\n            get: function () {\n                return this.getIndex();\n            }\n        });\n        Object.defineProperty(slotDataProto, \"attachmentName\", {\n            get: function () {\n                return this.getAttachmentName();\n            }\n        });\n        Object.defineProperty(slotDataProto, \"blendMode\", {\n            get: function () {\n                return this.getBlendMode().value;\n            }\n        });\n        Object.defineProperty(ns.BoneData.prototype, \"index\", {\n            get: function () {\n                return this.getIndex();\n            }\n        });\n        let regionAttachMentProto = ns.RegionAttachment.prototype;\n        Object.defineProperty(regionAttachMentProto, \"color\", {\n            get: function () {\n                return this.getColor();\n            }\n        });\n        Object.defineProperty(regionAttachMentProto, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        Object.defineProperty(regionAttachMentProto, \"offset\", {\n            get: function () {\n                let from = this.getOffset();\n                return from;\n            }\n        });\n        Object.defineProperty(regionAttachMentProto, \"uvs\", {\n            get: function () {\n                return this.getRotateUVs();\n            }\n        });\n        Object.defineProperty(regionAttachMentProto, \"region\", {\n            get: function () {\n                return this;\n            }\n        });\n        Object.defineProperty(regionAttachMentProto, \"page\", {\n            get: function () {\n                return this.getPage();\n            }\n        });\n        Object.defineProperty(ns.AtlasPage.prototype, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        let meshAttachmentProto = ns.MeshAttachment.prototype;\n        Object.defineProperty(meshAttachmentProto, \"bones\", {\n            get: function () {\n                return this.getBones();\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"uvs\", {\n            get: function () {\n                return this.getUVs();\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"triangles\", {\n            get: function () {\n                return this.getTriangles();\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"vertices\", {\n            get: function () {\n                let from = this.getVertices();\n                return from;\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"color\", {\n            get: function () {\n                return this.getColor();\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"region\", {\n            get: function () {\n                return this;\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"page\", {\n            get: function () {\n                return this.getPage();\n            }\n        });\n        Object.defineProperty(meshAttachmentProto, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        let eventTimelineProto = ns.EventTimeline.prototype;\n        Object.defineProperty(eventTimelineProto, \"frames\", {\n            get: function () {\n                return this.getFrames();\n            }\n        });\n        Object.defineProperty(eventTimelineProto, \"events\", {\n            get: function () {\n                return this.getEvents();\n            }\n        });\n        let attachmentTimelineProto = ns.AttachmentTimeline.prototype;\n        Object.defineProperty(attachmentTimelineProto, \"frames\", {\n            get: function () {\n                return this.getFrames();\n            }\n        });\n        Object.defineProperty(attachmentTimelineProto, \"slotIndex\", {\n            get: function () {\n                return this.getSlotIndex();\n            }\n        });\n        Object.defineProperty(attachmentTimelineProto, \"attachmentNames\", {\n            get: function () {\n                return this.getAttachmentNames();\n            }\n        });\n        let drawOrderTimelineProto = ns.DrawOrderTimeline.prototype;\n        Object.defineProperty(drawOrderTimelineProto, \"frames\", {\n            get: function () {\n                return this.getFrames();\n            }\n        });\n        Object.defineProperty(drawOrderTimelineProto, \"drawOrders\", {\n            get: function () {\n                return this.getDrawOrders();\n            }\n        });\n        let colorTimelineProto = ns.ColorTimeline.prototype;\n        Object.defineProperty(colorTimelineProto, \"frames\", {\n            get: function () {\n                return this.getFrames();\n            }\n        });\n        Object.defineProperty(colorTimelineProto, \"slotIndex\", {\n            get: function () {\n                return this.getSlotIndex();\n            }\n        });\n        let trackEntryProto = ns.TrackEntry.prototype;\n        Object.defineProperty(trackEntryProto, \"loop\", {\n            get: function () {\n                return this.getLoop();\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"animationStart\", {\n            get: function () {\n                return this.getAnimationStart();\n            },\n            set: function (value) {\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"animationEnd\", {\n            get: function () {\n                return this.getAnimationEnd();\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"animationLast\", {\n            get: function () {\n                return this.getAnimationLast();\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"nextAnimationLast\", {\n            get: function () {\n                return this.getAnimationLast();\n            },\n            set: function (value) {\n                this.setNextAnimationLast(value);\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"trackTime\", {\n            get: function () {\n                return this.getTrackTime();\n            }\n        });\n        Object.defineProperty(trackEntryProto, \"animation\", {\n            get: function () {\n                return this.getAnimation();\n            }\n        });\n        let boneProto = ns.Bone.prototype;\n        Object.defineProperty(boneProto, \"a\", {\n            get: function () {\n                return this.getA();\n            }\n        });\n        Object.defineProperty(boneProto, \"b\", {\n            get: function () {\n                return this.getB();\n            }\n        });\n        Object.defineProperty(boneProto, \"c\", {\n            get: function () {\n                return this.getC();\n            }\n        });\n        Object.defineProperty(boneProto, \"d\", {\n            get: function () {\n                return this.getD();\n            }\n        });\n        Object.defineProperty(boneProto, \"worldX\", {\n            get: function () {\n                return this.getWorldX();\n            }\n        });\n        Object.defineProperty(boneProto, \"worldY\", {\n            get: function () {\n                return this.getWorldY();\n            }\n        });\n        let eventProto = ns.Event.prototype;\n        Object.defineProperty(eventProto, \"volume\", {\n            get: function () {\n                return this.getVolume();\n            }\n        });\n        Object.defineProperty(eventProto, \"balance\", {\n            get: function () {\n                return this.getBalance();\n            }\n        });\n        Object.defineProperty(eventProto, \"time\", {\n            get: function () {\n                return this.getTime();\n            }\n        });\n        Object.defineProperty(eventProto, \"data\", {\n            get: function () {\n                return this.getData();\n            }\n        });\n        Object.defineProperty(eventProto, \"floatValue\", {\n            get: function () {\n                return this.getFloatValue();\n            }\n        });\n        Object.defineProperty(eventProto, \"intValue\", {\n            get: function () {\n                return this.getIntValue();\n            }\n        });\n        Object.defineProperty(eventProto, \"stringValue\", {\n            get: function () {\n                return this.getStringValue();\n            }\n        });\n        let eventDataProto = ns.EventData.prototype;\n        Object.defineProperty(eventDataProto, \"name\", {\n            get: function () {\n                return this.getName();\n            }\n        });\n        Object.defineProperty(eventDataProto, \"audioPath\", {\n            get: function () {\n                return this.getAudioPath();\n            }\n        });\n    }\n    static bindBuffer(maxNumVertices, maxNumIndices) {\n        SpineAdapter._spine.createBuffer(maxNumVertices, maxNumIndices);\n        SpineAdapter._vbArray = SpineAdapter._spine.getVertexsBuffer();\n        SpineAdapter._ibArray = SpineAdapter._spine.getIndexsBuffer();\n    }\n    static drawSkeleton(fun, skeleton, twoColorTint, slotRangeStart, slotRangeEnd) {\n        SpineAdapter._spine.drawSkeleton(fun, skeleton, twoColorTint, slotRangeStart, slotRangeEnd);\n    }\n}\nSpineAdapter.stateMap = { 0: \"start\", 1: \"interrupt\", 2: \"end\", 3: \"complete\", 4: \"dispose\", 5: \"event\" };\nclass TextureAtlas {\n    constructor(atlasText, textureLoader) {\n        return new SpineAdapter._spine.Atlas(atlasText, \"\", SpineAdapter._spine.TextureLoader.implement({\n            load: (page, url) => {\n                let texture = textureLoader(url);\n                page.texture = texture;\n            },\n            unload: function (s) {\n            }\n        }), true);\n    }\n}\nLaya.addBeforeInitCallback(SpineAdapter.initialize);\n","import { BaseRenderNode2D } from \"../../NodeRender2D/BaseRenderNode2D\";\nimport { Color } from \"../../maths/Color\";\nimport { SpineAdapter } from \"../SpineAdapter\";\nimport { SpineShaderInit } from \"../material/SpineShaderInit\";\nexport class SpineNormalRender {\n    constructor() {\n        this._skinIndex = 0;\n    }\n    getSpineColor() {\n        return this._spineColor;\n    }\n    destroy() {\n        this._renderer.destroy();\n        this._renderer = null;\n        this._owner._renderElements.length = 0;\n    }\n    initBake(obj) {\n    }\n    init(skeleton, templet, renderNode, state) {\n        this._renderer = SpineAdapter.createNormalRender(templet);\n        this._skeleton = skeleton;\n        this._owner = renderNode;\n        let scolor = skeleton.color;\n        this._spineColor = new Color(scolor.r, scolor.g, scolor.b, scolor.a);\n        let color = renderNode._spriteShaderData.getColor(BaseRenderNode2D.BASERENDER2DCOLOR) || new Color();\n        color.setValue(scolor.r, scolor.g, scolor.b, scolor.a);\n        if (renderNode._renderAlpha !== undefined) {\n            color.a *= renderNode._renderAlpha;\n        }\n        else\n            color.a *= renderNode.owner.alpha;\n        renderNode._spriteShaderData.setColor(BaseRenderNode2D.BASERENDER2DCOLOR, color);\n        renderNode._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n        renderNode._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n        renderNode._spriteShaderData.addDefine(SpineShaderInit.SPINE_COLOR2);\n    }\n    play(animationName) {\n    }\n    setSkinIndex(index) {\n        this._skinIndex = index;\n    }\n    changeSkeleton(skeleton) {\n        this._skeleton = skeleton;\n        skeleton.showSkinByIndex(this._skinIndex);\n        this._skeleton.setSlotsToSetupPose();\n    }\n    render(time) {\n        this._owner.clear();\n        this._renderer.draw(this._skeleton, this._owner, -1, -1);\n    }\n}\n","export class ChangeDeform {\n    constructor() {\n    }\n    apply(frame, vb, slots) {\n        if (frame >= this.startFrame) {\n            if (this._lastFrame >= this.endFrame && frame >= this.endFrame)\n                return false;\n            this._lastFrame = frame;\n            return this.updateVB(vb, slots);\n            ;\n        }\n        else\n            return false;\n    }\n    initChange(vb) {\n        this.sizeMap = vb.slotVBMap.get(this.slotId);\n        return true;\n    }\n    updateVB(vb, slots) {\n        if (!this.sizeMap) {\n            this.sizeMap = vb.slotVBMap.get(this.slotId);\n            if (!this.sizeMap) {\n                return false;\n            }\n        }\n        let slot = slots[this.slotId];\n        if (slot.attachment) {\n            let deform = slot.deform;\n            if (!deform || !deform.length) {\n                return false;\n            }\n            let vertexSize = vb.vertexSize;\n            let attachmentPos = this.sizeMap.get(slot.attachment.name);\n            let offset = attachmentPos.offset * vertexSize;\n            let vbData = vb.vb;\n            let attachmentParse = attachmentPos.attachment;\n            vb.appendDeform(attachmentParse, deform, offset, vbData);\n        }\n        return true;\n    }\n    clone() {\n        let out = new ChangeDeform;\n        out.slotId = this.slotId;\n        out.startFrame = this.startFrame;\n        out.endFrame = this.endFrame;\n        return out;\n    }\n}\n","export class ChangeDrawOrder {\n    changeOrder(attachMap) {\n        return this.order;\n    }\n    change(vb, slotAttachMap) {\n        return true;\n    }\n}\n","export class ChangeRGBA {\n    constructor(slotId) {\n        this.slotId = slotId;\n    }\n    apply(frame, vb, slots) {\n        this.updateVB(vb, slots);\n        return frame >= this.startFrame;\n    }\n    initChange(vb) {\n        this.sizeMap = vb.slotVBMap.get(this.slotId);\n        return true;\n    }\n    updateVB(vb, slots) {\n        if (!this.sizeMap) {\n            this.sizeMap = vb.slotVBMap.get(this.slotId);\n            if (!this.sizeMap) {\n                return false;\n            }\n        }\n        let slot = slots[this.slotId];\n        let color = slot.color;\n        if (slot.attachment) {\n            let vertexSize = vb.vertexSize;\n            let attachmentPos = this.sizeMap.get(slot.attachment.name);\n            let vbData = vb.vb;\n            let offset = attachmentPos.offset * vertexSize;\n            let attachment = attachmentPos.attachment;\n            let r, g, b, a;\n            let attachmentColor = attachment.lightColor;\n            let twoColorTint = vb.twoColorTint;\n            let colorElement = vb.vertexDeclaration.getVertexElementByUsage(1);\n            let cOffset = colorElement.offset / 4;\n            let c2Offset = 0;\n            if (twoColorTint) {\n                let color2Element = vb.vertexDeclaration.getVertexElementByUsage(11);\n                c2Offset = color2Element.offset / 4;\n            }\n            if (!attachmentColor) {\n                r = color.r;\n                g = color.g;\n                b = color.b;\n                a = color.a;\n            }\n            else {\n                r = color.r * attachmentColor.r;\n                g = color.g * attachmentColor.g;\n                b = color.b * attachmentColor.b;\n                a = color.a * attachmentColor.a;\n            }\n            let darkColor = slot.darkColor;\n            let darkColorR = 0, darkColorG = 0, darkColorB = 0, darkColorA = 1;\n            if (darkColor) {\n                darkColorR = darkColor.r;\n                darkColorG = darkColor.g;\n                darkColorB = darkColor.b;\n                darkColorA = darkColor.a;\n            }\n            let n = attachment.vertexCount;\n            for (let i = 0; i < n; i++) {\n                let co = offset + i * vertexSize + cOffset;\n                vbData[co] = r;\n                vbData[co + 1] = g;\n                vbData[co + 2] = b;\n                vbData[co + 3] = a;\n                if (twoColorTint) {\n                    let c2o = offset + i * vertexSize + c2Offset;\n                    vbData[c2o] = darkColorR;\n                    vbData[c2o + 1] = darkColorG;\n                    vbData[c2o + 2] = darkColorB;\n                    vbData[c2o + 3] = darkColorA;\n                }\n            }\n        }\n        return true;\n    }\n    clone() {\n        let out = new ChangeRGBA(this.slotId);\n        out.startFrame = this.startFrame;\n        out.endFrame = this.endFrame;\n        return out;\n    }\n}\n","export class ChangeSlot {\n    change(vb, slotAttachMap) {\n        let map = slotAttachMap.get(this.slotId);\n        let attachmentParse = map.get(this.attachment);\n        if (attachmentParse) {\n            vb.appendVB(attachmentParse);\n        }\n        else {\n            attachmentParse = map.get(null);\n        }\n        this.attachmentParse = attachmentParse;\n        return !this.attachmentParse.isClip;\n    }\n    changeOrder(attachMap) {\n        attachMap[this.slotId] = this.attachmentParse;\n        return null;\n    }\n}\n","import { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nimport { ChangeDeform } from \"./change/ChangeDeform\";\nimport { ChangeDrawOrder } from \"./change/ChangeDrawOrder\";\nimport { ChangeRGBA } from \"./change/ChangeRGBA\";\nimport { ChangeSlot } from \"./change/ChangeSlot\";\nconst step = 1 / 30;\nexport class AnimationRender {\n    static getFloat32Array(bone) {\n        let rs = new Float32Array(8);\n        rs[0] = bone.a;\n        rs[1] = bone.b;\n        rs[2] = bone.worldX;\n        rs[3] = 0;\n        rs[4] = bone.c;\n        rs[5] = bone.d;\n        rs[6] = bone.worldY;\n        rs[7] = 0;\n        return rs;\n    }\n    constructor() {\n        this.isDynamic = false;\n        this.changeMap = new Map();\n        this.frames = [];\n        this.skinDataArray = [];\n        this.boneFrames = [];\n        this.eventsFrames = [];\n    }\n    getFrameIndex(time, frameIndex) {\n        let frames = this.frames;\n        let n = frames.length;\n        for (let i = 1; i < n; i++)\n            if (frames[i] > time)\n                return i - 1;\n        return n - 1;\n    }\n    cacheBones(preRender) {\n        let duration = preRender._play(this.name);\n        let totalFrame = Math.round(duration / step) || 1;\n        for (let i = 0; i <= totalFrame; i++) {\n            let bones = preRender._updateState(i == 0 ? 0 : step);\n            let frame = [];\n            this.boneFrames.push(frame);\n            for (let j = 0; j < bones.length; j++) {\n                let bone = bones[j];\n                let rs = AnimationRender.getFloat32Array(bone);\n                frame.push(rs);\n            }\n        }\n    }\n    check(animation, preRender) {\n        this.name = animation.name;\n        let timeline = animation.timelines;\n        let changeMap = this.changeMap;\n        let renderFrames = this.frames;\n        let hasClip = false;\n        renderFrames.push(0);\n        changeMap.set(0, {});\n        for (let i = 0, n = timeline.length; i < n; i++) {\n            let time = timeline[i];\n            let frames = time.frames;\n            if (time instanceof spine.AttachmentTimeline) {\n                let attachmentNames = time.attachmentNames;\n                let slotIndex = time.slotIndex;\n                for (let j = 0, m = frames.length; j < m; j++) {\n                    let frame = frames[j];\n                    let change = new ChangeSlot();\n                    change.slotId = slotIndex;\n                    change.attachment = attachmentNames[j] || null;\n                    let changeItem = changeMap.get(frame);\n                    if (!changeItem) {\n                        this.frames.indexOf(frame) == -1 && this.frames.push(frame);\n                        changeItem = {\n                            iChanges: []\n                        };\n                        changeMap.set(frame, changeItem);\n                    }\n                    let arr = changeItem.iChanges = changeItem.iChanges || [];\n                    arr.push(change);\n                }\n            }\n            else if (time instanceof spine.DrawOrderTimeline) {\n                let orders = time.drawOrders;\n                for (let j = 0, m = frames.length; j < m; j++) {\n                    let frame = frames[j];\n                    let change = new ChangeDrawOrder();\n                    change.order = orders[j];\n                    let changeItem = changeMap.get(frame);\n                    if (!changeItem) {\n                        this.frames.indexOf(frame) == -1 && this.frames.push(frame);\n                        changeItem = {\n                            iChanges: []\n                        };\n                        changeMap.set(frame, changeItem);\n                    }\n                    let arr = changeItem.iChanges = changeItem.iChanges || [];\n                    arr.push(change);\n                }\n            }\n            else if (time instanceof (spine.ColorTimeline || spine.RGBATimeline) || (spine.TwoColorTimeline && time instanceof spine.TwoColorTimeline)) {\n                let rgba = time;\n                let slotIndex = rgba.slotIndex;\n                if (frames.length == 5 && frames[0] == 0 && frames[4] == 0) {\n                    let change = new ChangeSlot();\n                    change.slotId = slotIndex;\n                    change.attachment = null;\n                    let frame = 0;\n                    let changeItem = changeMap.get(frame);\n                    if (!changeItem) {\n                        this.frames.indexOf(frame) == -1 && this.frames.push(frame);\n                        changeItem = {\n                            iChanges: []\n                        };\n                        changeMap.set(frame, changeItem);\n                    }\n                    let arr = changeItem.iChanges = changeItem.iChanges || [];\n                    arr.push(change);\n                }\n                else {\n                    let changeRGBA = new ChangeRGBA(slotIndex);\n                    let startFrame = frames[0];\n                    let num = frames.length / 5 | 0;\n                    let endFrame = frames[(num - 1) * 5];\n                    changeRGBA.startFrame = startFrame;\n                    changeRGBA.endFrame = endFrame;\n                    let changeItem = changeMap.get(startFrame);\n                    if (!changeItem) {\n                        this.frames.indexOf(startFrame) == -1 && this.frames.push(startFrame);\n                        changeItem = {\n                            vChanges: []\n                        };\n                        changeMap.set(startFrame, changeItem);\n                    }\n                    this.frames.indexOf(endFrame) == -1 && this.frames.push(endFrame);\n                    let arr = changeItem.vChanges = changeItem.vChanges || [];\n                    arr.push(changeRGBA);\n                }\n            }\n            else if (time instanceof window.spine.ClippingAttachment) {\n                hasClip = true;\n            }\n            else if (time instanceof window.spine.EventTimeline) {\n                if (preRender.canCache) {\n                    let eventTime = time;\n                    let events = eventTime.events;\n                    for (let j = 0, m = frames.length; j < m; j++) {\n                        let frame = frames[j];\n                        let event = events[j];\n                        let arr = this.eventsFrames[Math.round(frame / step)] = this.eventsFrames[frame] || [];\n                        arr.push(event);\n                    }\n                }\n            }\n            else if (time instanceof spine.DeformTimeline) {\n                let slotIndex = time.slotIndex;\n                let change = new ChangeDeform();\n                change.slotId = slotIndex;\n                let startFrame = frames[0];\n                let endFrame = frames[frames.length - 1];\n                change.startFrame = startFrame;\n                change.endFrame = endFrame;\n                let changeItem = changeMap.get(startFrame);\n                if (!changeItem) {\n                    this.frames.indexOf(startFrame) == -1 && this.frames.push(startFrame);\n                    changeItem = {\n                        vChanges: []\n                    };\n                    changeMap.set(startFrame, changeItem);\n                }\n                this.frames.indexOf(endFrame) == -1 && this.frames.push(endFrame);\n                let arr = changeItem.vChanges = changeItem.vChanges || [];\n                arr.push(change);\n            }\n            else {\n            }\n        }\n        this.isDynamic = !!changeMap.size;\n        renderFrames.sort();\n        if (!hasClip) {\n            if (preRender.canCache) {\n                this.cacheBones(preRender);\n                this.isCache = true;\n            }\n        }\n        this.frameNumber = renderFrames.length;\n    }\n    createSkinData(mainVB, mainIB, tempIbCreate, slotAttachMap, attachMap, type) {\n        let skinData = new SkinAniRenderData();\n        skinData.type = type;\n        let frames = this.frames;\n        skinData.init(this.changeMap, mainVB, mainIB, tempIbCreate, frames, slotAttachMap, attachMap, this.isDynamic);\n        skinData.updateBoneMat = this.isCache ? (this.eventsFrames.length == 0 ? skinData.updateBoneMatCache : skinData.updateBoneMatCacheEvent) : skinData.updateBoneMatByBone;\n        this.skinDataArray.push(skinData);\n        return skinData;\n    }\n    destroy() {\n        for (let i = 0, n = this.skinDataArray.length; i < n; i++)\n            this.skinDataArray[i].destroy();\n        this.skinDataArray.length = 0;\n        this.frames.length = 0;\n        this.changeMap.clear();\n    }\n}\nexport class SkinAniRenderData {\n    constructor() {\n        this.maxVertexCount = 0;\n        this.maxIndexCount = 0;\n        this.isDynamic = false;\n        this.renderDatas = [];\n    }\n    getMesh() {\n        return this._defaultMesh;\n    }\n    getFrameData(frameIndex) {\n        return this.renderDatas[frameIndex] || this._defaultFrameData;\n    }\n    updateBoneMatCache(delta, animation, bones, state, boneMat, ofx = 0, ofy = 0) {\n        this.vb.updateBoneCache(animation.boneFrames, delta / step, boneMat, ofx, ofy);\n    }\n    updateBoneMatCacheEvent(delta, animation, bones, state, boneMat) {\n        let f = delta / step;\n        this.vb.updateBoneCache(animation.boneFrames, f, boneMat);\n        let currFrame = Math.round(f);\n        let curentTrack = state.currentTrack;\n        let lastEventFrame = curentTrack.lastEventFrame;\n        if (lastEventFrame == currFrame) {\n            return;\n        }\n        if (lastEventFrame > currFrame || lastEventFrame == undefined) {\n            lastEventFrame = -1;\n        }\n        if (currFrame - lastEventFrame <= 1) {\n            let events = animation.eventsFrames[currFrame];\n            if (events) {\n                for (let i = 0, n = events.length; i < n; i++) {\n                    state.dispatchEvent(null, \"event\", events[i]);\n                }\n            }\n        }\n        else {\n            for (let i = lastEventFrame + 1; i <= currFrame; i++) {\n                let events = animation.eventsFrames[i];\n                if (events) {\n                    for (let j = 0, m = events.length; j < m; j++) {\n                        state.dispatchEvent(null, \"event\", events[j]);\n                    }\n                }\n            }\n        }\n        curentTrack.lastEventFrame = currFrame;\n    }\n    updateBoneMatByBone(delta, animation, bones, state, boneMat, ofx = 0, ofy = 0) {\n        this.vb.updateBone(bones, boneMat, ofx, ofy);\n    }\n    init(changeMap, mainVB, ibCreator, tempCreator, frames, slotAttachMap, attachMap, isDynamic) {\n        this.mainIB = ibCreator;\n        this.isDynamic = isDynamic;\n        this.canInstance = !this.isDynamic;\n        if (isDynamic) {\n            this.vb = mainVB.clone();\n            this.vb.initBoneMat();\n            let tAttachMap = attachMap.slice();\n            let framesLength = frames.length;\n            let order;\n            for (let i = 0; i < framesLength; i++) {\n                let frame = frames[i];\n                let fcs = changeMap.get(frame);\n                if (!fcs)\n                    continue;\n                let iChanges = fcs.iChanges;\n                let data = {};\n                if (iChanges) {\n                    for (let j = 0, m = iChanges.length; j < m; j++) {\n                        let ichange = iChanges[j];\n                        if (!ichange.change(this.vb, slotAttachMap)) {\n                            this.isNormalRender = true;\n                        }\n                        let newOrder = ichange.changeOrder(tAttachMap);\n                        if (newOrder) {\n                            order = newOrder;\n                        }\n                    }\n                    tempCreator.createIB(tAttachMap, this.vb, order);\n                    data.ib = tempCreator.ib.slice(0, tempCreator.ibLength);\n                    data.mulitRenderData = tempCreator.outRenderData;\n                    data.type = tempCreator.type;\n                    data.size = tempCreator.size;\n                }\n                let vChanges = fcs.vChanges;\n                if (vChanges) {\n                    let myChangeVB = [];\n                    for (let j = 0, m = vChanges.length; j < m; j++) {\n                        let changeVBItem = vChanges[j].clone();\n                        if (changeVBItem.initChange(this.vb)) {\n                            changeVBItem.startFrame = i;\n                            changeVBItem.endFrame = frames.indexOf(changeVBItem.endFrame);\n                            myChangeVB.push(changeVBItem);\n                        }\n                    }\n                    data.vChanges = myChangeVB;\n                }\n                this.renderDatas.push(data);\n                if (!frame) {\n                    if (!data.ib) {\n                        data.mulitRenderData = ibCreator.outRenderData;\n                        data.ib = ibCreator.ib.slice(0, this.mainIB.ibLength);\n                        data.type = ibCreator.type;\n                        data.size = ibCreator.size;\n                    }\n                    this._defaultFrameData = data;\n                }\n            }\n            this.maxIndexCount = Math.max(tempCreator.maxIndexCount, this.mainIB.maxIndexCount);\n        }\n        else {\n            this.vb = mainVB;\n            this._defaultMesh = SpineMeshUtils.createMesh(this.type, this.vb, ibCreator, this.isDynamic);\n            this._defaultMesh._addReference();\n            this.maxIndexCount = ibCreator.maxIndexCount;\n        }\n        this.maxVertexCount = this.vb.maxVertexCount;\n        if (!this._defaultFrameData) {\n            this._defaultFrameData = {\n                mulitRenderData: ibCreator.outRenderData,\n                ib: ibCreator.ib.slice(0, this.mainIB.ibLength),\n                type: ibCreator.type,\n                size: ibCreator.size\n            };\n        }\n    }\n    destroy() {\n        this._defaultMesh && this._defaultMesh.destroy();\n        this._defaultMesh = null;\n        this._defaultFrameData = null;\n        this.renderDatas = null;\n    }\n}\n","export class SpineOptimizeConst {\n}\nSpineOptimizeConst.BONEVERTEX = 22;\nSpineOptimizeConst.RIGIDBODYVERTEX = 9;\n","import { Color } from \"../../maths/Color\";\nimport { SpineOptimizeConst } from \"./SpineOptimizeConst\";\nconst QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\nexport class AttachmentParse {\n    constructor() {\n        this.vertexCount = 0;\n        this.indexCount = 0;\n        this.isNormalRender = false;\n        this.vertexBones = 0;\n    }\n    init(attachment, boneIndex, slotId, deform, slot) {\n        this.slotId = slotId;\n        this.sourceData = attachment;\n        this.attachment = attachment.name;\n        this.boneIndex = boneIndex;\n        let slotColor = slot.color;\n        this.blendMode = slot.blendMode;\n        let color = this.color = new Color();\n        let attchmentColor;\n        let darkColor = slot.darkColor;\n        if (attachment instanceof spine.RegionAttachment) {\n            attchmentColor = attachment.color;\n            let region = attachment;\n            this.vertexArray = region.offset;\n            this.stride = 2;\n            this.indexArray = QUAD_TRIANGLES;\n            this.uvs = region.uvs;\n            this.textureName = region.region.page.name;\n        }\n        else if (attachment instanceof spine.MeshAttachment) {\n            attchmentColor = attachment.color;\n            let vside = SpineOptimizeConst.BONEVERTEX;\n            let mesh = attachment;\n            this.textureName = mesh.region.page.name;\n            if (!mesh.bones || mesh.bones.length == 0) {\n                if (deform && deform.length > 1) {\n                    this.vertexArray = new Float32Array(deform);\n                }\n                else {\n                    this.vertexArray = mesh.vertices;\n                }\n                this.stride = 2;\n                this.indexArray = mesh.triangles;\n                this.uvs = mesh.uvs;\n            }\n            else {\n                if (deform && deform.length > 1) {\n                    debugger;\n                }\n                this.stride = vside - 6;\n                let vertexSize = mesh.uvs.length / 2;\n                let vertexArray = this.vertexArray = new Float32Array(vertexSize * this.stride);\n                this.indexArray = mesh.triangles;\n                this.uvs = mesh.uvs;\n                let vertices = mesh.vertices;\n                let bones = mesh.bones;\n                let v = 0;\n                let needPoint = (vside - 6) / 4;\n                this.vertexBones = needPoint;\n                for (let w = 0, b = 0; w < vertexSize; w++) {\n                    let n = bones[v++];\n                    n += v;\n                    let result = [];\n                    let offset = w * this.stride;\n                    let nid = 0;\n                    for (; v < n; v++, b += 3, nid++) {\n                        result.push([vertices[b], vertices[b + 1], vertices[b + 2], bones[v]]);\n                    }\n                    if (result.length > needPoint) {\n                        this.vertexBones = Math.max(this.vertexBones, result.length);\n                        result.length = needPoint;\n                        this.isNormalRender = true;\n                    }\n                    for (let i = 0; i < needPoint; i++) {\n                        let v = result[i];\n                        if (!v)\n                            continue;\n                        vertexArray[offset + i * 4] = v[0];\n                        vertexArray[offset + i * 4 + 1] = v[1];\n                        vertexArray[offset + i * 4 + 2] = v[2];\n                        vertexArray[offset + i * 4 + 3] = v[3];\n                    }\n                }\n            }\n        }\n        else if (attachment instanceof spine.ClippingAttachment) {\n            this.attachment = null;\n            this.isClip = true;\n        }\n        else if (attachment instanceof spine.PathAttachment) {\n            this.attachment = attachment.name;\n            this.vertexArray = new Float32Array(attachment.vertices);\n            this.isPath = true;\n        }\n        else {\n            this.attachment = null;\n        }\n        if (this.textureName) {\n            this.vertexCount = this.vertexArray.length / this.stride;\n            this.indexCount = this.indexArray.length;\n        }\n        if (attchmentColor) {\n            this.lightColor = attchmentColor;\n            color.r = slotColor.r * attchmentColor.r;\n            color.g = slotColor.g * attchmentColor.g;\n            color.b = slotColor.b * attchmentColor.b;\n            color.a = slotColor.a * attchmentColor.a;\n        }\n        this.darkColor = darkColor;\n        return true;\n    }\n}\n","export class MultiRenderData {\n    constructor() {\n        this.renderData = [];\n        this.id = MultiRenderData.ID++;\n    }\n    addData(textureName, blendMode, offset, length, attachment) {\n        this.currentData = { textureName: textureName, blendMode, offset, length, attachment };\n        this.renderData.push(this.currentData);\n    }\n    endData(length) {\n        this.currentData.length = length - this.currentData.offset;\n    }\n}\nMultiRenderData.ID = 0;\n","import { IndexFormat } from \"../../RenderEngine/RenderEnum/IndexFormat\";\nimport { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nimport { MultiRenderData } from \"./MultiRenderData\";\nexport class IBCreator {\n    constructor() {\n        this.ibLength = 0;\n        this.maxIndexCount = 0;\n    }\n    updateFormat(vertexCount) {\n        let ntype = SpineMeshUtils.getIndexFormat(vertexCount);\n        if (this.type === ntype)\n            return;\n        this.type = ntype;\n        this._updateBuffer();\n    }\n    setBufferLength(maxIndexCount) {\n        if (maxIndexCount <= this.maxIndexCount)\n            return;\n        this.maxIndexCount = maxIndexCount;\n        this._updateBuffer();\n    }\n    _updateBuffer() {\n        let oldbuffer = this.ib;\n        switch (this.type) {\n            case IndexFormat.UInt16:\n                this.size = 2;\n                this.ib = new Uint16Array(this.maxIndexCount);\n                break;\n            case IndexFormat.UInt8:\n                this.size = 1;\n                this.ib = new Uint8Array(this.maxIndexCount);\n                break;\n            case IndexFormat.UInt32:\n                this.size = 4;\n                this.ib = new Uint32Array(this.maxIndexCount);\n                break;\n        }\n        if (oldbuffer)\n            this.ib.set(oldbuffer);\n    }\n    createIB(attachs, vbCreator, order) {\n        let offset = 0;\n        let slotVBMap = vbCreator.slotVBMap;\n        let drawOrder;\n        let getAttach;\n        if (order) {\n            drawOrder = order;\n            getAttach = function (value) {\n                return attachs[value];\n            };\n        }\n        else {\n            drawOrder = attachs;\n            getAttach = function (value) {\n                return value;\n            };\n        }\n        let outRenderData = new MultiRenderData();\n        let texture;\n        let blend;\n        let uploadData = [];\n        let end = -1;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let attach = getAttach(drawOrder[i]);\n            if (attach.attachment && !attach.isPath) {\n                let needAdd = false;\n                if (texture != attach.textureName) {\n                    texture = attach.textureName;\n                    needAdd = true;\n                }\n                if (blend != attach.blendMode) {\n                    blend = attach.blendMode;\n                    needAdd = true;\n                }\n                if (needAdd) {\n                    if (outRenderData.currentData) {\n                        outRenderData.endData(offset);\n                    }\n                    outRenderData.addData(attach.textureName, attach.blendMode, offset, 0, attach.attachment);\n                }\n                let attachPos = slotVBMap.get(attach.slotId).get(attach.attachment);\n                if (attach.attachment && attach.indexArray) {\n                    uploadData.push({\n                        data: attach.indexArray,\n                        offset: attachPos.offset,\n                        start: offset\n                    });\n                    offset += attach.indexArray.length;\n                    end = Math.max(end, offset);\n                }\n            }\n        }\n        let vertexCount = vbCreator.maxVertexCount;\n        let ntype = SpineMeshUtils.getIndexFormat(vertexCount);\n        let needUpdateBuffer = false;\n        if (ntype !== this.type) {\n            this.type = ntype;\n            needUpdateBuffer = true;\n        }\n        if (end > this.maxIndexCount) {\n            this.maxIndexCount = end;\n            needUpdateBuffer = true;\n        }\n        needUpdateBuffer && this._updateBuffer();\n        let ib = this.ib;\n        for (let i = 0, len = uploadData.length; i < len; i++) {\n            let upload = uploadData[i];\n            let offset = upload.offset;\n            let start = upload.start;\n            for (let j = 0, n = upload.data.length; j < n; j++) {\n                ib[start + j] = upload.data[j] + offset;\n            }\n        }\n        if (texture) {\n            outRenderData.endData(offset);\n        }\n        this.outRenderData = outRenderData;\n        this.ibLength = offset;\n    }\n}\n","import { ESpineRenderType } from \"../SpineSkeleton\";\nexport class SlotUtils {\n    static checkAttachment(attachment) {\n        if (attachment == null)\n            return ESpineRenderType.rigidBody;\n        if (attachment instanceof window.spine.RegionAttachment) {\n            return ESpineRenderType.rigidBody;\n        }\n        else if (attachment instanceof window.spine.MeshAttachment) {\n            let mesh = attachment;\n            if (!mesh.bones) {\n                return ESpineRenderType.rigidBody;\n            }\n            else {\n                return ESpineRenderType.boneGPU;\n            }\n        }\n        else {\n            return ESpineRenderType.normal;\n        }\n    }\n    static appendIndexArray(attachmentParse, indexArray, size, offset) {\n        if (!attachmentParse.attachment || !attachmentParse.indexArray)\n            return offset;\n        let slotindexArray = attachmentParse.indexArray;\n        for (let j = 0, n = slotindexArray.length; j < n; j++) {\n            indexArray[offset] = slotindexArray[j] + size;\n            offset++;\n        }\n        return offset;\n    }\n}\n","export class AnimationRenderProxy {\n    constructor(animator) {\n        this.animator = animator;\n        this.reset();\n    }\n    set skinIndex(value) {\n        this.currentSKin = this.animator.skinDataArray[value];\n    }\n    get name() {\n        return this.animator.name;\n    }\n    reset() {\n        this.currentTime = -1;\n        this.currentFrameIndex = -1;\n    }\n    renderWithOutMat(slots, updator, curTime) {\n        let beforeFrame = this.currentFrameIndex;\n        let nowFrame = this.animator.getFrameIndex(curTime, beforeFrame);\n        updator.renderUpdate(this.currentSKin, nowFrame, beforeFrame);\n        this.currentTime = curTime;\n        this.currentFrameIndex = nowFrame;\n    }\n    render(bones, slots, updator, curTime, boneMat, ofx, ofy) {\n        this.renderWithOutMat(slots, updator, curTime);\n        this.currentSKin.updateBoneMat(curTime, this.animator, bones, this.state, boneMat, ofx, ofy);\n    }\n}\n","import { SpineAdapter } from \"../SpineAdapter\";\nimport { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nexport class SkinRenderUpdate {\n    constructor(owner, skinAttach) {\n        this.currentMaterials = [];\n        this.cacheMaterials = [];\n        this.vChanges = [];\n        this.vertexBones = 0;\n        this.owner = owner;\n        this.name = skinAttach.name;\n        this.hasNormalRender = skinAttach.hasNormalRender;\n        this.vertexBones = skinAttach.vertexBones;\n        this.skinAttachType = skinAttach.type;\n    }\n    getMaterialByName(name, blendMode) {\n        return this.templet.getMaterial(this.templet.getTexture(name), blendMode);\n    }\n    renderUpdate(skindata, frame, lastFrame) {\n        const renderNode = this.owner._nodeOwner;\n        let needUpdate = false;\n        if (skindata.isDynamic) {\n            needUpdate = this.updateDynamicRender(skindata, frame, lastFrame, renderNode);\n        }\n        else {\n            needUpdate = this.handleRender(skindata, frame, renderNode, skindata.getMesh());\n        }\n        if (needUpdate)\n            renderNode._updateRenderElements();\n    }\n    updateDynamicRender(skindata, frame, lastFrame, renderNode) {\n        let mesh = this.owner.getDynamicMesh(skindata.vb.vertexDeclaration);\n        let currentChanges = this.vChanges;\n        let frameData = skindata.getFrameData(frame);\n        let isFirst = frame < 0;\n        let needUpload = false;\n        if (isFirst) {\n            this._resetVertexBuffset(skindata);\n            currentChanges.length = 0;\n        }\n        for (let f = lastFrame + 1; f <= frame; f++) {\n            let frameData = skindata.getFrameData(f);\n            let frameChanges = frameData.vChanges;\n            if (frameChanges) {\n                for (const change of frameChanges) {\n                    if (!currentChanges.includes(change)) {\n                        currentChanges.push(change);\n                    }\n                }\n            }\n        }\n        for (let i = currentChanges.length - 1; i >= 0; i--) {\n            let change = currentChanges[i];\n            if (change.apply(frame, skindata.vb, this.owner._skeleton.slots)) {\n                needUpload = true;\n            }\n            else {\n                currentChanges.splice(i, 1);\n            }\n        }\n        if (needUpload || isFirst) {\n            this.uploadVertexBuffer(skindata.vb, mesh);\n        }\n        if (frameData.ib || isFirst) {\n            this.uploadIndexBuffer(frameData, mesh);\n        }\n        let needUpdateMesh = SpineMeshUtils._updateSpineSubMesh(mesh, frameData);\n        return this.handleRender(skindata, frame, renderNode, mesh, needUpdateMesh);\n    }\n    handleRender(skindata, frame, renderNode, mesh, forceUpdateMesh = false) {\n        let frameData = skindata.getFrameData(frame);\n        let needUpdate = false;\n        let mulitRenderData = frameData.mulitRenderData;\n        if (mulitRenderData) {\n            let mats = this.cacheMaterials[mulitRenderData.id] || this.createMaterials(mulitRenderData);\n            if (this.currentMaterials !== mats) {\n                renderNode._updateMaterials(mats);\n                needUpdate = true;\n                this.currentMaterials = mats;\n            }\n        }\n        return !renderNode._onMeshChange(mesh, forceUpdateMesh) || needUpdate;\n    }\n    createMaterials(mulitRenderData) {\n        let mats = mulitRenderData.renderData.map(data => this.getMaterialByName(data.textureName, data.blendMode));\n        this.cacheMaterials[mulitRenderData.id] = mats;\n        return mats;\n    }\n    uploadIndexBuffer(frameData, mesh) {\n        let indexData = frameData.ib;\n        let indexbuffer = mesh._indexBuffer;\n        indexbuffer.indexType = frameData.type;\n        indexbuffer.indexCount = indexData.length;\n        indexbuffer._setIndexDataLength(indexData.byteLength);\n        indexbuffer._setIndexData(indexData, 0);\n    }\n    uploadVertexBuffer(vbCreator, mesh) {\n        let vertexBuffer = mesh.vertexBuffers[0];\n        let vblen = vbCreator.vbLength * 4;\n        vertexBuffer.setDataLength(vbCreator.maxVertexCount * vbCreator.vertexSize * 4);\n        vertexBuffer.setData(vbCreator.vb.buffer, 0, 0, vblen);\n    }\n    init(skeleton, templet, renderNode) {\n        this.templet = templet;\n        if (this.hasNormalRender) {\n            this._renderer = SpineAdapter.createNormalRender(templet);\n        }\n    }\n    render(time) {\n    }\n    _resetVertexBuffset(skindata) {\n        let slots = this.owner._skeleton.slots;\n        let map = skindata.vb.slotVBMap;\n        let renderDatas = skindata.renderDatas;\n        let resetSlots = new Set();\n        renderDatas.forEach(data => {\n            if (data.vChanges) {\n                for (const change of data.vChanges) {\n                    resetSlots.add(change.slotId);\n                }\n            }\n        });\n        resetSlots.forEach(slotId => {\n            var _a;\n            let slot = slots[slotId];\n            if (slot && slot.attachment) {\n                let attach = (_a = map.get(slotId)) === null || _a === void 0 ? void 0 : _a.get(slot.attachment.name);\n                if (attach) {\n                    skindata.vb.resetVB(attach.attachment);\n                }\n            }\n        });\n    }\n    destroy() {\n        if (this.hasNormalRender) {\n            this._renderer.destroy();\n        }\n    }\n}\n","import { BaseRender2DType, BaseRenderNode2D } from \"../../NodeRender2D/BaseRenderNode2D\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { Vector4 } from \"../../maths/Vector4\";\nimport { ESpineRenderType } from \"../SpineSkeleton\";\nimport { SpineShaderInit } from \"../material/SpineShaderInit\";\nimport { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nimport { AnimationRenderProxy } from \"./AnimationRenderProxy\";\nimport { SkinRenderUpdate } from \"./SkinRenderUpdate\";\nexport class SpineOptimizeRender {\n    constructor(spineOptimize) {\n        this._skinIndex = 0;\n        this.renderProxyMap = new Map();\n        this._dynamicMap = new Map;\n        this.animatorMap = new Map();\n        this.skinRenderArray = [];\n        this.boneMat = new Float32Array(spineOptimize.maxBoneNumber * 8);\n        spineOptimize.skinAttachArray.forEach((value) => {\n            this.skinRenderArray.push(new SkinRenderUpdate(this, value));\n        });\n        let animators = spineOptimize.animators;\n        for (let i = 0, n = animators.length; i < n; i++) {\n            let animator = animators[i];\n            this.animatorMap.set(animator.name, new AnimationRenderProxy(animator));\n        }\n        this.currentRender = this.skinRenderArray[this._skinIndex];\n    }\n    getSpineColor() {\n        return this.spineColor;\n    }\n    destroy() {\n        this.skinRenderArray.forEach(skin => skin.destroy());\n        this._dynamicMap.forEach(mesh => mesh.destroy());\n        this._dynamicMap.clear();\n        this._nodeOwner._onMeshChange(null);\n    }\n    initBake(obj) {\n        this.bakeData = obj;\n        if (obj) {\n            let render = this.renderProxyMap.get(ERenderProxyType.RenderBake) || new RenderBake(this._nodeOwner);\n            render.simpleAnimatorTexture = obj.texture2d;\n            render._bonesNums = obj.bonesNums;\n            render.aniOffsetMap = obj.aniOffsetMap;\n            this.renderProxyMap.set(ERenderProxyType.RenderBake, render);\n        }\n        this.isBake = !!obj;\n        if (this._curAnimationName) {\n            this._clear();\n            this.play(this._curAnimationName);\n        }\n    }\n    changeSkeleton(skeleton) {\n        this._skeleton = skeleton;\n        this.renderProxyMap.forEach(render => {\n            render.changeSkeleton(skeleton);\n        });\n        skeleton.showSkinByIndex(this._skinIndex);\n        this._skeleton.setSlotsToSetupPose();\n    }\n    init(skeleton, templet, renderNode, state) {\n        this._skeleton = skeleton;\n        this._nodeOwner = renderNode;\n        let scolor = skeleton.color;\n        this.spineColor = new Color(scolor.r, scolor.g, scolor.b, scolor.a);\n        let color = renderNode._spriteShaderData.getColor(BaseRenderNode2D.BASERENDER2DCOLOR) || new Color();\n        color.setValue(scolor.r, scolor.g, scolor.b, scolor.a);\n        if (renderNode._renderAlpha !== undefined) {\n            color.a *= renderNode._renderAlpha;\n        }\n        else\n            color.a *= renderNode.owner.alpha;\n        renderNode._spriteShaderData.setColor(BaseRenderNode2D.BASERENDER2DCOLOR, color);\n        this.skinRenderArray.forEach((value) => {\n            value.init(skeleton, templet, renderNode);\n        });\n        this._state = state;\n        this.animatorMap.forEach((value, key) => {\n            value.state = state;\n        });\n        let renderOptimize = new RenderOptimize(this._nodeOwner);\n        let renderNormal = new RenderNormal(this._nodeOwner);\n        this.renderProxyMap.set(ERenderProxyType.RenderNormal, renderNormal);\n        this.renderProxyMap.set(ERenderProxyType.RenderOptimize, renderOptimize);\n    }\n    get renderProxytype() {\n        return this._renderProxytype;\n    }\n    set renderProxytype(value) {\n        if (this.isBake && value == ERenderProxyType.RenderOptimize) {\n            if (this.bakeData.aniOffsetMap[this._curAnimationName] != undefined) {\n                value = ERenderProxyType.RenderBake;\n            }\n        }\n        this.renderProxy = this.renderProxyMap.get(value);\n        if (value == ERenderProxyType.RenderNormal) {\n            this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n            this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n        }\n        this._renderProxytype = value;\n    }\n    beginCache() {\n        this._state.apply = this._state.applyCache;\n        this._state.getCurrentPlayTime = this._state.getCurrentPlayTimeByCache;\n        this._skeleton.updateWorldTransform = this._skeleton.updateWorldTransformCache;\n    }\n    endCache() {\n        this._state.apply = this._state.oldApply;\n        this._state.getCurrentPlayTime = this._state.getCurrentPlayTimeOld;\n        this._skeleton.updateWorldTransform = this._skeleton.oldUpdateWorldTransform;\n    }\n    setSkinIndex(index) {\n        this._skinIndex = index;\n        this.currentRender = this.skinRenderArray[index];\n        switch (this.currentRender.skinAttachType) {\n            case ESpineRenderType.boneGPU:\n                this._nodeOwner._spriteShaderData.addDefine(SpineShaderInit.SPINE_FAST);\n                this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n                break;\n            case ESpineRenderType.rigidBody:\n                this._nodeOwner._spriteShaderData.addDefine(SpineShaderInit.SPINE_RB);\n                this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n                break;\n            case ESpineRenderType.normal:\n                this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n                this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n                break;\n        }\n        if (this.currentAnimation) {\n            this._clear();\n            this.play(this._curAnimationName);\n        }\n    }\n    getDynamicMesh(vertexDeclaration, create = true) {\n        let id = vertexDeclaration.id;\n        let mesh = this._dynamicMap.get(id);\n        if (!mesh && create) {\n            mesh = SpineMeshUtils.createMeshDynamic(vertexDeclaration);\n            mesh._addReference();\n            this._dynamicMap.set(id, mesh);\n        }\n        return mesh;\n    }\n    _clear() {\n        this._nodeOwner.clear();\n        this._isRender = false;\n    }\n    play(animationName) {\n        this._curAnimationName = animationName;\n        let currentRender = this.currentRender;\n        let oldRenderProxy = this.renderProxy;\n        let old = this.currentAnimation;\n        let oldSkinData = old ? old.currentSKin : null;\n        let currentAnimation = this.currentAnimation = this.animatorMap.get(animationName);\n        currentAnimation.skinIndex = this._skinIndex;\n        let currentSKin = currentAnimation.currentSKin;\n        if (old) {\n            old.reset();\n        }\n        if (currentSKin.isNormalRender) {\n            this.renderProxytype = ERenderProxyType.RenderNormal;\n        }\n        else {\n            if (currentRender.vertexBones > 4) {\n                console.warn(`In FastRender mode - Current skin: ${currentRender.name} has ${currentRender.vertexBones} bones influencing each vertex. This exceeds the recommended limit of 4 bones per vertex.`);\n            }\n            switch (this.currentRender.skinAttachType) {\n                case ESpineRenderType.boneGPU:\n                    this._nodeOwner._spriteShaderData.addDefine(SpineShaderInit.SPINE_FAST);\n                    this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n                    break;\n                case ESpineRenderType.rigidBody:\n                    this._nodeOwner._spriteShaderData.addDefine(SpineShaderInit.SPINE_RB);\n                    this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n                    break;\n                case ESpineRenderType.normal:\n                    this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_FAST);\n                    this._nodeOwner._spriteShaderData.removeDefine(SpineShaderInit.SPINE_RB);\n                    break;\n            }\n            if (old && oldSkinData.isNormalRender) {\n                this._clear();\n            }\n            if (oldSkinData != currentSKin || !this._nodeOwner._mesh) {\n                currentRender.renderUpdate(currentSKin, -1, 0);\n            }\n            if (this._isRender) {\n            }\n            else {\n                this.renderProxytype = ERenderProxyType.RenderOptimize;\n                this._isRender = true;\n            }\n        }\n        if (oldRenderProxy) {\n            oldRenderProxy.leave();\n        }\n        this.renderProxy.change(currentRender, currentAnimation);\n        if ((currentAnimation.animator.isCache || this.renderProxytype == ERenderProxyType.RenderBake) && !currentSKin.isNormalRender) {\n            this.beginCache();\n        }\n        else {\n            this.endCache();\n        }\n    }\n    render(time) {\n        this.renderProxy.render(time, this.boneMat);\n    }\n}\nvar ERenderProxyType;\n(function (ERenderProxyType) {\n    ERenderProxyType[ERenderProxyType[\"RenderNormal\"] = 0] = \"RenderNormal\";\n    ERenderProxyType[ERenderProxyType[\"RenderOptimize\"] = 1] = \"RenderOptimize\";\n    ERenderProxyType[ERenderProxyType[\"RenderBake\"] = 2] = \"RenderBake\";\n})(ERenderProxyType || (ERenderProxyType = {}));\nclass RenderOptimize {\n    constructor(renderNode) {\n        this._renderNode = renderNode;\n        this.changeSkeleton(renderNode.getSkeleton());\n    }\n    changeSkeleton(skeleton) {\n        this._skeleton = skeleton;\n        this.bones = skeleton.bones;\n        this.slots = skeleton.slots;\n    }\n    change(currentRender, currentAnimation) {\n        this.skinUpdate = currentRender;\n        this.currentAnimation = currentAnimation;\n    }\n    leave() {\n    }\n    render(curTime, boneMat) {\n        this.currentAnimation.render(this.bones, this.slots, this.skinUpdate, curTime, boneMat, -this._skeleton.x, -this._skeleton.y);\n        this._renderNode._spriteShaderData.setBuffer(SpineShaderInit.BONEMAT, boneMat);\n    }\n}\nclass RenderNormal {\n    constructor(renderNode) {\n        this._renderNode = renderNode;\n        this.changeSkeleton(renderNode.getSkeleton());\n    }\n    changeSkeleton(skeleton) {\n        this._skeleton = skeleton;\n    }\n    leave() {\n        this._renderNode._spriteShaderData.removeDefine(SpineShaderInit.SPINE_COLOR2);\n    }\n    change(currentRender, currentAnimation) {\n        this._renderer = currentRender._renderer;\n        this._renderNode._spriteShaderData.addDefine(SpineShaderInit.SPINE_COLOR2);\n    }\n    render(curTime, boneMat) {\n        this._renderNode.clear();\n        this._renderer.draw(this._skeleton, this._renderNode, -1, -1);\n    }\n}\nclass RenderBake {\n    get simpleAnimatorTexture() {\n        return this._simpleAnimatorTexture;\n    }\n    set simpleAnimatorTexture(value) {\n        if (this._simpleAnimatorTexture) {\n            this._simpleAnimatorTexture._removeReference();\n        }\n        this._simpleAnimatorTexture = value;\n        this._simpleAnimatorTextureSize = value.width;\n        this._renderNode._spriteShaderData.setTexture(SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURE, value);\n        value._addReference();\n        this._renderNode._spriteShaderData.setNumber(SpineShaderInit.SIMPLE_SIMPLEANIMATORTEXTURESIZE, this._simpleAnimatorTextureSize);\n    }\n    get simpleAnimatorOffset() {\n        return this._simpleAnimatorOffset;\n    }\n    set simpleAnimatorOffset(value) {\n        value.cloneTo(this._simpleAnimatorOffset);\n    }\n    constructor(renderNode) {\n        this.step = 1 / 60;\n        this._simpleAnimatorParams = new Vector4();\n        this._renderNode = renderNode;\n        this._simpleAnimatorOffset = new Vector2();\n        this.changeSkeleton(renderNode.getSkeleton());\n    }\n    changeSkeleton(skeleton) {\n        this._skeleton = skeleton;\n        this.bones = skeleton.bones;\n        this.slots = skeleton.slots;\n    }\n    leave() {\n        this._renderNode._spriteShaderData.removeDefine(SpineShaderInit.SPINE_SIMPLE);\n        this._renderNode._renderType = BaseRender2DType.spine;\n    }\n    change(currentRender, currentAnimation) {\n        this.skinRender = currentRender;\n        this.currentAnimation = currentAnimation;\n        this._renderNode._spriteShaderData.addDefine(SpineShaderInit.SPINE_SIMPLE);\n        this._simpleAnimatorOffset.x = this.aniOffsetMap[currentAnimation.name];\n        if (currentAnimation.currentSKin.canInstance) {\n            this._renderNode._renderType = BaseRender2DType.spineSimple;\n        }\n    }\n    _computeAnimatorParamsData() {\n        this._simpleAnimatorParams.x = this._simpleAnimatorOffset.x;\n        this._simpleAnimatorParams.y = Math.round(this._simpleAnimatorOffset.y) * this._bonesNums * 2;\n    }\n    setCustomData(value1, value2 = 0) {\n        this._simpleAnimatorParams.z = value1;\n        this._simpleAnimatorParams.w = value2;\n    }\n    render(curTime, boneMat) {\n        this.currentAnimation.renderWithOutMat(this.slots, this.skinRender, curTime);\n        this._simpleAnimatorOffset.y = curTime / this.step;\n        this._computeAnimatorParamsData();\n        this._renderNode._spriteShaderData.setVector(SpineShaderInit.SIMPLE_SIMPLEANIMATORPARAMS, this._simpleAnimatorParams);\n    }\n}\n","import { SpineMeshUtils } from \"../mesh/SpineMeshUtils\";\nexport class VBCreator {\n    constructor(vertexFlag, maxVertexCount = 0, auto = true) {\n        this._vertexSize = 0;\n        this._baseVtxCount = 6;\n        this._boneVtxCount = 4;\n        this.twoColorTint = false;\n        this.boneMaxId = 0;\n        this.maxVertexCount = maxVertexCount;\n        this.vertexFlag = vertexFlag;\n        this.mapIndex = new Map();\n        this.slotVBMap = new Map();\n        this.boneArray = [];\n        this.vbLength = 0;\n        if (auto) {\n            this._vertexDeclaration = SpineMeshUtils.getVertexDeclaration(this.vertexFlag);\n            this.twoColorTint = vertexFlag.indexOf(\"COLOR2\") != -1;\n            if (this.twoColorTint)\n                this._baseVtxCount += 4;\n            this._vertexSize = this._vertexDeclaration.vertexStride / 4;\n            this._boneVtxCount = this._vertexSize - this._baseVtxCount;\n            this._updateBuffer();\n        }\n    }\n    setBufferLength(maxVertexCount) {\n        if (maxVertexCount <= this.maxVertexCount)\n            return;\n        this.maxVertexCount = maxVertexCount;\n        this._updateBuffer();\n    }\n    _updateBuffer() {\n        let oldbuffer = this.vb;\n        this.vb = new Float32Array(this.maxVertexCount * this.vertexSize);\n        if (oldbuffer)\n            this.vb.set(oldbuffer);\n    }\n    get vertexSize() {\n        return this._vertexSize;\n    }\n    get vertexDeclaration() {\n        return this._vertexDeclaration;\n    }\n    appendAndCreateIB(attach) {\n        this.appendVB(attach);\n    }\n    getBoneId(boneIndex) {\n        let id = this.mapIndex.get(boneIndex);\n        if (id == undefined) {\n            id = this.boneMaxId;\n            this.mapIndex.set(boneIndex, id);\n            this.boneArray.push(id, boneIndex);\n            this.boneMaxId++;\n        }\n        return id;\n    }\n    initBoneMat() {\n        this.boneMat = new Float32Array(8 * this.mapIndex.size);\n    }\n    appendVB(attach) {\n        let offset;\n        let map = this.slotVBMap.get(attach.slotId);\n        if (map) {\n            let offset = map.get(attach.attachment);\n            if (offset != undefined) {\n                return offset;\n            }\n        }\n        else {\n            map = new Map();\n            this.slotVBMap.set(attach.slotId, map);\n        }\n        offset = this.vbLength / this.vertexSize;\n        map.set(attach.attachment, { offset: offset, attachment: attach });\n        if (!attach.vertexCount)\n            return offset;\n        if (offset + attach.vertexCount >= this.maxVertexCount) {\n            this.setBufferLength(offset + attach.vertexCount);\n        }\n        this.vbLength = this.appendVertexArray(attach, this.vb, this.vbLength, this);\n        return offset;\n    }\n    resetVB(attach) {\n        var _a;\n        if (attach.isPath) {\n            return;\n        }\n        let pos = (_a = this.slotVBMap.get(attach.slotId)) === null || _a === void 0 ? void 0 : _a.get(attach.attachment);\n        if (pos) {\n            this.appendVertexArray(attach, this.vb, pos.offset * this.vertexSize, this);\n        }\n    }\n    updateBone(bones, boneMat, ofx = 0, ofy = 0) {\n        let boneArray = this.boneArray;\n        for (let i = 0, n = boneArray.length; i < n; i += 2) {\n            let offset = boneArray[i] * 8;\n            let bone = bones[boneArray[i + 1]];\n            boneMat[offset] = bone.a;\n            boneMat[offset + 1] = bone.b;\n            boneMat[offset + 2] = bone.worldX + ofx;\n            boneMat[offset + 3] = 0;\n            boneMat[offset + 4] = bone.c;\n            boneMat[offset + 5] = bone.d;\n            boneMat[offset + 6] = bone.worldY + ofy;\n            boneMat[offset + 7] = 0;\n        }\n    }\n    updateBoneCache(boneFrames, frames, boneMat, ofx = 0, ofy = 0) {\n        let boneArray = this.boneArray;\n        let floor = Math.floor(frames);\n        let detal;\n        if (floor == boneFrames.length - 1) {\n            detal = 0;\n        }\n        else {\n            detal = frames - floor;\n        }\n        let boneFrames1 = boneFrames[floor];\n        let boneFrames2 = boneFrames[floor + 1];\n        if (detal > 0.0001) {\n            for (let i = 0, n = boneArray.length; i < n; i += 2) {\n                let offset = boneArray[i] * 8;\n                let boneFloatArray = boneFrames1[boneArray[i + 1]];\n                let boneFloatArray2 = boneFrames2[boneArray[i + 1]];\n                boneMat[offset] = boneFloatArray[0] + (boneFloatArray2[0] - boneFloatArray[0]) * detal;\n                boneMat[offset + 1] = boneFloatArray[1] + (boneFloatArray2[1] - boneFloatArray[1]) * detal;\n                boneMat[offset + 2] = boneFloatArray[2] + (boneFloatArray2[2] - boneFloatArray[2]) * detal;\n                boneMat[offset + 3] = 0;\n                boneMat[offset + 4] = boneFloatArray[4] + (boneFloatArray2[4] - boneFloatArray[4]) * detal;\n                boneMat[offset + 5] = boneFloatArray[5] + (boneFloatArray2[5] - boneFloatArray[5]) * detal;\n                boneMat[offset + 6] = boneFloatArray[6] + (boneFloatArray2[6] - boneFloatArray[6]) * detal;\n                boneMat[offset + 7] = 0;\n            }\n        }\n        else {\n            for (let i = 0, n = boneArray.length; i < n; i += 2) {\n                let offset = boneArray[i] * 8;\n                let bone = boneFrames1[boneArray[i + 1]];\n                boneMat.set(bone, offset);\n            }\n        }\n    }\n    _cloneTo(target) {\n        target.vb = new Float32Array(this.vb);\n        target.vbLength = this.vbLength;\n        target.mapIndex = new Map(this.mapIndex);\n        target.boneMaxId = this.boneMaxId;\n        target.boneArray = this.boneArray.slice();\n        target._vertexDeclaration = this._vertexDeclaration;\n        target._vertexSize = this._vertexSize;\n        target.twoColorTint = this.twoColorTint;\n        target._baseVtxCount = this._baseVtxCount;\n        target._boneVtxCount = this._boneVtxCount;\n        target.vertexFlag = this.vertexFlag;\n        this.slotVBMap.forEach((value, key) => {\n            target.slotVBMap.set(key, new Map(value));\n        });\n    }\n    clone() {\n        let rs = this._create();\n        this._cloneTo(rs);\n        return rs;\n    }\n}\nexport class VBBoneCreator extends VBCreator {\n    _create() {\n        return new VBBoneCreator(this.vertexFlag, this.maxVertexCount, false);\n    }\n    appendVertexArray(attachmentParse, vertexArray, offset, boneGet) {\n        if (!attachmentParse.attachment) {\n            boneGet.getBoneId(attachmentParse.boneIndex);\n            return offset;\n        }\n        let vside = this.vertexSize;\n        let slotVertex = attachmentParse.vertexArray;\n        let uvs = attachmentParse.uvs;\n        let color = attachmentParse.color;\n        let c1r = color.r, c1g = color.g, c1b = color.b, c1a = color.a;\n        let boneNum = this._boneVtxCount / 4;\n        let color2 = attachmentParse.darkColor;\n        let c2r = 0, c2g = 0, c2b = 0, c2a = 1;\n        if (color2) {\n            c2r = color2.r;\n            c2g = color2.g;\n            c2b = color2.b;\n            c2a = color2.a;\n        }\n        if (attachmentParse.stride == 2) {\n            let boneid = boneGet.getBoneId(attachmentParse.boneIndex);\n            for (let j = 0, n = slotVertex.length; j < n; j += attachmentParse.stride) {\n                vertexArray[offset] = uvs[j];\n                vertexArray[offset + 1] = uvs[j + 1];\n                vertexArray[offset + 2] = c1r;\n                vertexArray[offset + 3] = c1g;\n                vertexArray[offset + 4] = c1b;\n                vertexArray[offset + 5] = c1a;\n                vertexArray[offset + 6] = slotVertex[j];\n                vertexArray[offset + 7] = slotVertex[j + 1];\n                vertexArray[offset + 8] = 1;\n                vertexArray[offset + 9] = boneid;\n                let ox = offset + 10;\n                for (let z = 0, len = boneNum - 1; z < len; z++) {\n                    let vOffset = ox + z * 4;\n                    vertexArray[vOffset] = 0;\n                    vertexArray[vOffset + 1] = 0;\n                    vertexArray[vOffset + 2] = 0;\n                    vertexArray[vOffset + 3] = 0;\n                }\n                if (this.twoColorTint) {\n                    let tColorOffset = offset + 6 + this._boneVtxCount;\n                    vertexArray[tColorOffset] = c2r;\n                    vertexArray[tColorOffset + 1] = c2g;\n                    vertexArray[tColorOffset + 2] = c2b;\n                    vertexArray[tColorOffset + 3] = c2a;\n                }\n                offset += vside;\n            }\n        }\n        else {\n            for (let j = 0, uvid = 0, n = slotVertex.length; j < n; j += attachmentParse.stride, uvid += 2) {\n                vertexArray[offset] = uvs[uvid];\n                vertexArray[offset + 1] = uvs[uvid + 1];\n                vertexArray[offset + 2] = c1r;\n                vertexArray[offset + 3] = c1g;\n                vertexArray[offset + 4] = c1b;\n                vertexArray[offset + 5] = c1a;\n                let ox = offset + 6;\n                for (let z = 0; z < boneNum; z++) {\n                    let vOffset = ox + z * 4;\n                    let oOffset = j + z * 4;\n                    vertexArray[vOffset] = slotVertex[oOffset];\n                    vertexArray[vOffset + 1] = slotVertex[oOffset + 1];\n                    vertexArray[vOffset + 2] = slotVertex[oOffset + 2];\n                    vertexArray[vOffset + 3] = boneGet.getBoneId(slotVertex[oOffset + 3]);\n                }\n                if (this.twoColorTint) {\n                    let tColorOffset = ox + this._boneVtxCount;\n                    vertexArray[tColorOffset] = c2r;\n                    vertexArray[tColorOffset + 1] = c2g;\n                    vertexArray[tColorOffset + 2] = c2b;\n                    vertexArray[tColorOffset + 3] = c2a;\n                }\n                offset += vside;\n            }\n        }\n        return offset;\n    }\n    appendDeform(attachmentParse, deform, offset, out) {\n        if (!attachmentParse.attachment) {\n            return;\n        }\n        let vside = this.vertexSize;\n        let slotVertex = attachmentParse.vertexArray;\n        if (attachmentParse.stride == 2) {\n            for (let j = 0, n = slotVertex.length; j < n; j += attachmentParse.stride) {\n                out[offset + 6] = deform[j];\n                out[offset + 7] = deform[j + 1];\n                offset += vside;\n            }\n        }\n        else {\n            let attchment = attachmentParse.sourceData;\n            let bones = attchment.bones;\n            let vertexCount = attachmentParse.vertexCount;\n            let boneNum = this._boneVtxCount / 4;\n            let f = 0, v = 0;\n            for (let w = 0; w < vertexCount; w++) {\n                let len = bones[v++];\n                let slotOffset = w * this._boneVtxCount;\n                let vertexOffset = offset + w * vside + 6;\n                for (let i = 0; i < len; i++) {\n                    if (i >= boneNum)\n                        break;\n                    let deformOffset = f + i * 2;\n                    let slotIndex = slotOffset + i * 4;\n                    let boneOffset = vertexOffset + i * 4;\n                    out[boneOffset] = slotVertex[slotIndex] + deform[deformOffset];\n                    out[boneOffset + 1] = slotVertex[slotIndex + 1] + deform[deformOffset + 1];\n                }\n                v += len;\n                f += 2 * len;\n            }\n        }\n    }\n}\nexport class VBRigBodyCreator extends VBCreator {\n    _create() {\n        return new VBRigBodyCreator(this.vertexFlag, this.maxVertexCount, false);\n    }\n    appendVertexArray(attachmentParse, vertexArray, offset, boneGet) {\n        let slotVertex = attachmentParse.vertexArray;\n        let uvs = attachmentParse.uvs;\n        let color = attachmentParse.color;\n        let color2 = attachmentParse.darkColor;\n        let vside = this.vertexSize;\n        let c1r = color.r, c1g = color.g, c1b = color.b, c1a = color.a;\n        let c2r = 0, c2g = 0, c2b = 0, c2a = 1;\n        if (color2) {\n            c2r = color2.r;\n            c2g = color2.g;\n            c2b = color2.b;\n            c2a = color2.a;\n        }\n        if (attachmentParse.stride == 2) {\n            let boneid = boneGet.getBoneId(attachmentParse.boneIndex);\n            for (let j = 0, n = slotVertex.length; j < n; j += attachmentParse.stride) {\n                vertexArray[offset + 0] = uvs[j];\n                vertexArray[offset + 1] = uvs[j + 1];\n                vertexArray[offset + 2] = c1r;\n                vertexArray[offset + 3] = c1g;\n                vertexArray[offset + 4] = c1b;\n                vertexArray[offset + 5] = c1a;\n                vertexArray[offset + 6] = slotVertex[j];\n                vertexArray[offset + 7] = slotVertex[j + 1];\n                vertexArray[offset + 8] = boneid;\n                if (this.twoColorTint) {\n                    let tColorOffset = offset + 9;\n                    vertexArray[tColorOffset] = c2r;\n                    vertexArray[tColorOffset + 1] = c2g;\n                    vertexArray[tColorOffset + 2] = c2b;\n                    vertexArray[tColorOffset + 3] = c2a;\n                }\n                offset += vside;\n            }\n        }\n        else {\n        }\n        return offset;\n    }\n    appendDeform(attachmentParse, deform, offset, out) {\n        if (!attachmentParse.attachment) {\n            return;\n        }\n        let vside = this.vertexSize;\n        let slotVertex = attachmentParse.vertexArray;\n        if (attachmentParse.stride == 2) {\n            for (let j = 0, n = slotVertex.length; j < n; j += attachmentParse.stride) {\n                out[offset + 6] = deform[j];\n                out[offset + 7] = deform[j + 1];\n                offset += vside;\n            }\n        }\n    }\n}\n","import { ESpineRenderType } from \"../SpineSkeleton\";\nimport { AnimationRender } from \"./AnimationRender\";\nimport { AttachmentParse } from \"./AttachmentParse\";\nimport { IBCreator } from \"./IBCreator\";\nimport { SlotUtils } from \"./SlotUtils\";\nimport { SpineNormalRender } from \"./SpineNormalRender\";\nimport { SpineOptimizeRender } from \"./SpineOptimizeRender\";\nimport { VBBoneCreator, VBRigBodyCreator } from \"./VBCreator\";\nexport class SketonOptimise {\n    constructor() {\n        this.blendModeMap = new Map();\n        this.skinAttachArray = [];\n        this.animators = [];\n        this.canCache = SketonOptimise.cacheSwitch;\n    }\n    _initSpineRender(skeleton, templet, renderNode, state) {\n        let sp;\n        if (SketonOptimise.normalRenderSwitch) {\n            sp = new SpineNormalRender();\n        }\n        else if (this.maxBoneNumber > SketonOptimise.MAX_BONES) {\n            console.warn(\"The number of Bones :\", this.maxBoneNumber, \" > \", SketonOptimise.MAX_BONES, \", use CPU caculation\");\n            sp = new SpineNormalRender();\n        }\n        else {\n            sp = new SpineOptimizeRender(this);\n        }\n        sp.init(skeleton, templet, renderNode, state);\n        return sp;\n    }\n    _updateState(delta) {\n        this._state.update(delta);\n        let trackEntry = this._state.getCurrent(0);\n        this._state.apply(this.sketon);\n        this.sketon.updateWorldTransform(2);\n        return this.sketon.bones;\n    }\n    _play(animationName) {\n        let trackEntry = this._state.setAnimation(0, animationName, true);\n        trackEntry.animationStart = 0;\n        let animationDuration = trackEntry.animation.duration;\n        return animationDuration;\n    }\n    checkMainAttach(skeletonData) {\n        this.sketon = new spine.Skeleton(skeletonData);\n        this._stateData = new spine.AnimationStateData(this.sketon.data);\n        this._state = new spine.AnimationState(this._stateData);\n        this.attachMentParse(skeletonData);\n        this.initAnimation(skeletonData.animations);\n    }\n    attachMentParse(skeletonData) {\n        let skins = skeletonData.skins;\n        let slots = skeletonData.slots;\n        let defaultSkinAttach;\n        this._tempIbCreate = new IBCreator();\n        for (let i = 0, n = skins.length; i < n; i++) {\n            let skin = skins[i];\n            let skinAttach = new SkinAttach();\n            skinAttach.name = skin.name;\n            skinAttach._tempIbCreate = this._tempIbCreate;\n            if (i != 0) {\n                skinAttach.copyFrom(defaultSkinAttach);\n            }\n            skinAttach.attachMentParse(skin, slots);\n            this.skinAttachArray.push(skinAttach);\n            skinAttach.init(slots);\n            if (i == 0) {\n                defaultSkinAttach = skinAttach;\n            }\n        }\n    }\n    initAnimation(animations) {\n        let maxBoneNumber = 0;\n        for (let i = 0, n = animations.length; i < n; i++) {\n            let animation = animations[i];\n            let animator = new AnimationRender();\n            animator.check(animation, this);\n            this.animators.push(animator);\n            this.skinAttachArray.forEach((value) => {\n                value.initAnimator(animator);\n            });\n            animator.skinDataArray.forEach((skinData) => {\n                if (!skinData.isNormalRender) {\n                    let boneNumber = skinData.vb.boneArray.length / 2;\n                    if (boneNumber > maxBoneNumber) {\n                        maxBoneNumber = boneNumber;\n                    }\n                }\n            });\n        }\n        this.maxBoneNumber = maxBoneNumber;\n    }\n    cacheBone() {\n        if (!SketonOptimise.cacheSwitch) {\n            for (let i = 0, n = this.animators.length; i < n; i++) {\n                let animator = this.animators[i];\n                if (animator.boneFrames.length == 0) {\n                    animator.cacheBones(this);\n                }\n            }\n        }\n    }\n    destroy() {\n        for (let i = 0, n = this.animators.length; i < n; i++)\n            this.animators[i].destroy();\n        this.animators.length = 0;\n    }\n    init(slots) {\n    }\n}\nSketonOptimise.normalRenderSwitch = false;\nSketonOptimise.MAX_BONES = 100;\nSketonOptimise.cacheSwitch = false;\nexport class SkinAttach {\n    constructor() {\n        this.vertexBones = 0;\n        this.slotAttachMap = new Map();\n        this.mainAttachMentOrder = [];\n    }\n    copyFrom(other) {\n        other.slotAttachMap.forEach((value, key) => {\n            this.slotAttachMap.set(key, new Map(value));\n        });\n    }\n    attachMentParse(skinData, slots) {\n        let type = ESpineRenderType.rigidBody;\n        let vertexBones = 0;\n        let attachments = skinData.attachments;\n        let vertexCount = 0;\n        let indexCount = 0;\n        let twoColorTint = false;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let attachment = attachments[i];\n            let slot = slots[i];\n            let boneIndex = slot.boneData.index;\n            let map = this.slotAttachMap.get(i);\n            let slotAttachName = slot.attachmentName;\n            if (!map) {\n                map = new Map();\n                this.slotAttachMap.set(i, map);\n            }\n            if (attachment) {\n                for (let key in attachment) {\n                    let attach = attachment[key];\n                    let deform = null;\n                    let parse = new AttachmentParse();\n                    parse.init(attach, boneIndex, i, deform, slot);\n                    vertexBones = Math.max(vertexBones, parse.vertexBones);\n                    let tempType = SlotUtils.checkAttachment(parse ? parse.sourceData : null);\n                    if (tempType < type) {\n                        type = tempType;\n                    }\n                    indexCount += parse.indexCount;\n                    vertexCount += parse.vertexCount;\n                    twoColorTint = twoColorTint || !!parse.darkColor;\n                    map.set(key, parse);\n                }\n            }\n            else if (slotAttachName) {\n                let parse = map.get(slotAttachName);\n                if (parse) {\n                    indexCount += parse.indexCount;\n                    vertexCount += parse.vertexCount;\n                    vertexBones = Math.max(vertexBones, parse.vertexBones);\n                    let tempType = SlotUtils.checkAttachment(parse ? parse.sourceData : null);\n                    if (tempType < type) {\n                        type = tempType;\n                    }\n                    twoColorTint = twoColorTint || !!parse.darkColor;\n                }\n            }\n            if (!map.get(null)) {\n                let nullAttachment = new AttachmentParse();\n                nullAttachment.slotId = i;\n                nullAttachment.color = slot.color;\n                nullAttachment.boneIndex = boneIndex;\n                nullAttachment.attachment = null;\n                map.set(nullAttachment.attachment, nullAttachment);\n            }\n        }\n        this.type = type;\n        this.vertexBones = vertexBones;\n        let flag;\n        switch (this.type) {\n            case ESpineRenderType.normal:\n                flag = \"UV,COLOR,POSITION,BONE\";\n                if (twoColorTint)\n                    flag += \",COLOR2\";\n                this.mainVB = new VBBoneCreator(flag, vertexCount);\n                break;\n            case ESpineRenderType.boneGPU:\n                flag = \"UV,COLOR,POSITION,BONE\";\n                if (twoColorTint)\n                    flag += \",COLOR2\";\n                this.mainVB = new VBBoneCreator(flag, vertexCount);\n                break;\n            case ESpineRenderType.rigidBody:\n                flag = \"UV,COLOR,POSITION,RIGIDBODY\";\n                if (twoColorTint)\n                    flag += \",COLOR2\";\n                this.mainVB = new VBRigBodyCreator(flag, vertexCount);\n                break;\n        }\n        this.mainIB = new IBCreator();\n        this.mainIB.updateFormat(vertexCount);\n        this.mainIB.setBufferLength(indexCount);\n    }\n    init(slots) {\n        let mainAttachMentOrder = this.mainAttachMentOrder;\n        slots.forEach((slot, index) => {\n            let attchment = slot.attachmentName;\n            if (attchment) {\n                let attach = this.slotAttachMap.get(index).get(attchment);\n                if (attach) {\n                    this.mainVB.appendVB(attach);\n                }\n                else {\n                    attach = this.slotAttachMap.get(index).get(null);\n                }\n                if (attach.isClip)\n                    this.isNormalRender = true;\n                mainAttachMentOrder.push(attach);\n            }\n            else {\n                let attach = this.slotAttachMap.get(index).get(null);\n                mainAttachMentOrder.push(attach);\n            }\n        });\n        this.mainVB.initBoneMat();\n        this.mainIB.createIB(mainAttachMentOrder, this.mainVB);\n    }\n    initAnimator(animator) {\n        let skinData = animator.createSkinData(this.mainVB, this.mainIB, this._tempIbCreate, this.slotAttachMap, this.mainAttachMentOrder, this.type);\n        skinData.name = this.name;\n        if (this.isNormalRender) {\n            skinData.isNormalRender = true;\n        }\n        if (skinData.isNormalRender) {\n            this.hasNormalRender = true;\n        }\n    }\n}\n","import { Color } from \"../../maths/Color\";\nexport class SpineEmptyRender {\n    getSpineColor() {\n        return Color.WHITE;\n    }\n    changeSkeleton(skeleton) {\n    }\n    init(skeleton, templet, renderNode, state) {\n    }\n    play(animationName) {\n    }\n    render(time) {\n    }\n    setSkinIndex(index) {\n    }\n    initBake(obj) {\n    }\n    destroy() {\n    }\n}\nSpineEmptyRender.instance = new SpineEmptyRender();\n","import { ILaya } from \"../../ILaya\";\nimport { Laya } from \"../../Laya\";\nimport { LayaEnv } from \"../../LayaEnv\";\nimport { BaseRenderNode2D } from \"../NodeRender2D/BaseRenderNode2D\";\nimport { SoundManager } from \"../media/SoundManager\";\nimport { Loader } from \"../net/Loader\";\nimport { Handler } from \"../utils/Handler\";\nimport { Event } from \"../events/Event\";\nimport { LayaGL } from \"../layagl/LayaGL\";\nimport { SpineShaderInit } from \"./material/SpineShaderInit\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { ClassUtils } from \"../utils/ClassUtils\";\nimport { SpineNormalRender } from \"./optimize/SpineNormalRender\";\nimport { SketonOptimise } from \"./optimize/SketonOptimise\";\nimport { SpineEmptyRender } from \"./optimize/SpineEmptyRender\";\nimport { Vector3 } from \"../maths/Vector3\";\nimport { Vector4 } from \"../maths/Vector4\";\nimport { Matrix4x4 } from \"../maths/Matrix4x4\";\nimport { Color } from \"../maths/Color\";\nimport { ShaderDefines2D } from \"../webgl/shader/d2/ShaderDefines2D\";\nimport { SpineOptimizeRender } from \"./optimize/SpineOptimizeRender\";\nexport class Spine2DRenderNode extends BaseRenderNode2D {\n    static createRenderElement2D() {\n        if (this._pool.length > 0) {\n            return this._pool.pop();\n        }\n        let element = LayaGL.render2DRenderPassFactory.createRenderElement2D();\n        element.renderStateIsBySprite = false;\n        element.nodeCommonMap = [\"spine2D\"];\n        return element;\n    }\n    static recoverRenderElement2D(value) {\n        if (!value.canotPool) {\n            this._pool.push(value);\n        }\n    }\n    constructor() {\n        super();\n        this._currentPlayTime = 0;\n        this._pause = true;\n        this._playbackRate = 1.0;\n        this._playAudio = true;\n        this._soundChannelArr = [];\n        this.trackIndex = 0;\n        this._skinName = \"default\";\n        this._loop = true;\n        this._nMatrix_0 = new Vector3;\n        this._nMatrix_1 = new Vector3;\n        this.physicsUpdate = 2;\n        this._useFastRender = true;\n        this._needUpdate = false;\n        this._renderElements = [];\n        this._materials = [];\n        this.spineItem = SpineEmptyRender.instance;\n        this._spriteShaderData.addDefine(BaseRenderNode2D.SHADERDEFINE_BASERENDER2D);\n        this._spriteShaderData.addDefine(SpineShaderInit.SPINE_UV);\n        this._spriteShaderData.addDefine(SpineShaderInit.SPINE_COLOR);\n    }\n    _getcommonUniformMap() {\n        return [\"BaseRender2D\", \"Spine2D\"];\n    }\n    get externalSkins() {\n        return this._externalSkins;\n    }\n    set externalSkins(value) {\n        if (value) {\n            for (let i = value.length - 1; i >= 0; i--) {\n                value[i].target = this;\n            }\n        }\n        this._externalSkins = value;\n    }\n    addCMDCall(context, px, py) {\n        let shaderData = this._spriteShaderData;\n        let mat = context._curMat;\n        this._nMatrix_0.setValue(mat.a, mat.b, mat.tx + mat.a * px + mat.c * py);\n        this._nMatrix_1.setValue(mat.c, mat.d, mat.ty + mat.b * px + mat.d * py);\n        shaderData.setVector3(BaseRenderNode2D.NMATRIX_0, this._nMatrix_0);\n        shaderData.setVector3(BaseRenderNode2D.NMATRIX_1, this._nMatrix_1);\n        Vector2.TEMP.setValue(context.width, context.height);\n        shaderData.setVector2(BaseRenderNode2D.BASERENDERSIZE, Vector2.TEMP);\n        if (this._renderAlpha !== context.globalAlpha) {\n            let scolor = this.spineItem.getSpineColor();\n            let a = scolor.a * context.globalAlpha;\n            let color = shaderData.getColor(BaseRenderNode2D.BASERENDER2DCOLOR) || new Color();\n            color.setValue(scolor.r, scolor.g, scolor.b, a);\n            shaderData.setColor(BaseRenderNode2D.BASERENDER2DCOLOR, color);\n            this._renderAlpha = context.globalAlpha;\n        }\n        let filter = context._colorFiler;\n        if (filter) {\n            this._spriteShaderData.addDefine(ShaderDefines2D.FILTERCOLOR);\n            Matrix4x4.TEMP.cloneByArray(filter._mat);\n            shaderData.setMatrix4x4(ShaderDefines2D.UNIFORM_COLORMAT, Matrix4x4.TEMP);\n            Vector4.TEMP.setValue(filter._alpha[0], filter._alpha[1], filter._alpha[2], filter._alpha[3]);\n            shaderData.setVector(ShaderDefines2D.UNIFORM_COLORALPHA, Vector4.TEMP);\n        }\n        else {\n            this._spriteShaderData.removeDefine(ShaderDefines2D.FILTERCOLOR);\n        }\n        context._copyClipInfoToShaderData(shaderData);\n        this._lightReceive && this._updateLight();\n    }\n    resetExternalSkin() {\n        if (this._skeleton) {\n            this._skeleton = new spine.Skeleton(this._templet.skeletonData);\n            this.spineItem.changeSkeleton(this._skeleton);\n            this._flushExtSkin();\n        }\n    }\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        this._source = value;\n        if (value) {\n            let template = ILaya.loader.getRes(value, Loader.SPINE);\n            if (template) {\n                this.templet = template;\n            }\n            else {\n                ILaya.loader.load(value, Loader.SPINE).then((templet) => {\n                    if (!this._source || templet && !templet.isCreateFromURL(this._source))\n                        return;\n                    if (this.destroyed)\n                        return;\n                    this.templet = templet;\n                });\n            }\n        }\n        else\n            this.templet = null;\n    }\n    get skinName() {\n        return this._skinName;\n    }\n    set skinName(value) {\n        this._skinName = value;\n        if (this._templet)\n            this.showSkinByName(value);\n    }\n    get animationName() {\n        return this._animationName;\n    }\n    set animationName(value) {\n        this._animationName = value;\n        if (this._templet)\n            this.play(value, this._loop, true);\n    }\n    get maxDetlaTime() {\n        return this._timeKeeper.maxDelta;\n    }\n    set maxDetlaTime(value) {\n        this._timeKeeper.maxDelta = value;\n    }\n    get loop() {\n        return this._loop;\n    }\n    set loop(value) {\n        this._loop = value;\n        if (this._templet)\n            this.play(this._animationName, this._loop, true);\n    }\n    get url() {\n        return this._skin;\n    }\n    set url(value) {\n        if (this._skin != value) {\n            this._skin = value;\n            Laya.loader.load(value, Loader.SPINE).then((templet) => {\n                this.init(templet);\n            });\n        }\n    }\n    get twoColorTint() {\n        return this._spriteShaderData.hasDefine(SpineShaderInit.SPINE_TWOCOLORTINT);\n    }\n    set twoColorTint(value) {\n        if (value) {\n            this._spriteShaderData.addDefine(SpineShaderInit.SPINE_TWOCOLORTINT);\n        }\n        else {\n            this._spriteShaderData.removeDefine(SpineShaderInit.SPINE_TWOCOLORTINT);\n        }\n    }\n    get templet() {\n        return this._templet;\n    }\n    set templet(value) {\n        this.init(value);\n    }\n    set currentTime(value) {\n        if (!this._templet)\n            return;\n        value /= 1000;\n        if (value < this._playStart || (!!this._playEnd && value > this._playEnd) || value > this._duration)\n            throw new Error(\"AnimationPlayer: value must large than playStartTime,small than playEndTime.\");\n        this._state.update(value - this._currentPlayTime);\n        this._currentPlayTime = value;\n    }\n    get playState() {\n        if (this._pause)\n            if (this._currentPlayTime)\n                return Spine2DRenderNode.PAUSED;\n            else\n                return Spine2DRenderNode.STOPPED;\n        return Spine2DRenderNode.PLAYING;\n    }\n    get useFastRender() {\n        return this._useFastRender;\n    }\n    set useFastRender(value) {\n        if (this._useFastRender === value)\n            return;\n        this._useFastRender = value;\n        if (!this._templet)\n            return;\n        if (value) {\n            this.changeFast();\n        }\n        else {\n            this.changeNormal();\n        }\n        this.play(this._animationName, this._loop, true, this._currentPlayTime);\n    }\n    onAwake() {\n        if (this._skeleton) {\n            if (LayaEnv.isPlaying && this._animationName !== undefined)\n                this.play(this._animationName, this._loop, true);\n        }\n    }\n    onEnable() {\n        this.owner.on(Event.TRANSFORM_CHANGED, this, this.onTransformChanged);\n    }\n    onDisable() {\n        this.owner.off(Event.TRANSFORM_CHANGED, this, this.onTransformChanged);\n    }\n    init(templet) {\n        if (this.destroyed)\n            return;\n        if (this._templet) {\n            this.clear();\n            this.reset();\n        }\n        this._templet = templet;\n        if (!this._templet)\n            return;\n        this._templet._addReference();\n        this._skeleton = new spine.Skeleton(this._templet.skeletonData);\n        this._stateData = new spine.AnimationStateData(this._skeleton.data);\n        this._state = new spine.AnimationState(this._stateData);\n        this._timeKeeper = new TimeKeeper(Laya.timer);\n        if (!this._useFastRender) {\n            let before = SketonOptimise.normalRenderSwitch;\n            SketonOptimise.normalRenderSwitch = true;\n            this.spineItem = this._templet.sketonOptimise._initSpineRender(this._skeleton, this._templet, this, this._state);\n            SketonOptimise.normalRenderSwitch = before;\n        }\n        else\n            this.spineItem = this._templet.sketonOptimise._initSpineRender(this._skeleton, this._templet, this, this._state);\n        let skinIndex = this._templet.getSkinIndexByName(this._skinName);\n        if (skinIndex != -1)\n            this.showSkinByIndex(skinIndex);\n        this._state.addListener({\n            start: (entry) => {\n            },\n            interrupt: (entry) => {\n            },\n            end: (entry) => {\n            },\n            dispose: (entry) => {\n            },\n            complete: (entry) => {\n                this.event(Event.END);\n                if (entry.loop) {\n                    this.event(Event.COMPLETE);\n                }\n                else {\n                    this.stop();\n                }\n            },\n            event: (entry, event) => {\n                let eventData = {\n                    audioValue: event.data.audioPath,\n                    audioPath: event.data.audioPath,\n                    floatValue: event.floatValue,\n                    intValue: event.intValue,\n                    name: event.data.name,\n                    stringValue: event.stringValue,\n                    time: event.time * 1000,\n                    balance: event.balance,\n                    volume: event.volume\n                };\n                this.event(Event.LABEL, eventData);\n                if (this._playAudio && eventData.audioValue) {\n                    let channel = SoundManager.playSound(templet.basePath + eventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped), null, (this._currentPlayTime * 1000 - eventData.time) / 1000);\n                    SoundManager.playbackRate = this._playbackRate;\n                    channel && this._soundChannelArr.push(channel);\n                }\n            },\n        });\n        this._flushExtSkin();\n        this.event(Event.READY);\n        if (LayaEnv.isPlaying && this._animationName !== undefined) {\n            this.play(this._animationName, this._loop, true);\n        }\n    }\n    play(nameOrIndex, loop, force = true, start = 0, end = 0, freshSkin = true, playAudio = true) {\n        this._playAudio = playAudio;\n        start /= 1000;\n        end /= 1000;\n        this._loop = loop;\n        if (start < 0 || end < 0)\n            throw new Error(\"SpineSkeleton: start and end must large than zero.\");\n        if ((end !== 0) && (start > end))\n            throw new Error(\"SpineSkeleton: start must less than end.\");\n        if (typeof nameOrIndex == \"number\") {\n            nameOrIndex = this.getAniNameByIndex(nameOrIndex);\n        }\n        else {\n            let hasAni = !!this.templet.findAnimation(nameOrIndex);\n            if (!hasAni)\n                return;\n        }\n        if (force || this._pause || this._currentPlayTime || this._animationName != nameOrIndex) {\n            this._animationName = nameOrIndex;\n            this.spineItem.play(nameOrIndex);\n            let trackEntry = this._state.setAnimation(this.trackIndex, nameOrIndex, loop);\n            trackEntry.animationStart = start;\n            if (!!end && end < trackEntry.animationEnd)\n                trackEntry.animationEnd = end;\n            let animationDuration = trackEntry.animation.duration;\n            this._duration = animationDuration;\n            this._playStart = start;\n            this._playEnd = end <= animationDuration ? end : animationDuration;\n            if (this._pause) {\n                this._pause = false;\n                this._beginUpdate();\n            }\n            this._update();\n            this.event(Event.PLAYED);\n        }\n    }\n    _update() {\n        this._timeKeeper.update();\n        let state = this._state;\n        let delta = this._timeKeeper.delta * this._playbackRate;\n        state.update(delta);\n        let currentPlayTime = this._currentPlayTime = state.getCurrentPlayTime(this.trackIndex);\n        state.apply(this._skeleton);\n        if (!this._state || !this._skeleton) {\n            return;\n        }\n        this._skeleton.update && this._skeleton.update(delta);\n        this._skeleton.updateWorldTransform(this.physicsUpdate);\n        this.spineItem.render(currentPlayTime);\n        this.owner.repaint();\n    }\n    _flushExtSkin() {\n        if (null == this._skeleton)\n            return;\n        let skins = this._externalSkins;\n        if (skins) {\n            let normal = false;\n            for (let i = skins.length - 1; i >= 0; i--) {\n                skins[i].flush();\n            }\n            this.useFastRender = false;\n        }\n    }\n    getAnimNum() {\n        return this._templet.skeletonData.getAnimationsSize();\n    }\n    getAniNameByIndex(index) {\n        return this._templet.getAniNameByIndex(index);\n    }\n    getSlotByName(slotName) {\n        return this._skeleton.findSlot(slotName);\n    }\n    playbackRate(value) {\n        this._playbackRate = value;\n    }\n    showSkinByName(name) {\n        this.showSkinByIndex(this._templet.getSkinIndexByName(name));\n    }\n    showSkinByIndex(skinIndex) {\n        this.spineItem.setSkinIndex(skinIndex);\n        this._skeleton.showSkinByIndex(skinIndex);\n        this._skeleton.setSlotsToSetupPose();\n    }\n    event(type, data) {\n        this.owner.event(type, data);\n    }\n    stop() {\n        if (!this._pause) {\n            this._pause = true;\n            this._clearUpdate();\n            this._state.update(-this._currentPlayTime);\n            this._currentPlayTime = 0;\n            this.event(Event.STOPPED);\n            if (this._soundChannelArr.length > 0) {\n                this._onAniSoundStoped(true);\n            }\n        }\n    }\n    _clearUpdate() {\n        this._needUpdate = false;\n    }\n    _beginUpdate() {\n        this._needUpdate = true;\n    }\n    onUpdate() {\n        this._needUpdate && this._update();\n    }\n    paused() {\n        if (!this._pause) {\n            this._pause = true;\n            this._clearUpdate();\n            this.event(Event.PAUSED);\n            if (this._soundChannelArr.length > 0) {\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\n                    let channel = this._soundChannelArr[i];\n                    if (!channel.isStopped) {\n                        channel.pause();\n                    }\n                }\n            }\n        }\n    }\n    resume() {\n        if (this._pause) {\n            this._pause = false;\n            this._beginUpdate();\n            if (this._soundChannelArr.length > 0) {\n                for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\n                    let channel = this._soundChannelArr[i];\n                    if (channel.audioBuffer) {\n                        channel.resume();\n                    }\n                }\n            }\n        }\n    }\n    _onAniSoundStoped(force) {\n        for (let len = this._soundChannelArr.length, i = 0; i < len; i++) {\n            let channel = this._soundChannelArr[i];\n            if (channel.isStopped || force) {\n                !channel.isStopped && channel.stop();\n                this._soundChannelArr.splice(i, 1);\n                len--;\n                i--;\n            }\n        }\n    }\n    reset() {\n        this._templet._removeReference(1);\n        this._templet = null;\n        this._timeKeeper = null;\n        this._skeleton = null;\n        this._state.clearListeners();\n        this._state = null;\n        this._pause = true;\n        this._clearUpdate();\n        if (this._soundChannelArr.length > 0)\n            this._onAniSoundStoped(true);\n    }\n    addAnimation(nameOrIndex, loop = false, delay = 0) {\n        delay /= 1000;\n        let animationName = nameOrIndex;\n        if (typeof animationName == \"number\") {\n            animationName = this.getAniNameByIndex(animationName);\n        }\n        this._animationName = animationName;\n        this._state.addAnimation(this.trackIndex, animationName, loop, delay);\n    }\n    setMix(fromNameOrIndex, toNameOrIndex, duration) {\n        duration /= 1000;\n        let fromName = fromNameOrIndex;\n        if (typeof fromName == \"number\") {\n            fromName = this.getAniNameByIndex(fromName);\n        }\n        let toName = toNameOrIndex;\n        if (typeof toName == \"number\") {\n            toName = this.getAniNameByIndex(toName);\n        }\n        this._stateData.setMix(fromName, toName, duration);\n    }\n    getBoneByName(boneName) {\n        return this._skeleton.findBone(boneName);\n    }\n    getSkeleton() {\n        return this._skeleton;\n    }\n    physicsTranslate(x, y) {\n        this._templet.hasPhysics && this._skeleton.physicsTranslate(x, y);\n    }\n    onTransformChanged() {\n        if (this._skeleton) {\n            let trans = this.owner.globalTrans;\n            this._skeleton.x = trans.x;\n            this._skeleton.y = trans.y;\n        }\n    }\n    setSlotAttachment(slotName, attachmentName) {\n        this.useFastRender = false;\n        this._skeleton.setAttachment(slotName, attachmentName);\n    }\n    clear() {\n        this._mesh = null;\n        this._renderElements.forEach(element => {\n            Spine2DRenderNode.recoverRenderElement2D(element);\n        });\n        super.clear();\n    }\n    changeFast() {\n        if (!(this.spineItem instanceof SpineOptimizeRender)) {\n            this.spineItem.destroy();\n            let before = SketonOptimise.normalRenderSwitch;\n            SketonOptimise.normalRenderSwitch = false;\n            this.spineItem = this._templet.sketonOptimise._initSpineRender(this._skeleton, this._templet, this, this._state);\n            this.spineItem.setSkinIndex(this._templet.getSkinIndexByName(this._skinName));\n            SketonOptimise.normalRenderSwitch = before;\n        }\n    }\n    changeNormal() {\n        if (!(this.spineItem instanceof SpineNormalRender)) {\n            this.spineItem.destroy();\n            let before = SketonOptimise.normalRenderSwitch;\n            SketonOptimise.normalRenderSwitch = true;\n            this.spineItem = this._templet.sketonOptimise._initSpineRender(this._skeleton, this._templet, this, this._state);\n            this.spineItem.setSkinIndex(this._templet.getSkinIndexByName(this._skinName));\n            SketonOptimise.normalRenderSwitch = before;\n        }\n    }\n    onDestroy() {\n        if (this._templet) {\n            this.reset();\n        }\n        this.spineItem.destroy();\n    }\n    _updateMaterials(elements) {\n        for (let i = 0, len = elements.length; i < len; i++) {\n            this._materials[i] = elements[i];\n        }\n    }\n    _updateRenderElements() {\n        let elementLength = this._renderElements.length;\n        for (let i = 0; i < elementLength; i++) {\n            let element = this._renderElements[i];\n            let material = this._materials[i];\n            element.materialShaderData = material.shaderData;\n            element.subShader = material._shader.getSubShaderAt(0);\n            element.value2DShaderData = this._spriteShaderData;\n        }\n    }\n    _onMeshChange(mesh, force = false) {\n        let hasChange = false;\n        if (this._mesh != mesh || force) {\n            hasChange = true;\n            if (mesh) {\n                let subMeshes = mesh._subMeshes;\n                let elementLength = this._renderElements.length;\n                let flength = Math.max(elementLength, mesh.subMeshCount);\n                for (let i = 0; i < flength; i++) {\n                    let element = this._renderElements[i];\n                    let subMesh = subMeshes[i];\n                    if (subMesh) {\n                        if (!element) {\n                            element = Spine2DRenderNode.createRenderElement2D();\n                            this._renderElements[i] = element;\n                        }\n                        let material = this._materials[i];\n                        element.geometry = subMesh;\n                        element.materialShaderData = material.shaderData;\n                        element.subShader = material._shader.getSubShaderAt(0);\n                        element.value2DShaderData = this._spriteShaderData;\n                        element.nodeCommonMap = this._getcommonUniformMap();\n                    }\n                    else {\n                        Spine2DRenderNode.recoverRenderElement2D(element);\n                    }\n                }\n                this._renderElements.length = mesh.subMeshCount;\n                SpineShaderInit.changeVertexDefine(this._spriteShaderData, mesh);\n            }\n            else {\n                for (let i = 0, len = this._renderElements.length; i < len; i++)\n                    Spine2DRenderNode.recoverRenderElement2D(this._renderElements[i]);\n                this._renderElements.length = 0;\n            }\n        }\n        this._mesh = mesh;\n        return hasChange;\n    }\n}\nSpine2DRenderNode._pool = [];\nSpine2DRenderNode.STOPPED = 0;\nSpine2DRenderNode.PAUSED = 1;\nSpine2DRenderNode.PLAYING = 2;\nclass TimeKeeper {\n    constructor(timer) {\n        this.maxDelta = 0.064;\n        this.timer = timer;\n    }\n    update() {\n        this.delta = this.timer.delta / 1000;\n        if (this.delta > this.maxDelta)\n            this.delta = this.maxDelta;\n    }\n}\nClassUtils.regClass(\"Spine2DRenderNode\", Spine2DRenderNode);\n","import { Sprite } from \"../display/Sprite\";\nimport { Spine2DRenderNode } from \"./Spine2DRenderNode\";\nexport class SpineSkeleton extends Sprite {\n    constructor() {\n        super();\n        this._spineComponent = this.addComponent(Spine2DRenderNode);\n    }\n    get externalSkins() {\n        return this._spineComponent.externalSkins;\n    }\n    set externalSkins(value) {\n        this._spineComponent.externalSkins = value;\n    }\n    resetExternalSkin() {\n        this._spineComponent.resetExternalSkin();\n    }\n    get source() {\n        return this._spineComponent.source;\n    }\n    set source(value) {\n        this._spineComponent.source = value;\n    }\n    get skinName() {\n        return this._spineComponent.skinName;\n    }\n    set skinName(value) {\n        this._spineComponent.skinName = value;\n    }\n    get animationName() {\n        return this._spineComponent.animationName;\n    }\n    set animationName(value) {\n        this._spineComponent.animationName = value;\n    }\n    get loop() {\n        return this._spineComponent.loop;\n    }\n    set loop(value) {\n        this._spineComponent.loop = value;\n    }\n    get templet() {\n        return this._spineComponent.templet;\n    }\n    set templet(value) {\n        this._spineComponent.templet = value;\n    }\n    set currentTime(value) {\n        this._spineComponent.currentTime = value;\n    }\n    get playState() {\n        return this._spineComponent.playState;\n    }\n    get spineItem() {\n        return this._spineComponent.spineItem;\n    }\n    set spineItem(value) {\n        this._spineComponent.spineItem = value;\n    }\n    play(nameOrIndex, loop, force = true, start = 0, end = 0, freshSkin = true, playAudio = true) {\n        this._spineComponent.play(nameOrIndex, loop, force, start, end, freshSkin, playAudio);\n    }\n    getAnimNum() {\n        return this._spineComponent.getAnimNum();\n    }\n    getAniNameByIndex(index) {\n        return this._spineComponent.getAniNameByIndex(index);\n    }\n    getSlotByName(slotName) {\n        return this._spineComponent.getSlotByName(slotName);\n    }\n    playbackRate(value) {\n        this._spineComponent.playbackRate(value);\n    }\n    showSkinByName(name) {\n        this._spineComponent.showSkinByName(name);\n    }\n    showSkinByIndex(skinIndex) {\n        this._spineComponent.showSkinByIndex(skinIndex);\n    }\n    stop() {\n        this._spineComponent.stop();\n    }\n    paused() {\n        this._spineComponent.paused();\n    }\n    resume() {\n        this._spineComponent.resume();\n    }\n    destroy(destroyChild = true) {\n        if (this._spineComponent.templet) {\n            this._spineComponent.reset();\n        }\n        super.destroy(destroyChild);\n    }\n    addAnimation(nameOrIndex, loop = false, delay = 0) {\n        this._spineComponent.addAnimation(nameOrIndex, loop, delay);\n    }\n    setMix(fromNameOrIndex, toNameOrIndex, duration) {\n        this._spineComponent.setMix(fromNameOrIndex, toNameOrIndex, duration);\n    }\n    getBoneByName(boneName) {\n        return this._spineComponent.getBoneByName(boneName);\n    }\n    getSkeleton() {\n        return this._spineComponent.getSkeleton();\n    }\n    setSlotAttachment(slotName, attachmentName) {\n        this._spineComponent.setSlotAttachment(slotName, attachmentName);\n    }\n}\nexport var ESpineRenderType;\n(function (ESpineRenderType) {\n    ESpineRenderType[ESpineRenderType[\"boneGPU\"] = 0] = \"boneGPU\";\n    ESpineRenderType[ESpineRenderType[\"normal\"] = 1] = \"normal\";\n    ESpineRenderType[ESpineRenderType[\"rigidBody\"] = 2] = \"rigidBody\";\n})(ESpineRenderType || (ESpineRenderType = {}));\nclass TimeKeeper {\n    constructor(timer) {\n        this.maxDelta = 0.064;\n        this.timer = timer;\n    }\n    update() {\n        this.delta = this.timer.delta / 1000;\n        if (this.delta > this.maxDelta)\n            this.delta = this.maxDelta;\n    }\n}\n","import { Resource } from \"../resource/Resource\";\nimport { SketonOptimise } from \"./optimize/SketonOptimise\";\nimport { Material } from \"../resource/Material\";\nimport { SpineShaderInit } from \"./material/SpineShaderInit\";\nimport { Texture2D } from \"../resource/Texture2D\";\nimport { ShaderDefines2D } from \"../webgl/shader/d2/ShaderDefines2D\";\nexport class SpineTemplet extends Resource {\n    constructor() {\n        super();\n        this.materialMap = new Map();\n        this.hasPhysics = false;\n        this.mainBlendMode = 0;\n        this._premultipliedAlpha = true;\n        this._textures = {};\n        this.sketonOptimise = new SketonOptimise();\n    }\n    get _mainTexture() {\n        let i = 0;\n        let tex;\n        for (let k in this._textures) {\n            tex = this._textures[k];\n            if (tex) {\n                i++;\n                if (i > 1) {\n                    return null;\n                }\n            }\n        }\n        return tex;\n    }\n    get premultipliedAlpha() {\n        return this._premultipliedAlpha;\n    }\n    get basePath() {\n        return this._basePath;\n    }\n    getMaterial(texture, blendMode) {\n        if (!texture) {\n            console.error(\"SpineError:cant Find Main Texture\");\n            texture = Texture2D.whiteTexture;\n        }\n        let key = texture.id + \"_\" + blendMode;\n        let mat = this.materialMap.get(key);\n        if (!mat) {\n            mat = new Material();\n            mat.setShaderName(\"SpineStandard\");\n            SpineShaderInit.initSpineMaterial(mat);\n            mat.setTextureByIndex(SpineShaderInit.SpineTexture, texture);\n            if (texture.gammaCorrection != 1) {\n                mat.addDefine(ShaderDefines2D.GAMMATEXTURE);\n            }\n            else {\n                mat.removeDefine(ShaderDefines2D.GAMMATEXTURE);\n            }\n            SpineShaderInit.SetSpineBlendMode(blendMode, mat, this._premultipliedAlpha);\n            if (this._premultipliedAlpha) {\n                mat.addDefine(SpineShaderInit.SPINE_PREMULTIPLYALPHA);\n            }\n            else {\n                mat.removeDefine(SpineShaderInit.SPINE_PREMULTIPLYALPHA);\n            }\n            mat._addReference();\n            this.materialMap.set(key, mat);\n        }\n        return mat;\n    }\n    getTexture(name) {\n        return this._textures[name];\n    }\n    setTexture(name, tex) {\n        this._textures[name] = tex;\n    }\n    _parse(desc, atlas, textures, premultipliedAlpha = true) {\n        var _a;\n        let atlasLoader = new spine.AtlasAttachmentLoader(atlas);\n        if (desc instanceof ArrayBuffer) {\n            let skeletonBinary = new spine.SkeletonBinary(atlasLoader, false);\n            this.skeletonData = skeletonBinary.readSkeletonData(new Uint8Array(desc));\n        }\n        else {\n            let skeletonJson = new spine.SkeletonJson(atlasLoader, false);\n            this.skeletonData = skeletonJson.readSkeletonData(desc);\n        }\n        this._textures = textures;\n        this._atlas = atlas;\n        this.mainBlendMode = ((_a = this.skeletonData.slots[0]) === null || _a === void 0 ? void 0 : _a.blendMode) || 0;\n        this.mainTexture = this._mainTexture;\n        this.width = this.skeletonData.width;\n        this.height = this.skeletonData.height;\n        this.offsetX = this.skeletonData.x;\n        this.offsetY = this.skeletonData.y;\n        this._premultipliedAlpha = premultipliedAlpha;\n        this.hasPhysics = this.skeletonData.physicsConstraints && this.skeletonData.physicsConstraints.length > 0;\n        this.sketonOptimise.canCache = this.sketonOptimise.canCache && !this.hasPhysics;\n        this.sketonOptimise.checkMainAttach(this.skeletonData);\n    }\n    getAniNameByIndex(index) {\n        let tAni = this.skeletonData.getAnimationByIndex(index);\n        if (tAni)\n            return tAni.name;\n        return null;\n    }\n    findAnimation(name) {\n        return this.skeletonData.findAnimation(name);\n    }\n    getSkinIndexByName(skinName) {\n        return this.skeletonData.getSkinIndexByName(skinName);\n    }\n    _disposeResource() {\n        this.sketonOptimise.destroy();\n        for (let k in this._textures) {\n            let tex = this._textures[k];\n            if (tex) {\n                tex._removeReference();\n            }\n        }\n        if (this._referenceCount <= 0) {\n            this.materialMap.forEach(value => {\n                value._removeReference();\n            });\n            this.materialMap.clear();\n        }\n        else {\n            console.error(\"SpineTemplet is using\");\n        }\n        this.skeletonData = null;\n        this.sketonOptimise = null;\n    }\n}\nSpineTemplet.RuntimeVersion = \"3.8\";\n","import { FilterMode } from \"../RenderEngine/RenderEnum/FilterMode\";\nimport { WrapMode } from \"../RenderEngine/RenderEnum/WrapMode\";\nexport class SpineTexture {\n    constructor(tex) {\n        this.realTexture = tex;\n    }\n    getImage() {\n        var _a, _b, _c, _d;\n        return {\n            width: (_b = ((_a = this.realTexture) === null || _a === void 0 ? void 0 : _a.width)) !== null && _b !== void 0 ? _b : 16,\n            height: (_d = ((_c = this.realTexture) === null || _c === void 0 ? void 0 : _c.height)) !== null && _d !== void 0 ? _d : 16,\n        };\n    }\n    setFilters(minFilter, magFilter) {\n        if (!this.realTexture)\n            return;\n        let filterMode;\n        if (magFilter === window.spine.TextureFilter.Nearest)\n            filterMode = FilterMode.Point;\n        else\n            filterMode = FilterMode.Bilinear;\n        this.realTexture.filterMode = filterMode;\n    }\n    convertWrapMode(mode) {\n        return mode == spine.TextureWrap.ClampToEdge ? WrapMode.Clamp : (mode == spine.TextureWrap.MirroredRepeat ? WrapMode.Mirrored : WrapMode.Repeat);\n    }\n    setWraps(uWrap, vWrap) {\n        if (!this.realTexture)\n            return;\n        this.realTexture.wrapModeU = this.convertWrapMode(uWrap);\n        this.realTexture.wrapModeV = this.convertWrapMode(vWrap);\n    }\n}\n","import { Laya } from \"../../Laya\";\nimport { Loader } from \"../net/Loader\";\nimport { URL } from \"../net/URL\";\nimport { TextureFormat } from \"../RenderEngine/RenderEnum/TextureFormat\";\nimport { Utils } from \"../utils/Utils\";\nimport { SpineTemplet } from \"./SpineTemplet\";\nimport { SpineTexture } from \"./SpineTexture\";\nconst _premultipliedAlpha = true;\nconst _srgb = true;\nclass SpineTempletLoader {\n    load(task) {\n        let atlasUrl = Utils.replaceFileExtension(task.url, \"atlas\");\n        return Promise.all([\n            task.loader.fetch(task.url, task.ext == \"skel\" ? \"arraybuffer\" : \"json\", task.progress.createCallback()),\n            task.loader.fetch(atlasUrl, \"text\", task.progress.createCallback())\n        ]).then(res => {\n            if (!res[0] || !res[1])\n                return null;\n            let templet = new SpineTemplet();\n            let version = SpineTemplet.RuntimeVersion;\n            if (version == \"4.1\") {\n                templet.needSlot = true;\n            }\n            if (version.startsWith('4.'))\n                return this.parseAtlas4(res[0], res[1], task, templet);\n            else\n                return this.parseAtlas3(res[0], res[1], task, templet);\n        });\n    }\n    parseAtlas3(desc, atlasText, task, templet) {\n        var _a;\n        let atlasPages = [];\n        let basePath = URL.getPath(task.url);\n        let atlas = new spine.TextureAtlas(atlasText, (path) => {\n            let url = basePath + path;\n            atlasPages.push({\n                url, type: Loader.TEXTURE2D,\n                propertyParams: {\n                    premultiplyAlpha: _premultipliedAlpha\n                },\n                constructParams: [0, 0, TextureFormat.R8G8B8A8, false, false, _srgb, _premultipliedAlpha]\n            });\n            return new SpineTexture(null);\n        });\n        return Laya.loader.load(atlasPages, null, (_a = task.progress) === null || _a === void 0 ? void 0 : _a.createCallback()).then((res) => {\n            let textures = {};\n            let premultipliedAlpha = true;\n            for (var i = 0; i < res.length; i++) {\n                let tex = res[i];\n                if (tex)\n                    tex._addReference();\n                let pages = atlas.pages;\n                let page = pages[i];\n                premultipliedAlpha = page.pma || (tex && tex._premultiplyAlpha && premultipliedAlpha);\n                page.texture.realTexture = tex;\n                page.texture.setFilters(page.minFilter, page.magFilter);\n                page.texture.setWraps(page.uWrap, page.vWrap);\n                page.width = page.texture.getImage().width;\n                page.height = page.texture.getImage().height;\n                textures[page.name] = tex;\n            }\n            let regions = atlas.regions;\n            for (const region of regions) {\n                let page = region.page;\n                region.u = region.x / page.width;\n                region.v = region.y / page.height;\n                if (region.rotate) {\n                    region.u2 = (region.x + region.height) / page.width;\n                    region.v2 = (region.y + region.width) / page.height;\n                }\n                else {\n                    region.u2 = (region.x + region.width) / page.width;\n                    region.v2 = (region.y + region.height) / page.height;\n                }\n            }\n            templet._parse(desc, atlas, textures, premultipliedAlpha);\n            return templet;\n        });\n    }\n    parseAtlas4(desc, atlasText, task, templet) {\n        var _a;\n        let atlas = new spine.TextureAtlas(atlasText);\n        let basePath = URL.getPath(task.url);\n        return Laya.loader.load(atlas.pages.map((page) => {\n            return {\n                url: basePath + page.name,\n                type: Loader.TEXTURE2D,\n                propertyParams: {\n                    premultiplyAlpha: _premultipliedAlpha\n                },\n                constructParams: [0, 0, TextureFormat.R8G8B8A8, false, false, _srgb, _premultipliedAlpha]\n            };\n        }), null, (_a = task.progress) === null || _a === void 0 ? void 0 : _a.createCallback()).then((res) => {\n            let textures = {};\n            let pages = atlas.pages;\n            let premultipliedAlpha = true;\n            for (let i = 0, len = res.length; i < len; i++) {\n                let tex = res[i];\n                if (tex)\n                    tex._addReference();\n                let page = pages[i];\n                premultipliedAlpha = page.pma || (tex._premultiplyAlpha && premultipliedAlpha);\n                textures[page.name] = tex;\n                page.setTexture(new SpineTexture(tex));\n            }\n            templet._parse(desc, atlas, textures, premultipliedAlpha);\n            return templet;\n        });\n    }\n}\nLoader.registerLoader([\"skel\"], SpineTempletLoader, Loader.SPINE);\n","import { PlayerConfig } from \"../../Config\";\nimport { Laya } from \"../../Laya\";\nimport { ClassUtils } from \"../utils/ClassUtils\";\nimport { ExternalSkin } from \"./ExternalSkin\";\nimport { ExternalSkinItem } from \"./ExternalSkinItem\";\nimport { SpineSkeleton } from \"./SpineSkeleton\";\nimport { SpineTemplet } from \"./SpineTemplet\";\nimport \"./SpineTempletLoader\";\nlet c = ClassUtils.regClass;\nc(\"SpineSkeleton\", SpineSkeleton);\nc(\"ExternalSkin\", ExternalSkin);\nc(\"ExternalSkinItem\", ExternalSkinItem);\nLaya.addBeforeInitCallback(() => {\n    if (PlayerConfig.spineVersion)\n        SpineTemplet.RuntimeVersion = PlayerConfig.spineVersion;\n});\n","import { Laya } from \"../../../Laya\";\nimport { TextureFormat } from \"../../RenderEngine/RenderEnum/TextureFormat\";\nimport { Script } from \"../../components/Script\";\nimport { Event } from \"../../events/Event\";\nimport { Loader } from \"../../net/Loader\";\nimport { ClassUtils } from \"../../utils/ClassUtils\";\nimport { Spine2DRenderNode } from \"../Spine2DRenderNode\";\nimport { SpineEmptyRender } from \"./SpineEmptyRender\";\nexport class SpineBakeScript extends Script {\n    constructor() {\n        super();\n    }\n    onEnable() {\n        if (this.bakeData)\n            this.initBake(JSON.parse(this.bakeData));\n    }\n    onDisable() {\n        let spine = this.owner.getComponent(Spine2DRenderNode);\n        if (spine.spineItem)\n            spine.spineItem.initBake(null);\n    }\n    async attach(spine) {\n        let texture = await Laya.loader.load({\n            url: this.url,\n            type: Loader.TEXTURE2D,\n            constructParams: [\n                256, 256, TextureFormat.R32G32B32A32, false, false, false, false\n            ]\n        });\n        spine.initBake({\n            bonesNums: 60,\n            aniOffsetMap: {\n                \"idle\": 0,\n                \"skill\": 179 * 60 * 2\n            },\n            texture2d: texture\n        });\n    }\n    async initBake(data) {\n        const textureWidth = data.aniOffsetMap.textureWidth || 256;\n        let texture = await Laya.loader.load({\n            url: data.simpPath,\n            type: Loader.TEXTURE2D,\n            constructParams: [\n                textureWidth, textureWidth, TextureFormat.R32G32B32A32, false, false, false, false\n            ]\n        });\n        data.texture2d = texture;\n        let spine = this.owner.getComponent(Spine2DRenderNode);\n        if (spine.spineItem && !(spine.spineItem instanceof SpineEmptyRender)) {\n            spine.spineItem.initBake(data);\n        }\n        else {\n            this.owner.on(Event.READY, this, () => {\n                spine.spineItem.initBake(data);\n            });\n        }\n    }\n}\nClassUtils.regClass(\"SpineBakeScript\", SpineBakeScript);\n","import { Laya } from \"../../../Laya\";\nimport { BaseRender2DType, BaseRenderNode2D } from \"../../NodeRender2D/BaseRenderNode2D\";\nimport { RenderManager2D } from \"../../NodeRender2D/RenderManager2D\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../../RenderEngine/RenderEnum/DrawType\";\nimport { MeshTopology } from \"../../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { LayaGL } from \"../../layagl/LayaGL\";\nimport { FastSinglelist } from \"../../utils/SingletonList\";\nimport { SpineShaderInit } from \"../material/SpineShaderInit\";\nexport class SpineInstanceBatch {\n    constructor() {\n        this._recoverList = new FastSinglelist();\n    }\n    check(left, right) {\n        if (left.materialShaderData != right.materialShaderData\n            || left.geometry.instanceCount\n            || right.geometry.instanceCount)\n            return false;\n        return true;\n    }\n    batchRenderElement(list, start, length) {\n        let elementArray = list.elements;\n        let batchStart = -1;\n        for (let i = 0; i < length - 1; i++) {\n            let index = start + i;\n            let cElement = elementArray[index];\n            let nElement = elementArray[index + 1];\n            if (this.check(cElement, nElement)) {\n                if (batchStart == -1) {\n                    batchStart = i;\n                }\n            }\n            else {\n                if (batchStart != -1) {\n                    this.batch(list, batchStart + start, i - batchStart);\n                }\n                batchStart = 0;\n            }\n        }\n        if (batchStart != -1) {\n            this.batch(list, batchStart + start, length - batchStart);\n        }\n    }\n    updateBuffer(info, nMatrixData, simpleAnimatorData, instanceCount) {\n        let nMatrixInstanceVB = info.nMatrixInstanceVB;\n        let simpleAnimatorVB = info.simpleAnimatorVB;\n        nMatrixInstanceVB.setData(nMatrixData.buffer, 0, 0, instanceCount * 6 * 4);\n        simpleAnimatorVB.setData(simpleAnimatorData.buffer, 0, 0, instanceCount * 4 * 4);\n    }\n    batch(list, start, length) {\n        let instanceElement, geometry;\n        let elementArray = list.elements;\n        let nMatrixData = SpineInstanceElement2DTool._instanceBufferCreate(6 * SpineInstanceElement2DTool.MaxInstanceCount);\n        let simpleAnimatorData = SpineInstanceElement2DTool._instanceBufferCreate(4 * SpineInstanceElement2DTool.MaxInstanceCount);\n        let state, info;\n        let instanceCount = 0;\n        for (let i = 0; i < length; i++) {\n            let element = elementArray[start + i];\n            let shaderData = element.value2DShaderData;\n            if (!instanceElement) {\n                let originGeo = element.geometry;\n                info = SpineInstanceElement2DTool.getInstanceInfo(originGeo);\n                instanceElement = info.element;\n                this._recoverList.add(info);\n                geometry = instanceElement.geometry;\n                instanceCount = geometry.instanceCount = 0;\n                instanceElement.subShader = element.subShader;\n                instanceElement.materialShaderData = element.materialShaderData;\n                instanceElement.value2DShaderData = element.value2DShaderData;\n                instanceElement.renderStateIsBySprite = element.renderStateIsBySprite;\n                instanceElement.nodeCommonMap = element.nodeCommonMap;\n                instanceElement.value2DShaderData.addDefine(SpineShaderInit.SPINE_GPU_INSTANCE);\n            }\n            let nMatrix_0 = shaderData.getVector3(BaseRenderNode2D.NMATRIX_0);\n            let nMatrix_1 = shaderData.getVector3(BaseRenderNode2D.NMATRIX_1);\n            let nMatrixOffset = instanceCount * 6;\n            nMatrixData[nMatrixOffset] = nMatrix_0.x;\n            nMatrixData[nMatrixOffset + 1] = nMatrix_0.y;\n            nMatrixData[nMatrixOffset + 2] = nMatrix_0.z;\n            nMatrixData[nMatrixOffset + 3] = nMatrix_1.x;\n            nMatrixData[nMatrixOffset + 4] = nMatrix_1.y;\n            nMatrixData[nMatrixOffset + 5] = nMatrix_1.z;\n            let simpleAnimatorParams = shaderData.getVector(SpineShaderInit.SIMPLE_SIMPLEANIMATORPARAMS);\n            let offset = instanceCount * 4;\n            simpleAnimatorData[offset] = simpleAnimatorParams.x;\n            simpleAnimatorData[offset + 1] = simpleAnimatorParams.y;\n            simpleAnimatorData[offset + 2] = simpleAnimatorParams.z;\n            simpleAnimatorData[offset + 3] = simpleAnimatorParams.w;\n            instanceCount++;\n            geometry.instanceCount = instanceCount;\n            if (geometry.instanceCount == SpineInstanceElement2DTool.MaxInstanceCount) {\n                this.updateBuffer(info, nMatrixData, simpleAnimatorData, geometry.instanceCount);\n                list.add(instanceElement);\n                instanceElement = null;\n            }\n        }\n        if (instanceElement) {\n            this.updateBuffer(info, nMatrixData, simpleAnimatorData, geometry.instanceCount);\n            list.add(instanceElement);\n        }\n        SpineInstanceElement2DTool._instanceBufferRecover(nMatrixData);\n        SpineInstanceElement2DTool._instanceBufferRecover(simpleAnimatorData);\n    }\n    recover() {\n        let length = this._recoverList.length;\n        let recoverArray = this._recoverList.elements;\n        for (let i = 0; i < length; i++) {\n            let info = recoverArray[i];\n            SpineInstanceElement2DTool.recover(info);\n        }\n        this._recoverList.length = 0;\n    }\n}\nLaya.addAfterInitCallback(function () {\n    SpineInstanceBatch.instance = new SpineInstanceBatch;\n    RenderManager2D.regisBatch(BaseRender2DType.spineSimple, SpineInstanceBatch.instance);\n});\nexport class SpineInstanceElement2DTool {\n    static getInstanceInfo(geometry) {\n        let infos = SpineInstanceElement2DTool._instanceBufferInfoMap.get(geometry);\n        if (!infos) {\n            infos = [];\n            SpineInstanceElement2DTool._instanceBufferInfoMap.set(geometry, infos);\n        }\n        let info = infos.pop() || SpineInstanceElement2DTool.createInstanceInfo(geometry);\n        return info;\n    }\n    static createInstanceInfo(geometry) {\n        let element = LayaGL.render2DRenderPassFactory.createRenderElement2D();\n        let instanceGeometry = element.geometry = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElementInstance);\n        let state = LayaGL.renderDeviceFactory.createBufferState();\n        let info = { state, element, source: geometry };\n        let oriBufferState = geometry.bufferState;\n        let vertexArray = oriBufferState._vertexBuffers.slice();\n        let nMatrixInstanceVB = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n        nMatrixInstanceVB.setDataLength(SpineInstanceElement2DTool.MaxInstanceCount * 16 * 4);\n        nMatrixInstanceVB.vertexDeclaration = SpineShaderInit.instanceNMatrixDeclaration;\n        nMatrixInstanceVB.instanceBuffer = true;\n        vertexArray.push(nMatrixInstanceVB);\n        info.nMatrixInstanceVB = nMatrixInstanceVB;\n        let simpleAnimatorVB = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n        simpleAnimatorVB.setDataLength(SpineInstanceElement2DTool.MaxInstanceCount * 4 * 4);\n        simpleAnimatorVB.vertexDeclaration = SpineShaderInit.instanceSimpleAnimatorDeclaration;\n        simpleAnimatorVB.instanceBuffer = true;\n        vertexArray.push(simpleAnimatorVB);\n        info.simpleAnimatorVB = simpleAnimatorVB;\n        state.applyState(vertexArray, geometry.bufferState._bindedIndexBuffer);\n        instanceGeometry.drawParams.elements = geometry.drawParams.elements.slice();\n        instanceGeometry.drawParams.length = geometry.drawParams.length;\n        instanceGeometry.indexFormat = geometry.indexFormat;\n        instanceGeometry.bufferState = state;\n        return info;\n    }\n    static recover(info) {\n        let element = info.element;\n        element.value2DShaderData.removeDefine(SpineShaderInit.SPINE_GPU_INSTANCE);\n        element.value2DShaderData = null;\n        element.materialShaderData = null;\n        element.subShader = null;\n        element.nodeCommonMap = null;\n        let infos = SpineInstanceElement2DTool._instanceBufferInfoMap.get(info.source);\n        infos.push(info);\n    }\n    static _instanceBufferCreate(length) {\n        let array = SpineInstanceElement2DTool._bufferPool[length];\n        if (!array) {\n            array = SpineInstanceElement2DTool._bufferPool[length] = [];\n        }\n        let element = array.pop() || new Float32Array(length);\n        return element;\n    }\n    static _instanceBufferRecover(float32) {\n        let length = float32.length;\n        let array = SpineInstanceElement2DTool._bufferPool[length];\n        if (!array) {\n            array = SpineInstanceElement2DTool._bufferPool[length] = [];\n        }\n        array.push(float32);\n    }\n}\nSpineInstanceElement2DTool.MaxInstanceCount = 2048;\nSpineInstanceElement2DTool._instanceBufferInfoMap = new Map;\nSpineInstanceElement2DTool._pool = [];\nSpineInstanceElement2DTool._bufferPool = [];\n"],"names":["ILaya","Loader","Mesh2D","BufferUsage","LayaGL","MeshTopology","DrawType","VertexElement","VertexElementFormat","VertexDeclaration","IndexFormat","RenderCapable","RenderState","Shader3D","ShaderDataType","ShaderFeatureType","SubShader","Laya","QUAD_TRIANGLES","Color","BaseRenderNode2D","ESpineRenderType","Vector4","Vector2","BaseRender2DType","Vector3","ShaderDefines2D","Matrix4x4","LayaEnv","Event","SoundManager","Handler","ClassUtils","Sprite","Resource","Texture2D","Material","FilterMode","WrapMode","Utils","URL","TextureFormat","PlayerConfig","Script","FastSinglelist","RenderManager2D"],"mappings":"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"}