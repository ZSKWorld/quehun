{"version":3,"file":"laya.tilemap.js","sources":["../../bin/tsc/layaAir/laya/tilemap/layers/TileSetCustomDataLayer.js","../../bin/tsc/layaAir/laya/tilemap/layers/TileSetNavigationLayer.js","../../bin/tsc/layaAir/laya/tilemap/layers/TileSetOcclusionLayer.js","../../bin/tsc/layaAir/laya/tilemap/layers/TileSetPhysicsLayer.js","../../bin/tsc/layaAir/laya/tilemap/TileMapEnum.js","../../bin/tsc/layaAir/laya/tilemap/terrain/TileMapTerrainUtils.js","../../bin/tsc/layaAir/laya/tilemap/layers/TileSetTerrainSet.js","../../bin/tsc/layaAir/laya/tilemap/TileMapUtils.js","../../bin/tsc/layaAir/laya/tilemap/terrain/TileMapTerrain.js","../../bin/tsc/layaAir/laya/tilemap/TileSetCellData.js","../../bin/tsc/layaAir/laya/tilemap/TileAlternativesData.js","../../bin/tsc/layaAir/laya/tilemap/shader/TileMap.vs","../../bin/tsc/layaAir/laya/tilemap/shader/TileMap.fs","../../bin/tsc/layaAir/laya/tilemap/shader/TileMapCommon.glsl","../../bin/tsc/layaAir/laya/tilemap/shader/TileMapVertex.glsl","../../bin/tsc/layaAir/laya/tilemap/shader/TileMapFragment.glsl","../../bin/tsc/layaAir/laya/tilemap/shader/TileMapShaderInit.js","../../bin/tsc/layaAir/laya/tilemap/TileMapChunkData.js","../../bin/tsc/layaAir/laya/tilemap/grid/BaseSheet.js","../../bin/tsc/layaAir/laya/tilemap/grid/HalfOffSquareSheet.js","../../bin/tsc/layaAir/laya/tilemap/grid/HeixSheet.js","../../bin/tsc/layaAir/laya/tilemap/grid/IsometricSheet.js","../../bin/tsc/layaAir/laya/tilemap/grid/RectSheet.js","../../bin/tsc/layaAir/laya/tilemap/grid/Grid.js","../../bin/tsc/layaAir/laya/tilemap/TileMapChunk.js","../../bin/tsc/layaAir/laya/tilemap/TileMapPhysics.js","../../bin/tsc/layaAir/laya/tilemap/RectClipper.js","../../bin/tsc/layaAir/laya/tilemap/TileSet.js","../../bin/tsc/layaAir/laya/tilemap/TileSetCellGroup.js","../../bin/tsc/layaAir/laya/tilemap/loaders/TileSetAssetLoader.js","../../bin/tsc/layaAir/laya/tilemap/light/TileMapOccluder.js","../../bin/tsc/layaAir/laya/tilemap/TileMapOccluderAgent.js","../../bin/tsc/layaAir/laya/tilemap/TileMapLayer.js","../../bin/tsc/layaAir/laya/tilemap/ModuleDef.js"],"sourcesContent":["export class TileSetCustomDataLayer {\n}\n","export class TileMapNavigationLayer {\n    constructor() {\n    }\n}\n","export class TileSetOcclusionLayer {\n    constructor() {\n        this.layerMask = 1;\n    }\n}\n","export class TileSetPhysicsLayer {\n    constructor() {\n        this._density = 10;\n        this._friction = 0.2;\n        this._restitution = 0;\n        this.group = 0;\n        this.category = 1;\n        this.mask = -1;\n    }\n    get density() {\n        return this._density;\n    }\n    set density(value) {\n        if (this._density == value)\n            return;\n        this._density = value;\n    }\n    get friction() {\n        return this._friction;\n    }\n    set friction(value) {\n        if (this._friction == value)\n            return;\n        this._friction = value;\n    }\n    get restitution() {\n        return this._restitution;\n    }\n    set restitution(value) {\n        if (this._restitution == value)\n            return;\n        this._restitution = value;\n    }\n}\n","export var TileMapCellNeighbor;\n(function (TileMapCellNeighbor) {\n    TileMapCellNeighbor[TileMapCellNeighbor[\"RIGHT_SIDE\"] = 0] = \"RIGHT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"RIGHT_CORNER\"] = 1] = \"RIGHT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_RIGHT_SIDE\"] = 2] = \"BOTTOM_RIGHT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_RIGHT_CORNER\"] = 3] = \"BOTTOM_RIGHT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_SIDE\"] = 4] = \"BOTTOM_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_CORNER\"] = 5] = \"BOTTOM_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_LEFT_SIDE\"] = 6] = \"BOTTOM_LEFT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"BOTTOM_LEFT_CORNER\"] = 7] = \"BOTTOM_LEFT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"LEFT_SIDE\"] = 8] = \"LEFT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"LEFT_CORNER\"] = 9] = \"LEFT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_LEFT_SIDE\"] = 10] = \"TOP_LEFT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_LEFT_CORNER\"] = 11] = \"TOP_LEFT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_SIDE\"] = 12] = \"TOP_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_CORNER\"] = 13] = \"TOP_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_RIGHT_SIDE\"] = 14] = \"TOP_RIGHT_SIDE\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"TOP_RIGHT_CORNER\"] = 15] = \"TOP_RIGHT_CORNER\";\n    TileMapCellNeighbor[TileMapCellNeighbor[\"MAX\"] = 16] = \"MAX\";\n})(TileMapCellNeighbor || (TileMapCellNeighbor = {}));\nexport var TileMapTerrainMode;\n(function (TileMapTerrainMode) {\n    TileMapTerrainMode[TileMapTerrainMode[\"MATCH_CORNERS_AND_SIDES\"] = 0] = \"MATCH_CORNERS_AND_SIDES\";\n    TileMapTerrainMode[TileMapTerrainMode[\"MATCH_CORNERS\"] = 1] = \"MATCH_CORNERS\";\n    TileMapTerrainMode[TileMapTerrainMode[\"MATCH_SIDES\"] = 2] = \"MATCH_SIDES\";\n})(TileMapTerrainMode || (TileMapTerrainMode = {}));\nexport var TileShape;\n(function (TileShape) {\n    TileShape[TileShape[\"TILE_SHAPE_SQUARE\"] = 0] = \"TILE_SHAPE_SQUARE\";\n    TileShape[TileShape[\"TILE_SHAPE_ISOMETRIC\"] = 1] = \"TILE_SHAPE_ISOMETRIC\";\n    TileShape[TileShape[\"TILE_SHAPE_HALF_OFFSET_SQUARE\"] = 2] = \"TILE_SHAPE_HALF_OFFSET_SQUARE\";\n    TileShape[TileShape[\"TILE_SHAPE_HEXAGON\"] = 3] = \"TILE_SHAPE_HEXAGON\";\n})(TileShape || (TileShape = {}));\nexport var TileLayerSortMode;\n(function (TileLayerSortMode) {\n    TileLayerSortMode[TileLayerSortMode[\"YSort\"] = 0] = \"YSort\";\n    TileLayerSortMode[TileLayerSortMode[\"ZINDEXSORT\"] = 1] = \"ZINDEXSORT\";\n    TileLayerSortMode[TileLayerSortMode[\"XSort\"] = 2] = \"XSort\";\n})(TileLayerSortMode || (TileLayerSortMode = {}));\nexport var TileMapDirtyFlag;\n(function (TileMapDirtyFlag) {\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_CHANGE\"] = 1] = \"CELL_CHANGE\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_COLOR\"] = 2] = \"CELL_COLOR\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_QUAD\"] = 4] = \"CELL_QUAD\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_QUADUV\"] = 8] = \"CELL_QUADUV\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_UVTRAN\"] = 16] = \"CELL_UVTRAN\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_PHYSICS\"] = 32] = \"CELL_PHYSICS\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_TERRAIN\"] = 64] = \"CELL_TERRAIN\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_LIGHTSHADOW\"] = 128] = \"CELL_LIGHTSHADOW\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_NAVIGATION\"] = 256] = \"CELL_NAVIGATION\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"CELL_SORTCHANGE\"] = 512] = \"CELL_SORTCHANGE\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"TILESET_SAZE\"] = 1024] = \"TILESET_SAZE\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"LAYER_COLOR\"] = 2048] = \"LAYER_COLOR\";\n    TileMapDirtyFlag[TileMapDirtyFlag[\"LAYER_PHYSICS\"] = 4096] = \"LAYER_PHYSICS\";\n})(TileMapDirtyFlag || (TileMapDirtyFlag = {}));\nexport var DirtyFlagType;\n(function (DirtyFlagType) {\n    DirtyFlagType[DirtyFlagType[\"ALL\"] = -1] = \"ALL\";\n    DirtyFlagType[DirtyFlagType[\"RENDER\"] = 0] = \"RENDER\";\n    DirtyFlagType[DirtyFlagType[\"PHYSICS\"] = 1] = \"PHYSICS\";\n    DirtyFlagType[DirtyFlagType[\"OCCLUSION\"] = 2] = \"OCCLUSION\";\n})(DirtyFlagType || (DirtyFlagType = {}));\nexport const DIRTY_TYPES = 3;\n","import { Vector2 } from \"../../maths/Vector2\";\nimport { Vector3 } from \"../../maths/Vector3\";\nimport { TileMapCellNeighbor, TileMapTerrainMode, TileShape } from \"../TileMapEnum\";\nexport class TileMapTerrainUtil {\n    static initSquare() {\n        let neighbors = new Map;\n        let arr = [\n            TileMapCellNeighbor.RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_SIDE,\n            TileMapCellNeighbor.BOTTOM_LEFT_CORNER,\n            TileMapCellNeighbor.LEFT_SIDE,\n            TileMapCellNeighbor.TOP_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_SIDE,\n            TileMapCellNeighbor.TOP_RIGHT_CORNER,\n        ];\n        let links = arr;\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS_AND_SIDES, arr);\n        arr = [\n            TileMapCellNeighbor.RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_SIDE,\n            TileMapCellNeighbor.LEFT_SIDE,\n            TileMapCellNeighbor.TOP_SIDE,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_SIDES, arr);\n        arr = [\n            TileMapCellNeighbor.BOTTOM_RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_RIGHT_CORNER,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS, arr);\n        this.shape_mode_map.set(TileShape.TILE_SHAPE_SQUARE, {\n            neighbors,\n            getOverlap: TileMapTerrainUtil.getOverlap_Square,\n            getNeighborGird: TileMapTerrainUtil.getNeighborGird_Square,\n            getRuleInfo: TileMapTerrainUtil.getRuleInfo_Square,\n            links\n        });\n    }\n    static initIsometric() {\n        let neighbors = new Map;\n        let arr = [\n            TileMapCellNeighbor.RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_CORNER,\n            TileMapCellNeighbor.BOTTOM_LEFT_SIDE,\n            TileMapCellNeighbor.LEFT_CORNER,\n            TileMapCellNeighbor.TOP_LEFT_SIDE,\n            TileMapCellNeighbor.TOP_CORNER,\n            TileMapCellNeighbor.TOP_RIGHT_SIDE,\n        ];\n        let links = arr;\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS_AND_SIDES, arr);\n        arr = [\n            TileMapCellNeighbor.BOTTOM_RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_LEFT_SIDE,\n            TileMapCellNeighbor.TOP_LEFT_SIDE,\n            TileMapCellNeighbor.TOP_RIGHT_SIDE,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_SIDES, arr);\n        arr = [\n            TileMapCellNeighbor.RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_CORNER,\n            TileMapCellNeighbor.LEFT_CORNER,\n            TileMapCellNeighbor.TOP_CORNER,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS, arr);\n        this.shape_mode_map.set(TileShape.TILE_SHAPE_ISOMETRIC, {\n            neighbors,\n            getNeighborGird: TileMapTerrainUtil.getNeighborGird_Isometric,\n            getRuleInfo: TileMapTerrainUtil.getRuleInfo_Isometric,\n            getOverlap: TileMapTerrainUtil.getOverlap_Isometric,\n            links\n        });\n    }\n    static initHalfOffset() {\n        let neighbors = new Map;\n        let arr = [\n            TileMapCellNeighbor.RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_CORNER,\n            TileMapCellNeighbor.BOTTOM_LEFT_SIDE,\n            TileMapCellNeighbor.BOTTOM_LEFT_CORNER,\n            TileMapCellNeighbor.LEFT_SIDE,\n            TileMapCellNeighbor.TOP_LEFT_SIDE,\n            TileMapCellNeighbor.TOP_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_CORNER,\n            TileMapCellNeighbor.TOP_RIGHT_SIDE,\n            TileMapCellNeighbor.TOP_RIGHT_CORNER,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS_AND_SIDES, arr);\n        arr = [\n            TileMapCellNeighbor.RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_RIGHT_SIDE,\n            TileMapCellNeighbor.BOTTOM_LEFT_SIDE,\n            TileMapCellNeighbor.LEFT_SIDE,\n            TileMapCellNeighbor.TOP_LEFT_SIDE,\n            TileMapCellNeighbor.TOP_RIGHT_SIDE,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_SIDES, arr);\n        let links = arr;\n        arr = [\n            TileMapCellNeighbor.BOTTOM_RIGHT_CORNER,\n            TileMapCellNeighbor.BOTTOM_CORNER,\n            TileMapCellNeighbor.BOTTOM_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_LEFT_CORNER,\n            TileMapCellNeighbor.TOP_CORNER,\n            TileMapCellNeighbor.TOP_RIGHT_CORNER,\n        ];\n        neighbors.set(TileMapTerrainMode.MATCH_CORNERS, arr);\n        this.shape_mode_map.set(TileShape.TILE_SHAPE_HALF_OFFSET_SQUARE, {\n            neighbors,\n            getNeighborGird: TileMapTerrainUtil.getNeighborGird_HalfOffset,\n            getRuleInfo: TileMapTerrainUtil.getRuleInfo_HalfOffset,\n            getOverlap: TileMapTerrainUtil.getOverlap_HalfOffset,\n            links\n        });\n        this.shape_mode_map.set(TileShape.TILE_SHAPE_HEXAGON, {\n            getNeighborGird: TileMapTerrainUtil.getNeighborGird_HalfOffset,\n            getRuleInfo: TileMapTerrainUtil.getRuleInfo_HalfOffset,\n            getOverlap: TileMapTerrainUtil.getOverlap_HalfOffset,\n            neighbors,\n            links\n        });\n    }\n    static __init__() {\n        this.initSquare();\n        this.initIsometric();\n        this.initHalfOffset();\n    }\n    static getNeighborObject(shape) {\n        return TileMapTerrainUtil.shape_mode_map.get(shape);\n    }\n    static getNeighborGird_Isometric(x, y, neighbor, out) {\n        let isOffset = !!(y & 1);\n        if (neighbor == TileMapCellNeighbor.TOP_CORNER) {\n            out.x = x;\n            out.y = y - 2;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_SIDE) {\n            out.x = x + (isOffset ? 1 : 0);\n            out.y = y - 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.RIGHT_CORNER) {\n            out.x = x + 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_SIDE) {\n            out.x = x + (isOffset ? 1 : 0);\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_CORNER) {\n            out.x = x;\n            out.y = y + 2;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_SIDE) {\n            out.x = x - (isOffset ? 0 : 1);\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_CORNER) {\n            out.x = x - 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_SIDE) {\n            out.x = x - (isOffset ? 0 : 1);\n            out.y = y - 1;\n        }\n    }\n    static getNeighborGird_Square(x, y, neighbor, out) {\n        if (neighbor == TileMapCellNeighbor.TOP_SIDE) {\n            out.x = x;\n            out.y = y - 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_CORNER) {\n            out.x = x + 1;\n            out.y = y - 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.RIGHT_SIDE) {\n            out.x = x + 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_CORNER) {\n            out.x = x + 1;\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_SIDE) {\n            out.x = x;\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_CORNER) {\n            out.x = x - 1;\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_SIDE) {\n            out.x = x - 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_CORNER) {\n            out.x = x - 1;\n            out.y = y - 1;\n        }\n    }\n    static getNeighborGird_HalfOffset(x, y, neighbor, out) {\n        let isOffset = !!(y & 1);\n        if (neighbor == TileMapCellNeighbor.RIGHT_SIDE) {\n            out.x = x + 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_SIDE) {\n            out.x = x - 1;\n            out.y = y;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_SIDE) {\n            out.x = x + (isOffset ? 1 : 0);\n            out.y = y - 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_SIDE) {\n            out.x = x + (isOffset ? 1 : 0);\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_SIDE) {\n            out.x = x - (isOffset ? 0 : 1);\n            out.y = y + 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_SIDE) {\n            out.x = x - (isOffset ? 0 : 1);\n            out.y = y - 1;\n        }\n    }\n    static getRuleInfo_Square(rule, neighbor) {\n        if (neighbor == TileMapCellNeighbor.TOP_SIDE) {\n            rule.data = 3;\n            TileMapTerrainUtil.getNeighborGird_Square(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Square(rule.x, rule.y, TileMapCellNeighbor.TOP_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.RIGHT_SIDE) {\n            rule.data = 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_CORNER) {\n            rule.data = 2;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_SIDE) {\n            rule.data = 3;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Square(rule.x, rule.y, TileMapCellNeighbor.LEFT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_SIDE) {\n            rule.data = 1;\n            TileMapTerrainUtil.getNeighborGird_Square(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Square(rule.x, rule.y, TileMapCellNeighbor.TOP_LEFT_CORNER, rule);\n        }\n    }\n    static getRuleInfo_Isometric(rule, neighbor) {\n        if (neighbor == TileMapCellNeighbor.TOP_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Isometric(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_SIDE) {\n            rule.data = 3;\n            TileMapTerrainUtil.getNeighborGird_Isometric(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.RIGHT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Isometric(rule.x, rule.y, TileMapCellNeighbor.TOP_RIGHT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_SIDE) {\n            rule.data = 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_CORNER) {\n            rule.data = 2;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_SIDE) {\n            rule.data = 3;\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_Isometric(rule.x, rule.y, TileMapCellNeighbor.TOP_LEFT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_SIDE) {\n            rule.data = 1;\n            TileMapTerrainUtil.getNeighborGird_Isometric(rule.x, rule.y, neighbor, rule);\n        }\n    }\n    static getRuleInfo_HalfOffset(rule, neighbor) {\n        if (neighbor == TileMapCellNeighbor.RIGHT_SIDE) {\n            rule.data = 1;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_CORNER) {\n            rule.data = 2;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_RIGHT_SIDE) {\n            rule.data = 3;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_CORNER) {\n            rule.data = 4;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_SIDE) {\n            rule.data = 5;\n        }\n        else if (neighbor == TileMapCellNeighbor.BOTTOM_LEFT_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, TileMapCellNeighbor.LEFT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.LEFT_SIDE) {\n            rule.data = 1;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_CORNER) {\n            rule.data = 4;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, TileMapCellNeighbor.TOP_LEFT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_LEFT_SIDE) {\n            rule.data = 3;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_CORNER) {\n            rule.data = 2;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, TileMapCellNeighbor.TOP_LEFT_SIDE, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_SIDE) {\n            rule.data = 5;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, neighbor, rule);\n        }\n        else if (neighbor == TileMapCellNeighbor.TOP_RIGHT_CORNER) {\n            rule.data = 4;\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(rule.x, rule.y, TileMapCellNeighbor.TOP_RIGHT_SIDE, rule);\n        }\n    }\n    static getOverlap_Square(x, y, data, vec2Map, outs) {\n        let temp_vec2 = TileMapTerrainUtil.temp_vec2;\n        if (data == 1) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.RIGHT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_Square(x, y, TileMapCellNeighbor.LEFT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.LEFT_SIDE);\n        }\n        else if (data == 2) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_RIGHT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Square(x, y, TileMapCellNeighbor.RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.BOTTOM_LEFT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Square(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_CORNER, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_LEFT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Square(x, y, TileMapCellNeighbor.BOTTOM_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_RIGHT_CORNER);\n        }\n        else {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_SIDE);\n            TileMapTerrainUtil.getNeighborGird_Square(x, y, TileMapCellNeighbor.BOTTOM_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_SIDE);\n        }\n    }\n    static getOverlap_Isometric(x, y, data, vec2Map, outs) {\n        let temp_vec2 = TileMapTerrainUtil.temp_vec2;\n        if (data == 1) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_RIGHT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_Isometric(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_LEFT_SIDE);\n        }\n        else if (data == 2) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Isometric(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.LEFT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Isometric(x, y, TileMapCellNeighbor.BOTTOM_CORNER, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_CORNER);\n            TileMapTerrainUtil.getNeighborGird_Isometric(x, y, TileMapCellNeighbor.BOTTOM_LEFT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.RIGHT_CORNER);\n        }\n        else {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_LEFT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_Isometric(x, y, TileMapCellNeighbor.BOTTOM_LEFT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_RIGHT_SIDE);\n        }\n    }\n    static getOverlap_HalfOffset(x, y, data, vec2Map, outs) {\n        let temp_vec2 = TileMapTerrainUtil.temp_vec2;\n        if (data == 1) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.RIGHT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.LEFT_SIDE);\n        }\n        else if (data == 2) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_RIGHT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.BOTTOM_LEFT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_CORNER);\n        }\n        else if (data == 3) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_RIGHT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_LEFT_SIDE);\n        }\n        else if (data == 4) {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_CORNER);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.BOTTOM_RIGHT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_LEFT_CORNER);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.BOTTOM_LEFT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_RIGHT_CORNER);\n        }\n        else {\n            outs.set(vec2Map.get(x, y, true), TileMapCellNeighbor.BOTTOM_LEFT_SIDE);\n            TileMapTerrainUtil.getNeighborGird_HalfOffset(x, y, TileMapCellNeighbor.BOTTOM_LEFT_SIDE, temp_vec2);\n            outs.set(vec2Map.get(temp_vec2.x, temp_vec2.y, true), TileMapCellNeighbor.TOP_RIGHT_SIDE);\n        }\n    }\n    static getChunkCellInfo(layer, vec2) {\n        if (vec2.index == -1) {\n            layer._chunk._getChunkPosByCell(vec2.x, vec2.y, TileMapTerrainUtil.temp_vec3);\n            vec2.chunkX = TileMapTerrainUtil.temp_vec3.x;\n            vec2.chunkY = TileMapTerrainUtil.temp_vec3.y;\n            vec2.index = TileMapTerrainUtil.temp_vec3.z;\n        }\n        let datas = layer.chunkDatas[vec2.chunkY];\n        if (datas) {\n            let data = datas[vec2.chunkX];\n            if (data) {\n                return data.getCell(vec2.index);\n            }\n        }\n        return null;\n    }\n}\nTileMapTerrainUtil.shape_mode_map = new Map;\nTileMapTerrainUtil.temp_vec2 = new Vector2();\nTileMapTerrainUtil.temp_vec3 = new Vector3();\nexport class TileMapTerrainRule {\n    constructor(x, y, terrain, neighborObject) {\n        this.data = 0;\n        this.x = 0;\n        this.y = 0;\n        this.terrain = 0;\n        this.priority = 1;\n        this.x = x;\n        this.y = y;\n        this.terrain = terrain;\n        this.neighborObject = neighborObject;\n    }\n    setCellNeighbor(cellNeighbor) {\n        this.neighborObject.getRuleInfo(this, cellNeighbor);\n    }\n    clone() {\n        let rule = new TileMapTerrainRule(this.x, this.y, this.terrain, this.neighborObject);\n        rule.data = this.data;\n        rule.priority = this.priority;\n        return rule;\n    }\n}\nexport class Vector2LikeSet {\n    constructor() {\n        this.list = [];\n    }\n}\nexport class TerrainRuleSet extends Vector2LikeSet {\n    constructor() {\n        super(...arguments);\n        this.map = [];\n    }\n    add(ele) {\n        let one = this.map[ele.y];\n        if (!one) {\n            one = this.map[ele.y] = [];\n        }\n        let two = one[ele.x];\n        if (!two) {\n            two = one[ele.x] = [];\n        }\n        if (two[ele.data]) {\n            return two[ele.data];\n        }\n        two[ele.data] = ele;\n        this.list.push(ele);\n        return ele;\n    }\n    get(x, y, data) {\n        return this.map[y] ? (this.map[y][x] ? this.map[y][x][data] : null) : null;\n    }\n    delete(x, y, data) {\n        let result = this.map[y] ? (this.map[y][x] ? this.map[y][x][data] : null) : null;\n        if (result) {\n            delete this.map[y][x][data];\n            this.list.splice(this.list.indexOf(result), 1);\n        }\n        return result;\n    }\n}\nexport class TerrainVector2Set extends Vector2LikeSet {\n    constructor() {\n        super(...arguments);\n        this.map = [];\n        this.list = [];\n    }\n    add(ele) {\n        let one = this.map[ele.y];\n        if (!one) {\n            one = this.map[ele.y] = [];\n        }\n        let two = one[ele.x];\n        if (two) {\n            return two;\n        }\n        one[ele.x] = ele;\n        this.list.push(ele);\n        return ele;\n    }\n    get(x, y, create = false) {\n        let result = this.map[y] ? this.map[y][x] : null;\n        if (!result && create) {\n            result = { x, y, index: -1 };\n            this.add(result);\n        }\n        return result;\n    }\n    delete(x, y) {\n        let result = this.map[y] ? this.map[y][x] : null;\n        if (result) {\n            delete this.map[y][x];\n            this.list.splice(this.list.indexOf(result), 1);\n        }\n        return result;\n    }\n}\n","import { TileMapTerrainUtil } from \"../terrain/TileMapTerrainUtils\";\nimport { TileMapTerrainMode } from \"../TileMapEnum\";\nexport class TileSetTerrainSet {\n    constructor() {\n        this._terrainBatchMode = TileMapTerrainMode.MATCH_CORNERS_AND_SIDES;\n    }\n    set terrainPatchMode(value) {\n        this._terrainBatchMode = value;\n    }\n    get terrainPatchMode() {\n        return this._terrainBatchMode;\n    }\n    updateShape(shape) {\n        let obj = TileMapTerrainUtil.getNeighborObject(shape);\n        this._neighbors = obj.neighbors.get(this._terrainBatchMode);\n    }\n    getTerrain(id) {\n        for (let i = 0, len = this._terrains.length; i < len; i++) {\n            if (id == this._terrains[i].id) {\n                return this._terrains[i];\n            }\n        }\n        return null;\n    }\n    get terrains() {\n        return this._terrains;\n    }\n    set terrains(value) {\n        this._terrains = value;\n    }\n}\nexport class TileSetTerrain {\n}\n","import { Vector4 } from \"../maths/Vector4\";\nimport { TileShape } from \"./TileMapEnum\";\nconst BYTE_POS_CELL = 24;\nconst BYTE_POS_GROUP = 16;\nconst BYTE_MASK_CELL = 0xff << BYTE_POS_CELL;\nconst BYTE_MASK_GROUP = 0xff << BYTE_POS_GROUP;\nconst BYTE_MASK_NATIVE = 0xffff;\nexport class TileMapUtils {\n    static parseCellIndex(gid) { return (gid & BYTE_MASK_CELL) >> 24; }\n    static parseGroupId(gid) { return (gid & BYTE_MASK_GROUP) >> 16; }\n    static parseNativeIndex(gid) { return gid & BYTE_MASK_NATIVE; }\n    static getNativeId(groupId, index) { return (groupId << BYTE_POS_GROUP) + index; }\n    static getGid(cellindex, nativeId) {\n        return (cellindex << BYTE_POS_CELL) + nativeId;\n    }\n    static quickFoundIndex(array, value) {\n        let mid = 0;\n        let startindex = 0;\n        let endindex = array.length - 1;\n        if (value < array[startindex] || value >= array[endindex]) {\n            return -1;\n        }\n        while (startindex + 1 < endindex) {\n            mid = Math.floor((startindex + endindex) / 2);\n            if (array[mid] == value) {\n                return mid;\n            }\n            else if (array[mid] > value) {\n                endindex = mid;\n            }\n            else {\n                startindex = mid;\n            }\n        }\n        return startindex;\n    }\n    static getRotateAngle(rotateCount, tileShape) {\n        let maxCount = tileShape == TileShape.TILE_SHAPE_HEXAGON ? 6 : 4;\n        rotateCount = Math.floor(rotateCount) % maxCount;\n        if (rotateCount < 0) {\n            rotateCount += maxCount;\n        }\n        return Math.PI * 2 * rotateCount / maxCount;\n    }\n    static getUvRotate(tileshape, flip_h = false, flip_v = false, transpose = false, rountCount = 0) {\n        let vx = 1;\n        let vy = transpose ? -1 : 1;\n        const dx = (vx + vy) * 0.5;\n        const dy = (vx - vy) * 0.5;\n        vx = flip_h ? -1 : 1;\n        vy = flip_v ? -1 : 1;\n        let rotate = -this.getRotateAngle(rountCount, tileshape);\n        const cos = Math.cos(rotate);\n        const sin = Math.sin(rotate);\n        let out = Vector4.TEMP;\n        out.x = cos * vx * dx - sin * vx * dy;\n        out.y = cos * vy * dy - sin * vy * dx;\n        out.z = sin * vx * dx + cos * vx * dy;\n        out.w = sin * vy * dy + cos * vy * dx;\n        return out;\n    }\n    static transfromPointByValue(matrix, x, y, point) {\n        point.x = matrix.a * x + matrix.c * y + matrix.tx;\n        point.y = matrix.b * x + matrix.d * y + matrix.ty;\n    }\n    static transfromPointNByValue(matrix, x, y, point) {\n        point.x = matrix.a * x + matrix.c * y;\n        point.y = matrix.b * x + matrix.d * y;\n    }\n    static getCellDataIndex(nativeData) {\n        let keys = Object.keys(nativeData._tileDatas).map(Number);\n        keys.sort((a, b) => a - b);\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] !== i) {\n                return i;\n            }\n        }\n        return keys.length > 0 ? keys[keys.length - 1] + 1 : 0;\n    }\n    static findCellData(nativeData, rotateCount, flipV, flipH) {\n        let datas = nativeData._tileDatas;\n        for (const key in datas) {\n            let data = datas[key];\n            if (data.rotateCount == rotateCount\n                && data.flip_h == flipH\n                && data.flip_v == flipV) {\n                return data;\n            }\n        }\n        return null;\n    }\n}\n","import { TileMapCellNeighbor } from \"../TileMapEnum\";\nimport { TerrainRuleSet, TerrainVector2Set, TileMapTerrainRule, TileMapTerrainUtil } from \"./TileMapTerrainUtils\";\nexport class TileMapTerrain {\n    static fillConnect(tileMapLayer, list, terrainSetId, terrainId, ignoreEmpty = false) {\n        let tileset = tileMapLayer.tileSet;\n        let terrainSet = tileset.getTerrainSet(terrainSetId);\n        if (!terrainSet)\n            return null;\n        let terrain = terrainSet.getTerrain(terrainId);\n        if (!terrain)\n            return null;\n        let neighborObject = TileMapTerrainUtil.getNeighborObject(tileset.tileShape);\n        let links = neighborObject.links;\n        let linksLen = links.length;\n        let temp_vec2 = TileMapTerrainUtil.temp_vec2;\n        let vec2Map = new TerrainVector2Set();\n        let allSet = new TerrainVector2Set();\n        let r2fSet = new TerrainVector2Set();\n        let listLength = list.length;\n        for (let i = listLength - 1; i > -1; i--) {\n            let x = list[i].x, y = list[i].y;\n            let iv2 = vec2Map.get(x, y, true);\n            if (!allSet.get(x, y)) {\n                allSet.add(iv2);\n            }\n            r2fSet.add(iv2);\n        }\n        for (let i = 0; i < listLength; i++) {\n            let x = list[i].x, y = list[i].y;\n            for (let k = 0; k < linksLen; k++) {\n                let neighbor = links[k];\n                neighborObject.getNeighborGird(x, y, neighbor, temp_vec2);\n                let nx = temp_vec2.x, ny = temp_vec2.y;\n                if (!allSet.get(nx, ny)) {\n                    allSet.add(vec2Map.get(nx, ny, true));\n                }\n            }\n        }\n        let checkSet = new TerrainVector2Set();\n        allSet.list.forEach(item => {\n            let x = item.x, y = item.y;\n            let real = r2fSet.get(x, y);\n            if (real) {\n                checkSet.add(vec2Map.get(x, y, true));\n            }\n            else {\n                let chunkCellInfo = TileMapTerrainUtil.getChunkCellInfo(tileMapLayer, item);\n                if (chunkCellInfo) {\n                    let celldata = chunkCellInfo.cell;\n                    if (celldata.terrainSet == terrainSetId && celldata.terrain == terrainId) {\n                        checkSet.add(vec2Map.get(x, y, true));\n                    }\n                }\n            }\n        });\n        let ruleSet = new TerrainRuleSet();\n        let neighbors = terrainSet._neighbors;\n        let nlen = neighbors.length;\n        for (let i = 0; i < listLength; i++) {\n            let x = list[i].x, y = list[i].y;\n            let rulebase = new TileMapTerrainRule(x, y, terrainId, neighborObject);\n            rulebase.priority = 10;\n            ruleSet.add(rulebase);\n            for (let k = 0; k < nlen; k++) {\n                let neighbor = neighbors[k];\n                let ruleNeighbor = rulebase.clone();\n                ruleNeighbor.setCellNeighbor(neighbor);\n                if (neighbor % 2 == 0) {\n                    neighborObject.getNeighborGird(x, y, neighbor, temp_vec2);\n                    if (checkSet.get(temp_vec2.x, temp_vec2.y)) {\n                        ruleSet.add(ruleNeighbor);\n                    }\n                }\n                else {\n                    let outs = new Map;\n                    neighborObject.getOverlap(ruleNeighbor.x, ruleNeighbor.y, ruleNeighbor.data, vec2Map, outs);\n                    let need = true;\n                    outs.forEach((neighbor, vec2) => {\n                        if (!checkSet.get(vec2.x, vec2.y)) {\n                            need = false;\n                        }\n                    });\n                    if (need) {\n                        ruleSet.add(ruleNeighbor);\n                    }\n                }\n            }\n        }\n        let fillRule = this.getReady2FillRule(tileMapLayer, neighborObject, terrainSetId, neighbors, r2fSet, vec2Map, ignoreEmpty);\n        fillRule.list.forEach(rule => {\n            ruleSet.add(rule);\n        });\n        let out = this._fillRules(tileMapLayer, terrainSetId, neighborObject, allSet, ruleSet);\n        return out;\n    }\n    static getReady2FillRule(tileMapLayer, neighborObject, terrainSetId, neighbors, r2fSet, vec2Map, ignoreEmpty = true) {\n        let nlen = neighbors.length;\n        let vRuleSet = new TerrainRuleSet;\n        r2fSet.list.forEach(vec2 => {\n            for (let i = 0; i < nlen; i++) {\n                let rule = new TileMapTerrainRule(vec2.x, vec2.y, -1, neighborObject);\n                rule.setCellNeighbor(neighbors[i]);\n                vRuleSet.add(rule);\n            }\n        });\n        let outSet = new TerrainRuleSet;\n        vRuleSet.list.forEach(rule => {\n            let mark = [];\n            let outs = new Map;\n            neighborObject.getOverlap(rule.x, rule.y, rule.data, vec2Map, outs);\n            let nCell;\n            outs.forEach((neighbor, vec2) => {\n                let chunkCellInfo = TileMapTerrainUtil.getChunkCellInfo(tileMapLayer, vec2);\n                if (chunkCellInfo) {\n                    let cellData = chunkCellInfo.cell;\n                    if (cellData.terrainSet == terrainSetId) {\n                        nCell = cellData;\n                    }\n                }\n                let nTerrain = nCell ? nCell.terrain : -1;\n                if (!ignoreEmpty || nTerrain > -1) {\n                    if (!mark[nTerrain]) {\n                        mark[nTerrain] = 0;\n                    }\n                    mark[nTerrain]++;\n                }\n            });\n            let maxCount = 0;\n            let maxCountTerrian = -1;\n            for (let i = -1, len = mark.length; i < len; i++) {\n                if (mark[i] > maxCount) {\n                    maxCount = mark[i];\n                    maxCountTerrian = i;\n                }\n            }\n            if (maxCount > 0) {\n                rule.terrain = maxCountTerrian;\n                outSet.add(rule);\n            }\n        });\n        r2fSet.list.forEach(vec2 => {\n            let chunkCellInfo = TileMapTerrainUtil.getChunkCellInfo(tileMapLayer, vec2);\n            if (!ignoreEmpty) {\n                let rule = new TileMapTerrainRule(vec2.x, vec2.y, -1, neighborObject);\n                outSet.add(rule);\n            }\n            else if (chunkCellInfo) {\n                let cellData = chunkCellInfo.cell;\n                if (cellData.terrainSet == terrainSetId && cellData.terrain > -1) {\n                    let rule = new TileMapTerrainRule(vec2.x, vec2.y, cellData.terrain, neighborObject);\n                    outSet.add(rule);\n                }\n            }\n        });\n        return outSet;\n    }\n    static _fillRules(tileMapLayer, terrainSetId, neighborObject, allSet, ruleSet) {\n        let out = new Map();\n        allSet.list.forEach(vec2 => {\n            let params = this._getBestTerrainParams(tileMapLayer, vec2, terrainSetId, neighborObject, ruleSet);\n            let nRuleSet = this._getRulesByParams(tileMapLayer, params, vec2, terrainSetId, neighborObject);\n            for (let i = 0, len = nRuleSet.list.length; i < len; i++) {\n                let nRule = nRuleSet.list[i];\n                ruleSet.delete(nRule.x, nRule.y, nRule.data);\n                nRule.priority = 5;\n                ruleSet.add(nRule);\n            }\n            out.set(vec2, params);\n        });\n        return out;\n    }\n    static _getBestTerrainParams(tileMapLayer, pos, terrainSetId, terrainObject, ruleSet) {\n        let terrainSet = tileMapLayer.tileSet.getTerrainSet(terrainSetId);\n        if (!terrainSet)\n            return null;\n        let chunkCellInfo = TileMapTerrainUtil.getChunkCellInfo(tileMapLayer, pos);\n        let currentParams;\n        if (chunkCellInfo && chunkCellInfo.cell && chunkCellInfo.cell.terrainSet == terrainSetId) {\n            currentParams = chunkCellInfo.cell.getTerrainsParams();\n        }\n        else {\n            currentParams = new TerrainsParams();\n            currentParams.terrainSet = terrainSetId;\n        }\n        let neighbors = terrainSet._neighbors;\n        let nLen = neighbors.length;\n        let paramsList = tileMapLayer.tileSet._getParamsList(terrainSetId);\n        let sorceMap = new Map();\n        let paramsLength = paramsList.length;\n        for (let i = -1; i < paramsLength; i++) {\n            let list = paramsList[i];\n            if (!list)\n                continue;\n            let plen = list.length;\n            for (let index = 0; index < plen; index++) {\n                let score = 0;\n                let params = list[index];\n                let tempRule = new TileMapTerrainRule(pos.x, pos.y, params.terrain, terrainObject);\n                let rule = ruleSet.get(pos.x, pos.y, tempRule.data);\n                if (rule) {\n                    if (rule.terrain != params.terrain) {\n                        score += rule.priority;\n                    }\n                }\n                else if (params.terrain != currentParams.terrain) {\n                    continue;\n                }\n                let check = false;\n                for (let j = 0; j < nLen; j++) {\n                    let neighbor = neighbors[j];\n                    let neighborTerrain = params.terrain_peering_bits[neighbor];\n                    let tempNeighborRule = new TileMapTerrainRule(pos.x, pos.y, neighborTerrain, terrainObject);\n                    tempNeighborRule.setCellNeighbor(neighbor);\n                    let neighborRule = ruleSet.get(tempNeighborRule.x, tempNeighborRule.y, tempNeighborRule.data);\n                    if (neighborRule) {\n                        if (neighborRule.terrain != neighborTerrain) {\n                            score += neighborRule.priority;\n                        }\n                    }\n                    else if (neighborTerrain != currentParams.terrain_peering_bits[neighbor]) {\n                        check = true;\n                        break;\n                    }\n                }\n                if (check)\n                    continue;\n                sorceMap.set(params, score);\n            }\n        }\n        let minScore = Number.MAX_VALUE;\n        let minParams;\n        sorceMap.forEach((value, key) => {\n            if (value < minScore) {\n                minScore = value;\n                minParams = key;\n            }\n        });\n        if (!minParams) {\n            minParams = paramsList[-1][0];\n        }\n        return minParams;\n    }\n    static _getRulesByParams(tileMapLayer, params, pos, terrainSetId, neighborObject) {\n        let outSet = new TerrainRuleSet();\n        let baseRule = new TileMapTerrainRule(pos.x, pos.y, params.terrain, neighborObject);\n        outSet.add(baseRule);\n        let terrainSet = tileMapLayer.tileSet.getTerrainSet(terrainSetId);\n        let len = terrainSet._neighbors.length;\n        for (let i = 0; i < len; i++) {\n            let rule = baseRule.clone();\n            rule.terrain = params.terrain_peering_bits[terrainSet._neighbors[i]];\n            rule.setCellNeighbor(terrainSet._neighbors[i]);\n            outSet.add(rule);\n        }\n        return outSet;\n    }\n}\nexport class TerrainsParams {\n    constructor() {\n        this.terrain = -1;\n        this.terrain_peering_bits = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        this.links = new Set;\n        this._modified = false;\n    }\n    link(cellData) {\n        this.links.add(cellData);\n        this._modified = true;\n    }\n    get arr() {\n        if (this._modified) {\n            this._arr = Array.from(this.links);\n        }\n        return this._arr;\n    }\n    _getDebugs() {\n        this._debugs = [];\n        for (let i = 0, len = this.terrain_peering_bits.length; i < len; i++) {\n            if (this.terrain_peering_bits[i] > -1) {\n                this._debugs.push(TileMapCellNeighbor[i]);\n            }\n        }\n    }\n    clearLinks() {\n        this.links.clear();\n    }\n}\n","import { TileMapUtils } from \"./TileMapUtils\";\nimport { DirtyFlagType, TileMapDirtyFlag } from \"./TileMapEnum\";\nimport { Color } from \"../maths/Color\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { Vector4 } from \"../maths/Vector4\";\nimport { TerrainsParams } from \"./terrain/TileMapTerrain\";\nexport class TileSetCellOcclusionInfo {\n}\nexport class TileSetCellPhysicsInfo {\n}\nexport class TileSetCellNavigationInfo {\n}\nexport class TileSetCellData {\n    get transData() {\n        if (this._updateTrans)\n            this._updateTransData();\n        return this._transData;\n    }\n    get index() {\n        return this._index;\n    }\n    get cellowner() {\n        return this._cellowner;\n    }\n    set cellowner(value) {\n        this._cellowner = value;\n    }\n    get flip_h() {\n        return this._flip_h;\n    }\n    set flip_h(value) {\n        this._flip_h = value;\n        this._updateTrans = true;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_UVTRAN, DirtyFlagType.RENDER);\n    }\n    get flip_v() {\n        return this._flip_v;\n    }\n    set flip_v(value) {\n        this._flip_v = value;\n        this._updateTrans = true;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_UVTRAN, DirtyFlagType.RENDER);\n    }\n    get transpose() {\n        return this._transpose;\n    }\n    set transpose(value) {\n        this._transpose = value;\n        this._updateTrans = true;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_UVTRAN, DirtyFlagType.RENDER);\n    }\n    get rotateCount() {\n        return this._rotateCount;\n    }\n    set rotateCount(value) {\n        this._rotateCount = value;\n        this._updateTrans = true;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_UVTRAN, DirtyFlagType.RENDER);\n    }\n    get texture_origin() {\n        return this._texture_origin;\n    }\n    set texture_origin(value) {\n        value.cloneTo(this._texture_origin);\n        this._notifyDataChange(TileMapDirtyFlag.CELL_QUAD, DirtyFlagType.RENDER);\n    }\n    get material() {\n        return this._material;\n    }\n    set material(value) {\n        this._material = value;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_CHANGE, DirtyFlagType.RENDER);\n    }\n    get colorModulate() {\n        return this._colorModulate;\n    }\n    set colorModulate(value) {\n        this._colorModulate = value;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_COLOR, DirtyFlagType.RENDER);\n    }\n    get probability() {\n        return this._probability;\n    }\n    set probability(value) {\n        this._probability = value;\n    }\n    get z_index() {\n        return this._z_index;\n    }\n    set z_index(value) {\n        this._z_index = value;\n    }\n    get y_sort_origin() {\n        return this._y_sort_origin;\n    }\n    set y_sort_origin(value) {\n        this._y_sort_origin = value;\n    }\n    get terrainSet() {\n        return this._terrainSet;\n    }\n    set terrainSet(value) {\n        this._terrainSet = value;\n    }\n    get terrain() {\n        return this._terrain;\n    }\n    set terrain(value) {\n        this._terrain = value;\n    }\n    get physicsDatas() {\n        return this._physicsDatas;\n    }\n    set physicsDatas(value) {\n        this._physicsDatas = value;\n        this._notifyDataChange(TileMapDirtyFlag.CELL_PHYSICS, DirtyFlagType.PHYSICS);\n    }\n    get lightOccluderDatas() {\n        return this._lightOccluderDatas;\n    }\n    set lightOccluderDatas(value) {\n        this._lightOccluderDatas = value;\n    }\n    get customDatas() {\n        return this._customDatas;\n    }\n    set customDatas(value) {\n        this._customDatas = value;\n    }\n    get navigationDatas() {\n        return this._navigationDatas;\n    }\n    set navigationDatas(value) {\n        this._navigationDatas = value;\n    }\n    constructor() {\n        this._index = 0;\n        this._flip_h = false;\n        this._flip_v = false;\n        this._transpose = false;\n        this._rotateCount = 0;\n        this._terrainSet = -1;\n        this._terrain = -1;\n        this._terrain_peering_bits = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n        this._probability = 1;\n        this._destroyed = false;\n        this._updateTrans = true;\n        this._transData = new Vector4();\n        this.gid = -1;\n        this._notiveRenderTile = [];\n        this._flip_h = false;\n        this._flip_v = false;\n        this._transpose = false;\n        this._rotateCount = 0;\n        this._texture_origin = new Vector2(0, 0);\n        this._colorModulate = new Color(1, 1, 1, 1);\n        this._z_index = 0;\n        this._y_sort_origin = 0;\n    }\n    __init(owner, index) {\n        this._index = index;\n        this._cellowner = owner;\n        this.gid = TileMapUtils.getGid(this._index, this._cellowner.nativeId);\n    }\n    _notifyDataChange(data, type) {\n        if (!this.cellowner)\n            return;\n        this._notiveRenderTile.forEach(element => {\n            element._setDirtyFlag(this.gid, data, type);\n        });\n    }\n    _noticeRenderChange() {\n        if (!this.cellowner)\n            return;\n        this._notiveRenderTile.forEach(element => {\n            element.modifyRenderData();\n        });\n    }\n    _updateTransData() {\n        this._updateTrans = false;\n        let tileshape = this.cellowner.owner._owner.tileShape;\n        let out = TileMapUtils.getUvRotate(tileshape, this._flip_h, this._flip_v, this._transpose, this._rotateCount);\n        out.cloneTo(this._transData);\n    }\n    _removeNoticeRenderTile(layerRenderTile) {\n        let index = this._notiveRenderTile.indexOf(layerRenderTile);\n        if (index != -1)\n            this._notiveRenderTile.splice(index, 1);\n    }\n    _addNoticeRenderTile(layerRenderTile) {\n        if (this._notiveRenderTile.indexOf(layerRenderTile) == -1) {\n            this._notiveRenderTile.push(layerRenderTile);\n        }\n    }\n    set_lightOccluder(layerIndex, data) {\n        this._lightOccluderDatas[layerIndex] = data;\n    }\n    get_lightOccluder(layerIndex) {\n        return this._lightOccluderDatas[layerIndex];\n    }\n    set_terrainPeeringBit(index, terrainIndex) {\n        this._terrain_peering_bits[index] = terrainIndex;\n    }\n    get_terrainPeeringBit(index) {\n        return this._terrain_peering_bits[index];\n    }\n    set_physicsData(layerIndex, data) {\n        this._physicsDatas[layerIndex] = data;\n    }\n    get_physicsData(layerIndex) {\n        return this._physicsDatas[layerIndex];\n    }\n    getTerrainsParams() {\n        let params = new TerrainsParams;\n        params.terrainSet = this.terrainSet;\n        params.terrain = this.terrain;\n        params.terrain_peering_bits = this._terrain_peering_bits.slice(0, 16);\n        return params;\n    }\n    _getTerrainPeeringBits() {\n        return this._terrain_peering_bits;\n    }\n    set_navigationData(layerIndex, data) {\n        this._navigationDatas[layerIndex] = data;\n    }\n    get_navigationData(layerIndex) {\n        return this._navigationDatas[layerIndex];\n    }\n    set_customData(name, value) {\n        let layer = this._cellowner._owner._owner.getCustomDataLayer(name);\n        if (!layer)\n            return;\n        this._customDatas[layer.id] = value;\n    }\n    get_customData(name) {\n        let layer = this._cellowner._owner._owner.getCustomDataLayer(name);\n        if (!layer)\n            return null;\n        return this._customDatas[layer.id];\n    }\n    set_customDataById(id, value) {\n        this._customDatas[id] = value;\n    }\n    get_customDataById(id) {\n        return this._customDatas[id];\n    }\n    cloneTo(dst) {\n        dst._flip_h = this._flip_h;\n        dst._flip_v = this._flip_v;\n        dst._material = this._material;\n        dst._cellowner = this._cellowner;\n        dst._rotateCount = this._rotateCount;\n        dst._transpose = this._transpose;\n        dst._z_index = this._z_index;\n        dst._y_sort_origin = this._y_sort_origin;\n        this._transData.cloneTo(dst._transData);\n        dst._updateTrans = true;\n    }\n    destroy() {\n        this._notiveRenderTile.forEach(element => {\n            element._clearOneCell(this);\n        });\n        this._destroyed = true;\n    }\n}\nTileSetCellData._EMPTY = new TileSetCellData();\n","import { Laya } from \"../../Laya\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { DirtyFlagType, TileMapDirtyFlag } from \"./TileMapEnum\";\nimport { TileSetCellData } from \"./TileSetCellData\";\nexport var TileAnimationMode;\n(function (TileAnimationMode) {\n    TileAnimationMode[TileAnimationMode[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    TileAnimationMode[TileAnimationMode[\"RANDOM_START_TIMES\"] = 1] = \"RANDOM_START_TIMES\";\n})(TileAnimationMode || (TileAnimationMode = {}));\nexport class TileAlternativesData {\n    get localPos() {\n        return this._localPos;\n    }\n    set localPos(value) {\n        this._localPos = value;\n    }\n    get sizeByAtlas() {\n        return this._sizeByAtlas;\n    }\n    set sizeByAtlas(value) {\n        this._sizeByAtlas.setValue(value.x, value.y);\n        this._init();\n    }\n    get owner() {\n        return this._owner;\n    }\n    set owner(value) {\n        if (value === this._owner)\n            return;\n        this._owner = value;\n        this._init();\n    }\n    get tileDatas() {\n        return this._tileDatas;\n    }\n    set tileDatas(value) {\n        if (this._owner && value) {\n            for (let k in value) {\n                value[k].__init(this, parseInt(k));\n            }\n        }\n        this._tileDatas = value;\n    }\n    get animation_columns() {\n        return this._animation_columns;\n    }\n    set animation_columns(value) {\n        this._animation_columns = value;\n    }\n    get animation_separation() {\n        return this._animation_separation;\n    }\n    set animation_separation(value) {\n        this._animation_separation = value;\n    }\n    get animation_speed() {\n        return this._animation_speed;\n    }\n    set animation_speed(value) {\n        this._animation_speed = value;\n    }\n    get animationMode() {\n        return this._animationNode;\n    }\n    set animationMode(value) {\n        this._animationNode = value;\n    }\n    set animationFrams(frams) {\n        if (!frams)\n            frams = [];\n        let oldLength = this._animationFrams.length;\n        let newLength = frams.length;\n        this._animationFrams = frams;\n        this._animationFramsTime = [];\n        this._animationFramsTime.length = frams.length;\n        this._totalAnimatorTime = 0;\n        for (var i = 0; i < frams.length; i++) {\n            this._animationFramsTime[i] = this._totalAnimatorTime;\n            this._totalAnimatorTime += frams[i];\n        }\n        if (oldLength != newLength && (oldLength > 1 || newLength > 1)) {\n            for (let k in this._tileDatas) {\n                this._tileDatas[k]._noticeRenderChange();\n            }\n        }\n    }\n    get animationFrams() {\n        return this._animationFrams;\n    }\n    constructor() {\n        this._animation_columns = 0;\n        this._animation_separation = new Vector2();\n        this._animation_speed = 1.0;\n        this._animationFrams = [];\n        this._frameIndex = 0;\n        this._animatorUpdateMask = 0;\n        this._localPos = new Vector2();\n        this._sizeByAtlas = new Vector2();\n        this._uvOri = new Vector2();\n        this._uvExtends = new Vector2();\n        this._regionSize = new Vector2();\n        this._tileDatas = {};\n        this._sizeByAtlas.setValue(1, 1);\n    }\n    _initialIndexFIrstCellData() {\n        const celldata = new TileSetCellData();\n        celldata.__init(this, 0);\n        this._tileDatas[0] = celldata;\n    }\n    _hasAni() {\n        return this._animationFrams.length > 1;\n    }\n    _init() {\n        if (!this._owner) {\n            return;\n        }\n        this._owner._getTileUVExtends(this._sizeByAtlas, this._regionSize);\n        let atlasSize = this._owner.atlasSize;\n        this._uvExtends.x = Math.max(this._regionSize.x - 1, 0) / atlasSize.x;\n        this._uvExtends.y = Math.max(this._regionSize.y - 1, 0) / atlasSize.y;\n        this._updateOriginUV(0, 0, TileMapDirtyFlag.CELL_QUAD | TileMapDirtyFlag.CELL_QUADUV);\n        this.nativeId = this._owner._getGlobalAlternativesId(this._localPos.x, this._localPos.y);\n        if (this._tileDatas) {\n            for (let k in this._tileDatas) {\n                this._tileDatas[k].__init(this, parseInt(k));\n            }\n        }\n    }\n    _updateOriginUV(x, y, data) {\n        this._uvOri.setValue(this._localPos.x + x, this._localPos.y + y);\n        this._owner._getTilePixelOrgin(this._uvOri, this._uvOri);\n        let atlasSize = this._owner.atlasSize;\n        this._uvOri.x = (this._uvOri.x + this._regionSize.x * 0.5) / atlasSize.x;\n        this._uvOri.y = (this._uvOri.y + this._regionSize.y * 0.5) / atlasSize.y;\n        for (let k in this._tileDatas) {\n            this._tileDatas[k]._notifyDataChange(data, DirtyFlagType.RENDER);\n        }\n    }\n    _getTextureUVOri() {\n        return this._uvOri;\n    }\n    _getTextureUVExtends() {\n        return this._uvExtends;\n    }\n    _getRegionSize() {\n        return this._regionSize;\n    }\n    _updateAnimator() {\n        if (this._animationFrams.length <= 1 || Laya.timer.currFrame == this._animatorUpdateMask) {\n            return;\n        }\n        this._animatorUpdateMask = Laya.timer.currFrame;\n        let oldFrameIndex = this._frameIndex;\n        let cur = (Laya.timer.totalTime / 1000) * this._animation_speed % this._totalAnimatorTime;\n        if (cur < this._animationFramsTime[this._frameIndex]) {\n            this._frameIndex = 0;\n        }\n        let j = 0;\n        for (var i = this._frameIndex, n = this._animationFrams.length; i < n; i++) {\n            if (cur >= this._animationFramsTime[i]) {\n                this._frameIndex = i;\n            }\n        }\n        this._frameIndex += j;\n        if (oldFrameIndex == this._frameIndex) {\n            return;\n        }\n        let x;\n        let y;\n        if (this._animation_columns != 0) {\n            x = this._frameIndex % this._animation_columns;\n            y = Math.floor(this._frameIndex / this._animation_columns);\n        }\n        else {\n            x = this._frameIndex;\n            y = 0;\n        }\n        this._updateOriginUV(x * (this._sizeByAtlas.x + this._animation_separation.x), y * (this._sizeByAtlas.y + this._animation_separation.y), TileMapDirtyFlag.CELL_QUADUV);\n    }\n    getCelldata(index) {\n        return this._tileDatas[index];\n    }\n    removeCellData(index) {\n        let celldata = this._tileDatas[index];\n        if (celldata) {\n            celldata.destroy();\n            delete this._tileDatas[index];\n        }\n    }\n    addCellData(index) {\n        let celldata = this._tileDatas[index];\n        if (celldata) {\n            return celldata;\n        }\n        celldata = new TileSetCellData();\n        celldata.__init(this, index);\n        this._tileDatas[index] = celldata;\n        return celldata;\n    }\n    destroy() {\n    }\n}\n","#define SHADER_NAME TileMap2DVS\n\n\n#include \"TileMapVertex.glsl\"\n\nuniform vec2 u_TileSize;\n\nvoid main(){\n    vertexInfo info;\n    getVertexInfoTileMap(info);\n   \n    vec4 wordpos;\n    getPosition(info,wordpos);\n    setVertexInfo(info);\n\n    #ifdef LIGHT2D_ENABLE\n        lightAndShadow(info);\n    #endif\n    \n    gl_Position=wordpos;\n}","#define SHADER_NAME TileMap2DFS\n#include \"TileMapFragment.glsl\"\n\nvoid main() {\n    vec4 textureColor = getTextureColor(v_texcoord);\n\n    #ifdef LIGHT2D_ENABLE\n        lightAndShadow(textureColor);\n    #endif\n    \n    gl_FragColor = textureColor*v_color;\n}","// struct TileMapVertexInfo{\n//     vec4 color;\n//     vec2 uv;\n//     vec2 pos;\n//     vec2 lightUV;\n// };\n\nvarying vec2 v_pos;\n\n\n","\n#include \"Sprite2DVertex.glsl\";\n\n#include \"TileMapCommon.glsl\";\n\nvec2 getVertexPos(){\n    float x=a_cellPosScale.x+a_position.x*a_cellPosScale.z;\n    float y=a_cellPosScale.y+a_position.y*a_cellPosScale.w;\n    return vec2(x,y);\n}\n\nvec2 getVertexUv(){\n    float u=a_cellUVOriScale.z*dot(a_texcoord,a_celluvTrans.xy)+a_cellUVOriScale.x;\n    float v=a_cellUVOriScale.w*dot(a_texcoord,a_celluvTrans.zw)+a_cellUVOriScale.y;\n    return vec2(u,v);\n}\n\nvec4 getVertexColor(){\n    return a_color*a_cellColor;\n}\n\nvoid getVertexInfoTileMap(inout vertexInfo info){\n    info.pos=getVertexPos();\n    info.color=getVertexColor();\n    info.uv=getVertexUv();\n\n    #ifdef LIGHT2D_ENABLE\n        vec2 global;\n        getGlobalPos(info.pos, global);\n        info.lightUV.x = (global.x - u_LightAndShadow2DParam.x) / u_LightAndShadow2DParam.z;\n        info.lightUV.y = 1.0 - (global.y - u_LightAndShadow2DParam.y) / u_LightAndShadow2DParam.w;\n    #endif\n}\n\nvoid getPosition(in vertexInfo info , inout vec4 pos){\n    vec2 a_pos=info.pos;\n    vec2 globalPos;\n    getGlobalPos(a_pos.xy,globalPos);\n    vec2 viewPos;\n    getViewPos(globalPos,viewPos);\n    v_cliped = getClipedInfo(viewPos);\n    getProjectPos(viewPos,pos);\n}\n\nvoid setVertexInfo(in vertexInfo info){\n    v_texcoord=info.uv;\n    v_color=info.color;\n    v_pos=info.pos;\n}","#include \"TileMapCommon.glsl\"\n\n#include \"Sprite2DFrag.glsl\";\n\nuniform sampler2D u_render2DTexture;\nvec4 getTextureColor(in vec2 uv){\n    return texture2D(u_render2DTexture, uv);\n}","import TileMapVS from \"./TileMap.vs\";\nimport TileMapFS from \"./TileMap.fs\";\nimport TileMapCommonGLSL from \"./TileMapCommon.glsl\";\nimport TileMapVertexGLSL from \"./TileMapVertex.glsl\";\nimport TileMapFragmentGLSL from \"./TileMapFragment.glsl\";\nimport { ShaderDataType } from \"../../RenderDriver/DriverDesign/RenderDevice/ShaderData\";\nimport { Shader3D, ShaderFeatureType } from \"../../RenderEngine/RenderShader/Shader3D\";\nimport { SubShader } from \"../../RenderEngine/RenderShader/SubShader\";\nimport { VertexDeclaration } from \"../../RenderEngine/VertexDeclaration\";\nimport { VertexElement } from \"../../renders/VertexElement\";\nimport { VertexElementFormat } from \"../../renders/VertexElementFormat\";\nexport class TileMapShaderInit {\n    static __init__() {\n        let attributeMap = {\n            'a_position': [0, ShaderDataType.Vector2],\n            'a_texcoord': [1, ShaderDataType.Vector2],\n            'a_color': [2, ShaderDataType.Vector4],\n            'a_cellColor': [3, ShaderDataType.Vector4],\n            'a_cellPosScale': [4, ShaderDataType.Vector4],\n            'a_cellUVOriScale': [5, ShaderDataType.Vector4],\n            'a_celluvTrans': [6, ShaderDataType.Vector4],\n        };\n        Shader3D.addInclude(\"TileMapCommon.glsl\", TileMapCommonGLSL);\n        Shader3D.addInclude(\"TileMapVertex.glsl\", TileMapVertexGLSL);\n        Shader3D.addInclude(\"TileMapFragment.glsl\", TileMapFragmentGLSL);\n        let shader = Shader3D.add(\"TileMapLayer\", false, false);\n        shader.shaderType = ShaderFeatureType.Effect;\n        let subShader = new SubShader(attributeMap, {}, {});\n        shader.addSubShader(subShader);\n        let forwardPass = subShader.addShaderPass(TileMapVS, TileMapFS);\n        TileMapShaderInit._tileMapPositionUVColorDec = new VertexDeclaration(32, [\n            new VertexElement(0, VertexElementFormat.Vector2, 0),\n            new VertexElement(8, VertexElementFormat.Vector2, 1),\n            new VertexElement(16, VertexElementFormat.Vector4, 2),\n        ]);\n        TileMapShaderInit._tileMapCellColorInstanceDec = new VertexDeclaration(16, [\n            new VertexElement(0, VertexElementFormat.Vector4, 3),\n        ]);\n        TileMapShaderInit._tileMapCellPosScaleDec = new VertexDeclaration(16, [\n            new VertexElement(0, VertexElementFormat.Vector4, 4),\n        ]);\n        TileMapShaderInit._tileMapCellUVOriScaleDec = new VertexDeclaration(16, [\n            new VertexElement(0, VertexElementFormat.Vector4, 5),\n        ]);\n        TileMapShaderInit._tileMapCellUVTrans = new VertexDeclaration(16, [\n            new VertexElement(0, VertexElementFormat.Vector4, 6),\n        ]);\n    }\n}\n","import { LayaGL } from \"../layagl/LayaGL\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { BufferUsage } from \"../RenderEngine/RenderEnum/BufferTargetType\";\nimport { DrawType } from \"../RenderEngine/RenderEnum/DrawType\";\nimport { IndexFormat } from \"../RenderEngine/RenderEnum/IndexFormat\";\nimport { MeshTopology } from \"../RenderEngine/RenderEnum/RenderPologyMode\";\nimport { DIRTY_TYPES, DirtyFlagType, TileLayerSortMode, TileMapDirtyFlag } from \"./TileMapEnum\";\nimport { TileMapShaderInit } from \"./shader/TileMapShaderInit\";\nimport { PolygonPoint2D } from \"../Light2D/PolygonPoint2D\";\nexport class ChunkCellInfo {\n    constructor(cellx, celly, chuckLocalindex, zOrider = 0, cell) {\n        this.chuckLocalindex = chuckLocalindex;\n        this.zOrderValue = zOrider;\n        this.cellx = cellx;\n        this.celly = celly;\n        this.cell = cell;\n    }\n}\nexport class TileMapChunkData {\n    constructor() {\n        this._reCreateRenderData = true;\n        this._refGids = [];\n        this._dirtyFlags = [];\n        this._cellDataMap = {};\n        this._chuckCellList = [];\n        this._animatorAlterArray = new Map();\n        this._cellDataRefMap = [];\n        this._tileSize = new Vector2();\n        this._reCreateRenderData = true;\n        this._oriCellIndex = new Vector2(0, 0);\n        this._renderElementArray = [];\n        for (let i = 0; i < DIRTY_TYPES; i++)\n            this._dirtyFlags[i] = new Map;\n    }\n    get cellDataRefMap() {\n        return this._cellDataRefMap;\n    }\n    set cellDataRefMap(data) {\n        if (!data || !Object.keys(data).length)\n            return;\n        for (let i = 0, len = data.length; i < len; i++) {\n            if (data[i]) {\n                this._refGids.push(i);\n            }\n            else {\n                delete data[i];\n            }\n        }\n        this._cellDataRefMap = data;\n        this._reCreateRenderData = true;\n    }\n    get compressData() {\n        let out = {};\n        this._refGids.forEach(gid => {\n            if (this._cellDataRefMap[gid])\n                out[gid] = this._cellDataRefMap[gid];\n        });\n        return out;\n    }\n    set compressData(value) {\n        if (!value || !Object.keys(value).length)\n            return;\n        let nDdata = [];\n        for (const key in value) {\n            let gid = parseInt(key);\n            nDdata[gid] = value[key];\n            this._refGids.push(gid);\n        }\n        this._cellDataRefMap = nDdata;\n        this._reCreateRenderData = true;\n    }\n    _parseCellDataRefMap() {\n        if (this._chuckCellList.length)\n            return;\n        let layer = this._tileLayer;\n        let tileSet = layer.tileSet;\n        if (!tileSet)\n            return;\n        let chunk = this._tileLayer._chunk;\n        let localPos = Vector2.TEMP;\n        for (let i = this._refGids.length - 1; i > -1; i--) {\n            let gid = this._refGids[i];\n            let localIndexs = this._cellDataRefMap[gid];\n            if (localIndexs) {\n                let cellData = tileSet.getCellDataByGid(gid);\n                if (cellData) {\n                    cellData._addNoticeRenderTile(this);\n                    for (let i = 0, len = localIndexs.length; i < len; i++) {\n                        let index = localIndexs[i];\n                        chunk._getCellPosByChunkPosAndIndex(0, 0, index, localPos);\n                        let chuckCellInfo = new ChunkCellInfo(localPos.x, localPos.y, index, cellData.z_index, cellData);\n                        this._cellDataMap[index] = chuckCellInfo;\n                        this._chuckCellList.push(chuckCellInfo);\n                    }\n                    this._setDirtyFlag(gid, TileMapDirtyFlag.CELL_CHANGE);\n                }\n                else {\n                    delete this._cellDataRefMap[gid];\n                    this._refGids.splice(i, 1);\n                }\n            }\n        }\n        this._reCreateRenderData = true;\n    }\n    _mergeBuffer(datas, minRange, maxRange) {\n        const tempVec2 = Vector2.TEMP;\n        let infos = this._chuckCellList;\n        for (let i = 0, len = infos.length; i < len; i++) {\n            let info = infos[i];\n            this._tileLayer._chunk._getCellPosByChunkPosAndIndex(0, 0, info.chuckLocalindex, tempVec2);\n            let cellX = tempVec2.x + this._oriCellIndex.x;\n            let cellY = tempVec2.y + this._oriCellIndex.y;\n            minRange.x = Math.min(minRange.x, cellX);\n            minRange.y = Math.min(minRange.y, cellY);\n            maxRange.x = Math.max(maxRange.x, cellX);\n            maxRange.y = Math.max(maxRange.y, cellY);\n            let row = datas.get(cellY);\n            if (!row) {\n                row = new Map();\n                datas.set(cellY, row);\n            }\n            row.set(cellX, info.cell);\n        }\n    }\n    _setBuffer(datas, minRange, maxRange, tileSize) {\n        this._clearCell();\n        const chunk = this._tileLayer._chunk;\n        let ocix = this._oriCellIndex.x;\n        let ociy = this._oriCellIndex.y;\n        let starx = Math.max(minRange.x, ocix);\n        let stary = Math.max(minRange.y, ociy);\n        let endx = Math.min(maxRange.x, ocix + tileSize - 1);\n        let endy = Math.min(maxRange.y, ociy + tileSize - 1);\n        let mark = 0;\n        for (var j = stary; j <= endy; j++) {\n            let row = datas.get(j);\n            if (!row)\n                continue;\n            for (var i = starx; i <= endx; i++) {\n                let data = row.get(i);\n                if (data) {\n                    const index = chunk._getChunkIndexByCellPos(i - ocix, j - ociy);\n                    this._setCell(index, data);\n                    mark++;\n                }\n            }\n        }\n        this._reCreateRenderData = true;\n        return mark;\n    }\n    _updateChunkData(chunkX, chunkY) {\n        this.chunkX = chunkX;\n        this.chunkY = chunkY;\n        this._tileLayer._chunk._getCellPosByChunkPosAndIndex(chunkX, chunkY, 0, this._oriCellIndex);\n    }\n    _upeateGridData() {\n        if (this._sortMode != this._tileLayer.sortMode) {\n            this._sortMode = this._tileLayer.sortMode;\n            this._reCreateRenderData = true;\n        }\n        let tileSet = this._tileLayer.tileSet;\n        if (this._animatorAlterArray.size > 0) {\n            this._animatorAlterArray.forEach((value, key) => {\n                value._updateAnimator();\n            });\n        }\n        let tileShape = tileSet.tileShape;\n        if (this._gridShape != tileShape) {\n            this._gridShape = tileShape;\n            this._refGids.forEach(gid => {\n                this._setDirtyFlag(gid, TileMapDirtyFlag.CELL_QUAD, DirtyFlagType.RENDER);\n            });\n            this._reCreateRenderData = true;\n        }\n        if (!Vector2.equals(this._tileSize, tileSet.tileSize)) {\n            tileSet.tileSize.cloneTo(this._tileSize);\n            this._refGids.forEach(gid => {\n                this._setDirtyFlag(gid, TileMapDirtyFlag.CELL_QUAD | TileMapDirtyFlag.CELL_QUADUV, DirtyFlagType.RENDER);\n            });\n        }\n    }\n    _updateRenderData() {\n        if (this._reCreateRenderData) {\n            this._reCreateRenderData = false;\n            this._clearRenderElement();\n            if (this._chuckCellList.length == 0)\n                return;\n            switch (this._tileLayer.sortMode) {\n                case TileLayerSortMode.YSort:\n                    this._chuckCellList.sort((a, b) => {\n                        if (a.celly == b.celly)\n                            return a.cellx - b.cellx;\n                        return a.celly - b.celly;\n                    });\n                    break;\n                case TileLayerSortMode.XSort:\n                    this._chuckCellList.sort((a, b) => {\n                        if (a.cellx - b.cellx) {\n                            return a.celly - b.celly;\n                        }\n                        return a.cellx - b.cellx;\n                    });\n                    break;\n                case TileLayerSortMode.ZINDEXSORT:\n                    this._chuckCellList.sort((a, b) => {\n                        if (a.zOrderValue == b.zOrderValue) {\n                            return a.chuckLocalindex - b.chuckLocalindex;\n                        }\n                        else {\n                            return a.zOrderValue - b.zOrderValue;\n                        }\n                    });\n                    break;\n            }\n            let lastCell;\n            let tempCellIndexArray = [];\n            this._animatorAlterArray.clear();\n            for (var i = 0; i < this._chuckCellList.length; i++) {\n                let chuckCellInfoData = this._chuckCellList[i];\n                let cellData = chuckCellInfoData.cell;\n                if (!cellData)\n                    continue;\n                if (cellData.cellowner._hasAni())\n                    this._animatorAlterArray.set(cellData.cellowner.nativeId, cellData.cellowner);\n                if (!lastCell) {\n                    lastCell = cellData;\n                    tempCellIndexArray.push(chuckCellInfoData);\n                    continue;\n                }\n                if (this._breakBatch(lastCell, cellData)) {\n                    lastCell = cellData;\n                    this._createRenderElement(tempCellIndexArray);\n                }\n                tempCellIndexArray.push(chuckCellInfoData);\n            }\n            this._createRenderElement(tempCellIndexArray);\n        }\n        else {\n            let dirtyFlag = this._dirtyFlags[DirtyFlagType.RENDER];\n            if (dirtyFlag.size > 0) {\n                let pos = Vector2.TEMP;\n                dirtyFlag.forEach((value, key) => {\n                    let cellDataUseArray = this._cellDataRefMap[key];\n                    if (cellDataUseArray) {\n                        cellDataUseArray.forEach(element => {\n                            let chuckCellinfo = this._cellDataMap[element];\n                            let cellData = chuckCellinfo.cell;\n                            let nativesData = cellData.cellowner;\n                            let tilemapRenderElementInfo = this._renderElementArray[chuckCellinfo._renderElementIndex];\n                            if (value & TileMapDirtyFlag.CELL_CHANGE || (value & TileMapDirtyFlag.CELL_QUAD)) {\n                                let data = tilemapRenderElementInfo.cacheData[TileMapChunkData.instanceposScalBufferIndex];\n                                tilemapRenderElementInfo.updateFlag[TileMapChunkData.instanceposScalBufferIndex] = true;\n                                this._getCellPos(chuckCellinfo, pos);\n                                let posOffset = cellData.texture_origin;\n                                let dataoffset = chuckCellinfo._cellPosInRenderData * 4;\n                                data[dataoffset] = pos.x + posOffset.x;\n                                data[dataoffset + 1] = pos.y + posOffset.y;\n                                let uvSize = nativesData._getRegionSize();\n                                data[dataoffset + 2] = uvSize.x;\n                                data[dataoffset + 3] = uvSize.y;\n                            }\n                            if ((value & TileMapDirtyFlag.CELL_CHANGE) || (value & TileMapDirtyFlag.CELL_QUADUV)) {\n                                let data = tilemapRenderElementInfo.cacheData[TileMapChunkData.instanceuvOriScalBufferIndex];\n                                tilemapRenderElementInfo.updateFlag[TileMapChunkData.instanceuvOriScalBufferIndex] = true;\n                                let dataoffset = chuckCellinfo._cellPosInRenderData * 4;\n                                let uvOri = nativesData._getTextureUVOri();\n                                let uvextend = nativesData._getTextureUVExtends();\n                                data[dataoffset] = uvOri.x;\n                                data[dataoffset + 1] = uvOri.y;\n                                data[dataoffset + 2] = uvextend.x;\n                                data[dataoffset + 3] = uvextend.y;\n                            }\n                            if ((value & TileMapDirtyFlag.CELL_CHANGE) || (value & TileMapDirtyFlag.CELL_COLOR)) {\n                                let data = tilemapRenderElementInfo.cacheData[TileMapChunkData.instanceColorBufferIndex];\n                                tilemapRenderElementInfo.updateFlag[TileMapChunkData.instanceColorBufferIndex] = true;\n                                let dataoffset = chuckCellinfo._cellPosInRenderData * 4;\n                                let color = cellData.colorModulate;\n                                data[dataoffset] = color.r;\n                                data[dataoffset + 1] = color.g;\n                                data[dataoffset + 2] = color.b;\n                                data[dataoffset + 3] = color.a;\n                            }\n                            if ((value & TileMapDirtyFlag.CELL_CHANGE) || (value & TileMapDirtyFlag.CELL_UVTRAN)) {\n                                let data = tilemapRenderElementInfo.cacheData[TileMapChunkData.instanceuvTransBufferIndex];\n                                tilemapRenderElementInfo.updateFlag[TileMapChunkData.instanceuvTransBufferIndex] = true;\n                                let dataoffset = chuckCellinfo._cellPosInRenderData * 4;\n                                let transData = cellData.transData;\n                                data[dataoffset] = transData.x;\n                                data[dataoffset + 1] = transData.y;\n                                data[dataoffset + 2] = transData.z;\n                                data[dataoffset + 3] = transData.w;\n                            }\n                        });\n                    }\n                });\n                this._renderElementArray.forEach(element => {\n                    for (var updateindex = 0, updatelength = 4; updateindex < updatelength; updateindex++) {\n                        if (element.updateFlag[updateindex]) {\n                            let data = element.cacheData[updateindex];\n                            let verBuffer = element.renderElement.geometry.bufferState._vertexBuffers[updateindex + 1];\n                            verBuffer.setData(data.buffer, 0, 0, data.byteLength);\n                            element.updateFlag[updateindex] = false;\n                        }\n                    }\n                });\n                dirtyFlag.clear();\n            }\n        }\n    }\n    _updatePhysicsData() {\n        if (!this._tileLayer.tileMapPhysics.enable || !this._dirtyFlags[DirtyFlagType.PHYSICS].size)\n            return;\n        let physicsLayers = this._tileLayer.tileSet.physicsLayers;\n        if (!physicsLayers || !physicsLayers.length)\n            return;\n        let physics = this._tileLayer.tileMapPhysics;\n        let dirtyFlag = this._dirtyFlags[DirtyFlagType.PHYSICS];\n        let rigidBody = this._rigidBody;\n        if (!rigidBody) {\n            rigidBody = physics.createRigidBody();\n        }\n        let layerCount = physicsLayers.length;\n        let chunk = this._tileLayer._chunk;\n        let pos = Vector2.TEMP;\n        let scaleX = this._tileLayer.owner.scaleX;\n        let scaleY = this._tileLayer.owner.scaleY;\n        dirtyFlag.forEach((value, key) => {\n            let cellDataUseArray = this._cellDataRefMap[key];\n            if (cellDataUseArray) {\n                cellDataUseArray.forEach(element => {\n                    let chunkCellInfo = this._cellDataMap[element];\n                    let cellData = chunkCellInfo.cell;\n                    let cellDatas = cellData.physicsDatas;\n                    if (cellDatas && (value & TileMapDirtyFlag.CELL_CHANGE) || (value & TileMapDirtyFlag.CELL_PHYSICS)) {\n                        chunk._getPixelByChunkPosAndIndex(this.chunkX, this.chunkY, chunkCellInfo.chuckLocalindex, pos);\n                        let ofx = pos.x;\n                        let ofy = pos.y;\n                        let datas = chunkCellInfo._physicsDatas;\n                        if (!datas) {\n                            datas = [];\n                            chunkCellInfo._physicsDatas = datas;\n                        }\n                        for (let i = 0; i < layerCount; i++) {\n                            let physicslayer = physicsLayers[i];\n                            let pIndex = physicslayer.id;\n                            if (!cellDatas[pIndex])\n                                continue;\n                            let data = datas[pIndex];\n                            if (data) {\n                                physics.destroyFixture(rigidBody, data);\n                            }\n                            let shape = cellDatas[pIndex].shape;\n                            if (!shape)\n                                continue;\n                            let shapeLength = shape.length;\n                            let nShape = new Array(shapeLength);\n                            for (let j = 0; j < shapeLength; j += 2) {\n                                nShape[j] = (shape[j] + ofx) * scaleX;\n                                nShape[j + 1] = (shape[j + 1] + ofy) * scaleY;\n                            }\n                            data = physics.createFixture(rigidBody, physicslayer, nShape);\n                        }\n                    }\n                });\n            }\n        });\n        dirtyFlag.clear();\n    }\n    _updateLightShadowData() {\n        if (!this._tileLayer.tileMapOccluder.enable || !this._dirtyFlags[DirtyFlagType.OCCLUSION].size)\n            return;\n        let lightInfoLayers = this._tileLayer.tileSet.lightInfoLayers;\n        if (!lightInfoLayers || !lightInfoLayers.length)\n            return;\n        let agent = this._tileLayer.tileMapOccluder;\n        let dirtyFlag = this._dirtyFlags[DirtyFlagType.OCCLUSION];\n        let layerCount = lightInfoLayers.length;\n        let chunk = this._tileLayer._chunk;\n        let pos = Vector2.TEMP;\n        dirtyFlag.forEach((value, key) => {\n            let cellDataUseArray = this._cellDataRefMap[key];\n            if (cellDataUseArray) {\n                cellDataUseArray.forEach(element => {\n                    let chunkCellInfo = this._cellDataMap[element];\n                    let cellData = chunkCellInfo.cell;\n                    let cellDatas = cellData.lightOccluderDatas;\n                    if (cellDatas && (value & TileMapDirtyFlag.CELL_CHANGE) || (value & TileMapDirtyFlag.CELL_LIGHTSHADOW)) {\n                        chunk._getPixelByChunkPosAndIndex(this.chunkX, this.chunkY, chunkCellInfo.chuckLocalindex, pos);\n                        let ofx = pos.x;\n                        let ofy = pos.y;\n                        let datas = chunkCellInfo._occluderDatas;\n                        if (!datas) {\n                            datas = [];\n                            chunkCellInfo._occluderDatas = datas;\n                        }\n                        for (let i = 0; i < layerCount; i++) {\n                            let layer = lightInfoLayers[i];\n                            let pIndex = layer.id;\n                            if (!cellDatas[pIndex])\n                                continue;\n                            let shape = cellDatas[pIndex].shape;\n                            if (!shape)\n                                continue;\n                            let shapeLength = shape.length;\n                            let point = new PolygonPoint2D;\n                            let data = datas[pIndex];\n                            if (!data) {\n                                data = agent.addOccluder(point, layer.layerMask);\n                                datas[pIndex] = data;\n                            }\n                            for (let j = 0; j < shapeLength; j += 2)\n                                point.addPoint(shape[j] + ofx, shape[j + 1] + ofy);\n                            data.polygonPoint = point;\n                        }\n                    }\n                });\n            }\n        });\n        dirtyFlag.clear();\n    }\n    _updateNavigationData() {\n    }\n    _breakBatch(lastCell, curCell) {\n        if (lastCell == null && curCell == null)\n            return true;\n        if (lastCell.cellowner.owner.id != curCell.cellowner.owner.id)\n            return true;\n        if (lastCell.material == null && curCell.material == null)\n            return false;\n        return lastCell.material != curCell.material;\n    }\n    _createRenderElement(chuckCellList) {\n        if (chuckCellList.length == 0)\n            return;\n        let cellNum = chuckCellList.length;\n        let cellData = chuckCellList[0].cell;\n        let mat = cellData.material;\n        let nativesData = cellData.cellowner;\n        let texture = nativesData.owner.atlas;\n        if (!mat) {\n            mat = this._material;\n        }\n        else {\n        }\n        if (mat == null) {\n            mat = this._tileLayer.getDefalutMaterial(texture);\n        }\n        let element = TileChunkPool._getTileRenderElement(cellNum);\n        let renderElement = element.renderElement;\n        let cachDatas = element.cacheData;\n        let instanceColor = cachDatas[TileMapChunkData.instanceColorBufferIndex];\n        let instanceposScal = cachDatas[TileMapChunkData.instanceposScalBufferIndex];\n        let instanceuvOriScal = cachDatas[TileMapChunkData.instanceuvOriScalBufferIndex];\n        let instanceuvTrans = cachDatas[TileMapChunkData.instanceuvTransBufferIndex];\n        let pos = Vector2.TEMP;\n        let renderElementLength = this._renderElementArray.length;\n        for (var i = 0; i < cellNum; i++) {\n            let chuckcellInfo = chuckCellList[i];\n            let curCell = chuckcellInfo.cell;\n            let curNative = curCell.cellowner;\n            chuckcellInfo._cellPosInRenderData = i;\n            chuckcellInfo._renderElementIndex = renderElementLength;\n            this._getCellPos(chuckcellInfo, pos);\n            let color = curCell.colorModulate;\n            let dataOffset = i * 4;\n            instanceColor[dataOffset] = color.r;\n            instanceColor[dataOffset + 1] = color.g;\n            instanceColor[dataOffset + 2] = color.b;\n            instanceColor[dataOffset + 3] = color.a;\n            let posOffset = curCell.texture_origin;\n            instanceposScal[dataOffset] = pos.x + posOffset.x;\n            instanceposScal[dataOffset + 1] = pos.y + posOffset.y;\n            let uvSize = curNative._getRegionSize();\n            instanceposScal[dataOffset + 2] = uvSize.x;\n            instanceposScal[dataOffset + 3] = uvSize.y;\n            let uvOri = curNative._getTextureUVOri();\n            let uvextend = curNative._getTextureUVExtends();\n            instanceuvOriScal[dataOffset] = uvOri.x;\n            instanceuvOriScal[dataOffset + 1] = uvOri.y;\n            instanceuvOriScal[dataOffset + 2] = uvextend.x;\n            instanceuvOriScal[dataOffset + 3] = uvextend.y;\n            const transData = curCell.transData;\n            instanceuvTrans[dataOffset] = transData.x;\n            instanceuvTrans[dataOffset + 1] = transData.y;\n            instanceuvTrans[dataOffset + 2] = transData.z;\n            instanceuvTrans[dataOffset + 3] = transData.w;\n        }\n        let instanceColorBuffer = TileChunkPool._getVertexBuffer(TileMapShaderInit._tileMapCellColorInstanceDec, instanceColor);\n        let instanceposScalBuffer = TileChunkPool._getVertexBuffer(TileMapShaderInit._tileMapCellPosScaleDec, instanceposScal);\n        let instanceuvOriScalBuffer = TileChunkPool._getVertexBuffer(TileMapShaderInit._tileMapCellUVOriScaleDec, instanceuvOriScal);\n        let instanceuvTransBuffer = TileChunkPool._getVertexBuffer(TileMapShaderInit._tileMapCellUVTrans, instanceuvTrans);\n        let geometry = renderElement.geometry;\n        geometry.setDrawElemenParams(this._tileLayer._grid._getBaseIndexCount(), 0);\n        renderElement.materialShaderData = mat.shaderData;\n        renderElement.subShader = mat.shader.getSubShaderAt(0);\n        renderElement.value2DShaderData = this._tileLayer._spriteShaderData;\n        let binVertexBuffers = [this._tileLayer._grid._getBaseVertexBuffer(), instanceColorBuffer, instanceposScalBuffer, instanceuvOriScalBuffer, instanceuvTransBuffer];\n        let indexBuffer = this._tileLayer._grid._getBaseIndexBuffer();\n        geometry.bufferState.applyState(binVertexBuffers, indexBuffer);\n        geometry.instanceCount = cellNum;\n        chuckCellList.length = 0;\n        this._renderElementArray.push(element);\n    }\n    _clearRenderElement() {\n        for (var i = 0, n = this._renderElementArray.length; i < n; i++) {\n            TileChunkPool._recoverTileRenderElement(this._renderElementArray[i]);\n        }\n        this._renderElementArray.length = 0;\n    }\n    _setRenderData(datas) {\n        let maxCount = this._tileLayer._chunk.maxCell;\n        if (datas.length > maxCount) {\n            console.error(\"setRenderData error\");\n            return;\n        }\n        this._updateChunkData(datas.x, datas.y);\n        let tileSet = this._tileLayer.tileSet;\n        let tiles = datas.tiles;\n        let temp = {};\n        for (let i = 0, len = tiles.length; i < len; i += 2) {\n            let gid = tiles[i + 1];\n            let celldata = temp[gid];\n            if (!celldata) {\n                celldata = tileSet.getCellDataByGid(gid);\n                temp[gid] = celldata;\n            }\n            this._setCell(tiles[i], celldata);\n        }\n    }\n    _clearnRefTileCellData() {\n        let tileSet = this._tileLayer.tileSet;\n        this._cellDataRefMap.forEach((value, key) => {\n            let cellData = tileSet.getCellDataByGid(key);\n            cellData._removeNoticeRenderTile(this);\n        });\n        this._cellDataRefMap = [];\n        this._refGids.length = 0;\n    }\n    _clearAllChunkCellInfo() {\n        for (let i = 0, len = this._chuckCellList.length; i < len; i++)\n            this._clearChunkCellInfo(this._chuckCellList[i]);\n        this._chuckCellList = [];\n        this._cellDataMap = [];\n    }\n    _update() {\n        this._upeateGridData();\n        this._updateRenderData();\n        this._updatePhysicsData();\n        this._updateLightShadowData();\n        this._updateNavigationData();\n    }\n    _getCellPos(sheetCell, out) {\n        out.x = this._oriCellIndex.x + sheetCell.cellx;\n        out.y = this._oriCellIndex.y + sheetCell.celly;\n        this._tileLayer._grid._gridToPixel(out.x, out.y, out);\n    }\n    _mergeToElement(renderElements) {\n        this._renderElementArray.forEach(element => {\n            renderElements.push(element.renderElement);\n        });\n    }\n    _setCell(index, cellData) {\n        let gid = cellData.gid;\n        if (gid < 0)\n            return;\n        if (!this._cellDataRefMap[gid]) {\n            this._cellDataRefMap[gid] = [];\n            this._refGids.push(gid);\n            cellData._addNoticeRenderTile(this);\n        }\n        let chunkCellInfo = this._cellDataMap[index];\n        if (chunkCellInfo == null) {\n            let chunk = this._tileLayer._chunk;\n            let localPos = Vector2.TEMP;\n            chunk._getCellPosByChunkPosAndIndex(0, 0, index, localPos);\n            let chuckCellInfo = new ChunkCellInfo(localPos.x, localPos.y, index, cellData.z_index, cellData);\n            this._cellDataRefMap[gid].push(index);\n            this._cellDataMap[index] = chuckCellInfo;\n            this._chuckCellList.push(chuckCellInfo);\n            this._reCreateRenderData = true;\n        }\n        else if (chunkCellInfo.cell != cellData) {\n            let oldcell = chunkCellInfo.cell;\n            let oldGid = oldcell.gid;\n            let localIndexArray = this._cellDataRefMap[oldGid];\n            localIndexArray.splice(localIndexArray.indexOf(chunkCellInfo.chuckLocalindex), 1);\n            if (localIndexArray.length == 0) {\n                delete this._cellDataRefMap[oldGid];\n                this._refGids.splice(this._refGids.indexOf(gid), 1);\n                oldcell._removeNoticeRenderTile(this);\n            }\n            chunkCellInfo.cell = cellData;\n            chunkCellInfo.zOrderValue = cellData.z_index;\n            localIndexArray = this._cellDataRefMap[gid];\n            localIndexArray.push(chunkCellInfo.chuckLocalindex);\n            if (this._breakBatch(oldcell, cellData)) {\n                this._reCreateRenderData = true;\n            }\n        }\n        this._setDirtyFlag(gid, TileMapDirtyFlag.CELL_CHANGE);\n    }\n    _clearChunkCellInfo(cellInfo) {\n        let physicsDatas = cellInfo._physicsDatas;\n        if (physicsDatas) {\n            let physics = this._tileLayer.tileMapPhysics;\n            for (let i = 0, len = physicsDatas.length; i < len; i++)\n                physics.destroyFixture(this._rigidBody, physicsDatas[i]);\n        }\n        let occluders = cellInfo._occluderDatas;\n        if (occluders) {\n            let occluder = this._tileLayer.tileMapOccluder;\n            for (let i = 0, len = occluders.length; i < len; i++)\n                occluder.removeOccluder(occluders[i]);\n        }\n    }\n    _removeCell(index) {\n        let chunkCellInfo = this._cellDataMap[index];\n        if (!chunkCellInfo)\n            return;\n        this._clearChunkCellInfo(chunkCellInfo);\n        let sotIndex = this._chuckCellList.indexOf(chunkCellInfo);\n        this._chuckCellList.splice(sotIndex, 1);\n        delete this._cellDataMap[chunkCellInfo.chuckLocalindex];\n        let gid = chunkCellInfo.cell.gid;\n        let localIndexArray = this._cellDataRefMap[gid];\n        localIndexArray.splice(localIndexArray.indexOf(index), 1);\n        if (localIndexArray.length == 0) {\n            delete this._cellDataRefMap[gid];\n            this._refGids.splice(this._refGids.indexOf(gid), 1);\n            chunkCellInfo.cell._removeNoticeRenderTile(this);\n        }\n        this._reCreateRenderData = true;\n    }\n    getCell(index) {\n        return this._cellDataMap[index];\n    }\n    _clearOneCell(cell) {\n        let gid = cell.gid;\n        let listArray = this._cellDataRefMap[gid];\n        if (listArray)\n            listArray.forEach(element => this._removeCell(element));\n        cell._removeNoticeRenderTile(this);\n        delete this._cellDataRefMap[gid];\n        this._refGids.splice(this._refGids.indexOf(gid), 1);\n        this._reCreateRenderData = true;\n        this._dirtyFlags.forEach(flags => flags.delete(gid));\n    }\n    _setDirtyFlag(gid, flag, type = DirtyFlagType.ALL) {\n        if (type == DirtyFlagType.ALL) {\n            for (let i = 0, len = DIRTY_TYPES; i < len; i++) {\n                let flags = this._dirtyFlags[i];\n                flags.set(gid, flags.get(gid) | flag);\n            }\n        }\n        else {\n            let flags = this._dirtyFlags[type];\n            flags.set(gid, flags.get(gid) | flag);\n        }\n    }\n    modifyRenderData() {\n        this._reCreateRenderData = true;\n    }\n    _forceUpdateDrity(flags) {\n        this._cellDataRefMap.forEach((value, gid) => {\n            for (let i = 0, len = DIRTY_TYPES; i < len; i++) {\n                flags[i] && this._dirtyFlags[i].set(gid, TileMapDirtyFlag.CELL_CHANGE);\n            }\n        });\n    }\n    _clearCell() {\n        this._clearAllChunkCellInfo();\n        this._clearnRefTileCellData();\n        this._dirtyFlags.forEach(flags => flags.clear());\n        this._reCreateRenderData = true;\n    }\n    _destroy() {\n        if (this._rigidBody) {\n            this._tileLayer.tileMapPhysics.destroyRigidBody(this._rigidBody);\n            this._rigidBody = null;\n        }\n        this._clearCell();\n        this._clearRenderElement();\n        this._cellDataRefMap = null;\n        this._dirtyFlags = null;\n        this._tileLayer = null;\n    }\n    _debugDrawLines(sprite, points) {\n        let lastx = points[0];\n        let lasty = points[1];\n        for (let i = 2, len = points.length; i < len; i += 2) {\n            let curx = points[i];\n            let cury = points[i + 1];\n            sprite.graphics.drawLine(lastx, lasty, curx, cury, \"#ff0000\");\n            lastx = curx;\n            lasty = cury;\n        }\n    }\n}\nTileMapChunkData.instanceColorBufferIndex = 0;\nTileMapChunkData.instanceposScalBufferIndex = 1;\nTileMapChunkData.instanceuvOriScalBufferIndex = 2;\nTileMapChunkData.instanceuvTransBufferIndex = 3;\nclass TileChunkPool {\n    static _getVertexBuffer(dec, vertices) {\n        let buffer = TileChunkPool._instanceBufferPool.pop();\n        if (!buffer) {\n            buffer = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n            buffer.instanceBuffer = true;\n        }\n        buffer.setDataLength(vertices.byteLength);\n        buffer.setData(vertices.buffer, 0, 0, vertices.byteLength);\n        buffer.vertexDeclaration = dec;\n        return buffer;\n    }\n    static _recoverVertexBuffer(buffer) {\n        this._instanceBufferPool.push(buffer);\n    }\n    static _getTileRenderElement(cellNum) {\n        let element = TileChunkPool._renderElementPool.pop();\n        if (!element) {\n            let geometry = LayaGL.renderDeviceFactory.createRenderGeometryElement(MeshTopology.Triangles, DrawType.DrawElementInstance);\n            let renderElement = LayaGL.render2DRenderPassFactory.createRenderElement2D();\n            renderElement.geometry = geometry;\n            geometry.bufferState = LayaGL.renderDeviceFactory.createBufferState();\n            geometry.indexFormat = IndexFormat.UInt16;\n            renderElement.renderStateIsBySprite = false;\n            renderElement.nodeCommonMap = [\"BaseRender2D\"];\n            element = {\n                renderElement,\n                cacheData: null,\n                updateFlag: [false, false, false, false],\n                maxCell: 0\n            };\n        }\n        element.cacheData = [new Float32Array(cellNum * 4), new Float32Array(cellNum * 4), new Float32Array(cellNum * 4), new Float32Array(cellNum * 4)];\n        return element;\n    }\n    static _recoverTileRenderElement(element) {\n        element.cacheData = null;\n        let renderElement = element.renderElement;\n        renderElement.materialShaderData = null;\n        renderElement.value2DShaderData = null;\n        renderElement.subShader = null;\n        let geometry = renderElement.geometry;\n        for (let j = 2, jn = geometry.bufferState._vertexBuffers.length; j < jn; j++)\n            TileChunkPool._recoverVertexBuffer(geometry.bufferState._vertexBuffers[j]);\n        let updateFlag = element.updateFlag;\n        for (let i = 0; i < 4; i++)\n            updateFlag[i] = false;\n        TileChunkPool._renderElementPool.push(element);\n    }\n}\nTileChunkPool._instanceBufferPool = [];\nTileChunkPool._renderElementPool = [];\n","import { Matrix } from \"../../maths/Matrix\";\nimport { TileMapUtils } from \"../TileMapUtils\";\nexport class BaseSheet {\n    constructor() {\n        this._width = 0;\n        this._height = 0;\n        this._vbData = [];\n        this._ibData = [];\n        this._outline = [];\n        this._matrix = new Matrix();\n        this._origMatix = new Matrix();\n        this._reverseMatrix = new Matrix();\n        this._initData();\n        this.setTileSize(1, 1);\n    }\n    getMatrix() { return this._matrix; }\n    getInverseMatrix() { return this._reverseMatrix; }\n    getTileWidth() { return this._width; }\n    getTileHeight() { return this._height; }\n    getTileBaseOutline() { return this._outline; }\n    _initData() {\n    }\n    setTileSize(width, height) {\n        if (width < 1 || height < 1)\n            console.error(\" value must bigger than 1.\");\n        if (this._width == width && this._height == height)\n            return;\n        this._width = width;\n        this._height = height;\n        this._matrix.setTo(this._width, 0, 0, this._height, 0, 0);\n        Matrix.mul(this._origMatix, this._matrix, this._matrix);\n        this._matrix.copyTo(this._reverseMatrix);\n        this._reverseMatrix.invert();\n    }\n    getvbs() { return this._vbData; }\n    getibs() { return this._ibData; }\n    pixelToGrid(pixelx, pixely, out) {\n        TileMapUtils.transfromPointByValue(this._reverseMatrix, pixelx, pixely, out);\n    }\n    gridToPixel(row, col, out) {\n        TileMapUtils.transfromPointByValue(this._matrix, row, col, out);\n    }\n    _getChunkSize(rowCount, colCount, out) { }\n    _getChunkLeftTop(row, col, rowCount, colCount, out) { }\n}\n","import { BaseSheet } from \"./BaseSheet\";\nexport class HalfOffSquareSheet extends BaseSheet {\n    constructor(_offset = -1) {\n        super();\n        this._offset = 0;\n        this._offset = _offset;\n    }\n    _initData() {\n        this._origMatix.setTo(1, 0, 0, 1, 0.5, 0.5);\n        this._ibData = [0, 1, 2, 0, 2, 3];\n        this._vbData = [1, 1, 0, 1, 0, 0, 1, 0];\n        this._outline = [0, 0, 1, 0, 1, 1, 0, 1];\n    }\n    pixelToGrid(pixelX, pixelY, out) {\n        super.pixelToGrid(pixelX, pixelY, out);\n        let col = out.y = Math.round(out.y);\n        out.x = Math.round(out.x + this._offset * (Math.abs(col) & 1) * 0.5);\n    }\n    gridToPixel(row, col, out) {\n        row = row - this._offset * (Math.abs(col) & 1) * 0.5;\n        super.gridToPixel(row, col, out);\n    }\n    _getChunkSize(rowCount, colCount, out) {\n        rowCount = Math.max(rowCount - 1, 0);\n        colCount = Math.max(colCount - 1, 0);\n        this.gridToPixel(rowCount, colCount, out);\n        let endX = this._width;\n        if (colCount % 2 == 1) {\n            endX += 0.5 * this._width;\n        }\n        out.x += endX;\n        out.y += this._height;\n    }\n    _getChunkLeftTop(row, col, rowCount, colCount, out) {\n        this.gridToPixel(row, col, out);\n        if ((colCount == 1) || (col % 2 == 0)) {\n            out.x -= 0.5 * this._width;\n        }\n        else {\n            out.x -= this._width;\n        }\n        out.y -= this._height * 0.5;\n    }\n}\n","import { BaseSheet } from \"./BaseSheet\";\nexport class HeixSheet extends BaseSheet {\n    constructor(_offset = -1) {\n        super();\n        this._offset = 0;\n        this._offset = _offset;\n    }\n    _initData() {\n        this._origMatix.setTo(1, 0, 0.5, 0.75, 0.5, 0.5);\n        this._ibData = [0, 1, 2, 0, 2, 3];\n        this._vbData = [1, 1, 0, 1, 0, 0, 1, 0];\n        this._outline = [0.5, 0, 1, 0.25, 1, 0.75, 0.5, 1, 0, 0.75, 0, 0.25];\n    }\n    prixToGrid(out, offset) {\n        const q = out.x;\n        const r = out.y;\n        const s = -q - r;\n        var qi = Math.round(q);\n        var ri = Math.round(r);\n        var si = Math.round(s);\n        var q_diff = Math.abs(qi - q);\n        var r_diff = Math.abs(ri - r);\n        var s_diff = Math.abs(si - s);\n        if (q_diff > r_diff && q_diff > s_diff) {\n            qi = -ri - si;\n        }\n        else if (r_diff > s_diff) {\n            ri = -qi - si;\n        }\n        out.x = qi + (ri + offset * (ri & 1)) / 2;\n        out.y = ri;\n    }\n    pixelToGrid(pixelX, pixelY, out) {\n        super.pixelToGrid(pixelX, pixelY, out);\n        this.prixToGrid(out, this._offset);\n    }\n    gridToPixel(row, col, out) {\n        row = row - (col + this._offset * (col & 1)) / 2;\n        super.gridToPixel(row, col, out);\n    }\n    _getChunkSize(rowCount, colCount, out) {\n        rowCount = Math.max(rowCount - 1, 0);\n        colCount = Math.max(colCount - 1, 0);\n        this.gridToPixel(rowCount, colCount, out);\n        let endX = this._width;\n        if (colCount % 2 == 1) {\n            endX += 0.5 * this._width;\n        }\n        out.x += endX;\n        out.y += this._height;\n    }\n    _getChunkLeftTop(row, col, rowCount, colCount, out) {\n        this.gridToPixel(row, col, out);\n        if ((colCount == 1) || (col % 2 == 0)) {\n            out.x -= 0.5 * this._width;\n        }\n        else {\n            out.x -= this._width;\n        }\n        out.y -= this._height * 0.5;\n    }\n}\n","import { BaseSheet } from \"./BaseSheet\";\nexport class IsometricSheet extends BaseSheet {\n    constructor(_offset = 1) {\n        super();\n        this._offset = 0;\n        this._offset = _offset;\n    }\n    _initData() {\n        this._origMatix.setTo(1, 0, 0, 1, 0.5, 0.5);\n        this._ibData = [0, 1, 2, 0, 2, 3];\n        this._vbData = [1, 1, 0, 1, 0, 0, 1, 0];\n        this._outline = [0, 0.5, 0.5, 0, 1, 0.5, 0.5, 1];\n    }\n    pixelToGrid(pixelX, pixelY, out) {\n        super.pixelToGrid(pixelX, pixelY, out);\n        let row = Math.round(out.x);\n        let col = Math.round(out.y);\n        let offx = 0, offy = 0;\n        if ((Math.abs(out.x - row) + Math.abs(out.y - col)) > 0.5) {\n            out.x < row ? offx = -1 : offx = 0;\n            out.y < col ? offy = -1 : offy = 1;\n            if (this._offset == -1) {\n                offx += 1;\n            }\n        }\n        out.x = row + offx;\n        out.y = col * 2 + offy;\n    }\n    gridToPixel(row, col, out) {\n        row = Math.floor(row);\n        col = Math.floor(col);\n        if (col & 1) {\n            row = row + 0.5 * this._offset;\n        }\n        super.gridToPixel(row, col * 0.5, out);\n    }\n    _getChunkSize(rowCount, colCount, out) {\n        rowCount = Math.max(rowCount - 1, 0);\n        colCount = Math.max(colCount - 1, 0);\n        this.gridToPixel(rowCount, colCount, out);\n        let endX = this._width;\n        if (colCount % 2 == 1) {\n            endX += 0.5 * this._width;\n        }\n        out.x += endX;\n        out.y += this._height;\n    }\n    _getChunkLeftTop(row, col, rowCount, colCount, out) {\n        this.gridToPixel(row, col, out);\n        if ((colCount == 1) || (col % 2 == 0)) {\n            out.x -= 0.5 * this._width;\n        }\n        else {\n            out.x -= this._width;\n        }\n        out.y -= this._height * 0.5;\n    }\n}\n","import { BaseSheet } from \"./BaseSheet\";\nexport class RectSheet extends BaseSheet {\n    constructor() {\n        super();\n    }\n    _initData() {\n        this._origMatix.setTo(1, 0, 0, 1, 0.5, 0.5);\n        this._ibData = [0, 1, 2, 0, 2, 3];\n        this._vbData = [1, 1, 0, 1, 0, 0, 1, 0];\n        this._outline = [0, 0, 1, 0, 1, 1, 0, 1];\n    }\n    gridToPixel(row, col, out) {\n        super.gridToPixel(row, col, out);\n        out.x = Math.round(out.x);\n        out.y = Math.round(out.y);\n    }\n    _getChunkSize(rowCount, colCount, out) {\n        rowCount = Math.max(rowCount - 1, 0);\n        colCount = Math.max(colCount - 1, 0);\n        this.gridToPixel(rowCount, colCount, out);\n        out.x += this._width;\n        out.y += this._height;\n    }\n    _getChunkLeftTop(row, col, rowCount, colCount, out) {\n        this.gridToPixel(row, col, out);\n        out.x -= this._width * 0.5;\n        out.y -= this._height * 0.5;\n    }\n}\n","import { LayaGL } from \"../../layagl/LayaGL\";\nimport { Color } from \"../../maths/Color\";\nimport { Vector2 } from \"../../maths/Vector2\";\nimport { BufferUsage } from \"../../RenderEngine/RenderEnum/BufferTargetType\";\nimport { TileShape } from \"../TileMapEnum\";\nimport { TileMapShaderInit } from \"../shader/TileMapShaderInit\";\nimport { HalfOffSquareSheet } from \"./HalfOffSquareSheet\";\nimport { HeixSheet } from \"./HeixSheet\";\nimport { IsometricSheet } from \"./IsometricSheet\";\nimport { RectSheet } from \"./RectSheet\";\nexport class Grid {\n    constructor() {\n        this._offset = new Vector2();\n        this._color = new Color(0, 0, 0, 0);\n        this._vbLength = 0;\n        let vertex = this._vbs = LayaGL.renderDeviceFactory.createVertexBuffer(BufferUsage.Dynamic);\n        vertex.vertexDeclaration = TileMapShaderInit._tileMapPositionUVColorDec;\n        vertex.instanceBuffer = false;\n        this._ibs = LayaGL.renderDeviceFactory.createIndexBuffer(BufferUsage.Dynamic);\n    }\n    _updateTileShape(tileShape, size) {\n        if (this._tileShape == tileShape)\n            return false;\n        this._tileShape = tileShape;\n        switch (this._tileShape) {\n            case TileShape.TILE_SHAPE_SQUARE:\n                this._sheet = new RectSheet();\n                this._offset.setValue(0, 0);\n                break;\n            case TileShape.TILE_SHAPE_HALF_OFFSET_SQUARE:\n                this._sheet = new HalfOffSquareSheet();\n                this._offset.setValue(0, -1);\n                break;\n            case TileShape.TILE_SHAPE_HEXAGON:\n                this._sheet = new HeixSheet();\n                this._offset.setValue(1, -1);\n                break;\n            case TileShape.TILE_SHAPE_ISOMETRIC:\n                this._sheet = new IsometricSheet();\n                this._offset.setValue(0, 0);\n                break;\n            default:\n                throw Error(\"unknow the type .\");\n        }\n        this._setTileSize(size.x, size.y);\n        return true;\n    }\n    _updateColor(color) {\n        if (color.equal(this._color))\n            return false;\n        color.cloneTo(this._color);\n        return true;\n    }\n    _updateBufferData() {\n        let vbs = this._sheet.getvbs();\n        let step = 8;\n        let vbCount = vbs.length / 2;\n        var buffer = new Float32Array(vbCount * step);\n        for (var i = 0; i < vbCount; i++) {\n            let index = i * step;\n            var vbIndex = i * 2;\n            let x = vbs[vbIndex];\n            let y = vbs[vbIndex + 1];\n            buffer[index] = buffer[index + 2] = x - 0.5;\n            buffer[index + 1] = buffer[index + 3] = y - 0.5;\n            buffer[index + 4] = this._color.r;\n            buffer[index + 5] = this._color.g;\n            buffer[index + 6] = this._color.b;\n            buffer[index + 7] = this._color.a;\n        }\n        this._vbs.setDataLength(buffer.byteLength);\n        this._vbs.setData(buffer.buffer, 0, 0, buffer.buffer.byteLength);\n        let ib = new Uint16Array(this._sheet.getibs());\n        let indexBuffer = this._ibs;\n        indexBuffer._setIndexDataLength(ib.buffer.byteLength);\n        indexBuffer._setIndexData(ib, 0);\n        this._vbLength = ib.length;\n    }\n    _setTileSize(x, y) {\n        this._sheet.setTileSize(x, y);\n    }\n    _pixelToGrid(pixelX, pixelY, out) {\n        this._sheet.pixelToGrid(pixelX, pixelY, out);\n    }\n    _gridToPixel(row, col, out) {\n        this._sheet.gridToPixel(row, col, out);\n    }\n    _getBaseVertexBuffer() { return this._vbs; }\n    _getBaseIndexBuffer() { return this._ibs; }\n    _getBaseIndexCount() { return this._vbLength; }\n}\n","import { Vector2 } from \"../maths/Vector2\";\nconst tempPoint = new Vector2();\nexport class TileMapChunk {\n    constructor(grid) {\n        this._grid = grid;\n        this._maxCell = 0;\n        this._setChunkSize(1, 1);\n    }\n    get maxCell() {\n        return this._maxCell;\n    }\n    _setChunkSize(width, height) {\n        this._chunkWidth = width;\n        this._chunkHeight = height;\n        this._maxCell = width * height;\n    }\n    _getChunkPosByPixel(pixelx, pixely, out) {\n        this._grid._pixelToGrid(pixelx, pixely, tempPoint);\n        this._getChunkPosByCell(Math.round(tempPoint.x), Math.round(tempPoint.y), out);\n    }\n    _getChunkPosByCell(cellRow, cellCol, out) {\n        out.x = Math.floor(cellRow / this._chunkWidth);\n        out.y = Math.floor(cellCol / this._chunkHeight);\n        out.z = this._getChunkIndexByCellPos(cellRow, cellCol);\n    }\n    _getChunkIndexByCellPos(cellRow, cellCol) {\n        let chunkX = cellRow % this._chunkWidth;\n        if (chunkX < 0) {\n            chunkX += this._chunkWidth;\n        }\n        let chunkY = cellCol % this._chunkHeight;\n        if (chunkY < 0) {\n            chunkY += this._chunkHeight;\n        }\n        return chunkX + chunkY * this._chunkWidth;\n    }\n    _getCellPosByChunkPosAndIndex(chunkx, chunky, chunklocalindex, out) {\n        chunkx = Math.floor(chunkx);\n        chunky = Math.floor(chunky);\n        chunklocalindex = chunklocalindex % this._maxCell;\n        out.x = chunkx * this._chunkWidth + chunklocalindex % this._chunkWidth;\n        out.y = chunky * this._chunkHeight + Math.floor(chunklocalindex / this._chunkWidth);\n    }\n    _getPixelByChunkPosAndIndex(chunkx, chunky, chunklocalindex, out) {\n        chunkx = Math.floor(chunkx);\n        chunky = Math.floor(chunky);\n        chunklocalindex = chunklocalindex % this._maxCell;\n        let gridx = chunkx * this._chunkWidth + chunklocalindex % this._chunkWidth;\n        let gridy = chunky * this._chunkHeight + Math.floor(chunklocalindex / this._chunkWidth);\n        this._grid._gridToPixel(gridx, gridy, out);\n    }\n    _getChunkSize(out) {\n        let basesheet = this._grid._sheet;\n        basesheet._getChunkSize(this._chunkWidth, this._chunkHeight, out);\n    }\n    _getChunkLeftTop(chunkx, chunky, out) {\n        let basesheet = this._grid._sheet;\n        basesheet._getChunkLeftTop(chunkx * this._chunkWidth, chunky * this._chunkHeight, this._chunkWidth, this._chunkHeight, out);\n    }\n}\n","import { Laya } from \"../../Laya\";\nimport { Box2DShapeDef, EPhysics2DShape, RigidBody2DInfo } from \"../physics/factory/IPhysics2DFactory\";\nimport { Physics2DWorldManager } from \"../physics/Physics2DWorldManager\";\nimport { Utils } from \"../utils/Utils\";\nexport class TileMapPhysics {\n    static __init__() {\n        TileMapPhysics._tempDef = new Box2DShapeDef();\n    }\n    constructor(layer) {\n        this.enable = false;\n        this._rigidBodys = [];\n        this._layer = layer;\n    }\n    updateState(bool) {\n        let result = !!Laya.physics2D && bool;\n        if (result != this.enable) {\n            if (result)\n                this.enableRigidBodys();\n            else\n                this.disableRigidBodys();\n            this.enable = result;\n        }\n    }\n    createRigidBody() {\n        let factory = Laya.physics2D;\n        let mgr = this._layer.owner.scene.getComponentElementManager(Physics2DWorldManager.__managerName);\n        var info = new RigidBody2DInfo();\n        info.angle = 0;\n        info.allowSleep = false;\n        info.angularDamping = 0;\n        info.bullet = false;\n        info.fixedRotation = false;\n        info.gravityScale = 0;\n        info.linearDamping = 0;\n        info.angularVelocity = 0;\n        info.linearVelocity.setValue(0, 0);\n        let def = factory.createBodyDef(mgr, info);\n        let rigidBody = factory.createBody(mgr.box2DWorld, def);\n        let trans = this._layer.owner.globalTrans;\n        let x = trans.x;\n        let y = trans.y;\n        let angle = Utils.toRadian(trans.rotation);\n        Laya.physics2D.set_RigibBody_Transform(rigidBody, x, y, angle);\n        this._rigidBodys.push(rigidBody);\n        return rigidBody;\n    }\n    enableRigidBodys() {\n        for (let i = 0, len = this._rigidBodys.length; i < len; i++)\n            this._enableRigidBody(this._rigidBodys[i]);\n    }\n    disableRigidBodys() {\n        for (let i = 0, len = this._rigidBodys.length; i < len; i++)\n            this._disableRigidBody(this._rigidBodys[i]);\n    }\n    _enableRigidBody(rigidBody) {\n        Laya.physics2D.set_RigibBody_Enable(rigidBody, true);\n    }\n    _disableRigidBody(rigidBody) {\n        Laya.physics2D.set_RigibBody_Enable(rigidBody, false);\n    }\n    destroyRigidBody(rigidBody) {\n        let index = this._rigidBodys.indexOf(rigidBody);\n        if (index !== -1) {\n            this._rigidBodys.splice(index, 1);\n        }\n        let world = this._layer.owner.scene.getComponentElementManager(Physics2DWorldManager.__managerName);\n        Laya.physics2D.removeBody(world, rigidBody);\n    }\n    createFixture(rigidBody, layer, data) {\n        let factory = Laya.physics2D;\n        let mgr = this._layer.owner.scene.getComponentElementManager(Physics2DWorldManager.__managerName);\n        var def = TileMapPhysics._tempDef;\n        def.density = layer.density;\n        def.friction = layer.friction;\n        def.isSensor = false;\n        def.restitution = layer.restitution;\n        def.shapeType = EPhysics2DShape.PolygonShape;\n        let filter = factory.createFilter();\n        let fixtureDef = factory.createShapeDef(mgr.box2DWorld, def, filter);\n        factory.set_PolygonShape_data(fixtureDef._shape, 0, 0, data, 1, 1);\n        let fixture = factory.createShape(mgr, rigidBody, EPhysics2DShape.PolygonShape, fixtureDef);\n        factory.set_shapeDef_GroupIndex(fixture, layer.group);\n        factory.set_shapeDef_CategoryBits(fixture, layer.category);\n        factory.set_shapeDef_maskBits(fixture, layer.mask);\n        factory.set_shape_collider(fixture, this);\n        return fixture;\n    }\n    _updateTransfrom() {\n        let len = this._rigidBodys.length;\n        if (!len)\n            return;\n        let trans = this._layer.owner.globalTrans;\n        let x = trans.x;\n        let y = trans.y;\n        let angle = Utils.toRadian(trans.rotation);\n        for (let i = 0; i < len; i++) {\n            Laya.physics2D.set_RigibBody_Transform(this._rigidBodys[i], x, y, angle);\n        }\n    }\n    destroyFixture(rigidBody, fixture) {\n        Laya.physics2D.rigidBody_DestroyShape(rigidBody, fixture);\n    }\n}\n","import { Matrix } from \"../maths/Matrix\";\nimport { Point } from \"../maths/Point\";\nimport { Rectangle } from \"../maths/Rectangle\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { Vector4 } from \"../maths/Vector4\";\nimport { TileMapUtils } from \"./TileMapUtils\";\nclass AlexData {\n    constructor() {\n        this._x = 0;\n        this._y = 0;\n        this._rectValueMin = 0;\n        this._rectValueMax = 0;\n    }\n    _dotValue(x, y) {\n        return this._x * x + this._y * y;\n    }\n    _getDotMinMax(datas, out) {\n        out.x = Number.MAX_VALUE;\n        out.y = -Number.MAX_VALUE;\n        for (var i = 0; i < datas.length; i += 2) {\n            let value = this._dotValue(datas[i], datas[i + 1]);\n            out.x = Math.min(out.x, value);\n            out.y = Math.max(out.y, value);\n        }\n    }\n    setAlex(x, y) {\n        let ds = Math.hypot(x, y);\n        this._x = -y / ds;\n        this._y = x / ds;\n    }\n    updateVerter(rectDatas, ploygons) {\n        let temp = Vector2.TEMP;\n        this._getDotMinMax(rectDatas, temp);\n        this._rectValueMin = temp.x;\n        this._rectValueMax = temp.y;\n        this._getDotMinMax(ploygons, temp);\n        let d = (temp.y - temp.x) * 0.5;\n        this._rectValueMin -= d;\n        this._rectValueMax += d;\n    }\n    testCollider(x, y) {\n        let value = this._dotValue(x, y);\n        return value < this._rectValueMin || value > this._rectValueMax;\n    }\n}\nexport class RectClipper {\n    constructor() {\n        this._clipperRect = new Rectangle();\n        this._polygonSize = new Vector2();\n        this._polygonTransform = new Matrix();\n        this._ploygRect = new Vector4();\n        this._matrix = new Matrix();\n        this._axis = [];\n        this._axis.push(new AlexData());\n        this._axis.push(new AlexData());\n        this._axis.push(new AlexData());\n        this._axis.push(new AlexData());\n        this._axis[0].setAlex(1, 0);\n        this._axis[1].setAlex(0, 1);\n    }\n    _mrgePoint(x, y, out) {\n        let point = Point.TEMP;\n        point.setTo(x, y);\n        this._matrix.invertTransformPoint(point);\n        out.x = Math.min(out.x, point.x);\n        out.y = Math.min(out.y, point.y);\n        out.z = Math.max(out.z, point.x);\n        out.w = Math.max(out.w, point.y);\n    }\n    _updateCliperInPolygonRect() {\n        this._ploygRect.setValue(Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        let halfw = this._clipperRect.width * 0.5;\n        let halfh = this._clipperRect.height * 0.5;\n        this._mrgePoint(-halfw, -halfh, this._ploygRect);\n        this._mrgePoint(halfw, -halfh, this._ploygRect);\n        this._mrgePoint(halfw, halfh, this._ploygRect);\n        this._mrgePoint(-halfw, halfh, this._ploygRect);\n    }\n    _updateAxiDatas() {\n        if (this._rectDatas == null)\n            return;\n        let halfw = this._polygonW;\n        let halfh = this._polygonH;\n        this._polygons = [];\n        const p = Vector2.TEMP;\n        TileMapUtils.transfromPointNByValue(this._matrix, -halfw, -halfh, p);\n        this._polygons.push(p.x, p.y);\n        TileMapUtils.transfromPointNByValue(this._matrix, halfw, -halfh, p);\n        this._polygons.push(p.x, p.y);\n        TileMapUtils.transfromPointNByValue(this._matrix, halfw, halfh, p);\n        this._polygons.push(p.x, p.y);\n        TileMapUtils.transfromPointNByValue(this._matrix, -halfw, halfh, p);\n        this._polygons.push(p.x, p.y);\n        let dx = this._polygons[2] - this._polygons[0];\n        let dy = this._polygons[3] - this._polygons[1];\n        this._axis[2].setAlex(dx, dy);\n        dx = this._polygons[4] - this._polygons[2];\n        dy = this._polygons[5] - this._polygons[3];\n        this._axis[3].setAlex(dx, dy);\n        this._axis[0].updateVerter(this._rectDatas, this._polygons);\n        this._axis[1].updateVerter(this._rectDatas, this._polygons);\n        this._axis[2].updateVerter(this._rectDatas, this._polygons);\n        this._axis[3].updateVerter(this._rectDatas, this._polygons);\n    }\n    _updateClipRect(cliper) {\n        if (cliper.equals(this._clipperRect))\n            return false;\n        cliper.cloneTo(this._clipperRect);\n        let halfw = cliper.width * 0.5;\n        let halfh = cliper.height * 0.5;\n        this._rectDatas = [-halfw, -halfh, halfw, -halfh, halfw, halfh, -halfw, halfh];\n        return true;\n    }\n    _updatePolygonSize(size) {\n        if (Vector2.equals(size, this._polygonSize))\n            return false;\n        size.cloneTo(this._polygonSize);\n        return true;\n    }\n    _updatePolygonTransform(matrix) {\n        if (matrix.a == this._polygonTransform.a && matrix.b == this._polygonTransform.b && matrix.c == this._polygonTransform.c && matrix.d == this._polygonTransform.d && matrix.tx == this._polygonTransform.tx && matrix.ty == this._polygonTransform.ty)\n            return false;\n        matrix.copyTo(this._polygonTransform);\n        return true;\n    }\n    getploygRect() { return this._ploygRect; }\n    setClipper(clipperRect, size, matrix, ofx = 0, ofy = 0, clipperRot = 0) {\n        let isDiffClipper = this._updateClipRect(clipperRect);\n        let isDiffSize = this._updatePolygonSize(size);\n        let isDiffMatrix = this._updatePolygonTransform(matrix);\n        if (isDiffClipper || isDiffMatrix) {\n            if (ofx || ofy || clipperRot) {\n                this._matrix.setMatrix(ofx, ofy, 1, 1, clipperRot, 0, 0, 0, 0);\n                this._matrix.invert();\n            }\n            else {\n                this._matrix.identity();\n            }\n            Matrix.mul(matrix, this._matrix, this._matrix);\n            this._updateCliperInPolygonRect();\n        }\n        if (isDiffClipper || isDiffSize || isDiffMatrix) {\n            this._updateAxiDatas();\n        }\n        return this._ploygRect;\n    }\n    isClipper(x, y) {\n        const p = Vector2.TEMP;\n        TileMapUtils.transfromPointByValue(this._matrix, x, y, p);\n        if (this._axis[0].testCollider(p.x, p.y))\n            return true;\n        if (this._axis[1].testCollider(p.x, p.y))\n            return true;\n        if (this._axis[2].testCollider(p.x, p.y))\n            return true;\n        if (this._axis[3].testCollider(p.x, p.y))\n            return true;\n        return false;\n    }\n}\n","import { Color } from \"../maths/Color\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { TileShape } from \"./TileMapEnum\";\nimport { TileMapUtils } from \"./TileMapUtils\";\nimport { TileSetCellData } from \"./TileSetCellData\";\nimport { Resource } from \"../resource/Resource\";\nimport { Material } from \"../resource/Material\";\nimport { RenderState } from \"../RenderDriver/RenderModuleData/Design/RenderState\";\nimport { Shader3D } from \"../RenderEngine/RenderShader/Shader3D\";\nimport { ShaderDefines2D } from \"../webgl/shader/d2/ShaderDefines2D\";\nimport { TerrainsParams } from \"./terrain/TileMapTerrain\";\nexport class TileSet extends Resource {\n    constructor() {\n        super();\n        this._defalutMaterials = {};\n        this._ownerList = [];\n        this._terrainsDirty = true;\n        this._paramsLists = [];\n        this._tileSize = new Vector2(16, 16);\n        this._tileShape = TileShape.TILE_SHAPE_SQUARE;\n        this._groups = [];\n        this._groupIds = [];\n    }\n    get tileShape() {\n        return this._tileShape;\n    }\n    set tileShape(value) {\n        if (this._tileShape === value)\n            return;\n        this._tileShape = value;\n        this._ownerList.forEach(element => {\n            element._grid._updateTileShape(this._tileShape, this._tileSize);\n            element._grid._updateBufferData();\n        });\n    }\n    get tileSize() {\n        return this._tileSize;\n    }\n    set tileSize(value) {\n        if (Vector2.equals(value, this._tileSize))\n            return;\n        value.cloneTo(this._tileSize);\n        this._ownerList.forEach(element => {\n            element._grid._setTileSize(this._tileSize.x, this._tileSize.y);\n        });\n    }\n    _disposeResource() {\n        for (const key in this._defalutMaterials) {\n            this._defalutMaterials[key] && this._defalutMaterials[key].destroy();\n        }\n    }\n    getCellDataByGid(gid) {\n        if (gid < 0) {\n            return null;\n        }\n        const groupId = TileMapUtils.parseGroupId(gid);\n        const group = this._groups.find(group => group.id == groupId);\n        if (group) {\n            const cellIndex = TileMapUtils.parseCellIndex(gid);\n            const nativeIndex = TileMapUtils.parseNativeIndex(gid);\n            return group.getCellDataByIndex(nativeIndex, cellIndex);\n        }\n        else {\n            return null;\n        }\n    }\n    _addOwner(tilemapLayer) {\n        if (this._ownerList.indexOf(tilemapLayer) == -1)\n            this._ownerList.push(tilemapLayer);\n    }\n    _removeOwner(tilemapLayer) {\n        let index = this._ownerList.indexOf(tilemapLayer);\n        if (index != -1)\n            this._ownerList.splice(index, 1);\n    }\n    _notifyTileSetCellGroupsChange() {\n        this._groupIds.length = 0;\n        for (let i = 0, len = this._groups.length; i < len; i++) {\n            const value = this._groups[i];\n            value._recaculateUVOriProperty(false);\n            this._groupIds.push(value.id);\n        }\n    }\n    _notifyCustomDataLayerChange() {\n    }\n    _notifyRenderLayerChange() {\n    }\n    _notifyTerrainSetChange() {\n    }\n    _notifyNavigationLayerChange() {\n    }\n    _notifyPhysicsLayerChange() {\n        this._terrainsDirty = true;\n    }\n    addTileSetCellGroup(resource) {\n        if (resource) {\n            resource._owner = this;\n            this._groups.push(resource);\n            this._notifyTileSetCellGroupsChange();\n        }\n    }\n    getTileSetCellGroup(id) {\n        let index = this._groupIds.indexOf(id);\n        return this._groups[index];\n    }\n    removeTileSetCellGroup(id) {\n        let index = this._groupIds.indexOf(id);\n        this._groups.splice(index, 1);\n        this._notifyTileSetCellGroupsChange();\n    }\n    get customLayers() {\n        return this._customDataLayers;\n    }\n    set customLayers(value) {\n        this._customDataLayers = value;\n    }\n    addCustomDataLayer(layer) {\n        if (!this._customDataLayers)\n            this._customDataLayers = [];\n        let result = this._addLayer(this._customDataLayers, \"name\", layer);\n        result && this._notifyCustomDataLayerChange();\n        return result;\n    }\n    getCustomDataLayer(name) {\n        let result = this._getLayer(this._customDataLayers, \"name\", name);\n        return result;\n    }\n    removeCustomDataLayer(name) {\n        let result = this._removeLayer(this._customDataLayers, \"name\", name);\n        if (result)\n            this._notifyCustomDataLayerChange();\n        return result;\n    }\n    get navigationLayers() {\n        return this._navigationLayers;\n    }\n    set navigationLayers(value) {\n        this._navigationLayers = value;\n    }\n    addNavigationLayers(layer) {\n    }\n    getNavigationLayers(id) {\n        return null;\n    }\n    removeNavigationLayers(id) {\n        return;\n    }\n    get lightInfoLayers() {\n        return this._lightOcclusion;\n    }\n    set lightInfoLayers(value) {\n        this._lightOcclusion = value;\n    }\n    addLightInfoLayer(layer) {\n        if (!this._lightOcclusion)\n            this._lightOcclusion = [];\n        let result = this._addLayer(this._lightOcclusion, \"id\", layer);\n        result && this._notifyRenderLayerChange();\n        return result;\n    }\n    getLightInfoLayer(id) {\n        let result = this._getLayer(this._lightOcclusion, \"id\", id);\n        return result;\n    }\n    removeLightInfoLayer(id) {\n        let result = this._removeLayer(this._lightOcclusion, \"id\", id);\n        result && this._notifyRenderLayerChange();\n        return result;\n    }\n    get physicsLayers() {\n        return this._physicsLayers;\n    }\n    set physicsLayers(value) {\n        this._physicsLayers = value;\n    }\n    addPhysicsLayer(layer) {\n        if (!this._physicsLayers)\n            this._physicsLayers = [];\n        let result = this._addLayer(this._physicsLayers, \"id\", layer);\n        result && this._notifyPhysicsLayerChange();\n        return result;\n    }\n    getPhysicsLayer(id) {\n        let result = this._getLayer(this._physicsLayers, \"id\", id);\n        return result;\n    }\n    removePhysicsLayer(id) {\n        let result = this._removeLayer(this._physicsLayers, \"id\", id);\n        result && this._notifyPhysicsLayerChange();\n        return result;\n    }\n    _addLayer(layers, key, layer) {\n        for (let i = 0, len = layers.length; i < len; i++) {\n            if (layer[key] == layers[i][key]) {\n                return false;\n            }\n        }\n        layers.push(layer);\n        return true;\n    }\n    _getLayer(layers, key, value) {\n        if (!layers || !layers.length)\n            return null;\n        for (let i = 0, len = layers.length; i < len; i++) {\n            if (value == layers[i][key]) {\n                return layers[i];\n            }\n        }\n        return null;\n    }\n    _removeLayer(layers, key, value) {\n        if (!layers || !layers.length)\n            return null;\n        for (let i = 0, len = layers.length; i < len; i++) {\n            if (value == layers[i][key]) {\n                return layers.splice(i, 1)[0];\n            }\n        }\n        return null;\n    }\n    get terrainSets() {\n        return this._terrainSets;\n    }\n    set terrainSets(value) {\n        if (value) {\n            for (let i = 0, len = value.length; i < len; i++) {\n                value[i] && value[i].updateShape(this._tileShape);\n            }\n        }\n        this._terrainSets = value;\n    }\n    addTerrainSet(set) {\n        if (!this._physicsLayers)\n            this._terrainSets = [];\n        let result = this._addLayer(this._terrainSets, \"id\", set);\n        set.updateShape(this._tileShape);\n        result && this._notifyPhysicsLayerChange();\n    }\n    getTerrainSet(id) {\n        let result = this._getLayer(this._terrainSets, \"id\", id);\n        result && this._notifyTerrainSetChange();\n        return result;\n    }\n    removeTerrainSet(id) {\n        let result = this._removeLayer(this._terrainSets, \"id\", id);\n        result && this._notifyPhysicsLayerChange();\n        return result;\n    }\n    updateTerrains() {\n        if (this._terrainsDirty) {\n            this._clearTerrainParams();\n            this._terrainsDirty = false;\n            this._groups.forEach(group => {\n                let tiles = group.tiles;\n                for (let y in tiles) {\n                    let yTiles = tiles[y];\n                    for (let x in yTiles) {\n                        let nativeData = yTiles[x];\n                        for (let n in nativeData._tileDatas) {\n                            let celldata = nativeData._tileDatas[n];\n                            let terrainSetId = celldata.terrainSet;\n                            if (terrainSetId > -1) {\n                                let terrainSet = this.getTerrainSet(terrainSetId);\n                                if (celldata.terrain > -1) {\n                                    this.addTerrainParams(celldata);\n                                }\n                                let neighbors = terrainSet._neighbors;\n                                for (let i = 0, len = neighbors.length; i < len; i++) {\n                                    let neighbor = neighbors[i];\n                                    if (celldata.get_terrainPeeringBit(neighbor) > -1) {\n                                        this.addTerrainParams(celldata);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            for (let i = 0, len = this._terrainSets.length; i < len; i++) {\n                this._addEmptyParams(this._terrainSets[i]);\n            }\n        }\n    }\n    _getParamsList(terrainSet) {\n        this.updateTerrains();\n        return this._paramsLists[terrainSet];\n    }\n    _clearTerrainParams() {\n        let paramsLists = this._paramsLists;\n        for (let i = 0, ilen = paramsLists.length; i < ilen; i++) {\n            let paramsList = paramsLists[i];\n            if (!paramsList)\n                continue;\n            for (let j = 0, jlen = paramsList.length; j < jlen; j++) {\n                let params = paramsList[j];\n                if (!params)\n                    continue;\n                for (let k = 0, klen = params.length; k < klen; k++)\n                    params[k] && params[k].clearLinks();\n            }\n        }\n    }\n    addTerrainParams(cellData) {\n        let params;\n        let list = this._paramsLists[cellData.terrainSet] ? (this._paramsLists[cellData.terrainSet][cellData.terrain] ? this._paramsLists[cellData.terrainSet][cellData.terrain] : null) : null;\n        if (list) {\n            let bits = cellData._getTerrainPeeringBits();\n            let terrainSet = this.getTerrainSet(cellData.terrainSet);\n            let neighbors = terrainSet._neighbors;\n            let nLen = neighbors.length;\n            for (let i = 0, ilen = list.length; i < ilen; i++) {\n                let oParams = list[i];\n                let same = true;\n                for (let j = 0; j < nLen; j++) {\n                    let neighbor = neighbors[j];\n                    if (oParams.terrain_peering_bits[neighbor] != bits[neighbor]) {\n                        same = false;\n                        break;\n                    }\n                }\n                if (same) {\n                    params = oParams;\n                    break;\n                }\n            }\n        }\n        else {\n            params = this._addTerrainParams(cellData);\n        }\n        if (!params) {\n            params = cellData.getTerrainsParams();\n            list.push(params);\n        }\n        params.link(cellData);\n        return params;\n    }\n    _addTerrainParams(cellData) {\n        let tlists = this._paramsLists[cellData.terrainSet];\n        if (!tlists) {\n            tlists = this._paramsLists[cellData.terrainSet] = [];\n        }\n        let list = tlists[cellData.terrain];\n        if (!list) {\n            list = tlists[cellData.terrain] = [];\n        }\n        let params = cellData.getTerrainsParams();\n        list.push(params);\n        return params;\n    }\n    _addEmptyParams(terrainSet) {\n        let list = this._paramsLists[terrainSet.id] ? (this._paramsLists[terrainSet.id][-1] ? this._paramsLists[terrainSet.id][-1] : null) : null;\n        let params;\n        if (list) {\n            let neighbors = terrainSet._neighbors;\n            let nLen = neighbors.length;\n            for (let i = 0, ilen = list.length; i < ilen; i++) {\n                let oParams = list[i];\n                let same = true;\n                for (let j = 0; j < nLen; j++) {\n                    let neighbor = neighbors[j];\n                    if (oParams.terrain_peering_bits[neighbor] != -1) {\n                        same = false;\n                        break;\n                    }\n                }\n                if (same) {\n                    params = oParams;\n                    break;\n                }\n            }\n        }\n        else {\n            let tlists = this._paramsLists[terrainSet.id] = this._paramsLists[terrainSet.id] || [];\n            list = tlists[-1] = tlists[-1] || [];\n        }\n        if (!params) {\n            params = new TerrainsParams;\n            params.terrainSet = terrainSet.id;\n            list.push(params);\n        }\n        params.link(TileSetCellData._EMPTY);\n        return params;\n    }\n    getDefalutMaterial(texture) {\n        let url = texture.url;\n        let dMat = this._defalutMaterials[url];\n        if (!dMat) {\n            dMat = new Material();\n            dMat.setShaderName(\"TileMapLayer\");\n            dMat.setColor(\"u_Color\", new Color(1, 1, 1, 1));\n            dMat.setBoolByIndex(Shader3D.DEPTH_WRITE, false);\n            dMat.setIntByIndex(Shader3D.DEPTH_TEST, RenderState.DEPTHTEST_OFF);\n            dMat.setIntByIndex(Shader3D.BLEND, RenderState.BLEND_ENABLE_ALL);\n            dMat.setIntByIndex(Shader3D.BLEND_EQUATION, RenderState.BLENDEQUATION_ADD);\n            dMat.setIntByIndex(Shader3D.BLEND_SRC, RenderState.BLENDPARAM_ONE);\n            dMat.setIntByIndex(Shader3D.BLEND_DST, RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA);\n            dMat.setFloatByIndex(ShaderDefines2D.UNIFORM_VERTALPHA, 1.0);\n            dMat.setIntByIndex(Shader3D.CULL, RenderState.CULL_NONE);\n            dMat.setTexture(\"u_render2DTexture\", texture);\n            if (texture.gammaCorrection != 1) {\n                dMat.addDefine(ShaderDefines2D.GAMMATEXTURE);\n            }\n            else {\n                dMat.removeDefine(ShaderDefines2D.GAMMATEXTURE);\n            }\n            this._defalutMaterials[url] = dMat;\n        }\n        return dMat;\n    }\n}\n","import { Matrix } from \"../maths/Matrix\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { TileAlternativesData } from \"./TileAlternativesData\";\nimport { TileMapUtils } from \"./TileMapUtils\";\nexport class TileSetCellGroup {\n    get tiles() {\n        return this._tiles;\n    }\n    set tiles(value) {\n        if (value) {\n            for (let y in value) {\n                for (let x in value[y]) {\n                    value[y][x].owner = this;\n                }\n            }\n        }\n        this._tiles = value;\n    }\n    get atlas() {\n        return this._atlas;\n    }\n    set atlas(value) {\n        if (this._atlas === value)\n            return;\n        value._addReference();\n        this._atlas = value;\n        this._atlasSize.setValue(value.width, value.height);\n        this._recaculateUVOriProperty(true);\n    }\n    get atlasSize() {\n        return this._atlasSize;\n    }\n    set atlasSize(value) {\n        value.cloneTo(this._atlasSize);\n        this._recaculateUVOriProperty(true);\n    }\n    get margin() {\n        return this._margin;\n    }\n    set margin(value) {\n        value.cloneTo(this._margin);\n        this._recaculateUVOriProperty(true);\n    }\n    get separation() {\n        return this._separation;\n    }\n    set separation(value) {\n        value.cloneTo(this._separation);\n        this._recaculateUVOriProperty(true);\n    }\n    get textureRegionSize() {\n        return this._textureRegionSize;\n    }\n    set textureRegionSize(value) {\n        value.cloneTo(this._textureRegionSize);\n        this._recaculateUVOriProperty(true);\n    }\n    constructor() {\n        this._maxAlternativesCount = 0;\n        this._maxCellCount = new Vector2();\n        this._tileMatrix = new Matrix();\n        this._tiles = {};\n        this._separation = new Vector2();\n        this._margin = new Vector2();\n        this._textureRegionSize = new Vector2();\n        this._atlasSize = new Vector2();\n    }\n    get owner() {\n        return this._owner;\n    }\n    set owner(value) {\n        if (this._owner != null)\n            console.error(\"owner is not null\");\n        this._owner = value;\n        this._owner.addTileSetCellGroup(this);\n    }\n    _recaculateUVOriProperty(needNotiveCell) {\n        this._tileMatrix.identity();\n        this._tileMatrix.scale(this._textureRegionSize.x + this._separation.x, this._textureRegionSize.y + this._separation.y);\n        this._tileMatrix.translate(this._margin.x, this._margin.y);\n        this._tileMatrix.invert();\n        let maxX = Math.floor((this._atlasSize.x - this._margin.x) / (this._textureRegionSize.x + this._separation.x));\n        let maxY = Math.floor((this._atlasSize.y - this._margin.y) / (this._textureRegionSize.y + this._separation.y));\n        this._maxAlternativesCount = maxX * maxY;\n        this._maxCellCount.setValue(maxX, maxY);\n        for (var i in this._tiles) {\n            let rowTile = this._tiles[i];\n            for (var j in rowTile) {\n                rowTile[j]._init();\n            }\n        }\n        if (needNotiveCell) {\n            this._owner && this._owner._notifyTileSetCellGroupsChange();\n        }\n    }\n    onAtlasSizeChange() {\n        this._owner && this._owner._notifyTileSetCellGroupsChange();\n    }\n    _getGlobalAlternativesId(x, y) {\n        return TileMapUtils.getNativeId(this.id, y * this._maxCellCount.x + x);\n    }\n    _getCellPosByAlternativesId(nativeIndex, out) {\n        out.x = nativeIndex % this._maxCellCount.x;\n        out.y = Math.floor(nativeIndex / this._maxCellCount.x);\n    }\n    _getTilePixelOrgin(localPos, out) {\n        let uvX = localPos.x * (this._textureRegionSize.x + this._separation.x) + this._margin.x;\n        let uvY = localPos.y * (this._textureRegionSize.y + this._separation.y) + this._margin.y;\n        out.setValue(uvX, uvY);\n        return out;\n    }\n    _getTileUVExtends(size, out) {\n        out.x = (size.x - 1) * this._separation.x + this._textureRegionSize.x * size.x;\n        out.y = (size.y - 1) * this._separation.y + this._textureRegionSize.y * size.y;\n        return out;\n    }\n    getAlternative(x, y) {\n        if (!this._tiles[y]) {\n            return null;\n        }\n        return this._tiles[y][x];\n    }\n    addAlternaltive(x, y, sizeInAtlas) {\n        let data = this.getAlternative(x, y);\n        if (data) {\n            return data;\n        }\n        let tempv2 = Vector2.TEMP;\n        this._getTileUVExtends(sizeInAtlas, tempv2);\n        if ((tempv2.x + x > this._atlasSize.x) || (tempv2.y + y > this._atlasSize.y))\n            return null;\n        let alterData = new TileAlternativesData();\n        {\n            alterData.localPos = new Vector2(x, y);\n            alterData.sizeByAtlas = sizeInAtlas;\n            alterData.owner = this;\n            alterData._initialIndexFIrstCellData();\n        }\n        for (var j = 0, sizey = sizeInAtlas.y; j < sizey; j++) {\n            let ymap = this._tiles[j + y];\n            if (!ymap)\n                ymap = this._tiles[j + y] = {};\n            for (var i = 0, sizex = sizeInAtlas.x; i < sizex; i++) {\n                ymap[i + x] = alterData;\n            }\n        }\n        return alterData;\n    }\n    removeAlternaltive(localPos) {\n        if (!this._tiles[localPos.y]) {\n            return;\n        }\n        let rowMap = this._tiles[localPos.y];\n        if (!rowMap[localPos.x]) {\n            return;\n        }\n        delete rowMap[localPos.x];\n    }\n    getCellData(localPos, index) {\n        let tile = this.getAlternative(localPos.x, localPos.y);\n        if (tile == null) {\n            return null;\n        }\n        return tile.getCelldata(index);\n    }\n    getCellDataByIndex(nativeIndex, cellIndex) {\n        const temp = Vector2.TEMP;\n        this._getCellPosByAlternativesId(nativeIndex, temp);\n        let data = this.getAlternative(temp.x, temp.y);\n        if (data == null) {\n            return null;\n        }\n        return data.getCelldata(cellIndex);\n    }\n    removeCellData(localPos, index) {\n        let tile = this.getAlternative(localPos.x, localPos.y);\n        if (tile == null) {\n            return null;\n        }\n        return tile.removeCellData(index);\n    }\n    release() {\n    }\n}\n","import { Loader } from \"../../net/Loader\";\nimport { TileSet } from \"../TileSet\";\nimport { TileSetCellGroup } from \"../TileSetCellGroup\";\nimport { Byte } from \"../../utils/Byte\";\nimport { ObjDecoder } from \"../../loaders/ObjDecoder\";\nimport { Utils } from \"../../utils/Utils\";\nclass TileSetLoader {\n    load(task) {\n        return task.loader.fetch(task.url, \"json\", task.progress.createCallback(0.2), task.options).then(data => {\n            if (!data)\n                return null;\n            if (!data.groups)\n                data.groups = [];\n            const groups = data.groups;\n            let urls = [];\n            for (let i = 0, len = groups.length; i < len; i++) {\n                let url = groups[i].atlas._$uuid;\n                if (Utils.isUUID(url)) {\n                    url = \"res://\" + url;\n                }\n                urls.push({ url: url, type: Loader.TEXTURE2D });\n            }\n            return this.load2(task, data, urls);\n        });\n    }\n    load2(task, data, urls) {\n        let options = Object.assign({}, task.options);\n        options.initiator = task;\n        delete options.cache;\n        delete options.ignoreCache;\n        return task.loader.load(urls, options, task.progress.createCallback()).then(() => {\n            let tileSet = new TileSet();\n            tileSet.tileShape = data.tileShape ? data.tileShape : 0;\n            for (let i = 0, len = data.groups.length; i < len; i++) {\n                this.createGroup(tileSet, data.groups[i]);\n            }\n            if (data.tileSize) {\n                tileSet.tileSize = ObjDecoder.decodeObj(data.tileSize);\n            }\n            tileSet.physicsLayers = ObjDecoder.decodeObj(data.physicsLayers);\n            tileSet.lightInfoLayers = ObjDecoder.decodeObj(data.lightInfoLayers);\n            tileSet.customLayers = ObjDecoder.decodeObj(data.customLayers);\n            tileSet.navigationLayers = ObjDecoder.decodeObj(data.navigationLayers);\n            tileSet.terrainSets = ObjDecoder.decodeObj(data.terrainSets);\n            tileSet._notifyTileSetCellGroupsChange();\n            return tileSet;\n        });\n    }\n    createGroup(tileSet, data) {\n        let group = new TileSetCellGroup();\n        group.id = data.id;\n        group.name = data.name;\n        tileSet.addTileSetCellGroup(group);\n        ObjDecoder.decodeObj(data, group);\n        if (data.atlas.path) {\n            group.atlas = Loader.getBaseTexture(data.atlas.path);\n        }\n    }\n}\nexport class TileMapDatasParse {\n    static read(buffer) {\n        let byte = new Byte(buffer);\n        byte.pos = 0;\n        let version = byte.readUTFString();\n        if (!version.startsWith(\"TILEMAPLAYER_DATA\"))\n            return null;\n        let chunkNum = byte.readUint32();\n        let chunks = [];\n        for (let i = 0; i < chunkNum; i++) {\n            let x = byte.readFloat32();\n            let y = byte.readFloat32();\n            let length = byte.readUint32();\n            let tiles = [];\n            for (let j = 0; j < length; j++) {\n                let localId = byte.readUint32();\n                let gid = byte.readUint32();\n                tiles.push(localId, gid);\n            }\n            let chunkInfos = { x, y, length, tiles };\n            chunks.push(chunkInfos);\n        }\n        return chunks;\n    }\n}\nLoader.registerLoader([\"tres\"], TileSetLoader, \"tres\");\n","import { Event } from \"../../events/Event\";\nimport { LightOccluder2DCore } from \"../../Light2D/LightOccluder2DCore\";\nexport class TileMapOccluder {\n    get layerMask() {\n        return this._core.layerMask;\n    }\n    set layerMask(value) {\n        this._core.layerMask = value;\n    }\n    set manager(value) {\n        this._core.manager = value;\n    }\n    get canInLight() {\n        return this._core.canInLight;\n    }\n    set canInLight(value) {\n        this._core.canInLight = value;\n    }\n    get polygonPoint() {\n        return this._core.polygonPoint;\n    }\n    set polygonPoint(value) {\n        this._core.polygonPoint = value;\n    }\n    get outside() {\n        return this._core.outside;\n    }\n    set outside(value) {\n        this._core.outside = value;\n    }\n    constructor() {\n        this._core = new LightOccluder2DCore();\n    }\n    _onEnable() {\n        this._core.owner = this.owner;\n        this.owner.on(Event.TRANSFORM_CHANGED, this._core, this._core._transformChange);\n        this._core._onEnable();\n    }\n    _onDisable() {\n        this.owner.off(Event.TRANSFORM_CHANGED, this._core, this._core._transformChange);\n        this._core._onDisable();\n    }\n    destroy() {\n        this._onDisable();\n        this._core.destroy();\n        this._core = null;\n    }\n}\n","import { TileMapOccluder } from \"./light/TileMapOccluder\";\nexport class TileMapOccluderAgent {\n    constructor(layer) {\n        this.enable = false;\n        this._occluders = [];\n        this._layer = layer;\n    }\n    _updateManager() {\n        var _a, _b;\n        let manager = (_b = (_a = this._layer.owner) === null || _a === void 0 ? void 0 : _a.scene) === null || _b === void 0 ? void 0 : _b._light2DManager;\n        this._manager = manager;\n    }\n    updateState(bool) {\n        if (bool != this.enable) {\n            this.enable = bool;\n            if (bool)\n                this.enableAllOccluders();\n            else\n                this.disableAllOccluders();\n        }\n    }\n    enableAllOccluders() {\n        if (!this._manager || !this._occluders.length)\n            return;\n        for (let i = 0, len = this._occluders.length; i < len; i++) {\n            this._occluders[i].manager = this._manager;\n            this._occluders[i]._onEnable();\n        }\n    }\n    disableAllOccluders() {\n        if (!this._manager || !this._occluders.length)\n            return;\n        for (let i = 0, len = this._occluders.length; i < len; i++)\n            this._occluders[i]._onDisable();\n    }\n    _removeAllOccluders() {\n        if (!this._manager)\n            return;\n        for (let i = this._occluders.length - 1; i > -1; i--)\n            this.removeOccluder(this._occluders[i]);\n    }\n    addOccluder(poly, layerMask) {\n        let occluder = new TileMapOccluder();\n        occluder.owner = this._layer.owner;\n        occluder.manager = this._manager;\n        occluder.polygonPoint = poly;\n        occluder.layerMask = layerMask;\n        occluder._onEnable();\n        this._occluders.push(occluder);\n        return occluder;\n    }\n    removeOccluder(occluder) {\n        if (!occluder)\n            return false;\n        let index = this._occluders.indexOf(occluder);\n        this._occluders.splice(index, 1);\n        occluder.destroy();\n        return true;\n    }\n    destroy() {\n        this._removeAllOccluders();\n    }\n}\n","import { Color } from \"../maths/Color\";\nimport { Vector2 } from \"../maths/Vector2\";\nimport { Vector3 } from \"../maths/Vector3\";\nimport { BaseRenderNode2D } from \"../NodeRender2D/BaseRenderNode2D\";\nimport { Grid } from \"./grid/Grid\";\nimport { TileMapChunk } from \"./TileMapChunk\";\nimport { TileMapChunkData } from \"./TileMapChunkData\";\nimport { TileMapShaderInit } from \"./shader/TileMapShaderInit\";\nimport { TileMapPhysics } from \"./TileMapPhysics\";\nimport { Matrix } from \"../maths/Matrix\";\nimport { Laya } from \"../../Laya\";\nimport { Rectangle } from \"../maths/Rectangle\";\nimport { RectClipper } from \"./RectClipper\";\nimport { TileMapDatasParse } from \"./loaders/TileSetAssetLoader\";\nimport { DirtyFlagType, TileLayerSortMode } from \"./TileMapEnum\";\nimport { TileMapOccluderAgent } from \"./TileMapOccluderAgent\";\nimport { Event } from \"../events/Event\";\nimport { TileMapTerrainUtil } from \"./terrain/TileMapTerrainUtils\";\nexport var TILEMAPLAYERDIRTYFLAG;\n(function (TILEMAPLAYERDIRTYFLAG) {\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_CHANGE\"] = 1] = \"CELL_CHANGE\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_COLOR\"] = 2] = \"CELL_COLOR\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_QUAD\"] = 4] = \"CELL_QUAD\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_QUADUV\"] = 8] = \"CELL_QUADUV\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_UVTRAN\"] = 16] = \"CELL_UVTRAN\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_PHYSICS\"] = 32] = \"CELL_PHYSICS\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_TERRAIN\"] = 64] = \"CELL_TERRAIN\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_LIGHTSHADOW\"] = 128] = \"CELL_LIGHTSHADOW\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_NAVIGATION\"] = 256] = \"CELL_NAVIGATION\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"CELL_SORTCHANGE\"] = 512] = \"CELL_SORTCHANGE\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"TILESET_SAZE\"] = 1024] = \"TILESET_SAZE\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"LAYER_COLOR\"] = 2048] = \"LAYER_COLOR\";\n    TILEMAPLAYERDIRTYFLAG[TILEMAPLAYERDIRTYFLAG[\"LAYER_PHYSICS\"] = 4096] = \"LAYER_PHYSICS\";\n})(TILEMAPLAYERDIRTYFLAG || (TILEMAPLAYERDIRTYFLAG = {}));\nconst TempRectange = new Rectangle();\nconst TempMatrix = new Matrix();\nconst TempVector2_1 = new Vector2();\nconst TempVector2_2 = new Vector2();\nexport class TileMapLayer extends BaseRenderNode2D {\n    static __init__() {\n        if (TileMapLayer._inited)\n            return;\n        this._inited = true;\n        TileMapShaderInit.__init__();\n        TileMapPhysics.__init__();\n        TileMapTerrainUtil.__init__();\n    }\n    get chunkDatas() {\n        return this._chunkDatas;\n    }\n    set chunkDatas(datas) {\n        this._chunkDatas = datas;\n        if (datas) {\n            for (const col in datas) {\n                let chunkDatas = datas[col];\n                for (const row in chunkDatas) {\n                    let chunkData = chunkDatas[row];\n                    chunkData._tileLayer = this;\n                    chunkData._updateChunkData(chunkData.chunkX, chunkData.chunkY);\n                    chunkData._parseCellDataRefMap();\n                }\n            }\n        }\n    }\n    get layerColor() {\n        return this._layerColor;\n    }\n    set layerColor(value) {\n        value.cloneTo(this._layerColor);\n        if (this._grid._updateColor(value) && this._tileSet) {\n            this._grid._updateBufferData();\n        }\n    }\n    get sortMode() {\n        return this._sortMode;\n    }\n    set sortMode(value) {\n        this._sortMode = value;\n    }\n    get navigationEnable() {\n        return this._navigationEnable;\n    }\n    set navigationEnable(value) {\n        this._navigationEnable = value;\n    }\n    get physicsEnable() {\n        return this._physicsEnable;\n    }\n    set physicsEnable(value) {\n        this._tileMapPhysics.updateState(value);\n        this._physicsEnable = value;\n    }\n    get lightOccluderEnable() {\n        return this._lightOccluderEnable;\n    }\n    set lightOccluderEnable(value) {\n        this._tileMapOccluder.updateState(value);\n        this._lightOccluderEnable = value;\n    }\n    get tileSet() {\n        return this._tileSet;\n    }\n    set tileSet(value) {\n        if (this._tileSet == value) {\n            return;\n        }\n        if (this._tileSet)\n            this._tileSet._removeOwner(this);\n        this._tileSet = value;\n        if (value) {\n            this.tileSet._addOwner(this);\n            this._initialTileSet();\n        }\n    }\n    get renderTileSize() {\n        return this._renderTileSize;\n    }\n    set renderTileSize(value) {\n        if (this._renderTileSize === value)\n            return;\n        this._renderTileSize = value;\n        this._updateChunkData();\n    }\n    get tileMapDatas() {\n        return this._tileMapDatas;\n    }\n    set tileMapDatas(value) {\n        this._tileMapDatas = value;\n    }\n    get tileMapPhysics() {\n        return this._tileMapPhysics;\n    }\n    get tileMapOccluder() {\n        return this._tileMapOccluder;\n    }\n    constructor() {\n        super();\n        this._layerColor = new Color();\n        this._renderTileSize = 32;\n        this._needUpdateDirtys = [];\n        this._layerColor = new Color(1, 1, 1, 1);\n        this._chunkDatas = [];\n        this._grid = new Grid();\n        this._chunk = new TileMapChunk(this._grid);\n        this._chunk._setChunkSize(this._renderTileSize, this._renderTileSize);\n        this._tileMapPhysics = new TileMapPhysics(this);\n        this._tileMapOccluder = new TileMapOccluderAgent(this);\n        this._cliper = new RectClipper();\n        this._renderElements = [];\n        this._materials = [];\n        this.sortMode = TileLayerSortMode.YSort;\n        this._spriteShaderData.addDefine(BaseRenderNode2D.SHADERDEFINE_BASERENDER2D);\n    }\n    _initialTileSet() {\n        this._grid._updateTileShape(this._tileSet.tileShape, this._tileSet.tileSize);\n        this._grid._updateColor(this._layerColor);\n        this._grid._updateBufferData();\n    }\n    _updateChunkData() {\n        const minVec = TempVector2_1;\n        minVec.setValue(Number.MAX_VALUE, Number.MAX_VALUE);\n        const maxVec = TempVector2_2;\n        maxVec.setValue(-Number.MIN_VALUE, -Number.MIN_VALUE);\n        let mergeDatas = new Map();\n        let allDatas = [];\n        for (const col in this._chunkDatas) {\n            let chunkDatas = this._chunkDatas[col];\n            for (const row in chunkDatas) {\n                let chunkData = chunkDatas[row];\n                chunkData._mergeBuffer(mergeDatas, minVec, maxVec);\n                allDatas.push(chunkData);\n            }\n        }\n        let tileSize = this._renderTileSize;\n        this._chunk._setChunkSize(tileSize, tileSize);\n        if (minVec.x > maxVec.x || minVec.y > maxVec.y) {\n            return;\n        }\n        this._chunkDatas = [];\n        const tempVec3 = Vector3.TEMP;\n        this._chunk._getChunkPosByCell(minVec.x, minVec.y, tempVec3);\n        let startRow = tempVec3.x;\n        let startCol = tempVec3.y;\n        this._chunk._getChunkPosByCell(maxVec.x, maxVec.y, tempVec3);\n        let endRow = tempVec3.x;\n        let endCol = tempVec3.y;\n        for (var j = startCol; j <= endCol; j++) {\n            for (var i = startRow; i <= endRow; i++) {\n                let chunkData = allDatas.pop() || new TileMapChunkData();\n                chunkData._tileLayer = this;\n                chunkData._updateChunkData(i, j);\n                let mark = chunkData._setBuffer(mergeDatas, minVec, maxVec, tileSize);\n                if (mark) {\n                    this._setLayerDataByPos(chunkData);\n                }\n                else {\n                    allDatas.push(chunkData);\n                }\n            }\n        }\n        allDatas.forEach(data => data._destroy());\n    }\n    _updateMapDatas() {\n        if (this._tileMapDatas == null || !this._tileMapDatas.length) {\n            return;\n        }\n        let chunks = TileMapDatasParse.read(this._tileMapDatas);\n        for (var i = 0, len = chunks.length; i < len; i++) {\n            let data = new TileMapChunkData();\n            data._tileLayer = this;\n            data._setRenderData(chunks[i]);\n            this._setLayerDataByPos(data);\n        }\n    }\n    _setLayerDataByPos(tile) {\n        const chunkX = tile.chunkX;\n        const chunkY = tile.chunkY;\n        let rowData = this._chunkDatas[chunkY];\n        if (!rowData) {\n            rowData = [];\n            this._chunkDatas[chunkY] = rowData;\n        }\n        rowData[chunkX] = tile;\n    }\n    _getLayerDataTileByPos(chunkX, chunkY) {\n        let rowData = this._chunkDatas[chunkY];\n        if (!rowData) {\n            rowData = [];\n            this._chunkDatas[chunkY] = rowData;\n        }\n        let data = rowData[chunkX];\n        if (!data) {\n            data = new TileMapChunkData();\n            data._tileLayer = this;\n            data._updateChunkData(chunkX, chunkY);\n            rowData[chunkX] = data;\n        }\n        return data;\n    }\n    onAwake() {\n        super.onAwake();\n        this._updateMapDatas();\n    }\n    onEnable() {\n        super.onEnable();\n        this.owner.globalTrans.cache = true;\n        this._tileMapOccluder._updateManager();\n        this._tileMapPhysics.enable && this._tileMapPhysics.enableRigidBodys();\n        this._tileMapOccluder.enable && this._tileMapOccluder.enableAllOccluders();\n        this.owner.on(Event.TRANSFORM_CHANGED, this, this._globalChangeHandler);\n    }\n    onDisable() {\n        super.onDisable();\n        this._tileMapPhysics.enable && this._tileMapPhysics.disableRigidBodys();\n        this._tileMapOccluder.enable && this._tileMapOccluder._removeAllOccluders();\n        this.owner.off(Event.TRANSFORM_CHANGED, this, this._globalChangeHandler);\n    }\n    onDestroy() {\n        super.onDestroy();\n        this._tileMapPhysics;\n        this._tileMapOccluder.destroy();\n    }\n    _globalChangeHandler() {\n        this._needUpdateDirtys[DirtyFlagType.PHYSICS] = true;\n    }\n    _globalTransfrom() {\n        return this.owner.globalTrans.getMatrix();\n    }\n    addCMDCall(context, px, py) {\n        let mat = context._curMat;\n        let vec3 = Vector3.TEMP;\n        vec3.setValue(mat.a, mat.c, px * mat.a + py * mat.c + mat.tx);\n        this._spriteShaderData.setVector3(BaseRenderNode2D.NMATRIX_0, vec3);\n        vec3.setValue(mat.b, mat.d, px * mat.b + py * mat.d + mat.ty);\n        this._spriteShaderData.setVector3(BaseRenderNode2D.NMATRIX_1, vec3);\n        this._setRenderSize(context.width, context.height);\n        context._copyClipInfoToShaderData(this._spriteShaderData);\n    }\n    preRenderUpdate(context) {\n        let tileSet = this._tileSet;\n        if (tileSet == null)\n            return;\n        const clipChuckMat = TempMatrix;\n        const renderRect = TempRectange;\n        let mat = this._globalTransfrom();\n        let scene = this.owner.scene;\n        let camera = scene === null || scene === void 0 ? void 0 : scene._curCamera;\n        let ofx = 0, ofy = 0;\n        if (camera == null) {\n            renderRect.setTo(0, 0, Laya.stage.width, Laya.stage.height);\n            mat.copyTo(clipChuckMat);\n            ofx = renderRect.width / 2;\n            ofy = renderRect.height / 2;\n        }\n        else {\n            let rect = camera._rect;\n            renderRect.setTo(rect.x, rect.z, rect.y - rect.x, rect.w - rect.z);\n            let cameraMat = camera._getCameraTransform();\n            var e = cameraMat.elements;\n            clipChuckMat.a = e[0];\n            clipChuckMat.b = e[1];\n            clipChuckMat.c = e[3];\n            clipChuckMat.d = e[4];\n            clipChuckMat.tx = e[6];\n            clipChuckMat.ty = e[7];\n            Matrix.mul(mat, clipChuckMat, clipChuckMat);\n        }\n        let oneChuckSize = Vector2.TEMP;\n        this._chunk._getChunkSize(oneChuckSize);\n        let chuckLocalRect = this._cliper.setClipper(renderRect, oneChuckSize, clipChuckMat, ofx, ofy, 0);\n        this._renderElements.length = 0;\n        let tileSize = this.tileSet.tileSize;\n        let checkPoint = Vector2.TEMP;\n        let tempVec3 = Vector3.TEMP;\n        this._chunk._getChunkPosByPixel(chuckLocalRect.x - tileSize.x, chuckLocalRect.y - tileSize.y, tempVec3);\n        let chuckstartRow = tempVec3.x;\n        let chuckstartCol = tempVec3.y;\n        this._chunk._getChunkPosByPixel(chuckLocalRect.z + tileSize.x, chuckLocalRect.w + tileSize.y, tempVec3);\n        let chuckendRow = tempVec3.x;\n        let chuckendCol = tempVec3.y;\n        for (let j = chuckstartCol; j <= chuckendCol; j++) {\n            if (!this._chunkDatas[j]) {\n                continue;\n            }\n            let rowData = this._chunkDatas[j];\n            for (let i = chuckstartRow; i <= chuckendRow; i++) {\n                let chunkData = rowData[i];\n                if (!chunkData) {\n                    continue;\n                }\n                this._chunk._getChunkLeftTop(i, j, checkPoint);\n                if (!this._cliper.isClipper(checkPoint.x, checkPoint.y)) {\n                    chunkData._update();\n                    chunkData._mergeToElement(this._renderElements);\n                }\n            }\n        }\n        let needUpdatePhysics = this._tileMapPhysics.enable && this._needUpdateDirtys[DirtyFlagType.PHYSICS];\n        if (needUpdatePhysics) {\n            this._tileMapPhysics._updateTransfrom();\n            this._needUpdateDirtys[DirtyFlagType.PHYSICS] = false;\n        }\n    }\n    setCellData(x, y, cellData, isPixel = true) {\n        if (cellData == null)\n            return;\n        let tempVec3 = Vector3.TEMP;\n        if (isPixel) {\n            this._chunk._getChunkPosByPixel(x, y, tempVec3);\n        }\n        else {\n            this._chunk._getChunkPosByCell(x, y, tempVec3);\n        }\n        let chunkData = this._getLayerDataTileByPos(tempVec3.x, tempVec3.y);\n        chunkData._setCell(tempVec3.z, cellData);\n    }\n    getCellData(x, y, isPixel = true) {\n        let tempVec3 = Vector3.TEMP;\n        if (isPixel) {\n            this._chunk._getChunkPosByPixel(x, y, tempVec3);\n        }\n        else {\n            this._chunk._getChunkPosByCell(x, y, tempVec3);\n        }\n        let rowData = this._chunkDatas[tempVec3.y];\n        if (!rowData)\n            return null;\n        let data = rowData[tempVec3.x];\n        if (!data)\n            return null;\n        return data.getCell(tempVec3.z);\n    }\n    removeCell(x, y, isPixel = true) {\n        let tempVec3 = Vector3.TEMP;\n        if (isPixel) {\n            this._chunk._getChunkPosByPixel(x, y, tempVec3);\n        }\n        else {\n            this._chunk._getChunkPosByCell(x, y, tempVec3);\n        }\n        let chunkData = this._getLayerDataTileByPos(tempVec3.x, tempVec3.y);\n        chunkData._removeCell(tempVec3.z);\n    }\n    pixelToGrid(pixelX, pixelY, out) {\n        this._grid._pixelToGrid(pixelX, pixelY, out);\n    }\n    gridToPixel(cellRow, cellCol, out) {\n        this._grid._gridToPixel(cellRow, cellCol, out);\n    }\n    getDefalutMaterial(texture) {\n        return this.tileSet.getDefalutMaterial(texture);\n    }\n}\nTileMapLayer._inited = false;\nLaya.addInitCallback(() => TileMapLayer.__init__());\n","import { ClassUtils } from \"../utils/ClassUtils\";\nimport { TileSetCustomDataLayer } from \"./layers/TileSetCustomDataLayer\";\nimport { TileMapNavigationLayer } from \"./layers/TileSetNavigationLayer\";\nimport { TileSetOcclusionLayer } from \"./layers/TileSetOcclusionLayer\";\nimport { TileSetPhysicsLayer } from \"./layers/TileSetPhysicsLayer\";\nimport { TileSetTerrainSet, TileSetTerrain } from \"./layers/TileSetTerrainSet\";\nimport { TileAlternativesData } from \"./TileAlternativesData\";\nimport { TileMapChunkData } from \"./TileMapChunkData\";\nimport { TileMapLayer } from \"./TileMapLayer\";\nimport { TileMapPhysics } from \"./TileMapPhysics\";\nimport { TileSet } from \"./TileSet\";\nimport { TileSetCellData, TileSetCellNavigationInfo, TileSetCellOcclusionInfo, TileSetCellPhysicsInfo } from \"./TileSetCellData\";\nimport { TileSetCellGroup } from \"./TileSetCellGroup\";\nlet c = ClassUtils.regClass;\nc(\"TileSet\", TileSet);\nc(\"TileSetCellGroup\", TileSetCellGroup);\nc(\"TileAlternativesData\", TileAlternativesData);\nc(\"TileSetCellData\", TileSetCellData);\nc(\"TileMapLayer\", TileMapLayer);\nc(\"TileMapChunkData\", TileMapChunkData);\nc(\"TileMapPhysics\", TileMapPhysics);\nc(\"TileSetPhysicsLayer\", TileSetPhysicsLayer);\nc(\"TileSetOcclusionLayer\", TileSetOcclusionLayer);\nc(\"TileSetTerrainSet\", TileSetTerrainSet);\nc(\"TileSetTerrain\", TileSetTerrain);\nc(\"TileMapNavigationLayer\", TileMapNavigationLayer);\nc(\"TileSetCustomDataLayer\", TileSetCustomDataLayer);\nc(\"TileSetCellPhysicsInfo\", TileSetCellPhysicsInfo);\nc(\"TileSetCellNavigationInfo\", TileSetCellNavigationInfo);\nc(\"TileSetCellOcclusionInfo\", TileSetCellOcclusionInfo);\n"],"names":["TileMapCellNeighbor","TileMapTerrainMode","TileShape","TileLayerSortMode","TileMapDirtyFlag","DirtyFlagType","Vector2","Vector3","Vector4","Color","TileAnimationMode","Laya","ShaderDataType","Shader3D","ShaderFeatureType","SubShader","VertexDeclaration","VertexElement","VertexElementFormat","PolygonPoint2D","LayaGL","BufferUsage","MeshTopology","DrawType","IndexFormat","Matrix","Box2DShapeDef","Physics2DWorldManager","RigidBody2DInfo","Utils","EPhysics2DShape","Rectangle","Point","Resource","Material","RenderState","ShaderDefines2D","Loader","ObjDecoder","Byte","LightOccluder2DCore","Event","TILEMAPLAYERDIRTYFLAG","BaseRenderNode2D","ClassUtils"],"mappings":"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"}