syntax = "proto3";

package lq;

option go_package = ".;majprotocol";

message Error {
  uint32 code = 1;
  repeated uint32 u32_params = 2;
  repeated string str_params = 3;
  string json_param = 4; // json对象（内容根据code变化）
}

message Wrapper {
  string name = 1;
  bytes data = 2;
}

message NetworkEndpoint {
  string family = 1;
  string address = 2;
  uint32 port = 3;
}

// 默认空请求结构体
message ReqCommon {
}
// 默认空回复结构体
message ResCommon {
  Error error = 1;
}

// 账号更新数据
message ResAccountUpdate {
  Error error = 1;
  AccountUpdate update = 2;
}

// 防沉迷数据
message AntiAddiction {
  uint32 online_duration = 1;
}

// 最高胡牌记录（包括 rong 和 zimo）
message HighestHuRecord {
  uint32 fanshu = 1;
  uint32 doranum = 2;
  string title = 3;
  repeated string hands = 4;
  repeated string ming = 5;
  string hupai = 6;
  uint32 title_id = 7;
}

message AccountMahjongStatistic {
  repeated uint32 final_position_counts = 1; // 名次场次数据 下标0对应1位

  // 回合总结
  message RoundSummary {
    uint32 total_count = 1; // 总回合数
    uint32 rong_count = 2; // 荣次数
    uint32 zimo_count = 3; // 自摸次数
    uint32 fangchong_count = 4; // 放铳次数
  }

  RoundSummary recent_round = 2; // 最近比赛回合数据

  // 胡牌总结
  message HuSummary {
    uint32 total_count = 1; // 胡牌总次数
    uint32 dora_round_count = 2; // 带dora次数
    uint32 total_fan = 3; // 总番数
  }

  HuSummary recent_hu = 3; // 最近胡牌数据

  HighestHuRecord highest_hu = 4; // 最高胡牌记录

//  repeated uint32 recent_ranks = 5; // 最近名次记录

  message Liqi20Summary {
    uint32 total_count = 1; //胡牌的次数
    uint32 total_lidora_count = 2; //胡牌带里宝牌的数量
    uint32 average_hu_point = 3; // 修正后的胡牌平均得点
  }
  Liqi20Summary recent_20_hu_summary = 6; //最近20场胡牌立直的内容

  message LiQi10Summary {
    uint32 total_xuanshang = 1; // 悬赏数之和
    uint32 total_fanshu = 2; // 番数之和
  }
  LiQi10Summary recent_10_hu_summary = 7; // 最近10场数据

  message GameResult {
    uint32 rank = 1; // 排名
    int32 final_point = 2; // 最终打点
  }
  repeated GameResult recent_10_game_result = 8; // 最近10场结果
}

// 账号统计数据（非database结构）
message AccountStatisticData {
  uint32 mahjong_category = 1;
  uint32 game_category = 2;
  AccountMahjongStatistic statistic = 3;
  uint32 game_type = 4;
}

// 段位
message AccountLevel {
  uint32 id = 1; // level_definition.id
  uint32 score = 2; // 分数
}

// 装扮
message ViewSlot {
  uint32 slot = 1;
  uint32 item_id = 2;
  uint32 type = 3; // 0-普通设置 1-随机装扮
  repeated uint32 item_id_list = 4; // 随机列表
}

message FavoriteHu {
  uint32 category = 1; // 1 - 四人麻将  2 - 三人麻将
  uint32 type = 2; // 1 - 段位场  2 - 友人场  3 - 活动场
  HighestHuRecord hu = 3; // 胡牌记录
  uint32 mode = 4; // 1- 显示最近大和 2- 显示自选和牌
}

// 账号信息
message Account {
  uint32 account_id = 1;
  string nickname = 2;
  uint32 login_time = 3;
  uint32 logout_time = 4;
  uint32 room_id = 5;
  AntiAddiction anti_addiction = 6; // 防沉迷
  uint32 title = 7; // 称号
  string signature = 8; // 签名
  string email = 9;
  uint32 email_verify = 10;

  uint32 gold = 11; // 金币
  uint32 diamond = 12; // 钻石
  uint32 avatar_id = 13;
  uint32 vip = 14; // VIP经验
  int32 birthday = 15;

  string phone = 16;
  uint32 phone_verify = 17;

  message PlatformDiamond {
    uint32 id = 1;
    uint32 count = 2;
  }
  repeated PlatformDiamond platform_diamond = 18; // 各平台钻石

  AccountLevel level = 21; // 4麻段位
  AccountLevel level3 = 22; // 3麻段位

  uint32 avatar_frame = 23;

  uint32 skin_ticket = 24;

  message PlatformSkinTicket {
    uint32 id = 1;
    uint32 count = 2;
  }
  repeated PlatformSkinTicket platform_skin_ticket = 25;
  uint32 verified = 26; // 名人认证

  message ChallengeLevel {
    uint32 season = 1;
    uint32 level = 2;
    uint32 rank = 3;
  }

  repeated ChallengeLevel challenge_levels = 27;

  uint32 frozen_state = 29;

  // 成就统计
  message AchievementCount {
    uint32 rare = 1;
    uint32 count = 2;
  }
  repeated AchievementCount achievement_count = 28;

  repeated uint32 loading_image = 30;

  // 勋章信息统计
  message Badge {
    uint32 id = 1; // 勋章id
    uint32 achieved_time = 2; // 首次完成时间戳（未完成则缺省值为0）
    uint32 achieved_counter = 3; // 统计次数
  }

  repeated FavoriteHu favorite_hu = 34;

  repeated Badge badges = 35; // 勋章列表
}

// 账号拥有着获得的数据
message AccountOwnerData {
  repeated uint32 unlock_characters = 1; // 已经解锁的人物列表
}

// 账号更新同步数据
message AccountUpdate {

  // 数值资源变化
  message NumericalUpdate {
    uint32 id = 1; // 资源Id
    uint32 final = 3; // 最终值
  }
  repeated NumericalUpdate numerical = 1;

  // 角色
  message CharacterUpdate {
    //repeated uint32 unlocks = 1; // 新增的解锁
    repeated Character characters = 2; // 新角色
    repeated uint32 skins = 3; // 新的皮肤
    repeated uint32 finished_endings = 4; // 新的完成结局
    repeated uint32 rewarded_endings = 5; // 新的已领取奖励结局
  }
  CharacterUpdate character = 2;

  // 背包
  BagUpdate bag = 3;

  // 成就
  message AchievementUpdate {
    repeated AchievementProgress progresses = 1; // 只发送有变动的
    repeated uint32 rewarded_group = 2; // 全量
  }
  AchievementUpdate achievement = 4;

  // 试炼
  AccountShiLian shilian = 5;

  // 每日任务
  message DailyTaskUpdate {
    repeated TaskProgress progresses = 1;
    repeated uint32 task_list = 2;
  }
  DailyTaskUpdate daily_task = 6;

  // 称号
  message TitleUpdate {
    repeated uint32 new_titles = 1; // 新增称号
    repeated uint32 remove_titles = 2; // 去除的称号
  }
  TitleUpdate title = 7;

  repeated uint32 new_recharged_list = 8; // 新增首充档位充值记录

  // 活动任务
  message TaskUpdate {
    repeated TaskProgress progresses = 1;
    repeated uint32 task_list = 2; // 当前任务列表
  }
  TaskUpdate activity_task = 9;

  // 翻牌牌任务
  TaskUpdate activity_flip_task = 10;

  TaskUpdate activity_period_task = 11;

  TaskUpdate activity_random_task = 12;

  message AccountChallengeUpdate {
    repeated TaskProgress progresses = 1;
    uint32 level = 2; // 试炼等级
    uint32 refresh_count = 3; // 当前再发行次数
    uint32 match_count = 4; // 当前比赛场数
    uint32 ticket_id = 5; // 试炼券ID
    repeated uint32 task_list = 6; // 任务列表
    repeated uint32 rewarded_season = 7; // 已经领取过奖励的赛季
  }
  AccountChallengeUpdate challenge = 13;

  message AccountABMatchUpdate {
    message MatchPoint {
      uint32 match_id = 1;
      uint32 point = 2;
    }

    uint32 match_id = 1;
    uint32 match_count = 2;
    uint32 buy_in_count = 3;
    uint32 point = 4;
    bool rewarded = 5;
    repeated MatchPoint match_max_point = 6;
    bool quit = 7;
  }

  AccountABMatchUpdate ab_match = 14;

  lq.AccountActivityUpdate activity = 15;

  message SegmentTaskUpdate {
    repeated lq.SegmentTaskProgress progresses = 1;
    repeated uint32 task_list = 2; // 当前任务列表
  }
  SegmentTaskUpdate activity_segment_task = 16;

  message MonthTicketUpdate {
    uint32 end_time = 1;
    uint32 last_pay_time = 2;
  }
  MonthTicketUpdate month_ticket = 17;

  message MainCharacterUpdate {
    uint32 character_id = 1; // 主角色id
    uint32 skin_id = 2; // 主角色装扮id
  }
  MainCharacterUpdate main_character = 18; // 主角色

  message BadgeUpdate {
    repeated BadgeAchieveProgress progresses = 1; // 只发送有进度更新的勋章
  }
  BadgeUpdate badge = 19;
}



message GameMetaData {
  uint32 room_id = 1; //友人房的房间id，不要被骗了！
  uint32 mode_id = 2; //模式id
  uint32 contest_uid = 3;
}

// 玩家正在进行的对局信息
message AccountPlayingGame {
  string game_uuid = 1;
  uint32 category = 2;  // 1=好友房 2=匹配
  GameMetaData meta = 3;
}

// 随机角色信息
message RandomCharacter {
  uint32 character_id = 1; // 角色id
  uint32 skin_id = 2; // 装饰id
}

// 账号缓存View结构
message AccountCacheView {
  uint32 cache_version = 1; // 预留的缓存结构版本控制（暂不使用）
  uint32 account_id = 2;
  string nickname = 3;
  uint32 login_time = 4;
  uint32 logout_time = 5;
  bool is_online = 6;
  uint32 room_id = 7;
  uint32 title = 8; // 称号
  uint32 avatar_id = 9;
  uint32 vip = 10; // VIP经验
  AccountLevel level = 11; // 段位
  AccountPlayingGame playing_game = 12; // 游戏对局信息
  AccountLevel level3 = 13;
  uint32 avatar_frame = 14;
  uint32 verified = 15;
  uint32 ban_deadline = 16;
  uint32 comment_ban = 17;
  uint32 ban_state = 18;
}

// 玩家基础信息
message PlayerBaseView {
  uint32 account_id = 1;
  uint32 avatar_id = 2; // 头像
  uint32 title = 3; // 称号
  string nickname = 4;
  AccountLevel level = 5;
  AccountLevel level3 = 6;
  uint32 avatar_frame = 7;
  uint32 verified = 8;
  uint32 is_banned = 9;
}

// 玩家游戏内信息
message PlayerGameView {
  uint32 account_id = 1;
  uint32 avatar_id = 2; // 头像
  uint32 title = 3; // 称号
  string nickname = 4;
  AccountLevel level = 5;
  Character character = 6;
  AccountLevel level3 = 7;
  uint32 avatar_frame = 8;
  uint32 verified = 9;
  repeated ViewSlot views = 10;
  uint32 team_id = 11; // 团体赛团队id（若玩家无团队则为空）
  string team_name = 12; // 团体赛团队名称（若玩家无团队则为空）
}

message GameSetting {
  uint32 emoji_switch = 1;                              // 是否禁用表情
}

// 修改后需要修改牌谱公共平台
message GameMode {
  uint32 mode = 1;                                      // 0.四人一场胜负，1.四人东风，2.四人半庄，11.三人东风，12.三人半庄
  bool ai = 4;                                          // 添加的电脑是否会思考，还是直接摸切
  string extendinfo = 5;                                // 旧的详细信息，老的牌谱可能会用
  GameDetailRule detail_rule = 6;                        // 详细规则，友人房、大会室
  GameTestingEnvironmentSet testing_environment = 7;     // 测试环境
  GameSetting game_setting = 8;                          // 游戏额外配置，不用传给麻将库
}

// 游戏测试设置
message GameTestingEnvironmentSet {
  uint32 paixing = 1;         // 1.国士无双，2.顺子，3.四暗刻，4.其他
  uint32 left_count = 2;       // 剩余牌的张数
  uint32 field_spell_var = 3;       //环境魔法模式的魔法卡变量
}

// 详细规则，友人房、大会室
// 修改后需要修改牌谱公共平台
message GameDetailRule {
  uint32 time_fixed = 1;                    // 固定时间
  uint32 time_add = 2;                      // 长考时间
  uint32 dora_count = 3;                    // 赤宝牌数量，0|3|4
  uint32 shiduan = 4;                       // 是否有食断
  uint32 init_point = 5;                    // 初始点数
  uint32 fandian = 6;                       // 一位必要点数
  bool can_jifei = 7;                       // 是否会被击飞
  uint32 tianbian_value = 8;                // 天边，=0不计天边，否则1位达到天边就游戏结束
  uint32 liqibang_value = 9;                // 立直棒供托点数
  uint32 changbang_value = 10;              // 场棒点数
  uint32 noting_fafu_1 = 11;                // 1人不听罚符
  uint32 noting_fafu_2 = 12;                // 2人不听罚符
  uint32 noting_fafu_3 = 13;                // 3人不听罚符
  bool have_liujumanguan = 14;              // 有流局满贯
  bool have_qieshangmanguan = 15;           // 有切上满贯
  bool have_biao_dora = 16;                 // 开启表宝牌
  bool have_gang_biao_dora = 17;            // 开启杠表宝牌
  bool ming_dora_immediately_open = 18;     // 大明杠、加杠宝牌即开
  bool have_li_dora = 19;                   // 开启里宝牌
  bool have_gang_li_dora = 20;              // 开启杠里宝牌
  bool have_sifenglianda = 21;              // 开启四风连打流局
  bool have_sigangsanle = 22;               // 开启四杠散了流局
  bool have_sijializhi = 23;                // 开启四家立直流局
  bool have_jiuzhongjiupai = 24;            // 开启九种九牌流局
  bool have_sanjiahele = 25;                // 开启三家和了流局
  bool have_toutiao = 26;                   // 开启胡牌头跳
  bool have_helelianzhuang = 27;            // 和牌连庄
  bool have_helezhongju = 28;               // 和了终局
  bool have_tingpailianzhuang = 29;         // 听牌连庄
  bool have_tingpaizhongju = 30;            // 听牌终局
  bool have_yifa = 31;                      // 开启一发
  bool have_nanruxiru = 32;                 // 开启南入\西入

  uint32 jingsuanyuandian = 33;             // 精算原点必须大于等于初始点数，如果大于初始点数，则计算丘点
  int32 shunweima_2 = 34;                  // 2位顺位马
  int32 shunweima_3 = 35;                  // 3位顺位马
  int32 shunweima_4 = 36;                  // 4位顺位马，1位的顺位马根据2、3、4位计算得出

  bool bianjietishi = 37;                   // 是否开启便捷提示
  uint32 ai_level = 38;                     // ai等级，1：低级（默认），2：中级
  bool have_zimosun = 39;                   // 3麻限定，是否有自摸损，默认为有

  bool disable_multi_yukaman = 40;           // 是否禁用多倍役满（默认：否）（230214废弃，改为disable_double_yakuman && disable_composite_yakuman）

  // 娱乐规则
  uint32 fanfu = 41;                        // 番缚，默认是1
  uint32 guyi_mode = 42;                    // 古役模式，默认0：不开启，1：开启
  uint32 dora3_mode = 43;                   // dora3模式，默认0：不开启，1：开启
  uint32 begin_open_mode = 44;              // 配牌open模式，默认0：不开启，1：开启
  uint32 jiuchao_mode = 45;                 // 鹫巢模式，4张牌中有一张是暗的，其他是明的
  uint32 muyu_mode = 46;                    // 龙之目玉，默认0：不开启，1：开启
  uint32 open_hand = 47;                    // 友人房公开手牌，默认0：不开启，1：开启

  uint32 xuezhandaodi = 48;                 // 血战到底，默认0：不开启，1：开启
  uint32 huansanzhang = 49;                 // 换三张，默认0：不开启，1：开启
  uint32 chuanma = 50;                      // 川麻，默认0：不开启，1：开启
  uint32 reveal_discard = 51;               // 暗牌模式，默认0：不开启，1：开启
  uint32 field_spell_mode = 52;             // 环境魔法卡模式，默认0：不开启，5*5*5种模式缩写为3个[1, 5]拼成的int值，eg:121代表冲锋、倒计时、通货膨胀
  uint32 zhanxing = 53;                     // 占星模式，默认0：不开启，1：开启
  uint32 tianming_mode = 54;                // 天命之战模式，默认0：不开启，1：开启
  bool disable_leijiyiman = 60;             // 禁用累计役满，累计役满按照三倍满计算（默认：否）

  // 大会室职业比赛规则模组追加规则
  uint32 disable_double_yakuman = 62;       // 是否禁用双倍役满（默认0：否, 1:开启）（四单/国13/纯九/大四）
  uint32 disable_composite_yakuman = 63;    // 是否禁用复合役满（默认0：否, 1:开启）
  uint32 enable_shiti = 64;                 // 是否启用食替规则（默认0：否, 1:开启）(仅限四麻)
  uint32 enable_nontsumo_liqi = 65;         // 是否允许剩余牌数小于4张的立直（默认0：否, 1:开启）(仅限四麻)
  uint32 disable_double_wind_four_fu = 66;  // 是否禁用连风牌4符（默认0：否, 1:开启）(仅限四麻)
  uint32 disable_angang_guoshi = 67;        // 是否禁用国士抢杠（默认0：否, 1:开启）(仅限四麻)
  uint32 enable_renhe = 68;                 // 是否启用人和（默认0：否, 1:满贯，2：役满）(仅限四麻)
  uint32 enable_baopai_extend_settings = 69;// 是否启用包牌拓展设置（默认0：大三元大四喜，1：大三元大四喜四杠子，2：无包牌）(仅限四麻)

  // 娱乐规则
  uint32 yongchang_mode = 70;               // 咏唱之战模式，默认0：不开启，1：开启
  uint32 hunzhiyiji_mode = 71;              // 魂之一击模式，默认0：不开启，1：开启
  uint32 wanxiangxiuluo_mode = 72;         // 万象修罗模式，默认0：不开启，1：开启
  uint32 beishuizhizhan_mode = 73;          // 背水之战，默认0：不开启，1：开启
}

// 房间信息
message Room {
  uint32 room_id = 1; // 房间号
  uint32 owner_id = 2; // 房主账号id
  GameMode mode = 3;
  uint32 max_player_count = 4; // 最大玩家数量
  repeated PlayerGameView persons = 5; // 玩家信息
  repeated uint32 ready_list = 6; // 就绪玩家列表
  bool is_playing = 7; // 正在游戏中
  bool public_live = 8; // 是否公开观战
  uint32 robot_count = 9; // 机器人数量，已废弃，使用 robots
  uint32 tournament_id = 10; // 联赛id（如果没有就是普通房）
  uint32 seq = 11;
  string pre_rule = 12;
  repeated PlayerGameView robots = 13; // 机器人外观数据
  repeated uint32 positions = 14;
}

// 游戏结果
message GameEndResult {

  message PlayerItem {
    uint32 seat = 1;
    int32 total_point = 2; // 总分数点
    int32 part_point_1 = 3;
    int32 part_point_2 = 4;

    int32 grading_score = 5; // 增加的段位分
    int32 gold = 6; // 增加的金币
  }

  repeated PlayerItem players = 1;

}

// 游戏连接信息
message GameConnectInfo {
//  string game_url = 1; // 游戏的url
  string connect_token = 2; // 连接口令
  string game_uuid = 3; // 游戏的uuid
  string location = 4;
}

// 聊天类型
// enum ChatType {
//   NULL = 0;
//   WORLD = 1; // 世界聊天
//   PRIVATE = 2; // 私聊
// }

//message ChatMessage {
//  uint32 type = 1; // enum ChatType
//  WorldChatMessage world_chat = 2;
//  PrivateChatMessage private_chat = 3;
//}

// 私聊信息
//message PrivateChatMessage {
//  uint32 sender_id = 1; // 发送者的账号id
//  uint32 timestamp = 2; // 时间戳
//  string content = 3; // 内容
//  uint32 target_id = 4; // 对话对方的账号id
//}

// 世界聊天信息
//message WorldChatMessage {
//  uint32 sender_id = 1; // 发送者的账号id
//  uint32 timestamp = 2; // 时间戳
//  string content = 3; // 内容
//  PlayerBaseView sender = 4; // 发送者头像名字
//}

message ItemGainRecord {
  uint32 item_id = 1;
  uint32 count = 2;
}

message ItemGainRecords {
  uint32 record_time = 1;
  uint32 limit_source_id = 2;
  repeated ItemGainRecord records = 3;
}

message FakeRandomRecords {
  uint32 item_id = 1;
  uint32 special_item_id = 2;
  uint32 gain_count = 3;
  repeated uint32 gain_history = 4;
}

message Item {
  uint32 item_id = 1; // 道具Id
  uint32 stack = 2; // 堆叠数量
}

message Bag {
  repeated Item items = 1; // 道具列表
  repeated ItemGainRecords daily_gain_record = 2;
}

message BagUpdate {
  repeated Item update_items = 1; // 有变化的道具（stack为0表示删除，新增客户端判断）
  repeated ItemGainRecords update_daily_gain_record = 2; //每日道具获取量有更新
}

message RewardSlot {
  uint32 id = 1;
  uint32 count = 2;
}

// 打开道具，抽卡等结果项目
message OpenResult {
  RewardSlot reward = 1; // 奖励内容
  RewardSlot replace = 2; // 替换内容（如果非空的话）
}

// 奖励增加结果
message RewardPlusResult {
  uint32 id = 1;    // 期望加的id
  uint32 count = 2; // 期望加的数量

  message Exchange {
    uint32 id = 1;       // 实际加的id
    uint32 count = 2;    // 实际加的数量
    uint32 exchange = 3; // 有几个被兑换了（存在不完全兑换，即都加了的情况）
  }
  Exchange exchange = 3; // 兑换（空表示无兑换）
}

message ExecuteReward {
  RewardSlot reward = 1;
  RewardSlot replace = 2;
  uint32 replace_count = 3;
}

message ExecuteResult {
  uint32 id = 1;
  int32 count = 2;
}

message I18nContext {
  string lang = 1;
  string context = 2;
}

message Mail {
  uint32 mail_id = 1; // 邮件id
  uint32 state = 2; // 邮件状态：0=new 1=read
  bool take_attachment = 3; // 是否已经领取附件
  string title = 4; // 标题
  string content = 5; // 正文内容
  repeated RewardSlot attachments = 6; // 附件
  uint32 create_time = 7; // 收取时间
  uint32 expire_time = 8; // 过期时间
  uint32 reference_id = 9; // 系统邮件ID
  repeated I18nContext title_i18n = 10; // 多语言标题
  repeated I18nContext content_i18n = 11; // 多语言正文
  uint32 template_id = 12; // 邮件模板ID
}

// 成就进度
message AchievementProgress {
  uint32 id = 1; // 成就id
  uint32 counter = 2; // 进度计数
  bool achieved = 3; // 是否已经达成
  bool rewarded = 4; // 是否已经领取过奖励
  uint32 achieved_time = 5; // 达成时间
}

message BadgeAchieveProgress {
  uint32 id = 1; // 勋章id
  uint32 counter = 2; // 完成进度统计
  uint32 achieved_counter = 3; // 达成次数
  uint32 achieved_time = 4; // 首次完成时间戳
}

message AccountStatisticByGameMode {
  uint32 mode = 1; // 模式

  uint32 game_count_sum = 2; // 总场次
  repeated uint32 game_final_position = 3; // 得位次数（按1，2，3，4来）
  uint32 fly_count = 4; // 被击飞次数
  float gold_earn_sum = 5; // 金币获取数量（有正负）

  uint32 round_count_sum = 6; // 总局数
  float dadian_sum = 7; // 打点总和

  message RoundEndData {
    uint32 type = 1; // 每局结束方式：自摸、荣和、放铳等
    uint32 sum = 2; // 次数之和
  }
  repeated RoundEndData round_end = 8; // 结束方式统计
  uint32 ming_count_sum = 9; // 副露次数
  uint32 liqi_count_sum = 10; // 立直次数

  uint32 xun_count_sum = 11; // 总巡数
  uint32 highest_lianzhuang = 12; // 最大连庄

  uint32 score_earn_sum = 13; // pt分获取总和 add at 2018-08-06

  message RankScore {
    uint32 rank = 1; // 顺位
    int32 score_sum = 2; // pt分获取总和
    uint32 count = 3;
  }
  repeated RankScore rank_score = 14;
}

message AccountStatisticByFan {
  uint32 fan_id = 1;
  uint32 sum = 2;
}

// 番种达成
message AccountFanAchieved {
  uint32 mahjong_category = 1; // 1=四人麻将 2=三人麻将
  repeated AccountStatisticByFan fan = 2;
  uint32 liujumanguan = 3; // 流局满贯
}

message AccountDetailStatistic {
  repeated AccountStatisticByGameMode game_mode = 1;

  // 2019.01.03 为区分三人麻将和四人麻将，2不使用，使用4
  repeated AccountStatisticByFan fan = 2;
  uint32 liujumanguan = 3; // 流局满贯

  repeated AccountFanAchieved fan_achieved = 4;
}

// 老结构（不使用，但是为了正确解析要保留）
message AccountDetailStatisticByCategory {
  uint32 category = 1; // 分类
  AccountDetailStatistic detail_statistic = 2; // 详细统计数据
}

message AccountDetailStatisticV2 {
  // 好友房统计数据
  AccountDetailStatistic friend_room_statistic = 1; // 好友

  // 段位赛统计数据
  message RankStatistic {
    message RankData {
      AccountDetailStatistic all_level_statistic = 1; // 所有级别的统计数据（总览）

      message RankLevelData {
        uint32 rank_level = 1;
        AccountDetailStatistic statistic = 2;
      }
      repeated RankLevelData level_data_list = 2; // 按照某个级别分类的统计数据
    }

    RankData total_statistic = 1; // 通算

    RankData month_statistic = 2; // 按月
    uint32 month_refresh_time = 3; // 按月刷新的时间
  }
  RankStatistic rank_statistic = 2; // 段位

  // 自定义比赛统计数据
  message CustomizedContestStatistic {
    AccountDetailStatistic total_statistic = 1;
    AccountDetailStatistic month_statistic = 2;
    uint32 month_refresh_time = 3; // 按月刷新的时间
  }
  CustomizedContestStatistic customized_contest_statistic = 3;

  AccountDetailStatistic leisure_match_statistic = 4; // 休闲匹配

  // 试炼赛比赛统计数据
  message ChallengeStatistic {
    AccountDetailStatistic all_season = 1;

    message SeasonData {
      uint32 season_id = 1;
      AccountDetailStatistic statistic = 2;
    }

    repeated SeasonData season_data_list = 2;
  }
  ChallengeStatistic challenge_match_statistic = 5; // 试炼赛

  AccountDetailStatistic activity_match_statistic = 6; // 活动场

  AccountDetailStatistic ab_match_statistic = 7; // AB赛
}

// 试炼信息
message AccountShiLian {
  uint32 step = 1; // 试炼阶段：[1,5]
  uint32 state = 2; // 0=当前阶段进行中 1=当前阶段成功 2=当前阶段失败
}

// 客户端设备信息
message ClientDeviceInfo {
  string platform = 1; // 平台： pc, mobile, console
  string hardware = 2; // 硬件： pc, mac, switch, play_station, phone, tablet, tv
  string os = 3; // 操作系统： windows, macOS, linux, ios, android, wp
  string os_version = 4; // 操作系统版本信息： win10, win8, ios13, ios14 ...
  bool is_browser = 5;
  string software = 6; // 具体浏览器
  string sale_platform = 7; // 发售平台：steam, eshop, mycard, google_play, apple_store
  string hardware_vendor = 8; // 硬件厂商：apple, huawei, xiaomi
  string model_number = 9; // 型号：LG-H9300S
  uint32 screen_width = 10;
  uint32 screen_height = 11;
  string user_agent = 12;
  uint32 screen_type = 13; // 屏幕类型 1-普通屏幕  2-触摸屏幕
}

message ClientVersionInfo
{
  string resource = 1; // 热更资源版本
  string package = 2; // app用，C#版本
}

enum GamePlayerState {
  NULL = 0; // 无连接
  AUTH = 1; // 验证成功
  SYNCING = 2; // 正在同步数据
  READY = 3; // 准备就绪
}

// 单条公告
message Announcement {
  uint32 id = 1;
  string title = 2;
  string content = 3;
  string header_image = 4;
}

message TaskProgress {
  uint32 id = 1; // 任务类型
  uint32 counter = 2; // 进度计数
  bool achieved = 3; // 是否已经达成
  bool rewarded = 4; // 是否已经领取奖励
  bool failed = 5; // 是否已经失败
  uint32 rewarded_time = 6; // 奖励时间
}

message GameConfig {
  uint32 category = 1;  // 1=好友房 2=匹配 3=比赛房（临时）  4=自定义比赛
  GameMode mode = 2;
  GameMetaData meta = 3;
}

message RPGState {
  uint32 player_damaged = 1;
  uint32 monster_damaged = 2;
  uint32 monster_seq = 3;
}

message RPGActivity {
  uint32 activity_id = 1;
  string last_show_uuid = 5;
  string last_played_uuid = 6;
  RPGState current_state = 7;
  RPGState last_show_state = 8;
  repeated uint32 received_rewards = 9;
  uint32 last_show_id = 10;
}

message ActivityArenaData {
  uint32 win_count = 1;
  uint32 lose_count = 2;
  uint32 activity_id = 3;
  uint32 enter_time = 4;

  uint32 daily_enter_count = 5;
  uint32 daily_enter_time = 6;

  uint32 max_win_count = 7;
  uint32 total_win_count = 8;
}

message FeedActivityData {
  message CountWithTimeData {
    uint32 count = 1;
    uint32 last_update_time = 2;
  }

  message GiftBoxData {
    uint32 id = 1;
    uint32 item_id = 2;
    uint32 count = 3;
    uint32 from_account_id = 4;
    uint32 time = 5;
    uint32 received = 6;
  }

  uint32 activity_id = 1;
  uint32 feed_count = 2;
  CountWithTimeData friend_receive_data = 3;
  CountWithTimeData friend_send_data = 4;
  repeated GiftBoxData gift_inbox = 5;
}

message SegmentTaskProgress {
  uint32 id = 1; // 任务类型
  uint32 counter = 2; // 进度计数
  bool achieved = 3; // 是否已经达成
  bool rewarded = 4; // 是否已经领取奖励
  bool failed = 5; // 是否已经失败
  uint32 reward_count = 6;
  uint32 achieved_count = 7;
}

message MineActivityData {
  repeated Point dig_point = 1; // 已经挖开的格子
  repeated MineReward map = 2; // 玩家能看到的奖励
  uint32 id = 3; // 活动ID
}

message AccountActivityUpdate {
  repeated lq.MineActivityData mine_data = 1;
  repeated lq.RPGActivity rpg_data = 2;
  repeated ActivityFeedData feed_data = 3;
  repeated lq.ActivitySpotData spot_data = 4;
  repeated lq.ActivityFriendGiftData friend_gift_data = 5;
  repeated lq.ActivityUpgradeData upgrade_data = 6;
  repeated lq.ActivityGachaUpdateData gacha_data = 7;
  repeated lq.ActivitySimulationData simulation_data = 8;
  repeated ActivityCombiningLQData combining_data = 9;
  repeated lq.ActivityVillageData village_data = 10;
  repeated lq.ActivityFestivalData festival_data = 11;
  repeated lq.ActivityIslandData island_data = 12;
  // repeated lq.ActivityAmuletData amulet_data = 13; // 青云之志数据不再储存在 account blob 中
  repeated lq.ActivityStoryData story_data = 14;
  repeated lq.ActivityChooseUpData choose_up_data = 15;
  repeated lq.SimulationV2Data simulation_v2_data = 16;
}

message ActivityCombiningWorkbench {
  uint32 craft_id = 1;
  uint32 pos = 2;
}

message ActivityCombiningMenuData {
  message MenuRequire {
    uint32 level = 1;
    uint32 count = 2;
  }

  uint32 menu_group = 1;
  repeated MenuRequire generated = 2;
  repeated MenuRequire multi_generated = 3;
}

message ActivityCombiningOrderData {
  uint32 id = 1;
  uint32 pos = 2;
  // uint32 craft_id = 3; // 订单需求物品id，已废弃
  uint32 unlock_day = 4;
  uint32 char_id = 5; // 角色id，仅供前端显示用
  repeated uint32 finished_craft_id = 6; // 已经完成的订单物品id
  repeated uint32 craft_id = 7; // 订单需求物品id
}

message ActivityCombiningLQData {
  uint32 activity_id = 1;
  repeated ActivityCombiningWorkbench workbench = 2;
  repeated ActivityCombiningOrderData orders = 3;
  ActivityCombiningWorkbench recycle_bin = 4;
  repeated uint32 unlocked_craft = 5;
  uint32 daily_bonus_count = 6; // 当天已经获取的小费数量
}

message ActivityCombiningPoolData {
  uint32 group = 1;
  uint32 count = 2;
}

message ActivityCombiningData {
  message BonusData {
    uint32 count = 1;
    uint32 update_time = 2;
  }

  uint32 activity_id = 1;
  repeated ActivityCombiningWorkbench workbench = 2;
  repeated ActivityCombiningOrderData orders = 3;
  ActivityCombiningWorkbench recycle_bin = 4;
  ActivityCombiningMenuData menu = 5;
  uint32 current_order_id = 6;
  BonusData bonus = 7;
  repeated uint32 unlocked_craft = 8;
  repeated ActivityCombiningPoolData craft_pool = 9;
  repeated ActivityCombiningPoolData order_pool = 10;
}

message VillageReward {
  uint32 id = 1;
  uint32 count = 2;
}

message VillageBuildingData {
  uint32 id = 1;
  // uint32 worker_count = 2;
  repeated VillageReward reward = 3; // 待领取奖励
  repeated uint32 workers = 4; // 工人位置
}

message VillageTripData {
  uint32 start_round = 1;
  uint32 dest_id = 2;
  repeated VillageReward reward = 3; // 待领取奖励
  uint32 level = 4;
  VillageTargetInfo info = 5;
}

message VillageTaskData {
  uint32 id = 1;
  uint32 completed_count = 2;
}

message VillageTargetInfo {
  string nickname = 1;
  uint32 avatar = 2;
  uint32 avatar_frame = 3;
  uint32 title = 4;
  uint32 verified = 5;
}

message ActivityVillageData {
  uint32 activity_id = 1;
  repeated VillageBuildingData buildings = 2;
  repeated VillageTripData trip = 3;
  repeated VillageTaskData tasks = 6;
  uint32 round = 7; // 总回合数
}

message TimeCounterData {
  uint32 count = 1;
  uint32 update_time = 2;
}

message SignedTimeCounterData {
  int32 count = 1;
  uint32 update_time = 2;
}

message FestivalProposalData {
  uint32 id = 1;
  uint32 proposal_id = 2;
  uint32 pos = 3; // 点位，从1开始
}

message ActivityFestivalData {
  uint32 activity_id = 1;
  uint32 level = 2;
  repeated FestivalProposalData proposal_list = 3;
  repeated uint32 event_list = 4;
  SignedTimeCounterData buy_record = 5;
}

message SimulationV2Data {
  uint32 activity_id = 1;
  lq.SimulationV2SeasonData season = 2; // 赛季（一轮游戏）信息
  int32 highest_score = 3; // 历史最高分
  lq.SimulationV2Ability upgrade = 4; // 场外升级数据
  repeated uint32 event_pool = 5; // 已经触发过的事件，用于判断是否显示new标识
  uint32 season_count = 6; // 玩过的完整赛季数量（用来判断 highest_score 是否为空）
}

message IslandBagItemData {
  uint32 id = 1;
  repeated uint32 pos = 2;
  uint32 rotate = 3;
  uint32 goods_id = 4;
  uint32 price = 5;
}

message IslandBagData {
  uint32 id = 1;
  string matrix = 2;
  repeated IslandBagItemData items = 3;
}

message IslandGoodsData {
  uint32 goods_id = 1;
  int32 count = 2;
  uint32 update_time = 3;
}

message IslandZoneData {
  uint32 id = 1;
  SignedTimeCounterData currency_used = 2; // 海岛币数量
  repeated IslandGoodsData goods_records = 3; // 剩余商品
}

message ActivityIslandData {
  uint32 activity_id = 1;
  uint32 zone = 2; // 当前所在地区id
  repeated IslandBagData bags = 3; // 背包数据
  repeated IslandZoneData zones = 4;
}





// message AmuletEffectData {
//   uint32 id = 1; // 表内的护身符id
//   uint32 uid = 2; // 实例id
//   repeated int32 store = 3;
// }

// message AmuletBuffData {
//   uint32 id = 1; // 表内的buff id
//   repeated int32 store = 3;
// }

// message AmuletGameShopGoods {
//   uint32 id = 1;
//   bool sold = 2;
//   uint32 goods_id = 3;
// }

// message AmuletActivityTingInfo {
//   string tile = 1; // 打这张牌能听，在换牌阶段没有这个字段
//   uint64 fan = 2;
//   string ting_tile = 3; // 听的牌
// }

// message AmuletShowDesktopTileData {
//   uint32 id = 1;
//   uint32 pos = 2; // 位置，从后往前数第几个，最小为0，发牌后不会随着摸牌而变化
// }

// message AmuletGameOperation {
//   message GangTiles {
//     repeated uint32 tiles = 1;
//   }

//   uint32 type = 1; // 1-切牌 4-杠 8-和 99-模切，只能打刚刚摸到的牌 100-开始游戏(仅限换牌阶段)
//   repeated GangTiles gang = 2; // type = 4 时可以杠的列表
//   uint32 effect_id = 3; // 该操作是由什么护身符添加的
// }

// message AmuletGameShopData {
//   repeated AmuletGameShopGoods goods = 1; // 商店商品列表
//   repeated uint32 effect_list = 2; // 待选护身符列表
//   uint32 shop_refresh_count = 3; // 当前商店刷新次数
//   uint32 refresh_price = 4; // 当前刷新价格
// }

// message AmuletGameUpdateData {
//   repeated AmuletTile tile_replace = 1; // 替换牌信息
//   repeated string tian_dora = 2; // 天牌列表
//   repeated uint32 dora = 4; // 宝牌列表
//   repeated uint32 hands = 7; // 手牌，按摸牌顺序排序，最后一张就是最后摸上来的牌
//   repeated AmuletMingInfo ming = 8; // 鸣牌列表
//   repeated AmuletEffectData effect_list = 9; // 当前护身符
//   repeated AmuletEffectData buff_list = 10; // 当前生效buff
//   string point = 13; // 当前关卡分数
//   uint32 coin = 14; // 当前星币数量
//   uint32 stage = 22; // 游戏阶段 1-选免费护身符 2-换牌阶段 3-出战阶段 4-商店阶段 5-商店选卡阶段 6-选关阶段
//   uint32 desktop_remain = 26; // 桌面上待摸牌剩余数量，客户端专用
//   repeated AmuletShowDesktopTileData show_desktop_tiles = 28; // 桌面上显示的牌，客户端专用
//   repeated AmuletActivityTingInfo ting_list = 30; // 听牌信息，换牌阶段和出战阶段使用
//   repeated AmuletGameOperation next_operation = 31; // 可进行的操作
//   repeated uint32 used_desktop = 34; // 已经摸过的牌
//   ActivityAmuletHuRecord highest_hu = 35; // 当局最高胡牌记录
//   ActivityAmuletRecord records = 36; // 其他记录制值
// }

// message AmuletGameRecordData {
//   uint32 key = 1;
//   int32 int_value = 2;
//   string str_value = 3;
//   repeated int32 int_arr_value = 4;
// }

// message AmuletGameTileScoreData {
//   string tile = 1;
//   uint32 score = 2;
// }

// message AmuletGameData {
//   repeated AmuletTile pool = 1; // 牌组
//   repeated AmuletTile tile_replace = 2; // 替换牌信息
//   repeated string tian_dora = 3; // 天牌列表
//   repeated uint32 mountain = 4; // 王牌，不会发给客户端
//   repeated uint32 dora = 5; // 宝牌列表
//   repeated uint32 hands = 7; // 手牌
//   repeated AmuletMingInfo ming = 8; // 鸣牌列表
//   repeated AmuletEffectData effect_list = 9; // 当前护身符
//   repeated AmuletBuffData buff_list = 10; // 当前生效buff

//   uint32 level = 11; // 当前关卡等级
//   string point = 13; // 当前关卡分数
//   uint32 coin = 14; // 当前星币数量

//   AmuletGameShopData shop = 16; // stage=4/5 有数据

//   repeated uint32 used = 20; // 换牌阶段被丢弃的牌
//   repeated uint32 boss_buff = 21; // 下一个boss关卡的buff列表，当前关如果是boss关的话需要读 boss_buff_id
//   uint32 stage = 22; // 游戏阶段 1-选免费护身符 2-换牌阶段 3-出战阶段 4-商店阶段 5-商店选卡阶段

//   repeated uint32 desktop = 24; // 桌面上待摸的牌，不会发给客户端
//   repeated uint32 show_desktop = 25; // 桌面上显示的牌，不会发给客户端
//   uint32 desktop_remain = 26; // 桌面上待摸牌剩余数量，客户端专用

//   repeated uint32 free_effect_list = 27; // 开局护身符三选一列表

//   repeated AmuletShowDesktopTileData show_desktop_tiles = 28; // 桌面上显示的牌，客户端专用
//   uint32 change_tile_count = 29; // 换牌次数

//   repeated AmuletActivityTingInfo ting_list = 30; // 听牌信息，换牌阶段和出战阶段使用
//   repeated AmuletGameOperation next_operation = 31; // 可进行的操作

//   repeated AmuletBuffData shop_buff_list = 32; // 商店升级buff列表
//   int32 remain_change_tile_count = 33; // 剩余换牌次数，客户端专用
//   repeated uint32 used_desktop = 34; // 已经摸过的牌
//   uint32 after_gang = 35; // 是否是岭上，不会发给客户端

//   repeated AmuletGameRecordData record_data = 36; // 游戏历史记录数据，不会发给客户端
//   repeated AmuletBuffData skill_buff_list = 37; // 场外永久强化buff列表
//   uint32 max_effect_count = 38; // 最大护身符持有数量，客户端专用
//   ActivityAmuletHuRecord highest_hu = 39; // 最高胡牌记录，不会发给客户端
//   uint32 total_consumed_coin = 40; // 本轮游戏历史总消耗星币，客户端专用
//   repeated uint32 boss_buff_id = 41; // 当前关卡boss_buff的id

//   repeated uint32 lock_tile = 42; // 被锁牌信息
//   repeated AmuletGameTileScoreData tile_score = 43; // 牌基础分信息
//   uint32 total_change_tile_count = 44; // 总换牌次数
// }

// message ActivityAmuletUpdateData {
//   uint32 activity_id = 1;
//   AmuletGameUpdateData game_update = 2;
//   bool game_empty = 3;
// }

// message AmuletSkillData {
//   uint32 id = 1;
//   uint32 level = 2;
// }

// message ActivityAmuletUpgradeData {
//   repeated AmuletSkillData skill = 2; // 已分配技能点数与等级
// }

// message ActivityAmuletRecord {
//   uint32 effect_gain_count = 1; // 获得护身符数量
//   uint32 hu_count = 2; // 胡牌次数
// }

// message ActivityAmuletHuRecord {
//   string point = 1; // 得分
//   string pai = 2; // 牌型  例：1m2m3m4m4m,5p5p5p0p,7s7s7s7s
//   uint64 fan = 3; // 番数
//   uint64 base = 4; // 分
// }

// message ActivityAmuletIllustratedBookData {
//   repeated uint32 effect_collection = 1; // 护身符
//   ActivityAmuletHuRecord highest_hu = 2; // 历史最高胡牌记录
//   uint32 highest_level = 3; // 历史最高关卡记录
// }

// message ActivityAmuletData {
//   uint32 activity_id = 1;
//   AmuletGameData game = 2; // 游戏对局信息
//   uint32 version = 3;
//   ActivityAmuletUpgradeData upgrade = 4; // 永久强化信息
//   ActivityAmuletIllustratedBookData illustrated_book = 5; // 图鉴信息
// }




message ActivityFeedData {
  message CountWithTimeData {
    uint32 count = 1;
    uint32 last_update_time = 2;
  }

  message GiftBoxData {
    uint32 id = 1;
    uint32 item_id = 2;
    uint32 count = 3;
    uint32 from_account_id = 4;
    uint32 time = 5;
    uint32 received = 6;
  }

  uint32 activity_id = 1;
  uint32 feed_count = 2;
  CountWithTimeData friend_receive_data = 3;
  CountWithTimeData friend_send_data = 4;
  repeated GiftBoxData gift_inbox = 5;
  uint32 max_inbox_id = 6;
}

message UnlockedStoryData {
  uint32 story_id = 1;
  repeated uint32 finished_ending = 2;
  repeated uint32 rewarded_ending = 3;
  uint32 finish_rewarded = 4;
  uint32 all_finish_rewarded = 5;
}

message ActivityStoryData {
  uint32 activity_id = 1;
  repeated UnlockedStoryData unlocked_story = 2; // 已解锁故事
}

message ActivityProgressRewardData {
  uint32 activity_id = 1;
  repeated uint32 rewarded_progresses = 2;
}

message ActivityChooseUpData {
  uint32 activity_id = 1;
  uint32 chest_id = 2;
  uint32 selection = 3;
  uint32 is_end = 4; // 是否已经获得up标的结束活动
}

message ActivityFriendGiftData {
  message CountWithTimeData {
    uint32 count = 1;
    uint32 last_update_time = 2;
    repeated uint32 send_friend_id = 3;
  }

  message GiftBoxData {
    uint32 id = 1;
    uint32 item_id = 2;
    uint32 count = 3;
    uint32 from_account_id = 4;
    uint32 time = 5;
    uint32 received = 6;
  }

  uint32 activity_id = 1;
  uint32 max_inbox_id = 2;
  CountWithTimeData receive_data = 3;
  CountWithTimeData send_data = 4;
  repeated GiftBoxData gift_inbox = 5;
}

message ActivityUpgradeData {
  message LevelGroup {
    uint32 group_id = 1;
    uint32 level = 2;
  }
  uint32 activity_id = 1;
  repeated LevelGroup groups = 2;
  uint32 received_level = 3;
}

message GachaRecord {
  uint32 id = 1;
  uint32 count = 2;
}
message ActivityGachaData {
  uint32 activity_id = 1;
  repeated GachaRecord gained = 2;
}

message ActivityGachaUpdateData {
  uint32 activity_id = 1;
  repeated GachaRecord gained = 2;
  uint32 remain_count = 3;
}

// 查阅文档 https://confluence.catfoodstudio.net:5443/pages/viewpage.action?pageId=95060968
message ActivitySimulationGameRecordMessage {
  uint32 type = 1;
  repeated uint32 args = 2;
  uint32 xun = 3;
}

message ActivitySimulationGameRecord {
  uint32 round = 1; // 从1开始
  repeated uint32 seats = 2; // 角色ID
  string uuid = 3; // 只有一姬参与的才有uuid
  uint32 start_time = 4; // 前端根据开始时间决定观战/牌谱
  repeated int32 scores = 5;
  repeated ActivitySimulationGameRecordMessage messages = 6; // 对局文字信息，不会在 fetchAccountActivityData 中返回给前端，需要通过 fetchSimulationGameRecord 获取
}

message ActivitySimulationDailyContest {
  uint32 day = 1;
  repeated uint32 characters = 2;
  repeated ActivitySimulationGameRecord records = 3;
  uint32 round = 4; // 当前轮次,今日如果没有参加过任何对局则是0
}

message ActivitySimulationTrainRecord {
  uint32 time = 1;
  repeated int32 modify_stats = 2;
  repeated uint32 final_stats = 3;
  uint32 type = 4;
}

message ActivitySimulationData {
  uint32 activity_id = 1;
  repeated uint32 stats = 2;
  uint32 stamina_update_time = 3;
  repeated ActivitySimulationDailyContest daily_contest = 4;
  repeated ActivitySimulationTrainRecord train_records = 5;
}

message ActivitySpotData {
  message SpotData {
    uint32 unique_id = 1;
    uint32 rewarded = 2;
    repeated uint32 unlocked_ending = 3;
    uint32 unlocked = 4;
  }

  uint32 activity_id = 1;
  repeated SpotData spots = 3;
}

// 玩家活动状态信息
message AccountActiveState {
  uint32 account_id = 1;
  uint32 login_time = 2; // 登录时间
  uint32 logout_time = 3; // 登出时间
  bool is_online = 4;
  AccountPlayingGame playing = 5; // 正在游戏中数据（没有则为null）
}

message Friend {
  PlayerBaseView base = 1;
  AccountActiveState state = 2;
  string remark = 3;
}

// 坐标点信息
message Point {
  uint32 x = 1;
  uint32 y = 2;
}

message MineReward {
  Point point = 1; // 奖励左上角坐标
  uint32 reward_id = 2; // 奖励ID
  bool received = 3; // 是否已经完全挖开，并领取到奖励
}

// 游戏直播的基础结构
message GameLiveUnit {
  uint32 timestamp = 1; // 距离游戏开始经过的毫秒数
  uint32 action_category = 2; // 分类：1=liqi-game 2=out-game
  bytes action_data = 3; // 序列化后的数据
}

// 游戏直播分片文件结构
message GameLiveSegment {
  repeated GameLiveUnit actions = 1;
}

// 游戏直播分片文件定位信息
message GameLiveSegmentUri {
  uint32 segment_id = 1;
  string segment_uri = 2;
}

// 游戏直播头部结构
message GameLiveHead {
  string uuid = 1;
  uint32 start_time = 2;
  GameConfig game_config = 3;
  repeated PlayerGameView players = 4;
  repeated uint32 seat_list = 5; // 东南西北（保证4个）
}


// 直播的时候新回合的状态同步数据
message GameNewRoundState {
  repeated uint32 seat_states = 1; // 东南西北的人的状态
}

// 直播中游戏结束标记
message GameEndAction {
  uint32 state = 1; // 2=正常结束 3=游戏中断
}

// 空事件
message GameNoopAction {
}

// 留言板单个条目
message CommentItem {
  uint32 comment_id = 1;
  uint32 timestamp = 2; // 留言时间
  PlayerBaseView commenter = 3; // 留言人
  string content = 4; // 内容
  uint32 is_banned = 5;
}

// 滚动公告
message RollingNotice {
  // uint32 id = 1; // 设计修改，同一时间只有一条滚动公告，id参数已经失去意义
  string content = 2;
  uint32 start_time = 3; // 开始时间
  uint32 end_time = 4; // 结束时间
  uint32 repeat_interval = 5; // 重复间隔
  // string lang = 6; // 语言显示由客户端控制，服务端不再需要传递lang参数
  repeated uint32 repeat_time = 7; // 倒计时数列（以配置时间段中的”结束时间“为基准）
  uint32 repeat_type = 8; // 当前配置模式（1表示"固定时间间隔模式"，2表示"递进时间间隔模式"）
}

// 维护公告
message MaintainNotice {
  uint32 maintain_time = 1; // 维护时间（关服时间）
}

// 商品定义
message BillingGoods {
  string id = 1; // 商品ID
  string name = 2; // 商品名称
  string desc = 3; // 商品描述
  string icon = 4; // 商品图标
  uint32 resource_id = 5; // 购买资源ID
  uint32 resource_count = 6; // 购买资源数量
}

// 购买商品验证信息
message BillShortcut {
  uint32 id = 1; // 商品ID
  uint32 count = 2; // 商品数量
  uint32 dealPrice = 3; // 商品价格
}

// 上架商品
message BillingProduct {
  BillingGoods goods = 1; // 商品内容
  string currency_code = 2; // 货币标准符号
  uint32 currency_price = 3; // 价格（根据货币标准符号确定最小价格单位）
  uint32 sort_weight = 4; // 排序权重
}

// 人物角色
message Character {
  uint32 charid = 1; // 角色id
  uint32 level = 2;  // 羁绊等级
  uint32 exp = 3;    // 好感度

  repeated ViewSlot views = 4; // 外观设置

  uint32 skin = 5; // 皮肤设置

  bool is_upgraded = 6; // 是否已经突破过了

  repeated uint32 extra_emoji = 7;

  repeated uint32 rewarded_level = 8;
}

// 购买记录
message BuyRecord {
  uint32 id = 1;
  uint32 count = 2;
}
// 杂货铺
message ZHPShop {
  repeated uint32 goods = 1; // 商品列表
  repeated BuyRecord buy_records = 2; // 玩家已经购买的货物次数（有数量限制的货物限定）

  message RefreshCount {
    uint32 count = 1; // 已经使用的刷新次数
    uint32 limit = 2; // 刷新次数上限
  }
  RefreshCount free_refresh = 3; // 免费的
  RefreshCount cost_refresh = 4; // 花钱的
}
// 月卡信息
message MonthTicketInfo {
  uint32 id = 1; // 月卡ID
  uint32 end_time = 2; // 月卡结束时间
  uint32 last_pay_time = 3; // 上次领取时间
}
//商店信息
message ShopInfo {
  ZHPShop zhp = 1; // 杂货铺
  repeated BuyRecord buy_records = 2; // 玩家已经购买的货物次数（有数量限制的货物限定，非杂货铺）
  uint32 last_refresh_time = 3; // 上次刷新时间
}

message ChangeNicknameRecord {
  string from = 1; // 原名字
  string to = 2; // 新名字
  uint32 time = 3; // 改名时间
}

message ServerSettings {
  // uint32 open_payment = 1; // 0=不开启 1=开启
  // string payment_info = 2; // 充值文本
  PaymentSetting payment_setting = 3;
  PaymentSettingV2 payment_setting_v2 = 4;
  // 昵称替换功能
  NicknameSetting nickname_setting = 5;
}

message NicknameSetting {
  // 昵称替换功能是否打开
  uint32 enable = 1;
  // 替换昵称列表
  repeated string nicknames = 2;
}

message PaymentSettingV2 {
  uint32 open_payment = 1; // 是否显示支付页面

  message PaymentMaintain {
    uint32 start_time = 1;
    uint32 end_time = 2;
    uint32 goods_click_action = 3;
    string goods_click_text = 4;
    repeated string enabled_channel = 5;
  }

  message PaymentSettingUnit {
    string platform = 1;
    bool is_show = 2;
    uint32 goods_click_action = 3;
    /** 1-正常：玩家可以正常进行充值
        2-维护：玩家在摁下充值按钮后会弹出一个（可在GM配置文本的）弹窗并禁止玩家进行后续充值行为
    */
    string goods_click_text = 4; // 提示文本
    PaymentMaintain maintain = 5;
    bool enable_for_frozen_account = 6;
    string extra_data = 7; // 已废弃，json字符串，每个支付渠道的私有的设置，详细配置如下：
    /**
      platform = yostar
      {
        disabled_order_type: number[]  // 暂时禁用的订单类型 1-googleplay 2-ipa 3-nintendo 4-krgoogleplay 5-kriap
      }
    */
    repeated string enabled_channel = 8;
  }

  repeated PaymentSettingUnit payment_platforms = 2;
}

message PaymentSetting {
  uint32 open_payment = 1; // 0=不开启 1=开启
  uint32 payment_info_show_type = 2; // 0=弹框提示 1=显示支付二维码下面
  string payment_info = 3; // 充值文本

  message WechatData {
    bool disable_create = 1;
    uint32 payment_source_platform = 2; // 0=原生 1=汇潮
    bool enable_credit = 3;
  }
  WechatData wechat = 4;

  message AlipayData {
    bool disable_create = 1;
    uint32 payment_source_platform = 2; // 0=原生 1=汇潮
  }
  AlipayData alipay = 5;
}

message AccountSetting {
  uint32 key = 1;
  uint32 value = 2;
}

// 宝箱
message ChestData {
  uint32 chest_id = 1; // 宝箱Id
  uint32 total_open_count = 2; // 总共开启的次数
  uint32 consume_count = 3; // 消耗的次数
  uint32 face_black_count = 4; // 脸黑次数
}


message ChestDataV2 {
  uint32 chest_id = 1; // 宝箱Id
  uint32 total_open_count = 2; // 总共开启的次数，单纯做记录
  uint32 face_black_count = 3; // 脸黑次数
  uint32 ticket_face_black_count = 4; // 单抽
}
message FaithData {
  uint32 faith_id = 1;
  uint32 total_open_count = 2; // 总共开启的次数
  uint32 consume_count = 3; // 消耗的次数
  int32 modify_count = 4; // 后台调整次数,可以为负数
}

// 包含搜索排序的基础信息，同时确保数据容量不会很大，这样可以一次性给多个到前端
message CustomizedContestBase {
  uint32 unique_id = 1;
  uint32 contest_id = 2;
  string contest_name = 3;
  uint32 state = 4; // 1-尚未开始 2-正在进行 3-已结束
  uint32 creator_id = 5;
  uint32 create_time = 6;
  uint32 start_time = 7;
  uint32 finish_time = 8;
  bool open = 9; // 公开
  uint32 contest_type = 10; // 0-普通赛事 1-官方赛事
  string public_notice = 11; // 对外公告
  uint32 check_state = 12;
  string checking_name = 13;
  uint32 season_type = 14;
  bool show_team_rank = 15;
}

message CustomizedContestExtend {
  uint32 unique_id = 1;
  string public_notice = 2; // 对外公开公告
}

// 自定义比赛摘要信息
message CustomizedContestAbstract {
  uint32 unique_id = 1;
  uint32 contest_id = 2;
  string contest_name = 3;
  uint32 state = 4; // 1-尚未开始 2-正在进行 3-已结束
  uint32 creator_id = 5;
  uint32 create_time = 6;
  uint32 start_time = 7;
  uint32 finish_time = 8;
  bool open = 9; // 公开
  string public_notice = 10; // 对外公开公告
  uint32 contest_type = 11; // 0-普通赛事 1-官方赛事
}

// 自定义比赛详细信息
message CustomizedContestDetail {
  uint32 unique_id = 1;
  uint32 contest_id = 2;
  string contest_name = 3;
  uint32 state = 4;
  uint32 creator_id = 5;
  uint32 create_time = 6;
  uint32 start_time = 7;
  uint32 finish_time = 8;
  bool open = 9; // 公开
  uint32 rank_rule = 10; // 排名显示方式
  GameMode game_mode = 11; // 游戏设定
  string private_notice = 12;
  uint32 observer_switch = 13; // 是否能添加实时OB
  uint32 emoji_switch = 14; // 是否允许对战表情
  uint32 contest_type = 15; // 赛事类型
  uint32 disable_broadcast = 16;
  uint32 signup_start_time = 17;
  uint32 signup_end_time = 18;
  uint32 signup_type = 19; // 报名类型 1 - 关闭报名 2 - 自动报名 3 - 开启报名
  uint32 auto_match = 20; // 0=非自动匹配 1=自动匹配
  uint32 season_type = 21; // 赛季模式 0：个人赛 1：团队赛
  bool show_team_rank = 22; // 是否公开团队排名
}

// 自定义比赛参与报告（成绩）
message CustomizedContestPlayerReport {

  // 排名显示方式
  // 1 最近3场
  // 2 最近5场
  // 12 最佳2场
  // 13 最佳3场
  // 14 最佳4场
  // 15 最佳5场
  uint32 rank_rule = 1;

  uint32 rank = 2; // 排名
  int32 point = 3; // 精算点 (x1000)
  repeated uint32 game_ranks = 4; // 最近的比赛位次（根据rank_rule做判断）
  uint32 total_game_count = 5; // 已经参与的对局次数
}

// 牌谱记录头部信息
message RecordGame {
  string uuid = 1;
  uint32 start_time = 2;
  uint32 end_time = 3;

  // 2018.07.15 xienanjie 使用config替换mode，客户端需要自己检测是否有config字段
  // GameMode mode = 4;
  GameConfig config = 5;

  message AccountInfo {
    uint32 account_id = 1;
    uint32 seat = 2;
    string nickname = 3;
    uint32 avatar_id = 4;
    Character character = 5;
    uint32 title = 6;
    AccountLevel level = 7;
    AccountLevel level3 = 8;
    uint32 avatar_frame = 9;
    uint32 verified = 10;
    repeated ViewSlot views = 11;
  }
  repeated AccountInfo accounts = 11;

  GameEndResult result = 12;

  repeated AccountInfo robots = 13;

  uint32 standard_rule = 14;
}

// 牌谱列表单项信息
message RecordListEntry {
  uint32 version = 1; // 版本（202408表示新版牌谱列表，0表示老版本列表）

  string uuid = 2;
  uint32 start_time = 3; // 对局开始时间
  uint32 end_time = 4; // 对局结束时间（时间范围筛选条件按照这个字段来）

  uint32 tag = 5; // 标签
  uint32 subtag = 6; // 子标签，根据tag来 tag=1/3 就是matchmode.id，tag=2/4 就是mode.mode

  repeated RecordPlayerResult players = 7; // 包含真实玩家或者机器人

  uint32 standard_rule = 8; // 是否是标准立直规则（1 - 可以MAKA分析）
}

message RecordPlayerResult {
  uint32 rank = 1; // 顺位：1/2/3/4
  uint32 account_id = 2; // 帐号ID（如果ID小于1000，则为机器人）
  string nickname = 3; // 昵称
  AccountLevel level = 4; // 四麻段位
  AccountLevel level3 = 5; // 三麻段位
  uint32 seat = 6; // 座次

  int32 pt = 7; // PT变化
  int32 point = 8; // 点数
  uint32 max_hu_type = 9; // 最大和牌类型 参考客户端枚举 E_Dadian_Title 内容（不包含流满）

  uint32 action_liqi = 10; // 立直次数
  uint32 action_rong = 11; // 荣和次数
  uint32 action_zimo = 12; // 自摸次数
  uint32 action_chong = 13; // 铳牌次数

  uint32 verified = 14; // 猫爪/P 信息
}


// 比赛开始消息广播
message CustomizedContestGameStart {
  message Item {
    uint32 account_id = 1;
    string nickname = 2;
  }
  repeated Item players = 1;
}

// 比赛结束消息广播
message CustomizedContestGameEnd {
  message Item {
    uint32 account_id = 1;
    string nickname = 2;
    int32 total_point = 3;
  }
  repeated Item players = 1;
}

message Activity {
  uint32 activity_id = 1;
  uint32 start_time = 2;
  uint32 end_time = 3;
  string type = 4;
}

message ExchangeRecord {
  uint32 exchange_id = 1; // 兑换id
  uint32 count = 2; // 已经兑换的次数
}

// 累计得点活动
message ActivityAccumulatedPointData {
  uint32 activity_id = 1;
  int32 point = 2;
  repeated uint32 gained_reward_list = 3; // 已经领取过的奖励列表
}

// 排名得点活动
message ActivityRankPointData {
  uint32 leaderboard_id = 1;
  int32 point = 2;
  bool gained_reward = 3; // 是否已经领取奖励
  uint32 gainable_time = 4; // 可领取奖励的开始时间
}

message GameRoundHuData {
  message HuPai {
    string tile = 1;
    uint32 seat = 2;
    uint32 liqi = 3;
  }
  HuPai hupai = 1; // 和牌信息

  message Fan {
    uint32 id = 1;
    uint32 count = 2;
    uint32 fan = 3;
  }
  repeated Fan fans = 2; // 番种列表

  uint32 score = 3; // 打点
  uint32 xun = 4; // 和了巡目
  uint32 title_id = 5;
  uint32 fan_sum = 6;
  uint32 fu_sum = 7;
  uint32 yakuman_count = 8; // 役满数量
  uint32 biao_dora_count = 9; // 表宝牌数量
  uint32 red_dora_count = 10; // 赤宝牌数量
  uint32 li_dora_count = 11; // 里宝牌数量
  uint32 babei_count = 12; // 拔北数量
  uint32 xuan_shang_count = 13; // 悬赏番数，用来计算运（赤宝牌，里宝牌，一发等）
  uint32 pai_left_count = 14; // 当前余牌量
}

message GameRoundPlayerFangChongInfo {
  uint32 seat = 1;
  string tile = 2;
  uint32 pai_left_count = 3;
}

message GameRoundPlayerResult {
  uint32 type = 1;
  repeated string hands = 2;
  repeated string ming = 3;
  uint32 liqi_type = 4;
  bool is_fulu = 5;
  bool is_liujumanguan = 6;
  uint32 lian_zhuang = 7;
  GameRoundHuData hu = 8;
  repeated GameRoundPlayerFangChongInfo fangchongs = 9;
  bool liqi_fangchong = 10;
  bool liqi_failed = 11;
}

message GameRoundPlayer {
  int32 score = 1;
  uint32 rank = 2;
  GameRoundPlayerResult result = 3;
}

message GameRoundSnapshot {
  uint32 ju = 1;
  uint32 ben = 2;
  repeated GameRoundPlayer players = 3;
}

message GameFinalSnapshot {
  string uuid = 1;
  uint32 state = 2;

  uint32 category = 3;  // 1=好友房 2=匹配 3=比赛房（临时）  4=自定义比赛
  GameMode mode = 4;
  GameMetaData meta = 5;

  // 计算相关参数
  message CalculateParam {
    uint32 init_point = 1; // 初始点
    uint32 jingsuanyuandian = 2; // 精算原点
    repeated int32 rank_points = 3; // 顺位分
  }
  CalculateParam calculate_param = 6;

  uint32 create_time = 7;
  uint32 start_time = 8;
  uint32 finish_time = 9;

  message GameSeat {
    uint32 type = 1;
    uint32 account_id = 2;
    NetworkEndpoint notify_endpoint = 3; // 内部服务器通知地址
    string client_address = 4; // 客户端连接IP地址
    bool is_connected = 5; // 最终是断开连接的
  }

  repeated GameSeat seats = 10;
  repeated GameRoundSnapshot rounds = 11;
  repeated PlayerGameView account_views = 12;

  message FinalPlayer {
    uint32 seat = 1;
    int32 total_point = 2;
    int32 part_point_1 = 3;
    int32 part_point_2 = 4;
    int32 grading_score = 5;
    int32 gold = 6;
  }
  repeated FinalPlayer final_players = 13;

  message AFKInfo {
    uint32 deal_tile_count = 1;
    uint32 moqie_count = 2;
    uint32 seat = 3;
  }
  repeated AFKInfo afk_info = 14;

  repeated PlayerGameView robot_views = 15;
}

// 简要的收藏信息
message RecordCollectedData {
  string uuid = 1;       // 牌谱uuid
  string remarks = 2;    // 备注
  uint32 start_time = 3;
  uint32 end_time = 4;   // 游戏结束之间
}

message ContestDetailRule {
  uint32 init_point = 5;                    // 初始点数
  uint32 fandian = 6;                       // 一位必要点数
  bool can_jifei = 7;                       // 是否会被击飞
  uint32 tianbian_value = 8;                // 天边，=0不计天边，否则1位达到天边就游戏结束
  uint32 liqibang_value = 9;                // 立直棒供托点数
  uint32 changbang_value = 10;              // 场棒点数
  uint32 noting_fafu_1 = 11;                // 1人不听罚符
  uint32 noting_fafu_2 = 12;                // 2人不听罚符
  uint32 noting_fafu_3 = 13;                // 3人不听罚符
  bool have_liujumanguan = 14;              // 有流局满贯
  bool have_qieshangmanguan = 15;           // 有切上满贯
  bool have_biao_dora = 16;                 // 开启表宝牌
  bool have_gang_biao_dora = 17;            // 开启杠表宝牌
  bool ming_dora_immediately_open = 18;     // 大明杠、加杠宝牌即开
  bool have_li_dora = 19;                   // 开启里宝牌
  bool have_gang_li_dora = 20;              // 开启杠里宝牌
  bool have_sifenglianda = 21;              // 开启四风连打流局
  bool have_sigangsanle = 22;               // 开启四杠散了流局
  bool have_sijializhi = 23;                // 开启四家立直流局
  bool have_jiuzhongjiupai = 24;            // 开启九种九牌流局
  bool have_sanjiahele = 25;                // 开启三家和了流局
  bool have_toutiao = 26;                   // 开启胡牌头跳
  bool have_helelianzhuang = 27;            // 和牌连庄
  bool have_helezhongju = 28;               // 和了终局
  bool have_tingpailianzhuang = 29;         // 听牌连庄
  bool have_tingpaizhongju = 30;            // 听牌终局
  bool have_yifa = 31;                      // 开启一发
  bool have_nanruxiru = 32;                 // 开启南入\西入

  uint32 jingsuanyuandian = 33;             // 精算原点必须大于等于初始点数，如果大于初始点数，则计算丘点
  int32 shunweima_2 = 34;                  // 2位顺位马
  int32 shunweima_3 = 35;                  // 3位顺位马
  int32 shunweima_4 = 36;                  // 4位顺位马，1位的顺位马根据2、3、4位计算得出

  bool bianjietishi = 37;                   // 是否开启便捷提示
  uint32 ai_level = 38;                     // ai等级，1：低级（默认），2：中级
  bool have_zimosun = 39;                   // 3麻限定，是否有自摸损，默认为有
  bool disable_multi_yukaman = 40;           // 是否禁用多倍役满（默认：否）
  uint32 guyi_mode = 41;                    // 是否启用古役
  bool disable_leijiyiman = 42;             // 是否禁用累计役满得点
  uint32 dora3_mode = 43;
  uint32 xuezhandaodi = 44;
  uint32 huansanzhang = 45;
  uint32 chuanma = 46;

  // 大会室职业比赛规则模组追加规则
  uint32 disable_double_yakuman = 62;       // 是否禁用双倍役满（默认0：否, 1:开启）（四单/国13/纯九/大四）
  uint32 disable_composite_yakuman = 63;    // 是否禁用复合役满（默认0：否, 1:开启）
  uint32 enable_shiti = 64;                 // 是否启用食替规则（默认0：否, 1:开启）
  uint32 enable_nontsumo_liqi = 65;         // 是否允许剩余牌数小于4张的立直（默认0：否, 1:开启）
  uint32 disable_double_wind_four_fu = 66;  // 是否禁用连风牌4符（默认0：否, 1:开启）
  uint32 disable_angang_guoshi = 67;        // 是否禁用国士抢杠（默认0：否, 1:开启）
  uint32 enable_renhe = 68;                 // 是否启用人和（默认0：否, 1:满贯，2：役满）
  uint32 enable_baopai_extend_settings = 69;// 是否启用包牌拓展设置（默认0：大三元大四喜，1：大三元大四喜四杠子，2：无包牌）

  uint32 fanfu = 70;
}

message ContestDetailRuleV2 {
  ContestDetailRule game_rule = 1;

  message ExtraRule {
    uint32 required_level = 1;
    uint32 max_game_count = 2;
  }
  ExtraRule extra_rule = 2;
}

message GameRuleSetting {
  uint32 round_type = 1;
  bool shiduan = 2;
  uint32 dora_count = 3;
  uint32 thinking_type = 4;
  bool use_detail_rule = 5;
  ContestDetailRuleV2 detail_rule_v2 = 6;
}

//听牌的状态
message RecordTingPaiInfo {
  string tile = 1;
  bool haveyi = 2;            // 听这张牌是否有役（番缚>1时候以下面为准，<=1时还是用这个减少线上影响）（荣和）
  bool yiman = 3;             // 听这张牌是否役满了（荣和）
  uint32 count = 4;           // 不役满时候为番数，役满时候为役满倍数，跟dora无关（荣和）
  uint32 fu = 5;              // 听这张牌胡牌的番数 （荣和）
  uint32 biao_dora_count = 6; // 明面可见的手牌dora个数，和count相加就可以算出明面上的番数 （荣和，不过这个自摸也一样）
  bool yiman_zimo = 7;        // 自摸是否役满 （自摸）
  uint32 count_zimo = 8;      // 自摸不役满时候为番数，役满时候为役满倍数，跟dora无关（自摸）
  uint32 fu_zimo = 9;         // 听这张牌胡牌的番数 （自摸）
}

//荒牌流局，玩家的数据
message RecordNoTilePlayerInfo {
  bool tingpai = 3;
  repeated string hand = 4;
  repeated RecordTingPaiInfo tings = 5;
  bool liuman = 6;
}

message RecordHuleInfo {
  message RecordFanInfo {
    uint32 val = 1;
    uint32 id = 2;
  }

  repeated string hand = 1;
  repeated string ming = 2;
  string hu_tile = 3;
  uint32 seat = 4;
  bool zimo = 5;
  bool qinjia = 6;
  bool liqi = 7;
  repeated string doras = 8;
  repeated string li_doras = 9;
  bool yiman = 10;
  uint32 count = 11;
  repeated RecordFanInfo fans = 12;
  uint32 fu = 13;
  uint32 point_zimo_qin = 14;
  uint32 point_zimo_xian = 15;
  uint32 title_id = 16;
  uint32 point_sum = 17;
  uint32 dadian = 18;
  bool is_jue_zhang = 19;
  uint32 xun = 20;
  uint32 ting_type = 21;
  uint32 ting_mian = 22;
}

message RecordHulesInfo {
  int32 seat = 1;
  repeated RecordHuleInfo hules = 2;
}

message RecordLiujuInfo {
  uint32 seat = 1;
  uint32 type = 2;
}

message RecordNoTileInfo {
  bool liujumanguan = 1;
  repeated RecordNoTilePlayerInfo players = 2;
}

message RecordLiqiInfo {
  uint32 seat = 1;
  uint32 score = 2;
  bool is_w = 3;
  bool is_zhen_ting = 4;
  uint32 xun = 5;
  bool is_success = 6;
}

message RecordGangInfo {
  uint32 seat = 1;
  uint32 type = 2;
  string pai = 3;
  bool is_dora = 4;
  uint32 xun = 5;
}

message RecordBaBeiInfo {
  uint32 seat = 1;
  bool is_zi_mo = 2;
  bool is_chong = 3;
  bool is_bei = 4;
}

message RecordPeiPaiInfo {
  uint32 dora_count = 1;
  uint32 r_dora_count = 2;
  uint32 bei_count = 3;
}

message RecordRoundInfo {
  string name = 1;
  uint32 chang = 2;
  uint32 ju = 3;
  uint32 ben = 4;
  repeated uint32 scores = 5;
  repeated RecordLiqiInfo liqi_infos = 7;
  repeated RecordGangInfo gang_infos = 8;
  repeated RecordPeiPaiInfo peipai_infos = 9;
  repeated RecordBaBeiInfo babai_infos = 10;
  RecordHulesInfo hules_info = 11;
  RecordLiujuInfo liuju_info = 12;
  RecordNoTileInfo no_tile_info = 13;
  repeated RecordHulesInfo xiuluo_hules_info = 14;
}

message RecordAnalysisedData {
  repeated RecordRoundInfo round_infos = 1;
}

message VoteData {
  uint32 activity_id = 1;
  uint32 vote = 2;
  uint32 count = 3;
}

message ActivityBuffData {
  uint32 buff_id = 1;
  uint32 level = 5;
  uint32 count = 6;
  uint32 update_time = 7;
}

message AccountResourceSnapshot {
  message BagItemSnapshot {
    uint32 resource_id = 1;
    uint32 resource_count = 2;
    uint32 resource_version = 3;
  }

  message CurrencySnapshot {
    uint32 currency_id = 1;
    uint32 currency_count = 2;
  }

  message TitleSnapshot {
    repeated uint32 title_list = 1;
  }

  message UsedTitleSnapshot {
    uint32 title_id = 1;
  }

  repeated BagItemSnapshot bag_item = 1;
  repeated CurrencySnapshot currency = 2;
  TitleSnapshot title = 3;
  UsedTitleSnapshot used_title = 4;
  uint32 currency_convert = 5;
}

message AccountCharacterSnapshot {
  message MainCharacterSnapshot {
    uint32 character_id = 1;
  }

  message SkinsSnapshot {
    repeated uint32 skin_list = 1;
  }

  message HiddenCharacter {
    repeated uint32 hidden_list = 1;
  }

  repeated uint32 created_characters = 1;
  repeated Character removed_characters = 2;
  repeated Character modified_characters = 3;
  MainCharacterSnapshot main_character = 4;
  SkinsSnapshot skins = 5;
  HiddenCharacter hidden_characters = 6;
}

message AccountMailRecord {
  message MailSnapshot {
    uint32 mail_id = 1;
    uint32 reference_id = 2;
    uint32 create_time = 3;
    uint32 expire_time = 4;
    uint32 take_attachment = 5;
    repeated RewardSlot attachments = 6;
  }

  repeated uint32 created_mails = 1;
  repeated MailSnapshot removed_mails = 2;
  repeated MailSnapshot modified_mails = 3;
}

message AccountAchievementSnapshot {
  message RewardedGroupSnapshot {
    uint32 rewarded_id = 1;
  }

  message AchievementVersion {
    uint32 version = 1;
  }

  repeated AchievementProgress achievements = 1;
  RewardedGroupSnapshot rewarded_group = 2;
  AchievementVersion version = 3;
}

message AccountMiscSnapshot {
  message AccountVIPRewardSnapshot {
    repeated uint32 rewarded = 1;
  }

  message MonthTicketInfo {
    uint32 id = 1; // 月卡ID
    uint32 end_time = 2; // 月卡结束时间
    uint32 last_pay_time = 3; // 上次领取时间
    uint32 record_start_time = 4; // 记录开始时间
    repeated uint32 history = 5; // 领取记录
  }

  message AccountMonthTicketSnapshot {
    repeated MonthTicketInfo tickets = 1;
  }

  message AccountVIP {
    uint32 vip = 1;
  }

  message AccountRechargeInfo {
    message RechargeRecord {
      uint32 level = 1;
      uint32 recharge_time = 2;
    }

    repeated RechargeRecord records = 1;
    uint32 has_data = 2;
  }

  message AccountMonthTicketSnapshotV2 {
    uint32 end_time = 1; // 月卡结束时间
    uint32 last_pay_time = 2; // 上次领取时间
    uint32 record_start_time = 3; // 记录开始时间
    repeated uint32 history = 4; // 领取记录
  }

  FaithData faith_data = 1;
  AccountVIPRewardSnapshot vip_reward_gained = 2;
  AccountVIP vip = 3;
  ShopInfo shop_info = 4;
  AccountMonthTicketSnapshot month_ticket = 5;
  AccountRechargeInfo recharged = 6;
  AccountMonthTicketSnapshotV2 month_ticket_v2 = 7;
}

message AccountGiftCodeRecord {
  repeated string used_gift_code = 1;
}

message AccSn {
  AccountResourceSnapshot resource = 1;
  AccountCharacterSnapshot character = 2;
  AccountMailRecord mail = 3;
  AccountAchievementSnapshot achievement = 4;
  AccountMiscSnapshot misc = 5;
  AccountGiftCodeRecord gift_code = 6;
}

message AccSnDa {
  uint32 account_id = 1;
  uint32 time = 2;
  bytes snapshot = 3;
}

message TransparentData {
  string method = 1;
  bytes data = 2;
  string session = 3;
  NetworkEndpoint remote = 4;
}

// message AmuletTile {
//   uint32 id = 1;
//   string tile = 2;
// }

// message AmuletFan {
//   uint32 id = 1;
//   int32 val = 2;
//   uint32 count = 3;
//   bool yiman = 4;
// }

// message AmuletReplace {
//   uint32 id = 1;
//   string tile = 2;
// }

// message AmuletMingInfo {
//   uint32 type = 1;
//   repeated uint32 tile_list = 2;
// }

// message AmuletActivityHookEffect {
//   repeated uint32 add_dora = 1; // 新增宝牌
//   repeated string add_tian_dora = 3; // 新增天牌

//   repeated uint32 add_effect = 4; // 新增护身符
//   repeated uint32 remove_effect = 5; // 移除护身符

//   repeated uint32 add_buff = 6; // 新增buff
//   repeated uint32 remove_buff = 7; // 移除 buff

//   int32 add_coin = 9; // 添加星币
//   repeated AmuletReplace tile_replace = 11; // 替换牌

//   int64 add_fan = 12; // 番数变化
//   int64 add_base = 13; // 底分变化
//   repeated AmuletFan modify_fan = 14; // 修改番

//   uint32 id = 15; // 护身符 或者 buff 的id
//   bool modify_dora = 16; // 是否修改了宝牌（所有【xx】的宝牌/天牌失效）
//   uint32 uid = 17; // 护身符的 uid

//   repeated uint32 add_show_tile = 18; // 新增的桌面显示牌
//   int32 add_dora_count = 19; // dora数量增加（结算宝牌番）

//   repeated uint32 add_dora_no_hook = 20;

//   int32 add_coin_no_hook = 21;

//   repeated AmuletGameTileScoreData add_tile_score = 22;
//   repeated AmuletGameTileScoreData add_tile_score_no_hook = 23;
// }

// message AmuletHuleInfo {
//   uint32 tile = 1; // 摸到的牌
//   repeated AmuletFan fan_list = 2; // 胡的番
//   uint64 fan = 3; // 番
//   string point = 4; // 最终得分=base*fan
//   uint64 base = 5; // 底分
// }

// message AmuletHuleOperateResult {
//   AmuletHuleInfo hu_final = 2; // 最终结算胡牌信息
//   AmuletHuleInfo hu_base = 3; // 护身符生效前胡牌信息
//   repeated AmuletActivityHookEffect hook_effect = 5; // 护身符 或 buff 产生的影响
// }

// message AmuletGangOperateResult {
//   repeated uint32 new_dora = 4;
//   repeated AmuletActivityHookEffect hook_effect = 5; // 护身符 或 buff 产生的影响
// }

// message AmuletDealTileResult {
//   uint32 tile = 1; // 摸到的牌
//   repeated AmuletActivityHookEffect hook_effect = 5; // 护身符 或 buff 产生的影响
// }

// message AmuletRoundResult {
//   AmuletHuleOperateResult hu_result = 2;
//   AmuletDealTileResult deal_result = 4;
// }

// message AmuletUpgradeResult {
//   repeated AmuletRoundResult remain_rounds = 1;
//   uint32 point_coin = 2; // 分数奖励星币
//   uint32 level_coin = 3; // 过关奖励星币，关卡奖励
//   AmuletGameShopData shop = 4; // stage=4/5 有数据
//   repeated AmuletActivityHookEffect hook_effect = 5; // 护身符 或 buff 产生的影响
// }

// 调查问卷相关
message QuestionnaireReward {
  uint32 resource_id = 1;
  uint32 count = 2;
}

// 调查问卷详细信息
message QuestionnaireDetail {

  uint32 id = 1;
  uint32 version_id = 2;
  uint32 effective_time_start = 3;
  uint32 effective_time_end = 4;
  repeated QuestionnaireReward rewards = 5;
  string banner_title = 6;
  string title = 7;
  string announcement_title = 8;
  string announcement_content = 9;
  string final_text = 10;
  repeated QuestionnaireQuestion questions = 11;
  uint32 type = 12; // 1=问卷 2=四象战报名 3=官方赛事报名
}

// 调查问卷问题
message QuestionnaireQuestion {
  uint32 id = 1;
  string title = 2;
  string describe = 3;
  string type = 4;
  string sub_type = 5;

  message QuestionOption {
    string label = 1;
    string value = 2;
    bool allow_input = 3;
  }
  repeated QuestionOption options = 6;
  bool option_random_sort = 7;
  bool require = 8;
  uint32 max_choice = 9;

  message NextQuestionData {
    uint32 target_question_id = 1;

    message QuestionCondition {
      uint32 question_id = 1;
      string op = 2;
      repeated string values = 3;
    }

    message QuestionconditionWrapper {
      repeated QuestionCondition conditions = 1;
    }

    repeated QuestionconditionWrapper conditions = 10;
  }
  repeated NextQuestionData next_question = 10;

  repeated string matrix_row = 11;
  int32 option_random_sort_index = 12;
}

message QuestionnaireBrief {
  uint32 id = 1;
  uint32 version_id = 2;
  uint32 effective_time_start = 3;
  uint32 effective_time_end = 4;
  repeated QuestionnaireReward rewards = 5;
  string banner_title = 6;
  string title = 7;
  uint32 type = 8; // 1=问卷 2=四象战报名 3=官方赛事报名
}

// Seer AI 报告
message SeerReport {
  string uuid = 1;
  repeated SeerEvent events = 2;
  repeated SeerRound rounds = 3;
}
message SeerEvent {
  int32 record_index = 1; // 原雀魂牌谱事件下标
  int32 seer_index = 2; // seer数据，不需要关心
  repeated SeerRecommend recommends = 3; // 推荐操作列表（以玩家为单位）
}
message SeerRecommend {
  int32 seat = 1; // 玩家座位号
  repeated SeerPrediction predictions = 2; // 预测操作列表
}
message SeerPrediction {
  int32 action = 1; // 推荐动作 枚举见https://confluence.catfoodstudio.net:5443/x/sY-xBw
  int32 score = 2;  // 评分，范围为 0-100
}
message SeerRound {
  uint32 chang = 1; // 场
  uint32 ju = 2; // 局，场风是谁的自风
  uint32 ben = 3; // 本
  repeated SeerScore player_scores = 4;
}
message SeerScore {
  uint32 seat = 1;
  // 等级 56=S+ 55=S 54=S- 46=A+ 45=A 44=A- 36=B+ 35=B 34=B- 26=C+ 25=C 24=C- 16=D+ 15=D 5=E
  // 不使用具体数字，避免解包玩家从数值和推荐权重反推出雀魂的计算方式
  uint32 rating = 2;
}
message SeerBrief {
  string uuid = 1;
  uint32 state = 2; // 1-正在分析 2-分析完毕且未过期
  uint32 expire_time = 3; // 过期时间
  repeated SeerScore player_scores = 4;
  uint32 create_time = 5; // 创建时间
}

message SimulationV2SeasonData {
  uint32 round = 1; // 回合（第几天）
  SimulationV2Ability ability = 2; // 一姬属性
  repeated SimulationV2Effect effect_list = 3; // 当前特性
  SimulationV2Match match = 4; // 比赛对局信息
  SimulationV2Event event = 5; // 待选事件
  repeated SimulationV2EventHistory event_history = 6; // 事件选择历史，不会发送给客户端
  SimulationV2Record record = 7; // 游戏记录，不会发给客户端
  int32 total_score = 8; // 当前总分
  repeated SimulationV2MatchRecord match_history = 9; // 对局历史记录
}

message SimulationV2PlayerRecord {
  uint32 id = 1; // 角色id
  bool main = 2; // 是否玩家操控角色
  int32 score = 3; // 对局分数
  uint32 rank = 4; // 排名
  uint32 seat = 5; // 座位编号
}

message SimulationV2MatchRecord {
  repeated SimulationV2PlayerRecord players = 1; // 玩家对局记录
  uint32 round = 2; // 当前回合数
}

message SimulationV2EventHistory {
  uint32 id = 1;
  uint32 round = 2;
}

message SimulationV2Event {
  uint32 id = 1; // 事件id

  message SimulationV2EventSelection {
    uint32 id = 1; // 选项id

    message SimulationV2EventResult {
      uint32 id = 1; // 结果id
      uint32 weight = 2; // 几率
    }
    repeated SimulationV2EventResult results = 2;
  }
  repeated SimulationV2EventSelection selections = 2;
  uint32 next_round = 3; // 事件选择后的回合数
}

message SimulationV2Ability {
  uint32 luk = 1; // 运气
  uint32 tec = 2; // 技术
  uint32 ins = 3; // 洞察
  uint32 int = 4; // 直觉
  uint32 res = 5; // 智谋
}

message SimulationV2Buff {
  uint32 id = 1;
  uint32 round = 2; // 为0时生效，其他数值代表剩余多少回合再生效
  repeated uint32 store = 3;
}

message SimulationV2Effect {
  uint32 id = 1;
}

message SimulationV2MatchInfo {
  uint32 chang = 1;
  uint32 ju = 2;
  uint32 ben = 3;

  uint32 gong = 4; // 场供（立直棒）
  uint32 remain = 5; // 牌河余牌数量
}

message SimulationV2Record {
  uint32 hu_count = 1; // 和牌次数
  uint32 chong_count = 2; // 放铳次数
  uint32 highest_hu = 3; // 最大和牌
  repeated uint32 rank = 4; // 对局顺位
  uint32 round_count = 5; // 对局场数
}

message SimulationV2MatchHistory {
  /*
    1: 回合开始
    2: 立直
    3: 副露
    4: 和牌
    5: 推进向听
    6: 发现他家听牌
    7: 流局
    8: 碎碎念
    9: 立直成功
  */
  uint32 type = 1; // 事件类型
  uint32 remain = 2; // 当前余牌数量
  repeated int32 score_modify = 3; // 分数变动(seat 为索引)

  message RoundStartArgs {
    SimulationV2MatchInfo info = 1;
    repeated int32 scores = 2;
    uint32 ting = 3; // 一姬向听数
    repeated uint32 effected_buff_list = 4; // 本局生效buff列表
  }
  RoundStartArgs round_start = 4;

  message RiichiArgs {
    uint32 seat = 1;
  }
  RiichiArgs riichi = 5;

  message FuluArgs {
    uint32 seat = 1;
    uint32 ting = 2; // 副露后向听数
    uint32 fulu = 3; // 副露数
  }
  FuluArgs fulu = 6;

  message HuleArgs {
    uint32 seat = 1;
    bool zimo = 2;
    uint32 chong_seat = 3;
    int32 point = 4;
    int32 fan = 5;
    repeated int32 score_modify = 6;
  }
  repeated HuleArgs hule = 7;

  message PushTingArgs {
    uint32 seat = 1;
    uint32 ting = 2;
  }
  PushTingArgs push_ting = 8;

  message FindTingArgs {
    uint32 seat = 1;
    uint32 target = 2;
  }
  FindTingArgs find_ting = 9;

  message LiujuArgs {
    repeated uint32 ting = 1; // 玩家是否听牌(seat 索引)
  }
  LiujuArgs liuju = 10;

  message StoryArgs {
    uint32 story_id = 1;
  }
  StoryArgs story = 11;
}

message SimulationV2Match {
  SimulationV2MatchInfo info = 1;

  message SimulationV2Player {
    uint32 id = 1; // 角色id
    bool main = 2; // 是否是玩家控制角色
    uint32 ting = 4;
    int32 score = 5; // 分数
    uint32 fulu = 6; // 副露数
    bool riichi = 7; // 是否立直
    repeated uint32 find_ting = 8; // 是否发现他家听牌(seat)
    uint32 seat = 9;
    uint32 con_push_ting = 10; // 服务端数据
    uint32 con_keep_ting = 11; // 服务端数据
    bool ippatsu = 12; // 一发状态
  }
  repeated SimulationV2Player players = 2;

  repeated SimulationV2MatchHistory history = 3; // 对局历史
  repeated uint32 rank = 4; // 当前顺位(seat)
  bool is_match_end = 5; // 本场对局是否已结束
  repeated SimulationActionData actions = 6; // 服务端数据
  repeated SimulationV2Buff buff_list = 9; // 当前buff，服务端数据
  bool is_first_round = 10; // 是否第一巡
  uint32 last_event_remain = 11; // 上一次触发事件时的余牌数量
  repeated uint32 effected_buff_list = 12; // 当前生效buff列表，客户端数据
  repeated uint32 triggered_story = 13; // 触发过得碎碎念，服务端数据
}

message SimulationActionData {
  uint32 type = 1;

  message ActionRiichiData {
    uint32 seat = 1;
  }
  ActionRiichiData riichi = 2;

  message ActionHuleData {
    message HuleInfo {
      uint32 fan = 1;
      bool zimo = 2;
      uint32 point = 3;
      bool oya = 4;
      uint32 player = 5;
      uint32 chong = 6;
      bool toutiao = 7;
    }
    repeated HuleInfo hule = 1;
  }
  ActionHuleData hule = 3;

  message ActionFuluData {
    uint32 seat = 1;
  }
  ActionFuluData fulu = 4;

  message ActionDiscardData {
    uint32 seat = 1;
    bool riichi = 2;
  }
  ActionDiscardData discard_tile = 5;

  message ActionDealTileData {
    uint32 seat = 1;
  }
  ActionDealTileData deal_tile = 6;
}
