/** The file is automatically generated by ProtoDeclare.ts , please do not modify ! */

/** 网络通知 */
declare const enum ENotify {
	/**
	 * * 通知房间游戏开始了
	 * * res: {@link INotifyRoomGameStart}
	 */
	NotifyRoomGameStart = "NotifyRoomGameStart",
	/**
	 * * 通知匹配场游戏开始了
	 * * res: {@link INotifyMatchGameStart}
	 */
	NotifyMatchGameStart = "NotifyMatchGameStart",
	/**
	 * * 通知玩家就绪
	 * * res: {@link INotifyRoomPlayerReady}
	 */
	NotifyRoomPlayerReady = "NotifyRoomPlayerReady",
	/**
	 * * 通知玩家装扮状态
	 * * res: {@link INotifyRoomPlayerDressing}
	 */
	NotifyRoomPlayerDressing = "NotifyRoomPlayerDressing",
	/**
	 * * 通知玩家变化
	 * * res: {@link INotifyRoomPlayerUpdate}
	 */
	NotifyRoomPlayerUpdate = "NotifyRoomPlayerUpdate",
	/**
	 * * 通知玩家被踢出
	 * * res: {@link INotifyRoomKickOut}
	 */
	NotifyRoomKickOut = "NotifyRoomKickOut",
	/**
	 * * 通知好友状态变化
	 * * res: {@link INotifyFriendStateChange}
	 */
	NotifyFriendStateChange = "NotifyFriendStateChange",
	/**
	 * * 通知好友展示信息变化
	 * * res: {@link INotifyFriendViewChange}
	 */
	NotifyFriendViewChange = "NotifyFriendViewChange",
	/**
	 * * 通知好友变化
	 * * res: {@link INotifyFriendChange}
	 */
	NotifyFriendChange = "NotifyFriendChange",
	/**
	 * * 新的好友申请
	 * * res: {@link INotifyNewFriendApply}
	 */
	NotifyNewFriendApply = "NotifyNewFriendApply",
	/**
	 * * 发送一条单方面消息
	 * * res: {@link INotifyClientMessage}
	 */
	NotifyClientMessage = "NotifyClientMessage",
	/**
	 * * 人物数据更新
	 * * res: {@link INotifyAccountUpdate}
	 */
	NotifyAccountUpdate = "NotifyAccountUpdate",
	/**
	 * * 提示有另一处登录
	 * * res: {@link INotifyAnotherLogin}
	 */
	NotifyAnotherLogin = "NotifyAnotherLogin",
	/**
	 * * 提示玩家需要登出
	 * * res: {@link INotifyAccountLogout}
	 */
	NotifyAccountLogout = "NotifyAccountLogout",
	/**
	 * * 公告更新
	 * * yaya(2020-07-29): 现在不放具体内容，只进行通知（消息体内容除lang外为空），客户端在收到通知后随机延迟（五分钟内）重新调用获取通知接口进行更新
	 * * yaya(2021-12-09): 改成以列表形式通知
	 * * res: {@link INotifyAnnouncementUpdate}
	 */
	NotifyAnnouncementUpdate = "NotifyAnnouncementUpdate",
	/**
	 * * 通知新邮件
	 * * res: {@link INotifyNewMail}
	 */
	NotifyNewMail = "NotifyNewMail",
	/**
	 * * 通知删除邮件
	 * * res: {@link INotifyDeleteMail}
	 */
	NotifyDeleteMail = "NotifyDeleteMail",
	/**
	 * * 通知复活币更新
	 * * res: {@link INotifyReviveCoinUpdate}
	 */
	NotifyReviveCoinUpdate = "NotifyReviveCoinUpdate",
	/**
	 * * 每日任务刷新推送
	 * * res: {@link INotifyDailyTaskUpdate}
	 */
	NotifyDailyTaskUpdate = "NotifyDailyTaskUpdate",
	/**
	 * * 每日活动任务刷新推送
	 * * res: {@link INotifyActivityTaskUpdate}
	 */
	NotifyActivityTaskUpdate = "NotifyActivityTaskUpdate",
	/**
	 * * 长期活动任务刷新推送
	 * * res: {@link INotifyActivityPeriodTaskUpdate}
	 */
	NotifyActivityPeriodTaskUpdate = "NotifyActivityPeriodTaskUpdate",
	/**
	 * * 随机活动任务刷新推送
	 * * res: {@link INotifyAccountRandomTaskUpdate}
	 */
	NotifyAccountRandomTaskUpdate = "NotifyAccountRandomTaskUpdate",
	/** res: {@link INotifyActivitySegmentTaskUpdate} */
	NotifyActivitySegmentTaskUpdate = "NotifyActivitySegmentTaskUpdate",
	/** res: {@link INotifyActivityUpdate} */
	NotifyActivityUpdate = "NotifyActivityUpdate",
	/**
	 * * 试炼赛更新推送
	 * * res: {@link INotifyAccountChallengeTaskUpdate}
	 */
	NotifyAccountChallengeTaskUpdate = "NotifyAccountChallengeTaskUpdate",
	/**
	 * * 通知：有新的留言
	 * * res: {@link INotifyNewComment}
	 */
	NotifyNewComment = "NotifyNewComment",
	/**
	 * * 通知：新滚动公告
	 * * res: {@link INotifyRollingNotice}
	 */
	NotifyRollingNotice = "NotifyRollingNotice",
	/**
	 * * 通知：新维护公告
	 * * res: {@link INotifyMaintainNotice}
	 */
	NotifyMaintainNotice = "NotifyMaintainNotice",
	/**
	 * * 通知：每日送礼次数刷新
	 * * res: {@link INotifyGiftSendRefresh}
	 */
	NotifyGiftSendRefresh = "NotifyGiftSendRefresh",
	/**
	 * * 通知：商店更新
	 * * res: {@link INotifyShopUpdate}
	 */
	NotifyShopUpdate = "NotifyShopUpdate",
	/**
	 * * 通知：轮换商店/活动发生改变
	 * * res: {@link INotifyIntervalUpdate}
	 */
	NotifyIntervalUpdate = "NotifyIntervalUpdate",
	/**
	 * * 通知：VIP等级变化
	 * * res: {@link INotifyVipLevelChange}
	 */
	NotifyVipLevelChange = "NotifyVipLevelChange",
	/**
	 * * 服务器设置
	 * * res: {@link INotifyServerSetting}
	 */
	NotifyServerSetting = "NotifyServerSetting",
	/**
	 * * 通知：充值结果
	 * * res: {@link INotifyPayResult}
	 */
	NotifyPayResult = "NotifyPayResult",
	/**
	 * * 通知：比赛聊天消息
	 * * res: {@link INotifyCustomContestAccountMsg}
	 */
	NotifyCustomContestAccountMsg = "NotifyCustomContestAccountMsg",
	/**
	 * * 通知：比赛系统消息
	 * * res: {@link INotifyCustomContestSystemMsg}
	 */
	NotifyCustomContestSystemMsg = "NotifyCustomContestSystemMsg",
	/**
	 * * 通知：匹配超时通知
	 * * res: {@link INotifyMatchTimeout}
	 */
	NotifyMatchTimeout = "NotifyMatchTimeout",
	/**
	 * * 通知：匹配出错
	 * * res: {@link INotifyMatchFailed}
	 */
	NotifyMatchFailed = "NotifyMatchFailed",
	/**
	 * * 通知：自定义比赛状态变化
	 * * res: {@link INotifyCustomContestState}
	 */
	NotifyCustomContestState = "NotifyCustomContestState",
	/**
	 * * 通知：活动变化
	 * * res: {@link INotifyActivityChange}
	 */
	NotifyActivityChange = "NotifyActivityChange",
	/**
	 * * 通知：挂机惩罚
	 * * res: {@link INotifyAFKResult}
	 */
	NotifyAFKResult = "NotifyAFKResult",
	/**
	 * * 通知：登录排队完成
	 * * res: {@link INotifyLoginQueueFinished}
	 */
	NotifyLoginQueueFinished = "NotifyLoginQueueFinished",
	/**
	 * * 比赛结束奖励
	 * * res: {@link INotifyGameFinishRewardV2}
	 */
	NotifyGameFinishRewardV2 = "NotifyGameFinishRewardV2",
	/** res: {@link INotifyActivityRewardV2} */
	NotifyActivityRewardV2 = "NotifyActivityRewardV2",
	/** res: {@link INotifyActivityPointV2} */
	NotifyActivityPointV2 = "NotifyActivityPointV2",
	/** res: {@link INotifyLeaderboardPointV2} */
	NotifyLeaderboardPointV2 = "NotifyLeaderboardPointV2",
	/** res: {@link INotifySeerReport} */
	NotifySeerReport = "NotifySeerReport",
	/**
	 * * 服务端主动断开
	 * * res: {@link INotifyConnectionShutdown}
	 */
	NotifyConnectionShutdown = "NotifyConnectionShutdown",
	/**
	 * * 通知新的一场游戏开始了
	 * * res: {@link INotifyNewGame}
	 */
	NotifyNewGame = "NotifyNewGame",
	/**
	 * * 通知玩家进入游戏的准备就绪
	 * * res: {@link INotifyPlayerLoadGameReady}
	 */
	NotifyPlayerLoadGameReady = "NotifyPlayerLoadGameReady",
	/**
	 * * 玩家游戏内广播
	 * * res: {@link INotifyGameBroadcast}
	 */
	NotifyGameBroadcast = "NotifyGameBroadcast",
	/**
	 * * 发送整场游戏结束信息
	 * * res: {@link INotifyGameEndResult}
	 */
	NotifyGameEndResult = "NotifyGameEndResult",
	/**
	 * * 通知游戏中断
	 * * res: {@link INotifyGameTerminate}
	 */
	NotifyGameTerminate = "NotifyGameTerminate",
	/**
	 * * 广播玩家连接状态变化
	 * * res: {@link INotifyPlayerConnectionState}
	 */
	NotifyPlayerConnectionState = "NotifyPlayerConnectionState",
	/**
	 * * 通知玩家段位变化
	 * * res: {@link INotifyAccountLevelChange}
	 */
	NotifyAccountLevelChange = "NotifyAccountLevelChange",
	/**
	 * * 比赛结束奖励
	 * * res: {@link INotifyGameFinishReward}
	 */
	NotifyGameFinishReward = "NotifyGameFinishReward",
	/** res: {@link INotifyActivityReward} */
	NotifyActivityReward = "NotifyActivityReward",
	/** res: {@link INotifyActivityPoint} */
	NotifyActivityPoint = "NotifyActivityPoint",
	/** res: {@link INotifyLeaderboardPoint} */
	NotifyLeaderboardPoint = "NotifyLeaderboardPoint",
	/**
	 * * 比赛暂停通知
	 * * res: {@link INotifyGamePause}
	 */
	NotifyGamePause = "NotifyGamePause",
	/**
	 * * 比赛退出投票通知
	 * * res: {@link INotifyEndGameVote}
	 */
	NotifyEndGameVote = "NotifyEndGameVote",
	/**
	 * * 通知观战数据
	 * * res: {@link INotifyObserveData}
	 */
	NotifyObserveData = "NotifyObserveData",
}

/** 网络请求协议 */
declare enum ERequest {
	/**
	 * * 获取连接相关信息
	 * * req: {@link IReqCommon}, res: {@link IResConnectionInfo}
	 */
	fetchConnectionInfo = "fetchConnectionInfo",
	/**
	 * * 获取排队信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchQueueInfo}
	 */
	fetchQueueInfo = "fetchQueueInfo",
	/** req: {@link IReqCommon}, res: {@link IResCommon} */
	cancelQueue = "cancelQueue",
	/** req: {@link IReqOpenidCheck}, res: {@link IResOauth2Check} */
	openidCheck = "openidCheck",
	/**
	 * * 注册账号
	 * * req: {@link IReqSignupAccount}, res: {@link IResSignupAccount}
	 */
	signup = "signup",
	/**
	 * * 登录账号
	 * * req: {@link IReqLogin}, res: {@link IResLogin}
	 */
	login = "login",
	/**
	 * * 备线半登录状态
	 * * req: {@link IReqPrepareLogin}, res: {@link IResCommon}
	 */
	prepareLogin = "prepareLogin",
	/**
	 * * 备线切换主线快速登录
	 * * req: {@link IReqCommon}, res: {@link IResFastLogin}
	 */
	fastLogin = "fastLogin",
	/**
	 * * 登录后获取信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchInfo}
	 */
	fetchInfo = "fetchInfo",
	/**
	 * * 登录成功后摇
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	loginSuccess = "loginSuccess",
	/**
	 * * 获取服务器维护信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchServerMaintenanceInfo}
	 */
	fetchServerMaintenanceInfo = "fetchServerMaintenanceInfo",
	/** req: {@link IReqEmailLogin}, res: {@link IResLogin} */
	emailLogin = "emailLogin",
	/**
	 * * oauth2 方式登录授权
	 * * req: {@link IReqOauth2Auth}, res: {@link IResOauth2Auth}
	 */
	oauth2Auth = "oauth2Auth",
	/**
	 * * oauth2 验证是否已经注册过账号
	 * * req: {@link IReqOauth2Check}, res: {@link IResOauth2Check}
	 */
	oauth2Check = "oauth2Check",
	/**
	 * * oauth2 注册
	 * * req: {@link IReqOauth2Signup}, res: {@link IResOauth2Signup}
	 */
	oauth2Signup = "oauth2Signup",
	/**
	 * * oauth2 登录
	 * * req: {@link IReqOauth2Login}, res: {@link IResLogin}
	 */
	oauth2Login = "oauth2Login",
	/**
	 * * dmm 获取登录参数
	 * * req: {@link IReqDMMPreLogin}, res: {@link IResDMMPreLogin}
	 */
	dmmPreLogin = "dmmPreLogin",
	/**
	 * * 获取手机验证码（已登录的情况下）
	 * * req: {@link IReqCreatePhoneVerifyCode}, res: {@link IResCommon}
	 */
	createPhoneVerifyCode = "createPhoneVerifyCode",
	/**
	 * * 获取邮箱验证码
	 * * req: {@link IReqCreateEmailVerifyCode}, res: {@link IResCommon}
	 */
	createEmailVerifyCode = "createEmailVerifyCode",
	/**
	 * * 验证码获取安全权限
	 * * req: {@link IReqVerifyCodeForSecure}, res: {@link IResVerfiyCodeForSecure}
	 */
	verfifyCodeForSecure = "verfifyCodeForSecure",
	/**
	 * * 绑定手机号
	 * * req: {@link IReqBindPhoneNumber}, res: {@link IResCommon}
	 */
	bindPhoneNumber = "bindPhoneNumber",
	/**
	 * * 解绑手机号
	 * * req: {@link IReqUnbindPhoneNumber}, res: {@link IResCommon}
	 */
	unbindPhoneNumber = "unbindPhoneNumber",
	/**
	 * * 查询已绑定手机是否有登录绑定
	 * * req: {@link IReqCommon}, res: {@link IResFetchPhoneLoginBind}
	 */
	fetchPhoneLoginBind = "fetchPhoneLoginBind",
	/**
	 * * 生成手机登录绑定
	 * * req: {@link IReqCreatePhoneLoginBind}, res: {@link IResCommon}
	 */
	createPhoneLoginBind = "createPhoneLoginBind",
	/**
	 * * 绑定邮箱
	 * * req: {@link IReqBindEmail}, res: {@link IResCommon}
	 */
	bindEmail = "bindEmail",
	/**
	 * * 修改密码
	 * * req: {@link IReqModifyPassword}, res: {@link IResCommon}
	 */
	modifyPassword = "modifyPassword",
	/**
	 * * 绑定账号密码（Oauth2注册的账号使用，只有一次机会）
	 * * req: {@link IReqBindAccount}, res: {@link IResCommon}
	 */
	bindAccount = "bindAccount",
	/**
	 * * 注销账号
	 * * req: {@link IReqLogout}, res: {@link IResLogout}
	 */
	logout = "logout",
	/**
	 * * 心跳
	 * * req: {@link IReqHeatBeat}, res: {@link IResCommon}
	 */
	heatbeat = "heatbeat",
	/**
	 * * 通过Eid获取账号ID
	 * * req: {@link IReqSearchAccountByEidLobby}, res: {@link IResSearchAccountbyEidLobby}
	 */
	searchAccountByEid = "searchAccountByEid",
	/**
	 * * 登录心跳（用于防止第三方客户端，登录后不调用该接口无法进行匹配游戏）
	 * * req: {@link IReqLoginBeat}, res: {@link IResCommon}
	 */
	loginBeat = "loginBeat",
	/**
	 * * 创建昵称
	 * * req: {@link IReqCreateNickname}, res: {@link IResCommon}
	 */
	createNickname = "createNickname",
	/**
	 * * 修改昵称
	 * * req: {@link IReqModifyNickname}, res: {@link IResCommon}
	 */
	modifyNickname = "modifyNickname",
	/**
	 * * 修改生日
	 * * req: {@link IReqModifyBirthday}, res: {@link IResCommon}
	 */
	modifyBirthday = "modifyBirthday",
	/**
	 * * 请求自己的房间信息
	 * * req: {@link IReqCommon}, res: {@link IResSelfRoom}
	 */
	fetchRoom = "fetchRoom",
	/**
	 * * 请求自己的对局信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchGamingInfo}
	 */
	fetchGamingInfo = "fetchGamingInfo",
	/**
	 * * 创建房间
	 * * req: {@link IReqCreateRoom}, res: {@link IResCreateRoom}
	 */
	createRoom = "createRoom",
	/**
	 * * 加入房间
	 * * req: {@link IReqJoinRoom}, res: {@link IResJoinRoom}
	 */
	joinRoom = "joinRoom",
	/**
	 * * 离开房间
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	leaveRoom = "leaveRoom",
	/**
	 * * 准备
	 * * req: {@link IReqRoomReady}, res: {@link IResCommon}
	 */
	readyPlay = "readyPlay",
	/**
	 * * 切换装扮状态
	 * * req: {@link IReqRoomDressing}, res: {@link IResCommon}
	 */
	dressingStatus = "dressingStatus",
	/**
	 * * 开始
	 * * req: {@link IReqRoomStart}, res: {@link IResCommon}
	 */
	startRoom = "startRoom",
	/**
	 * * 踢出玩家
	 * * req: {@link IReqRoomKickPlayer}, res: {@link IResCommon}
	 */
	roomKickPlayer = "roomKickPlayer",
	/**
	 * * 修改房间
	 * * req: {@link IReqModifyRoom}, res: {@link IResCommon}
	 */
	modifyRoom = "modifyRoom",
	/**
	 * * 添加好友房机器人
	 * * req: {@link IReqAddRoomRobot}, res: {@link IResCommon}
	 */
	addRoomRobot = "addRoomRobot",
	/**
	 * * 加入匹配
	 * * req: {@link IReqJoinMatchQueue}, res: {@link IResCommon}
	 */
	matchGame = "matchGame",
	/**
	 * * 取消匹配
	 * * req: {@link IReqCancelMatchQueue}, res: {@link IResCommon}
	 */
	cancelMatch = "cancelMatch",
	/**
	 * * 请求账号信息
	 * * req: {@link IReqAccountInfo}, res: {@link IResAccountInfo}
	 */
	fetchAccountInfo = "fetchAccountInfo",
	/**
	 * * 修改头像
	 * * req: {@link IReqChangeAvatar}, res: {@link IResCommon}
	 */
	changeAvatar = "changeAvatar",
	/**
	 * * 领取更新礼包
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	receiveVersionReward = "receiveVersionReward",
	/**
	 * * 请求账号统计信息
	 * * req: {@link IReqAccountStatisticInfo}, res: {@link IResAccountStatisticInfo}
	 */
	fetchAccountStatisticInfo = "fetchAccountStatisticInfo",
	/**
	 * * 获取试炼赛赛季排名信息
	 * * req: {@link IReqAccountInfo}, res: {@link IResAccountChallengeRankInfo}
	 */
	fetchAccountChallengeRankInfo = "fetchAccountChallengeRankInfo",
	/**
	 * * 获取账号人物信息
	 * * req: {@link IReqCommon}, res: {@link IResAccountCharacterInfo}
	 */
	fetchAccountCharacterInfo = "fetchAccountCharacterInfo",
	/**
	 * * 商店购买
	 * * req: {@link IReqShopPurchase}, res: {@link IResShopPurchase}
	 */
	shopPurchase = "shopPurchase",
	/**
	 * * 获取单场牌谱记录
	 * * req: {@link IReqGameRecord}, res: {@link IResGameRecord}
	 */
	fetchGameRecord = "fetchGameRecord",
	/**
	 * * 添加查看牌谱记录
	 * * req: {@link IReqGameRecord}, res: {@link IResCommon}
	 */
	readGameRecord = "readGameRecord",
	/**
	 * * 获取牌谱列表
	 * * 20240820更新之前的牌谱通过这个接口获取
	 * * req: {@link IReqGameRecordList}, res: {@link IResGameRecordList}
	 */
	fetchGameRecordList = "fetchGameRecordList",
	/**
	 * * 获取牌谱列表V2
	 * * 202408新版牌谱功能使用（基于迭代器）
	 * * 2024.08.20 06:33 停服  07:40 国服启动
	 * * 只有 2024.08.20 07:30 (1724110200) 停服维护之后的牌谱可以通过这个接口获取列表
	 * * req: {@link IReqGameRecordListV2}, res: {@link IResGameRecordListV2}
	 */
	fetchGameRecordListV2 = "fetchGameRecordListV2",
	/**
	 * * 获取后续牌谱列表内容
	 * * 基于 fetchGameRecordListV2 协议返回结果使用
	 * * 只有 2024.08.20 07:30 (1724110200) 停服维护之后的牌谱可以通过这个接口获取列表
	 * * req: {@link IReqNextGameRecordList}, res: {@link IResNextGameRecordList}
	 */
	fetchNextGameRecordList = "fetchNextGameRecordList",
	/**
	 * * 获得收藏的牌谱列表（简要信息）
	 * * req: {@link IReqCommon}, res: {@link IResCollectedGameRecordList}
	 */
	fetchCollectedGameRecordList = "fetchCollectedGameRecordList",
	/**
	 * * 获取牌谱列表的详细信息
	 * * req: {@link IReqGameRecordsDetail}, res: {@link IResGameRecordsDetail}
	 */
	fetchGameRecordsDetail = "fetchGameRecordsDetail",
	/**
	 * * 获取牌谱列表的详细信息 （新版）
	 * * req: {@link IReqGameRecordsDetailV2}, res: {@link IResGameRecordsDetailV2}
	 */
	fetchGameRecordsDetailV2 = "fetchGameRecordsDetailV2",
	/**
	 * * 添加牌谱收藏
	 * * req: {@link IReqAddCollectedGameRecord}, res: {@link IResAddCollectedGameRecord}
	 */
	addCollectedGameRecord = "addCollectedGameRecord",
	/**
	 * * 移除牌谱收藏
	 * * req: {@link IReqRemoveCollectedGameRecord}, res: {@link IResRemoveCollectedGameRecord}
	 */
	removeCollectedGameRecord = "removeCollectedGameRecord",
	/**
	 * * 修改牌谱备注
	 * * req: {@link IReqChangeCollectedGameRecordRemarks}, res: {@link IResChangeCollectedGameRecordRemarks}
	 */
	changeCollectedGameRecordRemarks = "changeCollectedGameRecordRemarks",
	/**
	 * * 获取排行榜
	 * * req: {@link IReqLevelLeaderboard}, res: {@link IResLevelLeaderboard}
	 */
	fetchLevelLeaderboard = "fetchLevelLeaderboard",
	/**
	 * * 获取试炼赛排行榜
	 * * req: {@link IReqChallangeLeaderboard}, res: {@link IResChallengeLeaderboard}
	 */
	fetchChallengeLeaderboard = "fetchChallengeLeaderboard",
	/**
	 * * 获取多人试炼赛等级信息
	 * * req: {@link IReqMutiChallengeLevel}, res: {@link IResMutiChallengeLevel}
	 */
	fetchMutiChallengeLevel = "fetchMutiChallengeLevel",
	/**
	 * * 获取多人简要信息
	 * * req: {@link IReqMultiAccountId}, res: {@link IResMultiAccountBrief}
	 */
	fetchMultiAccountBrief = "fetchMultiAccountBrief",
	/**
	 * * 获取好友列表
	 * * req: {@link IReqCommon}, res: {@link IResFriendList}
	 */
	fetchFriendList = "fetchFriendList",
	/**
	 * * 获取好友申请列表
	 * * req: {@link IReqCommon}, res: {@link IResFriendApplyList}
	 */
	fetchFriendApplyList = "fetchFriendApplyList",
	/**
	 * * 申请好友
	 * * req: {@link IReqApplyFriend}, res: {@link IResCommon}
	 */
	applyFriend = "applyFriend",
	/**
	 * * 处理好友申请
	 * * req: {@link IReqHandleFriendApply}, res: {@link IResCommon}
	 */
	handleFriendApply = "handleFriendApply",
	/**
	 * * 删除好友
	 * * req: {@link IReqRemoveFriend}, res: {@link IResCommon}
	 */
	removeFriend = "removeFriend",
	/**
	 * * 查询单个玩家
	 * * req: {@link IReqSearchAccountById}, res: {@link IResSearchAccountById}
	 */
	searchAccountById = "searchAccountById",
	/**
	 * * 模糊查询玩家
	 * * req: {@link IReqSearchAccountByPattern}, res: {@link IResSearchAccountByPattern}
	 */
	searchAccountByPattern = "searchAccountByPattern",
	/**
	 * * 查询玩家状态
	 * * req: {@link IReqAccountList}, res: {@link IResAccountStates}
	 */
	fetchAccountState = "fetchAccountState",
	/**
	 * * 请求背包信息
	 * * req: {@link IReqCommon}, res: {@link IResBagInfo}
	 */
	fetchBagInfo = "fetchBagInfo",
	/**
	 * * 使用背包道具
	 * * req: {@link IReqUseBagItem}, res: {@link IResCommon}
	 */
	useBagItem = "useBagItem",
	/**
	 * * 使用手选道具物品
	 * * req: {@link IReqOpenManualItem}, res: {@link IResCommon}
	 */
	openManualItem = "openManualItem",
	/**
	 * * 使用随机道具物品
	 * * req: {@link IReqOpenRandomRewardItem}, res: {@link IResOpenRandomRewardItem}
	 */
	openRandomRewardItem = "openRandomRewardItem",
	/**
	 * * 使用全领礼包物品
	 * * req: {@link IReqOpenAllRewardItem}, res: {@link IResOpenAllRewardItem}
	 */
	openAllRewardItem = "openAllRewardItem",
	/**
	 * * 合成碎片
	 * * req: {@link IReqComposeShard}, res: {@link IResCommon}
	 */
	composeShard = "composeShard",
	/**
	 * * 获取公告
	 * * req: {@link IReqFetchAnnouncement}, res: {@link IResAnnouncement}
	 */
	fetchAnnouncement = "fetchAnnouncement",
	/**
	 * * 阅读公告
	 * * req: {@link IReqReadAnnouncement}, res: {@link IResCommon}
	 */
	readAnnouncement = "readAnnouncement",
	/**
	 * * 获取邮件列表
	 * * req: {@link IReqCommon}, res: {@link IResMailInfo}
	 */
	fetchMailInfo = "fetchMailInfo",
	/**
	 * * 阅读邮件
	 * * req: {@link IReqReadMail}, res: {@link IResCommon}
	 */
	readMail = "readMail",
	/**
	 * * 删除邮件
	 * * req: {@link IReqDeleteMail}, res: {@link IResCommon}
	 */
	deleteMail = "deleteMail",
	/**
	 * * 拿取邮件附件
	 * * req: {@link IReqTakeAttachment}, res: {@link IResCommon}
	 */
	takeAttachmentFromMail = "takeAttachmentFromMail",
	/**
	 * * 领取成就奖励
	 * * req: {@link IReqReceiveAchievementReward}, res: {@link IResReceiveAchievementReward}
	 */
	receiveAchievementReward = "receiveAchievementReward",
	/**
	 * * 领取成就大组奖励
	 * * req: {@link IReqReceiveAchievementGroupReward}, res: {@link IResReceiveAchievementGroupReward}
	 */
	receiveAchievementGroupReward = "receiveAchievementGroupReward",
	/**
	 * * 获取全服成就完成率
	 * * req: {@link IReqCommon}, res: {@link IResFetchAchievementRate}
	 */
	fetchAchievementRate = "fetchAchievementRate",
	/**
	 * * 获取成就
	 * * req: {@link IReqCommon}, res: {@link IResAchievement}
	 */
	fetchAchievement = "fetchAchievement",
	/**
	 * * 购买试炼资格
	 * * req: {@link IReqBuyShiLian}, res: {@link IResCommon}
	 */
	buyShiLian = "buyShiLian",
	/**
	 * * 试炼匹配
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	matchShiLian = "matchShiLian",
	/**
	 * * 继续下一阶段试炼
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	goNextShiLian = "goNextShiLian",
	/**
	 * * 更新客户端数据
	 * * req: {@link IReqUpdateClientValue}, res: {@link IResCommon}
	 */
	updateClientValue = "updateClientValue",
	/**
	 * * 获取客户端数据
	 * * req: {@link IReqCommon}, res: {@link IResClientValue}
	 */
	fetchClientValue = "fetchClientValue",
	/**
	 * * 客户端信息
	 * * req: {@link IReqClientMessage}, res: {@link IResCommon}
	 */
	clientMessage = "clientMessage",
	/**
	 * * 请求当前匹配模式信息
	 * * req: {@link IReqCurrentMatchInfo}, res: {@link IResCurrentMatchInfo}
	 */
	fetchCurrentMatchInfo = "fetchCurrentMatchInfo",
	/**
	 * * 用户举报
	 * * req: {@link IReqUserComplain}, res: {@link IResCommon}
	 */
	userComplain = "userComplain",
	/**
	 * * ------ 复活币 -------- //
	 * * 获取复活币信息
	 * * req: {@link IReqCommon}, res: {@link IResReviveCoinInfo}
	 */
	fetchReviveCoinInfo = "fetchReviveCoinInfo",
	/**
	 * * 领取复活币
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	gainReviveCoin = "gainReviveCoin",
	/**
	 * * 获取每日任务
	 * * req: {@link IReqCommon}, res: {@link IResDailyTask}
	 */
	fetchDailyTask = "fetchDailyTask",
	/**
	 * * 刷新每日任务
	 * * req: {@link IReqRefreshDailyTask}, res: {@link IResRefreshDailyTask}
	 */
	refreshDailyTask = "refreshDailyTask",
	/**
	 * * 使用礼品码
	 * * req: {@link IReqUseGiftCode}, res: {@link IResUseGiftCode}
	 */
	useGiftCode = "useGiftCode",
	/**
	 * * 使用特殊礼品码
	 * * req: {@link IReqUseGiftCode}, res: {@link IResUseSpecialGiftCode}
	 */
	useSpecialGiftCode = "useSpecialGiftCode",
	/**
	 * * 获取称号列表
	 * * req: {@link IReqCommon}, res: {@link IResTitleList}
	 */
	fetchTitleList = "fetchTitleList",
	/**
	 * * 使用称号
	 * * req: {@link IReqUseTitle}, res: {@link IResCommon}
	 */
	useTitle = "useTitle",
	/**
	 * * 发送给其他玩家自定义消息
	 * * req: {@link IReqSendClientMessage}, res: {@link IResCommon}
	 */
	sendClientMessage = "sendClientMessage",
	/**
	 * * 获取游戏直播信息（全视角）
	 * * req: {@link IReqGameLiveInfo}, res: {@link IResGameLiveInfo}
	 */
	fetchGameLiveInfo = "fetchGameLiveInfo",
	/**
	 * * 获取游戏直播剩余分片信息（增量）
	 * * req: {@link IReqGameLiveLeftSegment}, res: {@link IResGameLiveLeftSegment}
	 */
	fetchGameLiveLeftSegment = "fetchGameLiveLeftSegment",
	/**
	 * * 获取正在直播的游戏列表
	 * * req: {@link IReqGameLiveList}, res: {@link IResGameLiveList}
	 */
	fetchGameLiveList = "fetchGameLiveList",
	/**
	 * * 留言板设置信息
	 * * req: {@link IReqCommon}, res: {@link IResCommentSetting}
	 */
	fetchCommentSetting = "fetchCommentSetting",
	/**
	 * * 更新留言板设置
	 * * req: {@link IReqUpdateCommentSetting}, res: {@link IResCommon}
	 */
	updateCommentSetting = "updateCommentSetting",
	/**
	 * * 获取留言板列表
	 * * req: {@link IReqFetchCommentList}, res: {@link IResFetchCommentList}
	 */
	fetchCommentList = "fetchCommentList",
	/**
	 * * 获取留言板内容
	 * * req: {@link IReqFetchCommentContent}, res: {@link IResFetchCommentContent}
	 */
	fetchCommentContent = "fetchCommentContent",
	/**
	 * * 发送留言
	 * * req: {@link IReqLeaveComment}, res: {@link IResCommon}
	 */
	leaveComment = "leaveComment",
	/**
	 * * 删除留言
	 * * req: {@link IReqDeleteComment}, res: {@link IResCommon}
	 */
	deleteComment = "deleteComment",
	/**
	 * * 更新留言阅读记录
	 * * req: {@link IReqUpdateReadComment}, res: {@link IResCommon}
	 */
	updateReadComment = "updateReadComment",
	/**
	 * * 获取滚动公告
	 * * req: {@link IReqFetchRollingNotice}, res: {@link IResFetchRollingNotice}
	 */
	fetchRollingNotice = "fetchRollingNotice",
	/**
	 * * 获取维护公告
	 * * req: {@link IReqCommon}, res: {@link IResFetchMaintainNotice}
	 */
	fetchMaintainNotice = "fetchMaintainNotice",
	/**
	 * * 获取服务器时间
	 * * req: {@link IReqCommon}, res: {@link IResServerTime}
	 */
	fetchServerTime = "fetchServerTime",
	/**
	 * * 获取对应平台的商品列表
	 * * req: {@link IReqPlatformBillingProducts}, res: {@link IResPlatformBillingProducts}
	 */
	fetchPlatformProducts = "fetchPlatformProducts",
	/**
	 * * 获取角色随机池信息
	 * * req: {@link IReqCommon}, res: {@link IResRandomCharacter}
	 */
	fetchRandomCharacter = "fetchRandomCharacter",
	/**
	 * * 设置随机角色池
	 * * req: {@link IReqRandomCharacter}, res: {@link IResCommon}
	 */
	setRandomCharacter = "setRandomCharacter",
	/**
	 * * 取消 Google Play 订单
	 * * req: {@link IReqCancelGooglePlayOrder}, res: {@link IResCommon}
	 */
	cancelGooglePlayOrder = "cancelGooglePlayOrder",
	/**
	 * * 抽宝箱
	 * * req: {@link IReqOpenChest}, res: {@link IResOpenChest}
	 */
	openChest = "openChest",
	/**
	 * * 宝箱商店购买商品
	 * * req: {@link IReqBuyFromChestShop}, res: {@link IResBuyFromChestShop}
	 */
	buyFromChestShop = "buyFromChestShop",
	/**
	 * * 获取每日签到信息
	 * * req: {@link IReqCommon}, res: {@link IResDailySignInInfo}
	 */
	fetchDailySignInInfo = "fetchDailySignInInfo",
	/**
	 * * 签到
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	doDailySignIn = "doDailySignIn",
	/** req: {@link IReqDoActivitySignIn}, res: {@link IResDoActivitySignIn} */
	doActivitySignIn = "doActivitySignIn",
	/**
	 * * 获取角色信息
	 * * req: {@link IReqCommon}, res: {@link IResCharacterInfo}
	 */
	fetchCharacterInfo = "fetchCharacterInfo",
	/**
	 * * 更新角色排序
	 * * req: {@link IReqUpdateCharacterSort}, res: {@link IResCommon}
	 */
	updateCharacterSort = "updateCharacterSort",
	/**
	 * * 切换主角色
	 * * req: {@link IReqChangeMainCharacter}, res: {@link IResCommon}
	 */
	changeMainCharacter = "changeMainCharacter",
	/**
	 * * 切换角色皮肤
	 * * req: {@link IReqChangeCharacterSkin}, res: {@link IResCommon}
	 */
	changeCharacterSkin = "changeCharacterSkin",
	/**
	 * * 设置角色外观
	 * * req: {@link IReqChangeCharacterView}, res: {@link IResCommon}
	 */
	changeCharacterView = "changeCharacterView",
	/**
	 * * 设置隐藏角色
	 * * req: {@link IReqSetHiddenCharacter}, res: {@link IResSetHiddenCharacter}
	 */
	setHiddenCharacter = "setHiddenCharacter",
	/**
	 * * 赠送礼物给角色
	 * * req: {@link IReqSendGiftToCharacter}, res: {@link IResSendGiftToCharacter}
	 */
	sendGiftToCharacter = "sendGiftToCharacter",
	/**
	 * * 出售道具（目前只有礼物可以出售）
	 * * req: {@link IReqSellItem}, res: {@link IResCommon}
	 */
	sellItem = "sellItem",
	/**
	 * * 获取通用外观
	 * * req: {@link IReqCommon}, res: {@link IResCommonView}
	 */
	fetchCommonView = "fetchCommonView",
	/**
	 * * 切换通用外观（牌桌，牌背等）
	 * * req: {@link IReqChangeCommonView}, res: {@link IResCommon}
	 */
	changeCommonView = "changeCommonView",
	/**
	 * * 保存通用外观方案
	 * * req: {@link IReqSaveCommonViews}, res: {@link IResCommon}
	 */
	saveCommonViews = "saveCommonViews",
	/**
	 * * 获取通用外观方案
	 * * req: {@link IReqCommonViews}, res: {@link IResCommonViews}
	 */
	fetchCommonViews = "fetchCommonViews",
	/**
	 * * 获取所有通用外观方案
	 * * req: {@link IReqCommon}, res: {@link IResAllcommonViews}
	 */
	fetchAllCommonViews = "fetchAllCommonViews",
	/** req: {@link IReqUseCommonView}, res: {@link IResCommon} */
	useCommonView = "useCommonView",
	/**
	 * * 突破角色
	 * * req: {@link IReqUpgradeCharacter}, res: {@link IResUpgradeCharacter}
	 */
	upgradeCharacter = "upgradeCharacter",
	/**
	 * * ====角色传记相关====
	 * * 完成结局
	 * * req: {@link IReqFinishedEnding}, res: {@link IResCommon}
	 */
	addFinishedEnding = "addFinishedEnding",
	/**
	 * * 领取结局奖励
	 * * req: {@link IReqFinishedEnding}, res: {@link IResCommon}
	 */
	receiveEndingReward = "receiveEndingReward",
	/**
	 * * GM指令
	 * * req: {@link IReqGMCommand}, res: {@link IResCommon}
	 */
	gameMasterCommand = "gameMasterCommand",
	/**
	 * * 获取商店信息
	 * * req: {@link IReqCommon}, res: {@link IResShopInfo}
	 */
	fetchShopInfo = "fetchShopInfo",
	/**
	 * * 普通商店购买
	 * * req: {@link IReqBuyFromShop}, res: {@link IResBuyFromShop}
	 */
	buyFromShop = "buyFromShop",
	/**
	 * * 杂货铺购买
	 * * req: {@link IReqBuyFromZHP}, res: {@link IResCommon}
	 */
	buyFromZHP = "buyFromZHP",
	/**
	 * * 刷新杂货铺商店
	 * * req: {@link IReqReshZHPShop}, res: {@link IResRefreshZHPShop}
	 */
	refreshZHPShop = "refreshZHPShop",
	/**
	 * * 获取账号月卡信息
	 * * req: {@link IReqCommon}, res: {@link IResMonthTicketInfo}
	 */
	fetchMonthTicketInfo = "fetchMonthTicketInfo",
	/**
	 * * 领取月卡工资
	 * * req: {@link IReqCommon}, res: {@link IResPayMonthTicket}
	 */
	payMonthTicket = "payMonthTicket",
	/**
	 * * 兑换货币
	 * * req: {@link IReqExchangeCurrency}, res: {@link IResCommon}
	 */
	exchangeCurrency = "exchangeCurrency",
	/**
	 * * 兑换寻觅石头
	 * * req: {@link IReqExchangeCurrency}, res: {@link IResCommon}
	 */
	exchangeChestStone = "exchangeChestStone",
	/**
	 * * 皮肤券兑换辉玉
	 * * req: {@link IReqExchangeCurrency}, res: {@link IResCommon}
	 */
	exchangeDiamond = "exchangeDiamond",
	/**
	 * * 获取服务器设置
	 * * req: {@link IReqCommon}, res: {@link IResServerSettings}
	 */
	fetchServerSettings = "fetchServerSettings",
	/**
	 * * 账户设置
	 * * req: {@link IReqCommon}, res: {@link IResAccountSettings}
	 */
	fetchAccountSettings = "fetchAccountSettings",
	/**
	 * * 更新账号设置
	 * * req: {@link IReqUpdateAccountSettings}, res: {@link IResCommon}
	 */
	updateAccountSettings = "updateAccountSettings",
	/**
	 * * 获取改名时间
	 * * req: {@link IReqCommon}, res: {@link IResModNicknameTime}
	 */
	fetchModNicknameTime = "fetchModNicknameTime",
	/**
	 * * 创建微信支付（扫码支付）订单
	 * * req: {@link IReqCreateWechatNativeOrder}, res: {@link IResCreateWechatNativeOrder}
	 */
	createWechatNativeOrder = "createWechatNativeOrder",
	/**
	 * * 创建微信支付（App支付）订单
	 * * req: {@link IReqCreateWechatAppOrder}, res: {@link IResCreateWechatAppOrder}
	 */
	createWechatAppOrder = "createWechatAppOrder",
	/**
	 * * 创建支付宝（链接地址）订单
	 * * req: {@link IReqCreateAlipayOrder}, res: {@link IResCreateAlipayOrder}
	 */
	createAlipayOrder = "createAlipayOrder",
	/**
	 * * 创建支付宝（扫码支付）订单
	 * * req: {@link IReqCreateAlipayScanOrder}, res: {@link IResCreateAlipayScanOrder}
	 */
	createAlipayScanOrder = "createAlipayScanOrder",
	/**
	 * * 创建支付宝（App支付）订单
	 * * req: {@link IReqCreateAlipayAppOrder}, res: {@link IResCreateAlipayAppOrder}
	 */
	createAlipayAppOrder = "createAlipayAppOrder",
	/**
	 * * 创建日服-CreditCard订单
	 * * req: {@link IReqCreateJPCreditCardOrder}, res: {@link IResCreateJPCreditCardOrder}
	 */
	createJPCreditCardOrder = "createJPCreditCardOrder",
	/**
	 * * 创建日服-Paypal订单
	 * * req: {@link IReqCreateJPPaypalOrder}, res: {@link IResCreateJPPaypalOrder}
	 */
	createJPPaypalOrder = "createJPPaypalOrder",
	/**
	 * * 创建日服-Au订单
	 * * req: {@link IReqCreateJPAuOrder}, res: {@link IResCreateJPAuOrder}
	 */
	createJPAuOrder = "createJPAuOrder",
	/**
	 * * 创建日服-Docomo订单
	 * * req: {@link IReqCreateJPDocomoOrder}, res: {@link IResCreateJPDocomoOrder}
	 */
	createJPDocomoOrder = "createJPDocomoOrder",
	/**
	 * * 创建日服-WebMoney订单
	 * * req: {@link IReqCreateJPWebMoneyOrder}, res: {@link IResCreateJPWebMoneyOrder}
	 */
	createJPWebMoneyOrder = "createJPWebMoneyOrder",
	/**
	 * * 创建日服-Softbank订单
	 * * req: {@link IReqCreateJPSoftbankOrder}, res: {@link IResCreateJPSoftbankOrder}
	 */
	createJPSoftbankOrder = "createJPSoftbankOrder",
	/**
	 * * 创建日服-Paypay订单
	 * * req: {@link IReqCreateJPPayPayOrder}, res: {@link IResCreateJPPayPayOrder}
	 */
	createJPPayPayOrder = "createJPPayPayOrder",
	/**
	 * * 获取日服信用卡订单信息
	 * * req: {@link IReqFetchJPCommonCreditCardOrder}, res: {@link IResFetchJPCommonCreditCardOrder}
	 */
	fetchJPCommonCreditCardOrder = "fetchJPCommonCreditCardOrder",
	/**
	 * * 创建日服-GMO订单
	 * * req: {@link IReqCreateJPGMOOrder}, res: {@link IResCreateJPGMOOrder}
	 */
	createJPGMOOrder = "createJPGMOOrder",
	/**
	 * * 创建美服-Paypal订单
	 * * req: {@link IReqCreateENPaypalOrder}, res: {@link IResCreateENPaypalOrder}
	 */
	createENPaypalOrder = "createENPaypalOrder",
	/**
	 * * 创建美服-MasterCard订单
	 * * req: {@link IReqCreateENMasterCardOrder}, res: {@link IResCreateENMasterCardOrder}
	 */
	createENMasterCardOrder = "createENMasterCardOrder",
	/**
	 * * 创建美服-Visa订单
	 * * req: {@link IReqCreateENVisaOrder}, res: {@link IResCreateENVisaOrder}
	 */
	createENVisaOrder = "createENVisaOrder",
	/**
	 * * 创建美服-JCB订单
	 * * req: {@link IReqCreateENJCBOrder}, res: {@link IResCreateENJCBOrder}
	 */
	createENJCBOrder = "createENJCBOrder",
	/**
	 * * 创建美服-Alipay订单
	 * * req: {@link IReqCreateENAlipayOrder}, res: {@link IResCreateENAlipayOrder}
	 */
	createENAlipayOrder = "createENAlipayOrder",
	/**
	 * * 创建韩服-Paypal订单
	 * * req: {@link IReqCreateKRPaypalOrder}, res: {@link IResCreateKRPaypalOrder}
	 */
	createKRPaypalOrder = "createKRPaypalOrder",
	/**
	 * * 创建韩服-MasterCard订单
	 * * req: {@link IReqCreateKRMasterCardOrder}, res: {@link IResCreateKRMasterCardOrder}
	 */
	createKRMasterCardOrder = "createKRMasterCardOrder",
	/**
	 * * 创建韩服-Visa订单
	 * * req: {@link IReqCreateKRVisaOrder}, res: {@link IResCreateKRVisaOrder}
	 */
	createKRVisaOrder = "createKRVisaOrder",
	/**
	 * * 创建韩服-JCB订单
	 * * req: {@link IReqCreateKRJCBOrder}, res: {@link IResCreateKRJCBOrder}
	 */
	createKRJCBOrder = "createKRJCBOrder",
	/**
	 * * 创建韩服-Alipay订单
	 * * req: {@link IReqCreateKRAlipayOrder}, res: {@link IResCreateKRAlipayOrder}
	 */
	createKRAlipayOrder = "createKRAlipayOrder",
	/**
	 * * 创建DMM订单
	 * * req: {@link IReqCreateDMMOrder}, res: {@link IResCreateDmmOrder}
	 */
	createDMMOrder = "createDMMOrder",
	/**
	 * * 创建苹果内购订单
	 * * req: {@link IReqCreateIAPOrder}, res: {@link IResCreateIAPOrder}
	 */
	createIAPOrder = "createIAPOrder",
	/**
	 * * 创建Steam订单
	 * * req: {@link IReqCreateSteamOrder}, res: {@link IResCreateSteamOrder}
	 */
	createSteamOrder = "createSteamOrder",
	/**
	 * * Steam验单
	 * * req: {@link IReqVerifySteamOrder}, res: {@link IResCommon}
	 */
	verifySteamOrder = "verifySteamOrder",
	/**
	 * * 创建MyCard Android订单
	 * * req: {@link IReqCreateMyCardOrder}, res: {@link IResCreateMyCardOrder}
	 */
	createMyCardAndroidOrder = "createMyCardAndroidOrder",
	/**
	 * * 创建MyCard Web订单
	 * * req: {@link IReqCreateMyCardOrder}, res: {@link IResCreateMyCardOrder}
	 */
	createMyCardWebOrder = "createMyCardWebOrder",
	/**
	 * * 创建Paypal订单
	 * * req: {@link IReqCreatePaypalOrder}, res: {@link IResCreatePaypalOrder}
	 */
	createPaypalOrder = "createPaypalOrder",
	/**
	 * * 创建Xsolla订单
	 * * req: {@link IReqCreateXsollaOrder}, res: {@link IResCreateXsollaOrder}
	 */
	createXsollaOrder = "createXsollaOrder",
	/**
	 * * 创建XsollaV4订单
	 * * req: {@link IReqCreateXsollaOrder}, res: {@link IResCreateXsollaOrder}
	 */
	createXsollaV4Order = "createXsollaV4Order",
	/**
	 * * MyCard验单
	 * * req: {@link IReqVerifyMyCardOrder}, res: {@link IResCommon}
	 */
	verifyMyCardOrder = "verifyMyCardOrder",
	/**
	 * * 验证苹果内购订单
	 * * req: {@link IReqVerificationIAPOrder}, res: {@link IResVerificationIAPOrder}
	 */
	verificationIAPOrder = "verificationIAPOrder",
	/**
	 * * 创建Yostar-SDK订单
	 * * req: {@link IReqCreateYostarOrder}, res: {@link IResCreateYostarOrder}
	 */
	createYostarSDKOrder = "createYostarSDKOrder",
	/**
	 * * 创建支付订单
	 * * req: {@link IReqCreateBillingOrder}, res: {@link IResCreateBillingOrder}
	 */
	createBillingOrder = "createBillingOrder",
	/**
	 * * 处理 Google Play 订单支付结果
	 * * req: {@link IReqSolveGooglePlayOrder}, res: {@link IResCommon}
	 */
	solveGooglePlayOrder = "solveGooglePlayOrder",
	/** req: {@link IReqSolveGooglePlayOrderV3}, res: {@link IResCommon} */
	solveGooglePayOrderV3 = "solveGooglePayOrderV3",
	/**
	 * * 处理 AA32 订单
	 * * req: {@link IReqDeliverAA32Order}, res: {@link IResCommon}
	 */
	deliverAA32Order = "deliverAA32Order",
	/**
	 * * 获取账号杂七杂八的数据
	 * * req: {@link IReqCommon}, res: {@link IResMisc}
	 */
	fetchMisc = "fetchMisc",
	/**
	 * * 修改签名
	 * * req: {@link IReqModifySignature}, res: {@link IResCommon}
	 */
	modifySignature = "modifySignature",
	/**
	 * * 获取实名认证信息
	 * * req: {@link IReqCommon}, res: {@link IResIDCardInfo}
	 */
	fetchIDCardInfo = "fetchIDCardInfo",
	/**
	 * * 进行实名认证
	 * * req: {@link IReqUpdateIDCardInfo}, res: {@link IResCommon}
	 */
	updateIDCardInfo = "updateIDCardInfo",
	/**
	 * * 获取vip奖励领取状态
	 * * req: {@link IReqCommon}, res: {@link IResVipReward}
	 */
	fetchVipReward = "fetchVipReward",
	/**
	 * * 领取vip奖励
	 * * req: {@link IReqGainVipReward}, res: {@link IResCommon}
	 */
	gainVipReward = "gainVipReward",
	/**
	 * * 获取需要补单的订单信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchRefundOrder}
	 */
	fetchRefundOrder = "fetchRefundOrder",
	/**
	 * * 获取赛事列表
	 * * req: {@link IReqFetchCustomizedContestList}, res: {@link IResFetchCustomizedContestList}
	 */
	fetchCustomizedContestList = "fetchCustomizedContestList",
	/**
	 * * 获取赛事权限相关信息
	 * * req: {@link IReqFetchCustomizedContestAuthInfo}, res: {@link IResFetchCustomizedContestAuthInfo}
	 */
	fetchCustomizedContestAuthInfo = "fetchCustomizedContestAuthInfo",
	/**
	 * * 进入赛事
	 * * req: {@link IReqEnterCustomizedContest}, res: {@link IResEnterCustomizedContest}
	 */
	enterCustomizedContest = "enterCustomizedContest",
	/**
	 * * 退出赛事
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	leaveCustomizedContest = "leaveCustomizedContest",
	/**
	 * * 请求比赛在线信息
	 * * req: {@link IReqFetchCustomizedContestOnlineInfo}, res: {@link IResFetchCustomizedContestOnlineInfo}
	 */
	fetchCustomizedContestOnlineInfo = "fetchCustomizedContestOnlineInfo",
	/**
	 * * 获取赛事基本信息（通过赛事ID）
	 * * req: {@link IReqFetchCustomizedContestByContestId}, res: {@link IResFetchCustomizedContestByContestId}
	 */
	fetchCustomizedContestByContestId = "fetchCustomizedContestByContestId",
	/**
	 * * 报名比赛
	 * * req: {@link IReqSignupCustomizedContest}, res: {@link IResSignupCustomizedContest}
	 */
	signupCustomizedContest = "signupCustomizedContest",
	/**
	 * * 开始比赛匹配
	 * * req: {@link IReqStartCustomizedContest}, res: {@link IResCommon}
	 */
	startCustomizedContest = "startCustomizedContest",
	/**
	 * * 停止比赛匹配
	 * * req: {@link IReqStopCustomizedContest}, res: {@link IResCommon}
	 */
	stopCustomizedContest = "stopCustomizedContest",
	/**
	 * * 进入比赛聊天室
	 * * req: {@link IReqJoinCustomizedContestChatRoom}, res: {@link IResJoinCustomizedContestChatRoom}
	 */
	joinCustomizedContestChatRoom = "joinCustomizedContestChatRoom",
	/**
	 * * 退出比赛聊天室
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	leaveCustomizedContestChatRoom = "leaveCustomizedContestChatRoom",
	/**
	 * * 发送聊天消息
	 * * req: {@link IReqSayChatMessage}, res: {@link IResCommon}
	 */
	sayChatMessage = "sayChatMessage",
	/**
	 * * 查询赛事牌谱列表
	 * * req: {@link IReqFetchCustomizedContestGameRecords}, res: {@link IResFetchCustomizedContestGameRecords}
	 */
	fetchCustomizedContestGameRecords = "fetchCustomizedContestGameRecords",
	/**
	 * * 获取正在直播的比赛游戏列表
	 * * req: {@link IReqFetchCustomizedContestGameLiveList}, res: {@link IResFetchCustomizedContestGameLiveList}
	 */
	fetchCustomizedContestGameLiveList = "fetchCustomizedContestGameLiveList",
	/**
	 * * 关注自定义比赛
	 * * req: {@link IReqTargetCustomizedContest}, res: {@link IResCommon}
	 */
	followCustomizedContest = "followCustomizedContest",
	/**
	 * * 取消关注自定义比赛
	 * * req: {@link IReqTargetCustomizedContest}, res: {@link IResCommon}
	 */
	unfollowCustomizedContest = "unfollowCustomizedContest",
	/**
	 * * 获取活动列表
	 * * req: {@link IReqCommon}, res: {@link IResActivityList}
	 */
	fetchActivityList = "fetchActivityList",
	/**
	 * * 获取玩家活动数据
	 * * req: {@link IReqCommon}, res: {@link IResAccountActivityData}
	 */
	fetchAccountActivityData = "fetchAccountActivityData",
	/**
	 * * 兑换活动
	 * * req: {@link IReqExchangeActivityItem}, res: {@link IResExchangeActivityItem}
	 */
	exchangeActivityItem = "exchangeActivityItem",
	/**
	 * * 领取活动任务奖励
	 * * req: {@link IReqCompleteActivityTask}, res: {@link IResCommon}
	 */
	completeActivityTask = "completeActivityTask",
	/** req: {@link IReqCompleteActivityTaskBatch}, res: {@link IResCommon} */
	completeActivityTaskBatch = "completeActivityTaskBatch",
	/**
	 * * 领取翻牌牌任务奖励
	 * * req: {@link IReqCompleteActivityTask}, res: {@link IResCommon}
	 */
	completeActivityFlipTask = "completeActivityFlipTask",
	/**
	 * * 领取长期任务奖励
	 * * req: {@link IReqCompleteActivityTask}, res: {@link IResCommon}
	 */
	completePeriodActivityTask = "completePeriodActivityTask",
	/** req: {@link IReqCompletePeriodActivityTaskBatch}, res: {@link IResCommon} */
	completePeriodActivityTaskBatch = "completePeriodActivityTaskBatch",
	/**
	 * * 领取随机任务奖励
	 * * req: {@link IReqCompleteActivityTask}, res: {@link IResCommon}
	 */
	completeRandomActivityTask = "completeRandomActivityTask",
	/** req: {@link IReqCompleteActivityTaskBatch}, res: {@link IResCommon} */
	completeRandomActivityTaskBatch = "completeRandomActivityTaskBatch",
	/**
	 * * 翻牌牌领任务
	 * * req: {@link IReqReceiveActivityFlipTask}, res: {@link IResReceiveActivityFlipTask}
	 */
	receiveActivityFlipTask = "receiveActivityFlipTask",
	/**
	 * * 领取分段任务奖励
	 * * req: {@link IReqCompleteSegmentTaskReward}, res: {@link IResCompleteSegmentTaskReward}
	 */
	completeSegmentTaskReward = "completeSegmentTaskReward",
	/**
	 * * 获取翻牌牌任务信息
	 * * req: {@link IReqFetchActivityFlipInfo}, res: {@link IResFetchActivityFlipInfo}
	 */
	fetchActivityFlipInfo = "fetchActivityFlipInfo",
	/**
	 * * 领取得点活动奖励
	 * * req: {@link IReqGainAccumulatedPointActivityReward}, res: {@link IResCommon}
	 */
	gainAccumulatedPointActivityReward = "gainAccumulatedPointActivityReward",
	/**
	 * * 批量领取得点活动奖励
	 * * req: {@link IReqGainMultiPointActivityReward}, res: {@link IResCommon}
	 */
	gainMultiPointActivityReward = "gainMultiPointActivityReward",
	/**
	 * * 获取得分排行榜数据
	 * * req: {@link IReqFetchRankPointLeaderboard}, res: {@link IResFetchRankPointLeaderboard}
	 */
	fetchRankPointLeaderboard = "fetchRankPointLeaderboard",
	/**
	 * * 领取得分排行奖励
	 * * req: {@link IReqGainRankPointReward}, res: {@link IResCommon}
	 */
	gainRankPointReward = "gainRankPointReward",
	/**
	 * * 大富翁投骰子
	 * * req: {@link IReqRichmanNextMove}, res: {@link IResRichmanNextMove}
	 */
	richmanActivityNextMove = "richmanActivityNextMove",
	/**
	 * * 大富翁遥控骰子
	 * * req: {@link IReqRichmanSpecialMove}, res: {@link IResRichmanNextMove}
	 */
	richmanAcitivitySpecialMove = "richmanAcitivitySpecialMove",
	/**
	 * * 大富翁宝箱信息
	 * * req: {@link IReqRichmanChestInfo}, res: {@link IResRichmanChestInfo}
	 */
	richmanActivityChestInfo = "richmanActivityChestInfo",
	/**
	 * * 创建实时OB权限
	 * * req: {@link IReqCreateGameObserveAuth}, res: {@link IResCreateGameObserveAuth}
	 */
	createGameObserveAuth = "createGameObserveAuth",
	/**
	 * * 刷新实时OB权限时长
	 * * req: {@link IReqRefreshGameObserveAuth}, res: {@link IResRefreshGameObserveAuth}
	 */
	refreshGameObserveAuth = "refreshGameObserveAuth",
	/**
	 * * 获取活动buff信息
	 * * req: {@link IReqCommon}, res: {@link IResActivityBuff}
	 */
	fetchActivityBuff = "fetchActivityBuff",
	/**
	 * * 升级活动buff
	 * * req: {@link IReqUpgradeActivityBuff}, res: {@link IResActivityBuff}
	 */
	upgradeActivityBuff = "upgradeActivityBuff",
	/**
	 * * 升级活动升级
	 * * req: {@link IReqUpgradeActivityLevel}, res: {@link IResUpgradeActivityLevel}
	 */
	upgradeActivityLevel = "upgradeActivityLevel",
	/**
	 * * 获取总等级奖励
	 * * req: {@link IReqReceiveUpgradeActivityReward}, res: {@link IResReceiveUpgradeActivityReward}
	 */
	receiveUpgradeActivityReward = "receiveUpgradeActivityReward",
	/**
	 * * 试炼赛升级
	 * * req: {@link IReqCommon}, res: {@link IResUpgradeChallenge}
	 */
	upgradeChallenge = "upgradeChallenge",
	/**
	 * * 再发行
	 * * req: {@link IReqCommon}, res: {@link IResRefreshChallenge}
	 */
	refreshChallenge = "refreshChallenge",
	/**
	 * * 获取试炼赛信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchChallengeInfo}
	 */
	fetchChallengeInfo = "fetchChallengeInfo",
	/**
	 * * 盖章完成试炼任务
	 * * req: {@link IReqForceCompleteChallengeTask}, res: {@link IResCommon}
	 */
	forceCompleteChallengeTask = "forceCompleteChallengeTask",
	/**
	 * * 获取当前试炼赛信息
	 * * req: {@link IReqCommon}, res: {@link IResChallengeSeasonInfo}
	 */
	fetchChallengeSeason = "fetchChallengeSeason",
	/**
	 * * 获取试炼赛排名奖励
	 * * req: {@link IReqReceiveChallengeRankReward}, res: {@link IResReceiveChallengeRankReward}
	 */
	receiveChallengeRankReward = "receiveChallengeRankReward",
	/**
	 * * AB赛
	 * * req: {@link IReqCommon}, res: {@link IResFetchABMatch}
	 */
	fetchABMatchInfo = "fetchABMatchInfo",
	/** req: {@link IReqBuyInABMatch}, res: {@link IResCommon} */
	buyInABMatch = "buyInABMatch",
	/** req: {@link IReqCommon}, res: {@link IResCommon} */
	receiveABMatchReward = "receiveABMatchReward",
	/** req: {@link IReqCommon}, res: {@link IResCommon} */
	quitABMatch = "quitABMatch",
	/** req: {@link IReqStartUnifiedMatch}, res: {@link IResCommon} */
	startUnifiedMatch = "startUnifiedMatch",
	/** req: {@link IReqCancelUnifiedMatch}, res: {@link IResCommon} */
	cancelUnifiedMatch = "cancelUnifiedMatch",
	/** req: {@link IReqGamePointRank}, res: {@link IResGamePointRank} */
	fetchGamePointRank = "fetchGamePointRank",
	/** req: {@link IReqGamePointRank}, res: {@link IResFetchSelfGamePointRank} */
	fetchSelfGamePointRank = "fetchSelfGamePointRank",
	/**
	 * * SNS活动
	 * * req: {@link IReqReadSNS}, res: {@link IResReadSNS}
	 */
	readSNS = "readSNS",
	/** req: {@link IReqReplySNS}, res: {@link IResReplySNS} */
	replySNS = "replySNS",
	/** req: {@link IReqLikeSNS}, res: {@link IResLikeSNS} */
	likeSNS = "likeSNS",
	/**
	 * * 挖矿活动
	 * * req: {@link IReqDigMine}, res: {@link IResDigMine}
	 */
	digMine = "digMine",
	/**
	 * * 用户协议
	 * * req: {@link IReqFetchLastPrivacy}, res: {@link IResFetchLastPrivacy}
	 */
	fetchLastPrivacy = "fetchLastPrivacy",
	/** req: {@link IReqCheckPrivacy}, res: {@link IResCommon} */
	checkPrivacy = "checkPrivacy",
	/**
	 * * rpg活动
	 * * req: {@link IReqFetchRPGBattleHistory}, res: {@link IResFetchRPGBattleHistory}
	 */
	fetchRPGBattleHistory = "fetchRPGBattleHistory",
	/** req: {@link IReqFetchRPGBattleHistory}, res: {@link IResFetchRPGBattleHistoryV2} */
	fetchRPGBattleHistoryV2 = "fetchRPGBattleHistoryV2",
	/** req: {@link IReqReceiveRPGRewards}, res: {@link IResReceiveRPGRewards} */
	receiveRPGRewards = "receiveRPGRewards",
	/** req: {@link IReqReceiveRPGReward}, res: {@link IResReceiveRPGRewards} */
	receiveRPGReward = "receiveRPGReward",
	/**
	 * * 竞技场活动
	 * * req: {@link IReqBuyArenaTicket}, res: {@link IResCommon}
	 */
	buyArenaTicket = "buyArenaTicket",
	/** req: {@link IReqEnterArena}, res: {@link IResCommon} */
	enterArena = "enterArena",
	/** req: {@link IReqArenaReward}, res: {@link IResArenaReward} */
	receiveArenaReward = "receiveArenaReward",
	/**
	 * * 观战
	 * * req: {@link IReqFetchOBToken}, res: {@link IResFetchOBToken}
	 */
	fetchOBToken = "fetchOBToken",
	/**
	 * * 角色好感度
	 * * req: {@link IReqReceiveCharacterRewards}, res: {@link IResReceiveCharacterRewards}
	 */
	receiveCharacterRewards = "receiveCharacterRewards",
	/**
	 * * 喂年兽活动 -> 已经拆分成 friend-gift 与 upgrade 活动，这个协议不再使用
	 * * req: {@link IReqFeedActivityFeed}, res: {@link IResFeedActivityFeed}
	 */
	feedActivityFeed = "feedActivityFeed",
	/**
	 * * 送礼活动
	 * * req: {@link IReqSendActivityGiftToFriend}, res: {@link IResSendActivityGiftToFriend}
	 */
	sendActivityGiftToFriend = "sendActivityGiftToFriend",
	/** req: {@link IReqReceiveActivityGift}, res: {@link IResCommon} */
	receiveActivityGift = "receiveActivityGift",
	/** req: {@link IReqReceiveAllActivityGift}, res: {@link IResReceiveAllActivityGift} */
	receiveAllActivityGift = "receiveAllActivityGift",
	/** req: {@link IReqFetchFriendGiftActivityData}, res: {@link IResFetchFriendGiftActivityData} */
	fetchFriendGiftActivityData = "fetchFriendGiftActivityData",
	/**
	 * * 自选卡池
	 * * req: {@link IReqOpenPreChestItem}, res: {@link IResOpenPreChestItem}
	 */
	openPreChestItem = "openPreChestItem",
	/**
	 * * 投票活动
	 * * req: {@link IReqFetchVoteActivity}, res: {@link IResFetchVoteActivity}
	 */
	fetchVoteActivity = "fetchVoteActivity",
	/** req: {@link IReqVoteActivity}, res: {@link IResVoteActivity} */
	voteActivity = "voteActivity",
	/**
	 * * 剧情活动
	 * * req: {@link IReqUnlockActivitySpot}, res: {@link IResCommon}
	 */
	unlockActivitySpot = "unlockActivitySpot",
	/** req: {@link IReqUnlockActivitySpotEnding}, res: {@link IResCommon} */
	unlockActivitySpotEnding = "unlockActivitySpotEnding",
	/** req: {@link IReqReceiveActivitySpotReward}, res: {@link IResReceiveActivitySpotReward} */
	receiveActivitySpotReward = "receiveActivitySpotReward",
	/**
	 * * 删除账号接口
	 * * req: {@link IReqCommon}, res: {@link IResDeleteAccount}
	 */
	deleteAccount = "deleteAccount",
	/** req: {@link IReqCommon}, res: {@link IResCommon} */
	cancelDeleteAccount = "cancelDeleteAccount",
	/** req: {@link IReqLogReport}, res: {@link IResCommon} */
	logReport = "logReport",
	/**
	 * * oauth2
	 * * req: {@link IReqBindOauth2}, res: {@link IResCommon}
	 */
	bindOauth2 = "bindOauth2",
	/** req: {@link IReqFetchOauth2}, res: {@link IResFetchOauth2} */
	fetchOauth2Info = "fetchOauth2Info",
	/**
	 * * loading图
	 * * req: {@link IReqSetLoadingImage}, res: {@link IResCommon}
	 */
	setLoadingImage = "setLoadingImage",
	/**
	 * * 获取商店信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchShopInterval}
	 */
	fetchShopInterval = "fetchShopInterval",
	/**
	 * * 获取活动轮换信息
	 * * req: {@link IReqCommon}, res: {@link IResFetchActivityInterval}
	 */
	fetchActivityInterval = "fetchActivityInterval",
	/**
	 * * 获取最近对战玩家
	 * * req: {@link IReqCommon}, res: {@link IResFetchrecentFriend}
	 */
	fetchRecentFriend = "fetchRecentFriend",
	/**
	 * * 扭蛋活动
	 * * req: {@link IReqOpenGacha}, res: {@link IResOpenGacha}
	 */
	openGacha = "openGacha",
	/**
	 * * 前端完成任务
	 * * req: {@link IReqTaskRequest}, res: {@link IResCommon}
	 */
	taskRequest = "taskRequest",
	/**
	 * * 养成活动
	 * * req: {@link IReqSimulationActivityTrain}, res: {@link IResSimulationActivityTrain}
	 */
	simulationActivityTrain = "simulationActivityTrain",
	/** req: {@link IReqFetchSimulationGameRecord}, res: {@link IResFetchSimulationGameRecord} */
	fetchSimulationGameRecord = "fetchSimulationGameRecord",
	/** req: {@link IReqStartSimulationActivityGame}, res: {@link IResStartSimulationActivityGame} */
	startSimulationActivityGame = "startSimulationActivityGame",
	/** req: {@link IReqFetchSimulationGameRank}, res: {@link IResFetchSimulationGameRank} */
	fetchSimulationGameRank = "fetchSimulationGameRank",
	/**
	 * * 合成活动
	 * * req: {@link IReqGenerateCombiningCraft}, res: {@link IResGenerateCombiningCraft}
	 */
	generateCombiningCraft = "generateCombiningCraft",
	/** req: {@link IReqMoveCombiningCraft}, res: {@link IResMoveCombiningCraft} */
	moveCombiningCraft = "moveCombiningCraft",
	/** req: {@link IReqCombiningRecycleCraft}, res: {@link IResCombiningRecycleCraft} */
	combiningRecycleCraft = "combiningRecycleCraft",
	/** req: {@link IReqRecoverCombiningRecycle}, res: {@link IResRecoverCombiningRecycle} */
	recoverCombiningRecycle = "recoverCombiningRecycle",
	/** req: {@link IReqFinishCombiningOrder}, res: {@link IResFinishCombiningOrder} */
	finishCombiningOrder = "finishCombiningOrder",
	/**
	 * * 小村活动
	 * * req: {@link IReqUpgradeVillageBuilding}, res: {@link IResCommon}
	 */
	upgradeVillageBuilding = "upgradeVillageBuilding",
	/** req: {@link IReqReceiveVillageBuildingReward}, res: {@link IResReceiveVillageBuildingReward} */
	receiveVillageBuildingReward = "receiveVillageBuildingReward",
	/** req: {@link IReqStartVillageTrip}, res: {@link IResCommon} */
	startVillageTrip = "startVillageTrip",
	/** req: {@link IReqReceiveVillageTripReward}, res: {@link IResReceiveVillageTripReward} */
	receiveVillageTripReward = "receiveVillageTripReward",
	/** req: {@link IReqCompleteVillageTask}, res: {@link IResCompleteVillageTask} */
	completeVillageTask = "completeVillageTask",
	/** req: {@link IReqGetFriendVillageData}, res: {@link IResGetFriendVillageData} */
	getFriendVillageData = "getFriendVillageData",
	/** req: {@link IReqSetVillageWorker}, res: {@link IResSetVillageWorker} */
	setVillageWorker = "setVillageWorker",
	/**
	 * * 下一个丰收季
	 * * req: {@link IReqNextRoundVillage}, res: {@link IResNextRoundVillage}
	 */
	nextRoundVillage = "nextRoundVillage",
	/**
	 * * 庆典活动
	 * * req: {@link IReqResolveFestivalActivityProposal}, res: {@link IResResolveFestivalActivityProposal}
	 */
	resolveFestivalActivityProposal = "resolveFestivalActivityProposal",
	/** req: {@link IReqResolveFestivalActivityEvent}, res: {@link IResResolveFestivalActivityEvent} */
	resolveFestivalActivityEvent = "resolveFestivalActivityEvent",
	/** req: {@link IReqBuyFestivalProposal}, res: {@link IResBuyFestivalProposal} */
	buyFestivalProposal = "buyFestivalProposal",
	/**
	 * * ==DevDebug Start==
	 * * debug 协议在正式版本删除
	 * * req: {@link IReqFestivalFetchDebug}, res: {@link IResFestivalFetchDebug}
	 */
	festivalActivityFetchDebug = "festivalActivityFetchDebug",
	/** req: {@link IReqFestivalDebug}, res: {@link IResCommon} */
	festivalActivityDebug = "festivalActivityDebug",
	/**
	 * * 海岛活动
	 * * req: {@link IReqIslandActivityMove}, res: {@link IResCommon}
	 */
	islandActivityMove = "islandActivityMove",
	/** req: {@link IReqIslandActivityBuy}, res: {@link IResCommon} */
	islandActivityBuy = "islandActivityBuy",
	/** req: {@link IReqIslandActivitySell}, res: {@link IResCommon} */
	islandActivitySell = "islandActivitySell",
	/** req: {@link IReqIslandActivityTidyBag}, res: {@link IResCommon} */
	islandActivityTidyBag = "islandActivityTidyBag",
	/** req: {@link IReqIslandActivityUnlockBagGrid}, res: {@link IResCommon} */
	islandActivityUnlockBagGrid = "islandActivityUnlockBagGrid",
	/**
	 * * 大会室管理相关
	 * * req: {@link IReqCreateCustomizedContest}, res: {@link IResCreateCustomizedContest}
	 */
	createCustomizedContest = "createCustomizedContest",
	/** req: {@link IReqFetchmanagerCustomizedContestList}, res: {@link IResFetchManagerCustomizedContestList} */
	fetchManagerCustomizedContestList = "fetchManagerCustomizedContestList",
	/** req: {@link IReqFetchManagerCustomizedContest}, res: {@link IResFetchManagerCustomizedContest} */
	fetchManagerCustomizedContest = "fetchManagerCustomizedContest",
	/** req: {@link IReqUpdateManagerCustomizedContest}, res: {@link IResCommon} */
	updateManagerCustomizedContest = "updateManagerCustomizedContest",
	/** req: {@link IReqFetchContestPlayerRank}, res: {@link IResFetchContestPlayerRank} */
	fetchContestPlayerRank = "fetchContestPlayerRank",
	/** req: {@link IReqFetchReadyPlayerList}, res: {@link IResFetchReadyPlayerList} */
	fetchReadyPlayerList = "fetchReadyPlayerList",
	/** req: {@link IReqCreateGamePlan}, res: {@link IResCommon} */
	createGamePlan = "createGamePlan",
	/** req: {@link IReqCommon}, res: {@link IResGenerateContestManagerLoginCode} */
	generateContestManagerLoginCode = "generateContestManagerLoginCode",
	/** req: {@link IReqFetchContestTeamRank}, res: {@link IResFetchContestTeamRank} */
	fetchContestTeamRank = "fetchContestTeamRank",
	/** req: {@link IReqFetchContestTeamMember}, res: {@link IResFetchContestTeamMember} */
	fetchContestTeamMember = "fetchContestTeamMember",
	/** req: {@link IReqFetchContestTeamPlayerRank}, res: {@link IResFetchContestTeamPlayerRank} */
	fetchContestTeamPlayerRank = "fetchContestTeamPlayerRank",
	/**
	 * * 获取青云之志活动数据
	 * * req: {@link IReqFetchAmuletActivityData}, res: {@link IResFetchAmuletActivityData}
	 */
	fetchAmuletActivityData = "fetchAmuletActivityData",
	/**
	 * * 获取挑战任务与收藏数据
	 * * req: {@link IReqAmuletActivityFetchBrief}, res: {@link IResAmuletActivityFetchBrief}
	 */
	amuletActivityFetchBrief = "amuletActivityFetchBrief",
	/**
	 * * 开始游戏
	 * * req: {@link IReqAmuletActivityStartGame}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityStartGame = "amuletActivityStartGame",
	/**
	 * * 换牌/打牌/开杠/和牌/模切/结束换牌 操作
	 * * req: {@link IReqAmuletActivityOperate}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityOperate = "amuletActivityOperate",
	/**
	 * * 下一关
	 * * req: {@link IReqAmuletActivityUpgrade}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityUpgrade = "amuletActivityUpgrade",
	/**
	 * * 购买卡包
	 * * req: {@link IReqAmuletActivityBuy}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityBuy = "amuletActivityBuy",
	/**
	 * * 选择卡包护身符
	 * * req: {@link IReqAmuletActivitySelectPack}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivitySelectPack = "amuletActivitySelectPack",
	/**
	 * * 出售护身符
	 * * req: {@link IReqAmuletActivitySellEffect}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivitySellEffect = "amuletActivitySellEffect",
	/**
	 * * 护身符排序
	 * * req: {@link IReqAmuletActivityEffectSort}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityEffectSort = "amuletActivityEffectSort",
	/**
	 * * 放弃当前对局
	 * * req: {@link IReqAmuletActivityGiveup}, res: {@link IResCommon}
	 */
	amuletActivityGiveup = "amuletActivityGiveup",
	/**
	 * * 刷新商店
	 * * req: {@link IReqAmuletActivityRefreshShop}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityRefreshShop = "amuletActivityRefreshShop",
	/**
	 * * 选择开局免费护身符
	 * * req: {@link IReqAmuletActivitySelectFreeEffect}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivitySelectFreeEffect = "amuletActivitySelectFreeEffect",
	/**
	 * * 商店升级buff
	 * * req: {@link IReqAmuletActivityUpgradeShopBuff}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityUpgradeShopBuff = "amuletActivityUpgradeShopBuff",
	/**
	 * * 退出商店，进入选关
	 * * req: {@link IReqAmuletActivityEndShopping}, res: {@link IResAmuletEventResponse}
	 */
	amuletActivityEndShopping = "amuletActivityEndShopping",
	/**
	 * * 设置场外增强
	 * * req: {@link IReqAmuletActivitySetSkillLevel}, res: {@link IResCommon}
	 */
	amuletActivitySetSkillLevel = "amuletActivitySetSkillLevel",
	/**
	 * * 获取青云之志维护信息
	 * * req: {@link IReqCommon}, res: {@link IResAmuletActivityMaintainInfo}
	 */
	amuletActivityMaintainInfo = "amuletActivityMaintainInfo",
	/** req: {@link IReqAmuletActivitySelectRewardPack}, res: {@link IResAmuletEventResponse} */
	amuletActivitySelectRewardPack = "amuletActivitySelectRewardPack",
	/**
	 * * 设置青云之志钦定护身符
	 * * req: {@link IReqAmuletActivitySelectBookEffect}, res: {@link IResCommon}
	 */
	amuletActivitySelectBookEffect = "amuletActivitySelectBookEffect",
	/**
	 * * ==DevDebug Start==
	 * * debug 协议在正式版本删除
	 * * req: {@link IReqAmuletActivityDebug}, res: {@link IResCommon}
	 */
	amuletActivityDebug = "amuletActivityDebug",
	/** req: {@link IReqAmuletActivityFetchDebug}, res: {@link IResFetchAmuletActivityDebug} */
	amuletActivityFetchDebug = "amuletActivityFetchDebug",
	/**
	 * * 解锁剧情
	 * * req: {@link IReqStoryActivityUnlock}, res: {@link IResCommon}
	 */
	storyActivityUnlock = "storyActivityUnlock",
	/**
	 * * 解锁结局
	 * * req: {@link IReqStoryActivityUnlockEnding}, res: {@link IResCommon}
	 */
	storyActivityUnlockEnding = "storyActivityUnlockEnding",
	/**
	 * * 领取结局奖励
	 * * req: {@link IReqStoryActivityReceiveEndingReward}, res: {@link IResStoryReward}
	 */
	storyActivityReceiveEndingReward = "storyActivityReceiveEndingReward",
	/**
	 * * 领取剧情通关奖励（完成剧情任一结局）
	 * * req: {@link IReqStoryActivityReceiveFinishReward}, res: {@link IResStoryReward}
	 */
	storyActivityReceiveFinishReward = "storyActivityReceiveFinishReward",
	/**
	 * * 领取剧情全通奖励（完成所有结局）
	 * * req: {@link IReqStoryActivityReceiveAllFinishReward}, res: {@link IResStoryReward}
	 */
	storyActivityReceiveAllFinishReward = "storyActivityReceiveAllFinishReward",
	/**
	 * * 解锁结局并领取结局奖励
	 * * req: {@link IReqStoryActivityUnlockEndingAndReceive}, res: {@link IResStoryActivityUnlockEndingAndReceive}
	 */
	storyActivityUnlockEndingAndReceive = "storyActivityUnlockEndingAndReceive",
	/**
	 * * 获取活动排名
	 * * req: {@link IReqFetchActivityRank}, res: {@link IResFetchActivityRank}
	 */
	fetchActivityRank = "fetchActivityRank",
	/**
	 * * 玩家职业/主播标识开关
	 * * req: {@link IReqSetVerifiedHidden}, res: {@link IResCommon}
	 */
	setVerifiedHidden = "setVerifiedHidden",
	/**
	 * * 获取问卷列表
	 * * req: {@link IReqFetchQuestionnaireList}, res: {@link IResFetchQuestionnaireList}
	 */
	fetchQuestionnaireList = "fetchQuestionnaireList",
	/**
	 * * 获取问卷详情
	 * * req: {@link IReqFetchQuestionnaireDetail}, res: {@link IResFetchQuestionnaireDetail}
	 */
	fetchQuestionnaireDetail = "fetchQuestionnaireDetail",
	/**
	 * * 提交调查问卷结果
	 * * req: {@link IReqSubmitQuestionnaire}, res: {@link IResCommon}
	 */
	submitQuestionnaire = "submitQuestionnaire",
	/**
	 * * 好友房随机机器人角色开关
	 * * req: {@link IReqSetFriendRoomRandomBotChar}, res: {@link IResCommon}
	 */
	setFriendRoomRandomBotChar = "setFriendRoomRandomBotChar",
	/** req: {@link IReqFetchAccountGameHuRecords}, res: {@link IResFetchAccountGameHuRecords} */
	fetchAccountGameHuRecords = "fetchAccountGameHuRecords",
	/** req: {@link IReqFetchAccountInfoExtra}, res: {@link IResFetchAccountInfoExtra} */
	fetchAccountInfoExtra = "fetchAccountInfoExtra",
	/** req: {@link IReqSetAccountFavoriteHu}, res: {@link IResCommon} */
	setAccountFavoriteHu = "setAccountFavoriteHu",
	/**
	 * * seer 报告
	 * * req: {@link IReqFetchSeerReport}, res: {@link IResFetchSeerReport}
	 */
	fetchSeerReport = "fetchSeerReport",
	/** req: {@link IReqCreateSeerReport}, res: {@link IResCreateSeerReport} */
	createSeerReport = "createSeerReport",
	/**
	 * * 获取当前 seer 报告状态（只返回分析中和未过期的）
	 * * req: {@link IReqCommon}, res: {@link IResFetchSeerReportList}
	 */
	fetchSeerReportList = "fetchSeerReportList",
	/** req: {@link IReqCommon}, res: {@link IResFetchSeerInfo} */
	fetchSeerInfo = "fetchSeerInfo",
	/**
	 * * 可选up卡池活动
	 * * req: {@link IReqSelectChestChooseUp}, res: {@link IReqCommon}
	 */
	selectChestChooseUpActivity = "selectChestChooseUpActivity",
	/**
	 * * 年度报告
	 * * req: {@link IReqGenerateAnnualReportToken}, res: {@link IResGenerateAnnualReportToken}
	 */
	generateAnnualReportToken = "generateAnnualReportToken",
	/** req: {@link IReqCommon}, res: {@link IResFetchAnnualReportInfo} */
	fetchAnnualReportInfo = "fetchAnnualReportInfo",
	/**
	 * * 好友备注
	 * * req: {@link IReqRemarkFriend}, res: {@link IResCommon}
	 */
	remarkFriend = "remarkFriend",
	/**
	 * * 雀斗大会
	 * * req: {@link IReqSimV2ActivityFetchInfo}, res: {@link IResSimV2ActivityFetchInfo}
	 */
	simV2ActivityFetchInfo = "simV2ActivityFetchInfo",
	/** req: {@link IReqSimV2ActivityStartSeason}, res: {@link IResSimV2ActivityStartSeason} */
	simV2ActivityStartSeason = "simV2ActivityStartSeason",
	/** req: {@link IReqSimV2ActivityTrain}, res: {@link IResSimV2ActivityTrain} */
	simV2ActivityTrain = "simV2ActivityTrain",
	/** req: {@link IReqSimV2ActivitySelectEvent}, res: {@link IResSimV2ActivitySelectEvent} */
	simV2ActivitySelectEvent = "simV2ActivitySelectEvent",
	/** req: {@link IReqSimV2ActivityStartMatch}, res: {@link IResSimV2ActivityStartMatch} */
	simV2ActivityStartMatch = "simV2ActivityStartMatch",
	/** req: {@link IReqSimV2ActivityEndMatch}, res: {@link IResSimV2ActivityEndMatch} */
	simV2ActivityEndMatch = "simV2ActivityEndMatch",
	/** req: {@link IReqSimV2ActivityGiveUp}, res: {@link IResCommon} */
	simV2ActivityGiveUp = "simV2ActivityGiveUp",
	/** req: {@link IReqSimV2ActivitySetUpgrade}, res: {@link IResCommon} */
	simV2ActivitySetUpgrade = "simV2ActivitySetUpgrade",
	/**
	 * * ==DevDebug Start==
	 * * debug 协议在正式版本删除
	 * * req: {@link IReqSimV2ActivityDebug}, res: {@link IResCommon}
	 */
	simV2ActivityDebug = "simV2ActivityDebug",
	/** req: {@link IReqSimV2ActivityFetchDebug}, res: {@link IResSimV2ActivityFetchDebug} */
	simV2ActivityFetchDebug = "simV2ActivityFetchDebug",
	/**
	 * * 进度奖励活动
	 * * req: {@link IReqProgressRewardActivityReceive}, res: {@link IResProgressRewardActivityReceive}
	 */
	progressRewardActivityReceive = "progressRewardActivityReceive",
	/** req: {@link IReqFetchProgressRewardActivityInfo}, res: {@link IResFetchProgressRewardActivityInfo} */
	fetchProgressRewardActivityInfo = "fetchProgressRewardActivityInfo",
	/**
	 * * 验证游戏口令
	 * * req: {@link IReqAuthGame}, res: {@link IResAuthGame}
	 */
	authGame = "authGame",
	/**
	 * * 客户端资源加载完毕，可以进入游戏
	 * * req: {@link IReqCommon}, res: {@link IResEnterGame}
	 */
	enterGame = "enterGame",
	/**
	 * * 同步游戏
	 * * req: {@link IReqSyncGame}, res: {@link IResSyncGame}
	 */
	syncGame = "syncGame",
	/**
	 * * 完成同步游戏
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	finishSyncGame = "finishSyncGame",
	/**
	 * * 中断游戏（仅1个人模式有效）
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	terminateGame = "terminateGame",
	/**
	 * * 输入基本操作
	 * * req: {@link IReqSelfOperation}, res: {@link IResCommon}
	 */
	inputOperation = "inputOperation",
	/**
	 * * 输入吃碰胡
	 * * req: {@link IReqChiPengGang}, res: {@link IResCommon}
	 */
	inputChiPengGang = "inputChiPengGang",
	/**
	 * * 确认新的回合
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	confirmNewRound = "confirmNewRound",
	/**
	 * * 玩家游戏内广播
	 * * req: {@link IReqBroadcastInGame}, res: {@link IResCommon}
	 */
	broadcastInGame = "broadcastInGame",
	/**
	 * * 玩家游戏内Gm指令
	 * * deprecated
	 * * req: {@link IReqGMCommandInGaming}, res: {@link IResCommon}
	 */
	inputGameGMCommand = "inputGameGMCommand",
	/**
	 * * 获取对局玩家状态
	 * * req: {@link IReqCommon}, res: {@link IResGamePlayerState}
	 */
	fetchGamePlayerState = "fetchGamePlayerState",
	/**
	 * * 客户端定时刷新网络延迟
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	checkNetworkDelay = "checkNetworkDelay",
	/**
	 * * 清除玩家自身的离开状态
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	clearLeaving = "clearLeaving",
	/**
	 * * 开始投票退出游戏
	 * * req: {@link IReqVoteGameEnd}, res: {@link IResGameEndVote}
	 */
	voteGameEnd = "voteGameEnd",
	/**
	 * * 实时观战验证
	 * * req: {@link IReqAuthObserve}, res: {@link IResCommon}
	 */
	authObserve = "authObserve",
	/**
	 * * 开始实时观战
	 * * req: {@link IReqCommon}, res: {@link IResStartObserve}
	 */
	startObserve = "startObserve",
	/**
	 * * 停止实时观战
	 * * req: {@link IReqCommon}, res: {@link IResCommon}
	 */
	stopObserve = "stopObserve",
	/**
	 * * 主备线路功能
	 * * req: {@link IReqRequestConnection}, res: {@link IResRequestConnection}
	 */
	requestConnection = "requestConnection",
	/** req: {@link IReqRequestRouteChange}, res: {@link IResRequestRouteChange} */
	requestRouteChange = "requestRouteChange",
	/** req: {@link IReqHeartbeat}, res: {@link IResHeartbeat} */
	heartbeat = "heartbeat",
}

declare type ProtoObject<T> = Omit<T, "toJSON">;

declare interface IProto {
	toJSON?(): ProtoObject<this>;
}

declare interface IResponse extends IProto {
	error?: IError;
}

/**
 * * .lq.NotifyRoomGameStart
 * * 通知房间游戏开始了
 */
declare interface INotifyRoomGameStart extends IProto {
	/** 游戏的url */
	game_url: string;
	/** 连接口令 */
	connect_token: string;
	/** 游戏的uuid */
	game_uuid: string;
	/** zone or local */
	location: string;
}

/**
 * * .lq.NotifyMatchGameStart
 * * 通知匹配场游戏开始了
 */
declare interface INotifyMatchGameStart extends IProto {
	/** 游戏的url */
	game_url: string;
	/** 连接口令 */
	connect_token: string;
	/** 游戏的uuid */
	game_uuid: string;
	/** 匹配场的modeId */
	match_mode_id: number;
	/** zone or local */
	location: string;
}

/**
 * * .lq.NotifyRoomPlayerReady
 * * 通知玩家就绪
 */
declare interface INotifyRoomPlayerReady extends IProto {
	account_id: number;
	/** true=准备 false=未准备 */
	ready: boolean;
	account_list: INotifyRoomPlayerReady_AccountReadyState;
	seq: number;
}

/** undefined */
declare interface INotifyRoomPlayerReady_AccountReadyState extends IProto {
	account_id: number;
	ready: boolean;
}

/**
 * * .lq.NotifyRoomPlayerDressing
 * * 通知玩家装扮状态
 */
declare interface INotifyRoomPlayerDressing extends IProto {
	account_id: number;
	/** true=正在装扮 false=没有装扮 */
	dressing: boolean;
	account_list: INotifyRoomPlayerDressing_AccountDressingState;
	seq: number;
}

/** undefined */
declare interface INotifyRoomPlayerDressing_AccountDressingState extends IProto {
	account_id: number;
	dressing: boolean;
}

/**
 * * .lq.NotifyRoomPlayerUpdate
 * * 通知玩家变化
 */
declare interface INotifyRoomPlayerUpdate extends IProto {
	/** 房主变化 */
	owner_id: number;
	/** 机器人数量，已废弃，使用 robots 字段 */
	robot_count: number;
	player_list: IPlayerGameView[];
	/** 通知序列号，最大为10000000，之后重置为0 */
	seq: number;
	/** 机器人外观数据 */
	robots: IPlayerGameView[];
	positions: number[];
}

/**
 * * .lq.NotifyRoomKickOut
 * * 通知玩家被踢出
 */
declare interface INotifyRoomKickOut extends IProto {
}

/**
 * * .lq.NotifyFriendStateChange
 * * 通知好友状态变化
 */
declare interface INotifyFriendStateChange extends IProto {
	target_id: number;
	active_state: IAccountActiveState;
}

/**
 * * .lq.NotifyFriendViewChange
 * * 通知好友展示信息变化
 */
declare interface INotifyFriendViewChange extends IProto {
	target_id: number;
	base: IPlayerBaseView;
}

/**
 * * .lq.NotifyFriendChange
 * * 通知好友变化
 */
declare interface INotifyFriendChange extends IProto {
	/** 好友id */
	account_id: number;
	/** 1=add 2=remove */
	type: number;
	/** type=1 是有数据 */
	friend: IFriend;
}

/**
 * * .lq.NotifyNewFriendApply
 * * 新的好友申请
 */
declare interface INotifyNewFriendApply extends IProto {
	/** 申请者id */
	account_id: number;
	/** 申请时间 */
	apply_time: number;
	/** 被顶替掉的申请者id（申请上限时会有） */
	removed_id: number;
}

/**
 * * .lq.NotifyClientMessage
 * * 发送一条单方面消息
 */
declare interface INotifyClientMessage extends IProto {
	sender: IPlayerBaseView;
	type: number;
	content: string;
}

/**
 * * .lq.NotifyAccountUpdate
 * * 人物数据更新
 */
declare interface INotifyAccountUpdate extends IProto {
	update: IAccountUpdate;
}

/**
 * * .lq.NotifyAnotherLogin
 * * 提示有另一处登录
 */
declare interface INotifyAnotherLogin extends IProto {
}

/**
 * * .lq.NotifyAccountLogout
 * * 提示玩家需要登出
 */
declare interface INotifyAccountLogout extends IProto {
}

/**
 * * .lq.NotifyAnnouncementUpdate
 * * 公告更新
 * * yaya(2020-07-29): 现在不放具体内容，只进行通知（消息体内容除lang外为空），客户端在收到通知后随机延迟（五分钟内）重新调用获取通知接口进行更新
 * * yaya(2021-12-09): 改成以列表形式通知
 */
declare interface INotifyAnnouncementUpdate extends IProto {
	update_list: INotifyAnnouncementUpdate_AnnouncementUpdate[];
}

/** undefined */
declare interface INotifyAnnouncementUpdate_AnnouncementUpdate extends IProto {
	lang: string;
	platform: string;
}

/**
 * * .lq.NotifyNewMail
 * * 通知新邮件
 */
declare interface INotifyNewMail extends IProto {
	mail: IMail;
}

/**
 * * .lq.NotifyDeleteMail
 * * 通知删除邮件
 */
declare interface INotifyDeleteMail extends IProto {
	mail_id_list: number[];
}

/**
 * * .lq.NotifyReviveCoinUpdate
 * * 通知复活币更新
 */
declare interface INotifyReviveCoinUpdate extends IProto {
	has_gained: boolean;
}

/**
 * * .lq.NotifyDailyTaskUpdate
 * * 每日任务刷新推送
 */
declare interface INotifyDailyTaskUpdate extends IProto {
	progresses: ITaskProgress[];
	max_daily_task_count: number;
	/** 剩余可刷新次数 */
	refresh_count: number;
}

/**
 * * .lq.NotifyActivityTaskUpdate
 * * 每日活动任务刷新推送
 */
declare interface INotifyActivityTaskUpdate extends IProto {
	progresses: ITaskProgress[];
}

/**
 * * .lq.NotifyActivityPeriodTaskUpdate
 * * 长期活动任务刷新推送
 */
declare interface INotifyActivityPeriodTaskUpdate extends IProto {
	progresses: ITaskProgress[];
}

/**
 * * .lq.NotifyAccountRandomTaskUpdate
 * * 随机活动任务刷新推送
 */
declare interface INotifyAccountRandomTaskUpdate extends IProto {
	progresses: ITaskProgress[];
}

/** .lq.NotifyActivitySegmentTaskUpdate */
declare interface INotifyActivitySegmentTaskUpdate extends IProto {
	progresses: ISegmentTaskProgress[];
}

/** .lq.NotifyActivityUpdate */
declare interface INotifyActivityUpdate extends IProto {
	list: INotifyActivityUpdate_FeedActivityData[];
}

/** undefined */
declare interface INotifyActivityUpdate_FeedActivityData extends IProto {
	activity_id: number;
	feed_count: number;
	friend_receive_data: INotifyActivityUpdate_CountWithTimeData;
	friend_send_data: INotifyActivityUpdate_CountWithTimeData;
	gift_inbox: INotifyActivityUpdate_GiftBoxData[];
}

/** undefined */
declare interface INotifyActivityUpdate_CountWithTimeData extends IProto {
	count: number;
	last_update_time: number;
}

/** undefined */
declare interface INotifyActivityUpdate_GiftBoxData extends IProto {
	id: number;
	item_id: number;
	count: number;
	from_account_id: number;
	time: number;
	received: number;
}

/**
 * * .lq.NotifyAccountChallengeTaskUpdate
 * * 试炼赛更新推送
 */
declare interface INotifyAccountChallengeTaskUpdate extends IProto {
	progresses: ITaskProgress[];
	/** 试炼等级 */
	level: number;
	/** 当前再发行次数 */
	refresh_count: number;
	/** 当前比赛场数 */
	match_count: number;
	/** 试炼券ID */
	ticket_id: number;
	/** 已经领取过奖励的赛季 */
	rewarded_season: number[];
}

/**
 * * .lq.NotifyNewComment
 * * 通知：有新的留言
 */
declare interface INotifyNewComment extends IProto {
}

/**
 * * .lq.NotifyRollingNotice
 * * 通知：新滚动公告
 */
declare interface INotifyRollingNotice extends IProto {
}

/**
 * * .lq.NotifyMaintainNotice
 * * 通知：新维护公告
 */
declare interface INotifyMaintainNotice extends IProto {
}

/**
 * * .lq.NotifyGiftSendRefresh
 * * 通知：每日送礼次数刷新
 */
declare interface INotifyGiftSendRefresh extends IProto {
}

/**
 * * .lq.NotifyShopUpdate
 * * 通知：商店更新
 */
declare interface INotifyShopUpdate extends IProto {
	shop_info: IShopInfo;
}

/**
 * * .lq.NotifyIntervalUpdate
 * * 通知：轮换商店/活动发生改变
 */
declare interface INotifyIntervalUpdate extends IProto {
}

/**
 * * .lq.NotifyVipLevelChange
 * * 通知：VIP等级变化
 */
declare interface INotifyVipLevelChange extends IProto {
	/** 每日送礼次数上限 */
	gift_limit: number;
	/** 好像数量上限 */
	friend_max_count: number;
	/** 杂货铺免费刷新上限 */
	zhp_free_refresh_limit: number;
	/** 杂货铺花钱刷新上限 */
	zhp_cost_refresh_limit: number;
	/** 对局好感度加成 */
	buddy_bonus: number;
	record_collect_limit: number;
}

/**
 * * .lq.NotifyServerSetting
 * * 服务器设置
 */
declare interface INotifyServerSetting extends IProto {
	settings: IServerSettings;
}

/**
 * * .lq.NotifyPayResult
 * * 通知：充值结果
 */
declare interface INotifyPayResult extends IProto {
	/** 0=success other=failed */
	pay_result: number;
	order_id: string;
	goods_id: number;
	new_month_ticket: number;
	resource_modify: INotifyPayResult_ResourceModify[];
}

/** undefined */
declare interface INotifyPayResult_ResourceModify extends IResponse {
	id: number;
	count: number;
	final: number;
}

/**
 * * .lq.NotifyCustomContestAccountMsg
 * * 通知：比赛聊天消息
 */
declare interface INotifyCustomContestAccountMsg extends IProto {
	unique_id: number;
	account_id: number;
	/** 发送人的昵称 */
	sender: string;
	content: string;
	verified: number;
}

/**
 * * .lq.NotifyCustomContestSystemMsg
 * * 通知：比赛系统消息
 */
declare interface INotifyCustomContestSystemMsg extends IProto {
	unique_id: number;
	/** 1=game-start 2=game-end */
	type: number;
	uuid: string;
	game_start: ICustomizedContestGameStart;
	game_end: ICustomizedContestGameEnd;
}

/**
 * * .lq.NotifyMatchTimeout
 * * 通知：匹配超时通知
 */
declare interface INotifyMatchTimeout extends IProto {
	sid: string;
}

/**
 * * .lq.NotifyMatchFailed
 * * 通知：匹配出错
 */
declare interface INotifyMatchFailed extends IProto {
	sid: string;
}

/**
 * * .lq.NotifyCustomContestState
 * * 通知：自定义比赛状态变化
 */
declare interface INotifyCustomContestState extends IProto {
	unique_id: number;
	/** 比赛状态 */
	state: number;
}

/**
 * * .lq.NotifyActivityChange
 * * 通知：活动变化
 */
declare interface INotifyActivityChange extends IProto {
	/** 新活动 */
	new_activities: IActivity[];
	/** 结束的活动 */
	end_activities: number[];
}

/**
 * * .lq.NotifyAFKResult
 * * 通知：挂机惩罚
 */
declare interface INotifyAFKResult extends IProto {
	/** 惩罚类型 1-无结算奖励 2-封号 */
	type: number;
	/** 封号->封号结束时间 */
	ban_end_time: number;
	/** 被判定挂机的游戏uuid */
	game_uuid: string;
}

/**
 * * .lq.NotifyLoginQueueFinished
 * * 通知：登录排队完成
 */
declare interface INotifyLoginQueueFinished extends IProto {
}

/**
 * * .lq.NotifyGameFinishRewardV2
 * * 比赛结束奖励
 */
declare interface INotifyGameFinishRewardV2 extends IProto {
	mode_id: number;
	level_change: INotifyGameFinishRewardV2_LevelChange;
	/** 比赛宝箱 */
	match_chest: INotifyGameFinishRewardV2_MatchChest;
	main_character: INotifyGameFinishRewardV2_MainCharacter;
	character_gift: INotifyGameFinishRewardV2_CharacterGift;
	badges: IBadgeAchieveProgress[];
}

/** undefined */
declare interface INotifyGameFinishRewardV2_LevelChange extends IProto {
	/** 原来的段位 */
	origin: IAccountLevel;
	/** 变化后的段位 */
	final: IAccountLevel;
	/** 1=四麻 2=三麻 */
	type: number;
}

/** undefined */
declare interface INotifyGameFinishRewardV2_MatchChest extends IProto {
	chest_id: number;
	origin: number;
	final: number;
	is_graded: boolean;
	rewards: IRewardSlot[];
}

/** undefined */
declare interface INotifyGameFinishRewardV2_MainCharacter extends IProto {
	level: number;
	exp: number;
	add: number;
}

/** undefined */
declare interface INotifyGameFinishRewardV2_CharacterGift extends IProto {
	origin: number;
	final: number;
	add: number;
	is_graded: boolean;
}

/** .lq.NotifyActivityRewardV2 */
declare interface INotifyActivityRewardV2 extends IProto {
	/** 活动奖励 */
	activity_reward: INotifyActivityRewardV2_ActivityReward[];
}

/** undefined */
declare interface INotifyActivityRewardV2_ActivityReward extends IProto {
	activity_id: number;
	rewards: IRewardSlot[];
}

/** .lq.NotifyActivityPointV2 */
declare interface INotifyActivityPointV2 extends IProto {
	/** 活动对局得点 */
	activity_points: INotifyActivityPointV2_ActivityPoint[];
}

/** undefined */
declare interface INotifyActivityPointV2_ActivityPoint extends IProto {
	activity_id: number;
	/** 当前累计点数 */
	point: number;
}

/** .lq.NotifyLeaderboardPointV2 */
declare interface INotifyLeaderboardPointV2 extends IProto {
	/** 排行榜对局得点 */
	leaderboard_points: INotifyLeaderboardPointV2_LeaderboardPoint[];
}

/** undefined */
declare interface INotifyLeaderboardPointV2_LeaderboardPoint extends IProto {
	leaderboard_id: number;
	/** 当前排名点数 */
	point: number;
}

/** .lq.NotifySeerReport */
declare interface INotifySeerReport extends IProto {
	report: ISeerBrief;
}

/**
 * * .lq.NotifyConnectionShutdown
 * * 服务端主动断开
 */
declare interface INotifyConnectionShutdown extends IProto {
	reason: number;
	/** 服务器将于这个时间戳断开连接 */
	close_at: number;
}

/** .lq.Error */
declare interface IError extends IProto {
	code: number;
	u32_params?: number[];
	str_params?: string[];
	/** json对象（内容根据code变化） */
	json_param?: string;
}

/** .lq.Wrapper */
declare interface IWrapper extends IProto {
	name: string;
	data: number[];
}

/** .lq.NetworkEndpoint */
declare interface INetworkEndpoint extends IProto {
	family: string;
	address: string;
	port: number;
}

/**
 * * .lq.ReqCommon
 * * 默认空请求结构体
 */
declare interface IReqCommon extends IProto {
}

/**
 * * .lq.ResCommon
 * * 默认空回复结构体
 */
declare interface IResCommon extends IResponse {
}

/**
 * * .lq.ResAccountUpdate
 * * 账号更新数据
 */
declare interface IResAccountUpdate extends IResponse {
	update: IAccountUpdate;
}

/**
 * * .lq.AntiAddiction
 * * 防沉迷数据
 */
declare interface IAntiAddiction extends IProto {
	online_duration: number;
}

/**
 * * .lq.HighestHuRecord
 * * 最高胡牌记录（包括 rong 和 zimo）
 */
declare interface IHighestHuRecord extends IProto {
	fanshu: number;
	doranum: number;
	title: string;
	hands: string[];
	ming: string[];
	hupai: string;
	title_id: number;
}

/** .lq.AccountMahjongStatistic */
declare interface IAccountMahjongStatistic extends IProto {
	/** 名次场次数据 下标0对应1位 */
	final_position_counts: number[];
	/** 最近比赛回合数据 */
	recent_round: IAccountMahjongStatistic_RoundSummary;
	/** 最近胡牌数据 */
	recent_hu: IAccountMahjongStatistic_HuSummary;
	/** 最高胡牌记录 */
	highest_hu: IHighestHuRecord;
	/** 最近20场胡牌立直的内容 */
	recent_20_hu_summary: IAccountMahjongStatistic_Liqi20Summary;
	/** 最近10场数据 */
	recent_10_hu_summary: IAccountMahjongStatistic_LiQi10Summary;
	/** 最近10场结果 */
	recent_10_game_result: IAccountMahjongStatistic_GameResult[];
}

/**
 * * undefined
 * * 回合总结
 */
declare interface IAccountMahjongStatistic_RoundSummary extends IProto {
	/** 总回合数 */
	total_count: number;
	/** 荣次数 */
	rong_count: number;
	/** 自摸次数 */
	zimo_count: number;
	/** 放铳次数 */
	fangchong_count: number;
}

/**
 * * undefined
 * * 胡牌总结
 */
declare interface IAccountMahjongStatistic_HuSummary extends IProto {
	/** 胡牌总次数 */
	total_count: number;
	/** 带dora次数 */
	dora_round_count: number;
	/** 总番数 */
	total_fan: number;
}

/** undefined */
declare interface IAccountMahjongStatistic_Liqi20Summary extends IProto {
	/** 胡牌的次数 */
	total_count: number;
	/** 胡牌带里宝牌的数量 */
	total_lidora_count: number;
	/** 修正后的胡牌平均得点 */
	average_hu_point: number;
}

/** undefined */
declare interface IAccountMahjongStatistic_LiQi10Summary extends IProto {
	/** 悬赏数之和 */
	total_xuanshang: number;
	/** 番数之和 */
	total_fanshu: number;
}

/** undefined */
declare interface IAccountMahjongStatistic_GameResult extends IProto {
	/** 排名 */
	rank: number;
	/** 最终打点 */
	final_point: number;
}

/**
 * * .lq.AccountStatisticData
 * * 账号统计数据（非database结构）
 */
declare interface IAccountStatisticData extends IProto {
	mahjong_category: number;
	game_category: number;
	statistic: IAccountMahjongStatistic;
	game_type: number;
}

/**
 * * .lq.AccountLevel
 * * 段位
 */
declare interface IAccountLevel extends IProto {
	/** level_definition.id */
	id: number;
	/** 分数 */
	score: number;
}

/**
 * * .lq.ViewSlot
 * * 装扮
 */
declare interface IViewSlot extends IProto {
	slot: number;
	item_id: number;
	/** 0-普通设置 1-随机装扮 */
	type: number;
	/** 随机列表 */
	item_id_list: number[];
}

/** .lq.FavoriteHu */
declare interface IFavoriteHu extends IProto {
	/** 1 - 四人麻将  2 - 三人麻将 */
	category: number;
	/** 1 - 段位场  2 - 友人场  3 - 活动场 */
	type: number;
	/** 胡牌记录 */
	hu: IHighestHuRecord;
	/** 1- 显示最近大和 2- 显示自选和牌 */
	mode: number;
}

/**
 * * .lq.Account
 * * 账号信息
 */
declare interface IAccount extends IProto {
	account_id: number;
	nickname: string;
	login_time: number;
	logout_time: number;
	room_id: number;
	/** 防沉迷 */
	anti_addiction: IAntiAddiction;
	/** 称号 */
	title: number;
	/** 签名 */
	signature: string;
	email: string;
	email_verify: number;
	/** 金币 */
	gold: number;
	/** 钻石 */
	diamond: number;
	avatar_id: number;
	/** VIP经验 */
	vip: number;
	birthday: number;
	phone: string;
	phone_verify: number;
	/** 各平台钻石 */
	platform_diamond: IAccount_PlatformDiamond[];
	/** 4麻段位 */
	level: IAccountLevel;
	/** 3麻段位 */
	level3: IAccountLevel;
	avatar_frame: number;
	skin_ticket: number;
	platform_skin_ticket: IAccount_PlatformSkinTicket[];
	/** 名人认证 */
	verified: number;
	challenge_levels: IAccount_ChallengeLevel[];
	frozen_state: number;
	achievement_count: IAccount_AchievementCount[];
	loading_image: number[];
	favorite_hu: IFavoriteHu[];
	/** 勋章列表 */
	badges: IAccount_Badge[];
}

/** undefined */
declare interface IAccount_PlatformDiamond extends IProto {
	id: number;
	count: number;
}

/** undefined */
declare interface IAccount_PlatformSkinTicket extends IProto {
	id: number;
	count: number;
}

/** undefined */
declare interface IAccount_ChallengeLevel extends IProto {
	season: number;
	level: number;
	rank: number;
}

/**
 * * undefined
 * * 成就统计
 */
declare interface IAccount_AchievementCount extends IProto {
	rare: number;
	count: number;
}

/**
 * * undefined
 * * 勋章信息统计
 */
declare interface IAccount_Badge extends IProto {
	/** 勋章id */
	id: number;
	/** 首次完成时间戳（未完成则缺省值为0） */
	achieved_time: number;
	/** 统计次数 */
	achieved_counter: number;
}

/**
 * * .lq.AccountOwnerData
 * * 账号拥有着获得的数据
 */
declare interface IAccountOwnerData extends IProto {
	/** 已经解锁的人物列表 */
	unlock_characters: number[];
}

/**
 * * .lq.AccountUpdate
 * * 账号更新同步数据
 */
declare interface IAccountUpdate extends IProto {
	numerical: IAccountUpdate_NumericalUpdate[];
	character: IAccountUpdate_CharacterUpdate;
	/** 背包 */
	bag: IBagUpdate;
	achievement: IAccountUpdate_AchievementUpdate;
	/** 试炼 */
	shilian: IAccountShiLian;
	daily_task: IAccountUpdate_DailyTaskUpdate;
	title: IAccountUpdate_TitleUpdate;
	/** 新增首充档位充值记录 */
	new_recharged_list: number[];
	activity_task: IAccountUpdate_TaskUpdate;
	/** 翻牌牌任务 */
	activity_flip_task: IAccountUpdate_TaskUpdate;
	activity_period_task: IAccountUpdate_TaskUpdate;
	activity_random_task: IAccountUpdate_TaskUpdate;
	challenge: IAccountUpdate_AccountChallengeUpdate;
	ab_match: IAccountUpdate_AccountABMatchUpdate;
	activity: IAccountActivityUpdate;
	activity_segment_task: IAccountUpdate_SegmentTaskUpdate;
	month_ticket: IAccountUpdate_MonthTicketUpdate;
	/** 主角色 */
	main_character: IAccountUpdate_MainCharacterUpdate;
	badge: IAccountUpdate_BadgeUpdate;
}

/**
 * * undefined
 * * 数值资源变化
 */
declare interface IAccountUpdate_NumericalUpdate extends IProto {
	/** 资源Id */
	id: number;
	/** 最终值 */
	final: number;
}

/**
 * * undefined
 * * 角色
 */
declare interface IAccountUpdate_CharacterUpdate extends IProto {
	/** 新角色 */
	characters: ICharacter[];
	/** 新的皮肤 */
	skins: number[];
	/** 新的完成结局 */
	finished_endings: number[];
	/** 新的已领取奖励结局 */
	rewarded_endings: number[];
}

/**
 * * undefined
 * * 成就
 */
declare interface IAccountUpdate_AchievementUpdate extends IProto {
	/** 只发送有变动的 */
	progresses: IAchievementProgress[];
	/** 全量 */
	rewarded_group: number[];
}

/**
 * * undefined
 * * 每日任务
 */
declare interface IAccountUpdate_DailyTaskUpdate extends IProto {
	progresses: ITaskProgress[];
	task_list: number[];
}

/**
 * * undefined
 * * 称号
 */
declare interface IAccountUpdate_TitleUpdate extends IProto {
	/** 新增称号 */
	new_titles: number[];
	/** 去除的称号 */
	remove_titles: number[];
}

/**
 * * undefined
 * * 活动任务
 */
declare interface IAccountUpdate_TaskUpdate extends IProto {
	progresses: ITaskProgress[];
	/** 当前任务列表 */
	task_list: number[];
}

/** undefined */
declare interface IAccountUpdate_AccountChallengeUpdate extends IProto {
	progresses: ITaskProgress[];
	/** 试炼等级 */
	level: number;
	/** 当前再发行次数 */
	refresh_count: number;
	/** 当前比赛场数 */
	match_count: number;
	/** 试炼券ID */
	ticket_id: number;
	/** 任务列表 */
	task_list: number[];
	/** 已经领取过奖励的赛季 */
	rewarded_season: number[];
}

/** undefined */
declare interface IAccountUpdate_AccountABMatchUpdate extends IProto {
	match_id: number;
	match_count: number;
	buy_in_count: number;
	point: number;
	rewarded: boolean;
	match_max_point: IAccountUpdate_MatchPoint[];
	quit: boolean;
}

/** undefined */
declare interface IAccountUpdate_SegmentTaskUpdate extends IProto {
	progresses: ISegmentTaskProgress[];
	/** 当前任务列表 */
	task_list: number[];
}

/** undefined */
declare interface IAccountUpdate_MonthTicketUpdate extends IProto {
	end_time: number;
	last_pay_time: number;
}

/** undefined */
declare interface IAccountUpdate_MainCharacterUpdate extends IProto {
	/** 主角色id */
	character_id: number;
	/** 主角色装扮id */
	skin_id: number;
}

/** undefined */
declare interface IAccountUpdate_BadgeUpdate extends IProto {
	/** 只发送有进度更新的勋章 */
	progresses: IBadgeAchieveProgress[];
}

/** undefined */
declare interface IAccountUpdate_MatchPoint extends IProto {
	match_id: number;
	point: number;
}

/** .lq.GameMetaData */
declare interface IGameMetaData extends IProto {
	/** 友人房的房间id，不要被骗了！ */
	room_id: number;
	/** 模式id */
	mode_id: number;
	contest_uid: number;
}

/**
 * * .lq.AccountPlayingGame
 * * 玩家正在进行的对局信息
 */
declare interface IAccountPlayingGame extends IProto {
	game_uuid: string;
	/** 1=好友房 2=匹配 */
	category: number;
	meta: IGameMetaData;
}

/**
 * * .lq.RandomCharacter
 * * 随机角色信息
 */
declare interface IRandomCharacter extends IProto {
	/** 角色id */
	character_id: number;
	/** 装饰id */
	skin_id: number;
}

/**
 * * .lq.AccountCacheView
 * * 账号缓存View结构
 */
declare interface IAccountCacheView extends IProto {
	/** 预留的缓存结构版本控制（暂不使用） */
	cache_version: number;
	account_id: number;
	nickname: string;
	login_time: number;
	logout_time: number;
	is_online: boolean;
	room_id: number;
	/** 称号 */
	title: number;
	avatar_id: number;
	/** VIP经验 */
	vip: number;
	/** 段位 */
	level: IAccountLevel;
	/** 游戏对局信息 */
	playing_game: IAccountPlayingGame;
	level3: IAccountLevel;
	avatar_frame: number;
	verified: number;
	ban_deadline: number;
	comment_ban: number;
	ban_state: number;
}

/**
 * * .lq.PlayerBaseView
 * * 玩家基础信息
 */
declare interface IPlayerBaseView extends IProto {
	account_id: number;
	/** 头像 */
	avatar_id: number;
	/** 称号 */
	title: number;
	nickname: string;
	level: IAccountLevel;
	level3: IAccountLevel;
	avatar_frame: number;
	verified: number;
	is_banned: number;
}

/**
 * * .lq.PlayerGameView
 * * 玩家游戏内信息
 */
declare interface IPlayerGameView extends IProto {
	account_id: number;
	/** 头像 */
	avatar_id: number;
	/** 称号 */
	title: number;
	nickname: string;
	level: IAccountLevel;
	character: ICharacter;
	level3: IAccountLevel;
	avatar_frame: number;
	verified: number;
	views: IViewSlot[];
	/** 团体赛团队id（若玩家无团队则为空） */
	team_id: number;
	/** 团体赛团队名称（若玩家无团队则为空） */
	team_name: string;
}

/** .lq.GameSetting */
declare interface IGameSetting extends IProto {
	/** 是否禁用表情 */
	emoji_switch: number;
}

/**
 * * .lq.GameMode
 * * 修改后需要修改牌谱公共平台
 */
declare interface IGameMode extends IProto {
	/** 0.四人一场胜负，1.四人东风，2.四人半庄，11.三人东风，12.三人半庄 */
	mode: number;
	/** 添加的电脑是否会思考，还是直接摸切 */
	ai: boolean;
	/** 旧的详细信息，老的牌谱可能会用 */
	extendinfo: string;
	/** 详细规则，友人房、大会室 */
	detail_rule: IGameDetailRule;
	/** 测试环境 */
	testing_environment: IGameTestingEnvironmentSet;
	/** 游戏额外配置，不用传给麻将库 */
	game_setting: IGameSetting;
}

/**
 * * .lq.GameTestingEnvironmentSet
 * * 游戏测试设置
 */
declare interface IGameTestingEnvironmentSet extends IProto {
	/** 1.国士无双，2.顺子，3.四暗刻，4.其他 */
	paixing: number;
	/** 剩余牌的张数 */
	left_count: number;
	/** 环境魔法模式的魔法卡变量 */
	field_spell_var: number;
}

/**
 * * .lq.GameDetailRule
 * * 详细规则，友人房、大会室
 * * 修改后需要修改牌谱公共平台
 */
declare interface IGameDetailRule extends IProto {
	/** 固定时间 */
	time_fixed: number;
	/** 长考时间 */
	time_add: number;
	/** 赤宝牌数量，0|3|4 */
	dora_count: number;
	/** 是否有食断 */
	shiduan: number;
	/** 初始点数 */
	init_point: number;
	/** 一位必要点数 */
	fandian: number;
	/** 是否会被击飞 */
	can_jifei: boolean;
	/** 天边，=0不计天边，否则1位达到天边就游戏结束 */
	tianbian_value: number;
	/** 立直棒供托点数 */
	liqibang_value: number;
	/** 场棒点数 */
	changbang_value: number;
	/** 1人不听罚符 */
	noting_fafu_1: number;
	/** 2人不听罚符 */
	noting_fafu_2: number;
	/** 3人不听罚符 */
	noting_fafu_3: number;
	/** 有流局满贯 */
	have_liujumanguan: boolean;
	/** 有切上满贯 */
	have_qieshangmanguan: boolean;
	/** 开启表宝牌 */
	have_biao_dora: boolean;
	/** 开启杠表宝牌 */
	have_gang_biao_dora: boolean;
	/** 大明杠、加杠宝牌即开 */
	ming_dora_immediately_open: boolean;
	/** 开启里宝牌 */
	have_li_dora: boolean;
	/** 开启杠里宝牌 */
	have_gang_li_dora: boolean;
	/** 开启四风连打流局 */
	have_sifenglianda: boolean;
	/** 开启四杠散了流局 */
	have_sigangsanle: boolean;
	/** 开启四家立直流局 */
	have_sijializhi: boolean;
	/** 开启九种九牌流局 */
	have_jiuzhongjiupai: boolean;
	/** 开启三家和了流局 */
	have_sanjiahele: boolean;
	/** 开启胡牌头跳 */
	have_toutiao: boolean;
	/** 和牌连庄 */
	have_helelianzhuang: boolean;
	/** 和了终局 */
	have_helezhongju: boolean;
	/** 听牌连庄 */
	have_tingpailianzhuang: boolean;
	/** 听牌终局 */
	have_tingpaizhongju: boolean;
	/** 开启一发 */
	have_yifa: boolean;
	/** 开启南入\西入 */
	have_nanruxiru: boolean;
	/** 精算原点必须大于等于初始点数，如果大于初始点数，则计算丘点 */
	jingsuanyuandian: number;
	/** 2位顺位马 */
	shunweima_2: number;
	/** 3位顺位马 */
	shunweima_3: number;
	/** 4位顺位马，1位的顺位马根据2、3、4位计算得出 */
	shunweima_4: number;
	/** 是否开启便捷提示 */
	bianjietishi: boolean;
	/** ai等级，1：低级（默认），2：中级 */
	ai_level: number;
	/** 3麻限定，是否有自摸损，默认为有 */
	have_zimosun: boolean;
	/** 是否禁用多倍役满（默认：否）（230214废弃，改为disable_double_yakuman && disable_composite_yakuman） */
	disable_multi_yukaman: boolean;
	/** 番缚，默认是1 */
	fanfu: number;
	/** 古役模式，默认0：不开启，1：开启 */
	guyi_mode: number;
	/** dora3模式，默认0：不开启，1：开启 */
	dora3_mode: number;
	/** 配牌open模式，默认0：不开启，1：开启 */
	begin_open_mode: number;
	/** 鹫巢模式，4张牌中有一张是暗的，其他是明的 */
	jiuchao_mode: number;
	/** 龙之目玉，默认0：不开启，1：开启 */
	muyu_mode: number;
	/** 友人房公开手牌，默认0：不开启，1：开启 */
	open_hand: number;
	/** 血战到底，默认0：不开启，1：开启 */
	xuezhandaodi: number;
	/** 换三张，默认0：不开启，1：开启 */
	huansanzhang: number;
	/** 川麻，默认0：不开启，1：开启 */
	chuanma: number;
	/** 暗牌模式，默认0：不开启，1：开启 */
	reveal_discard: number;
	/** 环境魔法卡模式，默认0：不开启，5*5*5种模式缩写为3个[1, 5]拼成的int值，eg:121代表冲锋、倒计时、通货膨胀 */
	field_spell_mode: number;
	/** 占星模式，默认0：不开启，1：开启 */
	zhanxing: number;
	/** 天命之战模式，默认0：不开启，1：开启 */
	tianming_mode: number;
	/** 禁用累计役满，累计役满按照三倍满计算（默认：否） */
	disable_leijiyiman: boolean;
	/** 是否禁用双倍役满（默认0：否, 1:开启）（四单/国13/纯九/大四） */
	disable_double_yakuman: number;
	/** 是否禁用复合役满（默认0：否, 1:开启） */
	disable_composite_yakuman: number;
	/** 是否启用食替规则（默认0：否, 1:开启）(仅限四麻) */
	enable_shiti: number;
	/** 是否允许剩余牌数小于4张的立直（默认0：否, 1:开启）(仅限四麻) */
	enable_nontsumo_liqi: number;
	/** 是否禁用连风牌4符（默认0：否, 1:开启）(仅限四麻) */
	disable_double_wind_four_fu: number;
	/** 是否禁用国士抢杠（默认0：否, 1:开启）(仅限四麻) */
	disable_angang_guoshi: number;
	/** 是否启用人和（默认0：否, 1:满贯，2：役满）(仅限四麻) */
	enable_renhe: number;
	/** 是否启用包牌拓展设置（默认0：大三元大四喜，1：大三元大四喜四杠子，2：无包牌）(仅限四麻) */
	enable_baopai_extend_settings: number;
	/** 咏唱之战模式，默认0：不开启，1：开启 */
	yongchang_mode: number;
	/** 魂之一击模式，默认0：不开启，1：开启 */
	hunzhiyiji_mode: number;
	/** 万象修罗模式，默认0：不开启，1：开启 */
	wanxiangxiuluo_mode: number;
	/** 背水之战，默认0：不开启，1：开启 */
	beishuizhizhan_mode: number;
}

/**
 * * .lq.Room
 * * 房间信息
 */
declare interface IRoom extends IProto {
	/** 房间号 */
	room_id: number;
	/** 房主账号id */
	owner_id: number;
	mode: IGameMode;
	/** 最大玩家数量 */
	max_player_count: number;
	/** 玩家信息 */
	persons: IPlayerGameView[];
	/** 就绪玩家列表 */
	ready_list: number[];
	/** 正在游戏中 */
	is_playing: boolean;
	/** 是否公开观战 */
	public_live: boolean;
	/** 机器人数量，已废弃，使用 robots */
	robot_count: number;
	/** 联赛id（如果没有就是普通房） */
	tournament_id: number;
	seq: number;
	pre_rule: string;
	/** 机器人外观数据 */
	robots: IPlayerGameView[];
	positions: number[];
}

/**
 * * .lq.GameEndResult
 * * 游戏结果
 */
declare interface IGameEndResult extends IProto {
	players: IGameEndResult_PlayerItem[];
}

/** undefined */
declare interface IGameEndResult_PlayerItem extends IProto {
	seat: number;
	/** 总分数点 */
	total_point: number;
	part_point_1: number;
	part_point_2: number;
	/** 增加的段位分 */
	grading_score: number;
	/** 增加的金币 */
	gold: number;
}

/**
 * * .lq.GameConnectInfo
 * * 游戏连接信息
 */
declare interface IGameConnectInfo extends IProto {
	/** 连接口令 */
	connect_token: string;
	/** 游戏的uuid */
	game_uuid: string;
	location: string;
}

/** .lq.ItemGainRecord */
declare interface IItemGainRecord extends IProto {
	item_id: number;
	count: number;
}

/** .lq.ItemGainRecords */
declare interface IItemGainRecords extends IProto {
	record_time: number;
	limit_source_id: number;
	records: IItemGainRecord[];
}

/** .lq.FakeRandomRecords */
declare interface IFakeRandomRecords extends IProto {
	item_id: number;
	special_item_id: number;
	gain_count: number;
	gain_history: number[];
}

/** .lq.Item */
declare interface IItem extends IProto {
	/** 道具Id */
	item_id: number;
	/** 堆叠数量 */
	stack: number;
}

/** .lq.Bag */
declare interface IBag extends IProto {
	/** 道具列表 */
	items: IItem[];
	daily_gain_record: IItemGainRecords[];
}

/** .lq.BagUpdate */
declare interface IBagUpdate extends IProto {
	/** 有变化的道具（stack为0表示删除，新增客户端判断） */
	update_items: IItem[];
	/** 每日道具获取量有更新 */
	update_daily_gain_record: IItemGainRecords[];
}

/** .lq.RewardSlot */
declare interface IRewardSlot extends IProto {
	id: number;
	count: number;
}

/**
 * * .lq.OpenResult
 * * 打开道具，抽卡等结果项目
 */
declare interface IOpenResult extends IProto {
	/** 奖励内容 */
	reward: IRewardSlot;
	/** 替换内容（如果非空的话） */
	replace: IRewardSlot;
}

/**
 * * .lq.RewardPlusResult
 * * 奖励增加结果
 */
declare interface IRewardPlusResult extends IProto {
	/** 期望加的id */
	id: number;
	/** 期望加的数量 */
	count: number;
	/** 兑换（空表示无兑换） */
	exchange: IRewardPlusResult_Exchange;
}

/** undefined */
declare interface IRewardPlusResult_Exchange extends IProto {
	/** 实际加的id */
	id: number;
	/** 实际加的数量 */
	count: number;
	/** 有几个被兑换了（存在不完全兑换，即都加了的情况） */
	exchange: number;
}

/** .lq.ExecuteReward */
declare interface IExecuteReward extends IProto {
	reward: IRewardSlot;
	replace: IRewardSlot;
	replace_count: number;
}

/** .lq.ExecuteResult */
declare interface IExecuteResult extends IProto {
	id: number;
	count: number;
}

/** .lq.I18nContext */
declare interface II18nContext extends IProto {
	lang: string;
	context: string;
}

/** .lq.Mail */
declare interface IMail extends IProto {
	/** 邮件id */
	mail_id: number;
	/** 邮件状态：0=new 1=read */
	state: number;
	/** 是否已经领取附件 */
	take_attachment: boolean;
	/** 标题 */
	title: string;
	/** 正文内容 */
	content: string;
	/** 附件 */
	attachments: IRewardSlot[];
	/** 收取时间 */
	create_time: number;
	/** 过期时间 */
	expire_time: number;
	/** 系统邮件ID */
	reference_id: number;
	/** 多语言标题 */
	title_i18n: II18nContext[];
	/** 多语言正文 */
	content_i18n: II18nContext[];
	/** 邮件模板ID */
	template_id: number;
}

/**
 * * .lq.AchievementProgress
 * * 成就进度
 */
declare interface IAchievementProgress extends IProto {
	/** 成就id */
	id: number;
	/** 进度计数 */
	counter: number;
	/** 是否已经达成 */
	achieved: boolean;
	/** 是否已经领取过奖励 */
	rewarded: boolean;
	/** 达成时间 */
	achieved_time: number;
}

/** .lq.BadgeAchieveProgress */
declare interface IBadgeAchieveProgress extends IProto {
	/** 勋章id */
	id: number;
	/** 完成进度统计 */
	counter: number;
	/** 达成次数 */
	achieved_counter: number;
	/** 首次完成时间戳 */
	achieved_time: number;
}

/** .lq.AccountStatisticByGameMode */
declare interface IAccountStatisticByGameMode extends IProto {
	/** 模式 */
	mode: number;
	/** 总场次 */
	game_count_sum: number;
	/** 得位次数（按1，2，3，4来） */
	game_final_position: number[];
	/** 被击飞次数 */
	fly_count: number;
	/** 金币获取数量（有正负） */
	gold_earn_sum: number;
	/** 总局数 */
	round_count_sum: number;
	/** 打点总和 */
	dadian_sum: number;
	/** 结束方式统计 */
	round_end: IAccountStatisticByGameMode_RoundEndData[];
	/** 副露次数 */
	ming_count_sum: number;
	/** 立直次数 */
	liqi_count_sum: number;
	/** 总巡数 */
	xun_count_sum: number;
	/** 最大连庄 */
	highest_lianzhuang: number;
	/** pt分获取总和 add at 2018-08-06 */
	score_earn_sum: number;
	rank_score: IAccountStatisticByGameMode_RankScore[];
}

/** undefined */
declare interface IAccountStatisticByGameMode_RoundEndData extends IProto {
	/** 每局结束方式：自摸、荣和、放铳等 */
	type: number;
	/** 次数之和 */
	sum: number;
}

/** undefined */
declare interface IAccountStatisticByGameMode_RankScore extends IProto {
	/** 顺位 */
	rank: number;
	/** pt分获取总和 */
	score_sum: number;
	count: number;
}

/** .lq.AccountStatisticByFan */
declare interface IAccountStatisticByFan extends IProto {
	fan_id: number;
	sum: number;
}

/**
 * * .lq.AccountFanAchieved
 * * 番种达成
 */
declare interface IAccountFanAchieved extends IProto {
	/** 1=四人麻将 2=三人麻将 */
	mahjong_category: number;
	fan: IAccountStatisticByFan[];
	/** 流局满贯 */
	liujumanguan: number;
}

/** .lq.AccountDetailStatistic */
declare interface IAccountDetailStatistic extends IProto {
	game_mode: IAccountStatisticByGameMode[];
	/** 2019.01.03 为区分三人麻将和四人麻将，2不使用，使用4 */
	fan: IAccountStatisticByFan[];
	/** 流局满贯 */
	liujumanguan: number;
	fan_achieved: IAccountFanAchieved[];
}

/**
 * * .lq.AccountDetailStatisticByCategory
 * * 老结构（不使用，但是为了正确解析要保留）
 */
declare interface IAccountDetailStatisticByCategory extends IProto {
	/** 分类 */
	category: number;
	/** 详细统计数据 */
	detail_statistic: IAccountDetailStatistic;
}

/** .lq.AccountDetailStatisticV2 */
declare interface IAccountDetailStatisticV2 extends IProto {
	/** 好友 */
	friend_room_statistic: IAccountDetailStatistic;
	/** 段位 */
	rank_statistic: IAccountDetailStatisticV2_RankStatistic;
	customized_contest_statistic: IAccountDetailStatisticV2_CustomizedContestStatistic;
	/** 休闲匹配 */
	leisure_match_statistic: IAccountDetailStatistic;
	/** 试炼赛 */
	challenge_match_statistic: IAccountDetailStatisticV2_ChallengeStatistic;
	/** 活动场 */
	activity_match_statistic: IAccountDetailStatistic;
	/** AB赛 */
	ab_match_statistic: IAccountDetailStatistic;
}

/**
 * * undefined
 * * 段位赛统计数据
 */
declare interface IAccountDetailStatisticV2_RankStatistic extends IProto {
	/** 通算 */
	total_statistic: IAccountDetailStatisticV2_RankData;
	/** 按月 */
	month_statistic: IAccountDetailStatisticV2_RankData;
	/** 按月刷新的时间 */
	month_refresh_time: number;
}

/**
 * * undefined
 * * 自定义比赛统计数据
 */
declare interface IAccountDetailStatisticV2_CustomizedContestStatistic extends IProto {
	total_statistic: IAccountDetailStatistic;
	month_statistic: IAccountDetailStatistic;
	/** 按月刷新的时间 */
	month_refresh_time: number;
}

/**
 * * undefined
 * * 试炼赛比赛统计数据
 */
declare interface IAccountDetailStatisticV2_ChallengeStatistic extends IProto {
	all_season: IAccountDetailStatistic;
	season_data_list: IAccountDetailStatisticV2_SeasonData[];
}

/** undefined */
declare interface IAccountDetailStatisticV2_RankData extends IProto {
	/** 所有级别的统计数据（总览） */
	all_level_statistic: IAccountDetailStatistic;
	/** 按照某个级别分类的统计数据 */
	level_data_list: IAccountDetailStatisticV2_RankLevelData[];
}

/** undefined */
declare interface IAccountDetailStatisticV2_RankLevelData extends IProto {
	rank_level: number;
	statistic: IAccountDetailStatistic;
}

/** undefined */
declare interface IAccountDetailStatisticV2_SeasonData extends IProto {
	season_id: number;
	statistic: IAccountDetailStatistic;
}

/**
 * * .lq.AccountShiLian
 * * 试炼信息
 */
declare interface IAccountShiLian extends IProto {
	/** 试炼阶段：[1,5] */
	step: number;
	/** 0=当前阶段进行中 1=当前阶段成功 2=当前阶段失败 */
	state: number;
}

/**
 * * .lq.ClientDeviceInfo
 * * 客户端设备信息
 */
declare interface IClientDeviceInfo extends IProto {
	/** 平台： pc, mobile, console */
	platform: string;
	/** 硬件： pc, mac, switch, play_station, phone, tablet, tv */
	hardware: string;
	/** 操作系统： windows, macOS, linux, ios, android, wp */
	os: string;
	/** 操作系统版本信息： win10, win8, ios13, ios14 ... */
	os_version: string;
	is_browser: boolean;
	/** 具体浏览器 */
	software: string;
	/** 发售平台：steam, eshop, mycard, google_play, apple_store */
	sale_platform: string;
	/** 硬件厂商：apple, huawei, xiaomi */
	hardware_vendor: string;
	/** 型号：LG-H9300S */
	model_number: string;
	screen_width: number;
	screen_height: number;
	user_agent: string;
	/** 屏幕类型 1-普通屏幕  2-触摸屏幕 */
	screen_type: number;
}

/** .lq.ClientVersionInfo */
declare interface IClientVersionInfo extends IProto {
	/** 热更资源版本 */
	resource: string;
	/** app用，C#版本 */
	package: string;
}

declare const enum GamePlayerState {
	/** 无连接 */
	NULL = 0,
	/** 验证成功 */
	AUTH = 1,
	/** 正在同步数据 */
	SYNCING = 2,
	/** 准备就绪 */
	READY = 3,
}

/**
 * * .lq.Announcement
 * * 单条公告
 */
declare interface IAnnouncement extends IProto {
	id: number;
	title: string;
	content: string;
	header_image: string;
}

/** .lq.TaskProgress */
declare interface ITaskProgress extends IProto {
	/** 任务类型 */
	id: number;
	/** 进度计数 */
	counter: number;
	/** 是否已经达成 */
	achieved: boolean;
	/** 是否已经领取奖励 */
	rewarded: boolean;
	/** 是否已经失败 */
	failed: boolean;
	/** 奖励时间 */
	rewarded_time: number;
}

/** .lq.GameConfig */
declare interface IGameConfig extends IProto {
	/** 1=好友房 2=匹配 3=比赛房（临时）  4=自定义比赛 */
	category: number;
	mode: IGameMode;
	meta: IGameMetaData;
}

/** .lq.RPGState */
declare interface IRPGState extends IProto {
	player_damaged: number;
	monster_damaged: number;
	monster_seq: number;
}

/** .lq.RPGActivity */
declare interface IRPGActivity extends IProto {
	activity_id: number;
	last_show_uuid: string;
	last_played_uuid: string;
	current_state: IRPGState;
	last_show_state: IRPGState;
	received_rewards: number[];
	last_show_id: number;
}

/** .lq.ActivityArenaData */
declare interface IActivityArenaData extends IProto {
	win_count: number;
	lose_count: number;
	activity_id: number;
	enter_time: number;
	daily_enter_count: number;
	daily_enter_time: number;
	max_win_count: number;
	total_win_count: number;
}

/** .lq.FeedActivityData */
declare interface IFeedActivityData extends IProto {
	activity_id: number;
	feed_count: number;
	friend_receive_data: IFeedActivityData_CountWithTimeData;
	friend_send_data: IFeedActivityData_CountWithTimeData;
	gift_inbox: IFeedActivityData_GiftBoxData[];
}

/** undefined */
declare interface IFeedActivityData_CountWithTimeData extends IProto {
	count: number;
	last_update_time: number;
}

/** undefined */
declare interface IFeedActivityData_GiftBoxData extends IProto {
	id: number;
	item_id: number;
	count: number;
	from_account_id: number;
	time: number;
	received: number;
}

/** .lq.SegmentTaskProgress */
declare interface ISegmentTaskProgress extends IProto {
	/** 任务类型 */
	id: number;
	/** 进度计数 */
	counter: number;
	/** 是否已经达成 */
	achieved: boolean;
	/** 是否已经领取奖励 */
	rewarded: boolean;
	/** 是否已经失败 */
	failed: boolean;
	reward_count: number;
	achieved_count: number;
}

/** .lq.MineActivityData */
declare interface IMineActivityData extends IProto {
	/** 已经挖开的格子 */
	dig_point: IPoint[];
	/** 玩家能看到的奖励 */
	map: IMineReward[];
	/** 活动ID */
	id: number;
}

/** .lq.AccountActivityUpdate */
declare interface IAccountActivityUpdate extends IProto {
	mine_data: IMineActivityData[];
	rpg_data: IRPGActivity[];
	feed_data: IActivityFeedData[];
	spot_data: IActivitySpotData[];
	friend_gift_data: IActivityFriendGiftData[];
	upgrade_data: IActivityUpgradeData[];
	gacha_data: IActivityGachaUpdateData[];
	simulation_data: IActivitySimulationData[];
	combining_data: IActivityCombiningLQData[];
	village_data: IActivityVillageData[];
	festival_data: IActivityFestivalData[];
	island_data: IActivityIslandData[];
	/** repeated lq.ActivityAmuletData amulet_data = 13; // 青云之志数据不再储存在 account blob 中 */
	story_data: IActivityStoryData[];
	choose_up_data: IActivityChooseUpData[];
	simulation_v2_data: ISimulationV2Data[];
}

/** .lq.ActivityCombiningWorkbench */
declare interface IActivityCombiningWorkbench extends IProto {
	craft_id: number;
	pos: number;
}

/** .lq.ActivityCombiningMenuData */
declare interface IActivityCombiningMenuData extends IProto {
	menu_group: number;
	generated: IActivityCombiningMenuData_MenuRequire[];
	multi_generated: IActivityCombiningMenuData_MenuRequire[];
}

/** undefined */
declare interface IActivityCombiningMenuData_MenuRequire extends IProto {
	level: number;
	count: number;
}

/** .lq.ActivityCombiningOrderData */
declare interface IActivityCombiningOrderData extends IProto {
	id: number;
	pos: number;
	/** uint32 craft_id = 3; // 订单需求物品id，已废弃 */
	unlock_day: number;
	/** 角色id，仅供前端显示用 */
	char_id: number;
	/** 已经完成的订单物品id */
	finished_craft_id: number[];
	/** 订单需求物品id */
	craft_id: number[];
}

/** .lq.ActivityCombiningLQData */
declare interface IActivityCombiningLQData extends IProto {
	activity_id: number;
	workbench: IActivityCombiningWorkbench[];
	orders: IActivityCombiningOrderData[];
	recycle_bin: IActivityCombiningWorkbench;
	unlocked_craft: number[];
	/** 当天已经获取的小费数量 */
	daily_bonus_count: number;
}

/** .lq.ActivityCombiningPoolData */
declare interface IActivityCombiningPoolData extends IProto {
	group: number;
	count: number;
}

/** .lq.ActivityCombiningData */
declare interface IActivityCombiningData extends IProto {
	activity_id: number;
	workbench: IActivityCombiningWorkbench[];
	orders: IActivityCombiningOrderData[];
	recycle_bin: IActivityCombiningWorkbench;
	menu: IActivityCombiningMenuData;
	current_order_id: number;
	bonus: IActivityCombiningData_BonusData;
	unlocked_craft: number[];
	craft_pool: IActivityCombiningPoolData[];
	order_pool: IActivityCombiningPoolData[];
}

/** undefined */
declare interface IActivityCombiningData_BonusData extends IProto {
	count: number;
	update_time: number;
}

/** .lq.VillageReward */
declare interface IVillageReward extends IProto {
	id: number;
	count: number;
}

/** .lq.VillageBuildingData */
declare interface IVillageBuildingData extends IProto {
	id: number;
	/** 待领取奖励 */
	reward: IVillageReward[];
	/** 工人位置 */
	workers: number[];
}

/** .lq.VillageTripData */
declare interface IVillageTripData extends IProto {
	start_round: number;
	dest_id: number;
	/** 待领取奖励 */
	reward: IVillageReward[];
	level: number;
	info: IVillageTargetInfo;
}

/** .lq.VillageTaskData */
declare interface IVillageTaskData extends IProto {
	id: number;
	completed_count: number;
}

/** .lq.VillageTargetInfo */
declare interface IVillageTargetInfo extends IProto {
	nickname: string;
	avatar: number;
	avatar_frame: number;
	title: number;
	verified: number;
}

/** .lq.ActivityVillageData */
declare interface IActivityVillageData extends IProto {
	activity_id: number;
	buildings: IVillageBuildingData[];
	trip: IVillageTripData[];
	tasks: IVillageTaskData[];
	/** 总回合数 */
	round: number;
}

/** .lq.TimeCounterData */
declare interface ITimeCounterData extends IProto {
	count: number;
	update_time: number;
}

/** .lq.SignedTimeCounterData */
declare interface ISignedTimeCounterData extends IProto {
	count: number;
	update_time: number;
}

/** .lq.FestivalProposalData */
declare interface IFestivalProposalData extends IProto {
	id: number;
	proposal_id: number;
	/** 点位，从1开始 */
	pos: number;
}

/** .lq.ActivityFestivalData */
declare interface IActivityFestivalData extends IProto {
	activity_id: number;
	level: number;
	proposal_list: IFestivalProposalData[];
	event_list: number[];
	buy_record: ISignedTimeCounterData;
}

/** .lq.SimulationV2Data */
declare interface ISimulationV2Data extends IProto {
	activity_id: number;
	/** 赛季（一轮游戏）信息 */
	season: ISimulationV2SeasonData;
	/** 历史最高分 */
	highest_score: number;
	/** 场外升级数据 */
	upgrade: ISimulationV2Ability;
	/** 已经触发过的事件，用于判断是否显示new标识 */
	event_pool: number[];
	/** 玩过的完整赛季数量（用来判断 highest_score 是否为空） */
	season_count: number;
}

/** .lq.IslandBagItemData */
declare interface IIslandBagItemData extends IProto {
	id: number;
	pos: number[];
	rotate: number;
	goods_id: number;
	price: number;
}

/** .lq.IslandBagData */
declare interface IIslandBagData extends IProto {
	id: number;
	matrix: string;
	items: IIslandBagItemData[];
}

/** .lq.IslandGoodsData */
declare interface IIslandGoodsData extends IProto {
	goods_id: number;
	count: number;
	update_time: number;
}

/** .lq.IslandZoneData */
declare interface IIslandZoneData extends IProto {
	id: number;
	/** 海岛币数量 */
	currency_used: ISignedTimeCounterData;
	/** 剩余商品 */
	goods_records: IIslandGoodsData[];
}

/** .lq.ActivityIslandData */
declare interface IActivityIslandData extends IProto {
	activity_id: number;
	/** 当前所在地区id */
	zone: number;
	/** 背包数据 */
	bags: IIslandBagData[];
	zones: IIslandZoneData[];
}

/** .lq.ActivityFeedData */
declare interface IActivityFeedData extends IProto {
	activity_id: number;
	feed_count: number;
	friend_receive_data: IActivityFeedData_CountWithTimeData;
	friend_send_data: IActivityFeedData_CountWithTimeData;
	gift_inbox: IActivityFeedData_GiftBoxData[];
	max_inbox_id: number;
}

/** undefined */
declare interface IActivityFeedData_CountWithTimeData extends IProto {
	count: number;
	last_update_time: number;
}

/** undefined */
declare interface IActivityFeedData_GiftBoxData extends IProto {
	id: number;
	item_id: number;
	count: number;
	from_account_id: number;
	time: number;
	received: number;
}

/** .lq.UnlockedStoryData */
declare interface IUnlockedStoryData extends IProto {
	story_id: number;
	finished_ending: number[];
	rewarded_ending: number[];
	finish_rewarded: number;
	all_finish_rewarded: number;
}

/** .lq.ActivityStoryData */
declare interface IActivityStoryData extends IProto {
	activity_id: number;
	/** 已解锁故事 */
	unlocked_story: IUnlockedStoryData[];
}

/** .lq.ActivityProgressRewardData */
declare interface IActivityProgressRewardData extends IProto {
	activity_id: number;
	rewarded_progresses: number[];
}

/** .lq.ActivityChooseUpData */
declare interface IActivityChooseUpData extends IProto {
	activity_id: number;
	chest_id: number;
	selection: number;
	/** 是否已经获得up标的结束活动 */
	is_end: number;
}

/** .lq.ActivityFriendGiftData */
declare interface IActivityFriendGiftData extends IProto {
	activity_id: number;
	max_inbox_id: number;
	receive_data: IActivityFriendGiftData_CountWithTimeData;
	send_data: IActivityFriendGiftData_CountWithTimeData;
	gift_inbox: IActivityFriendGiftData_GiftBoxData[];
}

/** undefined */
declare interface IActivityFriendGiftData_CountWithTimeData extends IProto {
	count: number;
	last_update_time: number;
	send_friend_id: number[];
}

/** undefined */
declare interface IActivityFriendGiftData_GiftBoxData extends IProto {
	id: number;
	item_id: number;
	count: number;
	from_account_id: number;
	time: number;
	received: number;
}

/** .lq.ActivityUpgradeData */
declare interface IActivityUpgradeData extends IProto {
	activity_id: number;
	groups: IActivityUpgradeData_LevelGroup[];
	received_level: number;
}

/** undefined */
declare interface IActivityUpgradeData_LevelGroup extends IProto {
	group_id: number;
	level: number;
}

/** .lq.GachaRecord */
declare interface IGachaRecord extends IProto {
	id: number;
	count: number;
}

/** .lq.ActivityGachaData */
declare interface IActivityGachaData extends IProto {
	activity_id: number;
	gained: IGachaRecord[];
}

/** .lq.ActivityGachaUpdateData */
declare interface IActivityGachaUpdateData extends IProto {
	activity_id: number;
	gained: IGachaRecord[];
	remain_count: number;
}

/**
 * * .lq.ActivitySimulationGameRecordMessage
 * * 查阅文档 https://confluence.catfoodstudio.net:5443/pages/viewpage.action?pageId=95060968
 */
declare interface IActivitySimulationGameRecordMessage extends IProto {
	type: number;
	args: number[];
	xun: number;
}

/** .lq.ActivitySimulationGameRecord */
declare interface IActivitySimulationGameRecord extends IProto {
	/** 从1开始 */
	round: number;
	/** 角色ID */
	seats: number[];
	/** 只有一姬参与的才有uuid */
	uuid: string;
	/** 前端根据开始时间决定观战/牌谱 */
	start_time: number;
	scores: number[];
	/** 对局文字信息，不会在 fetchAccountActivityData 中返回给前端，需要通过 fetchSimulationGameRecord 获取 */
	messages: IActivitySimulationGameRecordMessage[];
}

/** .lq.ActivitySimulationDailyContest */
declare interface IActivitySimulationDailyContest extends IProto {
	day: number;
	characters: number[];
	records: IActivitySimulationGameRecord[];
	/** 当前轮次,今日如果没有参加过任何对局则是0 */
	round: number;
}

/** .lq.ActivitySimulationTrainRecord */
declare interface IActivitySimulationTrainRecord extends IProto {
	time: number;
	modify_stats: number[];
	final_stats: number[];
	type: number;
}

/** .lq.ActivitySimulationData */
declare interface IActivitySimulationData extends IProto {
	activity_id: number;
	stats: number[];
	stamina_update_time: number;
	daily_contest: IActivitySimulationDailyContest[];
	train_records: IActivitySimulationTrainRecord[];
}

/** .lq.ActivitySpotData */
declare interface IActivitySpotData extends IProto {
	activity_id: number;
	spots: IActivitySpotData_SpotData[];
}

/** undefined */
declare interface IActivitySpotData_SpotData extends IProto {
	unique_id: number;
	rewarded: number;
	unlocked_ending: number[];
	unlocked: number;
}

/**
 * * .lq.AccountActiveState
 * * 玩家活动状态信息
 */
declare interface IAccountActiveState extends IProto {
	account_id: number;
	/** 登录时间 */
	login_time: number;
	/** 登出时间 */
	logout_time: number;
	is_online: boolean;
	/** 正在游戏中数据（没有则为null） */
	playing: IAccountPlayingGame;
}

/** .lq.Friend */
declare interface IFriend extends IProto {
	base: IPlayerBaseView;
	state: IAccountActiveState;
	remark: string;
}

/**
 * * .lq.Point
 * * 坐标点信息
 */
declare interface IPoint extends IProto {
	x: number;
	y: number;
}

/** .lq.MineReward */
declare interface IMineReward extends IProto {
	/** 奖励左上角坐标 */
	point: IPoint;
	/** 奖励ID */
	reward_id: number;
	/** 是否已经完全挖开，并领取到奖励 */
	received: boolean;
}

/**
 * * .lq.GameLiveUnit
 * * 游戏直播的基础结构
 */
declare interface IGameLiveUnit extends IProto {
	/** 距离游戏开始经过的毫秒数 */
	timestamp: number;
	/** 分类：1=liqi-game 2=out-game */
	action_category: number;
	/** 序列化后的数据 */
	action_data: number[];
}

/**
 * * .lq.GameLiveSegment
 * * 游戏直播分片文件结构
 */
declare interface IGameLiveSegment extends IProto {
	actions: IGameLiveUnit[];
}

/**
 * * .lq.GameLiveSegmentUri
 * * 游戏直播分片文件定位信息
 */
declare interface IGameLiveSegmentUri extends IProto {
	segment_id: number;
	segment_uri: string;
}

/**
 * * .lq.GameLiveHead
 * * 游戏直播头部结构
 */
declare interface IGameLiveHead extends IProto {
	uuid: string;
	start_time: number;
	game_config: IGameConfig;
	players: IPlayerGameView[];
	/** 东南西北（保证4个） */
	seat_list: number[];
}

/**
 * * .lq.GameNewRoundState
 * * 直播的时候新回合的状态同步数据
 */
declare interface IGameNewRoundState extends IProto {
	/** 东南西北的人的状态 */
	seat_states: number[];
}

/**
 * * .lq.GameEndAction
 * * 直播中游戏结束标记
 */
declare interface IGameEndAction extends IProto {
	/** 2=正常结束 3=游戏中断 */
	state: number;
}

/**
 * * .lq.GameNoopAction
 * * 空事件
 */
declare interface IGameNoopAction extends IProto {
}

/**
 * * .lq.CommentItem
 * * 留言板单个条目
 */
declare interface ICommentItem extends IProto {
	comment_id: number;
	/** 留言时间 */
	timestamp: number;
	/** 留言人 */
	commenter: IPlayerBaseView;
	/** 内容 */
	content: string;
	is_banned: number;
}

/**
 * * .lq.RollingNotice
 * * 滚动公告
 */
declare interface IRollingNotice extends IProto {
	/** uint32 id = 1; // 设计修改，同一时间只有一条滚动公告，id参数已经失去意义 */
	content: string;
	/** 开始时间 */
	start_time: number;
	/** 结束时间 */
	end_time: number;
	/** 重复间隔 */
	repeat_interval: number;
	/** 倒计时数列（以配置时间段中的”结束时间“为基准） */
	repeat_time: number[];
	/** 当前配置模式（1表示"固定时间间隔模式"，2表示"递进时间间隔模式"） */
	repeat_type: number;
}

/**
 * * .lq.MaintainNotice
 * * 维护公告
 */
declare interface IMaintainNotice extends IProto {
	/** 维护时间（关服时间） */
	maintain_time: number;
}

/**
 * * .lq.BillingGoods
 * * 商品定义
 */
declare interface IBillingGoods extends IProto {
	/** 商品ID */
	id: string;
	/** 商品名称 */
	name: string;
	/** 商品描述 */
	desc: string;
	/** 商品图标 */
	icon: string;
	/** 购买资源ID */
	resource_id: number;
	/** 购买资源数量 */
	resource_count: number;
}

/**
 * * .lq.BillShortcut
 * * 购买商品验证信息
 */
declare interface IBillShortcut extends IProto {
	/** 商品ID */
	id: number;
	/** 商品数量 */
	count: number;
	/** 商品价格 */
	dealPrice: number;
}

/**
 * * .lq.BillingProduct
 * * 上架商品
 */
declare interface IBillingProduct extends IProto {
	/** 商品内容 */
	goods: IBillingGoods;
	/** 货币标准符号 */
	currency_code: string;
	/** 价格（根据货币标准符号确定最小价格单位） */
	currency_price: number;
	/** 排序权重 */
	sort_weight: number;
}

/**
 * * .lq.Character
 * * 人物角色
 */
declare interface ICharacter extends IProto {
	/** 角色id */
	charid: number;
	/** 羁绊等级 */
	level: number;
	/** 好感度 */
	exp: number;
	/** 外观设置 */
	views: IViewSlot[];
	/** 皮肤设置 */
	skin: number;
	/** 是否已经突破过了 */
	is_upgraded: boolean;
	extra_emoji: number[];
	rewarded_level: number[];
}

/**
 * * .lq.BuyRecord
 * * 购买记录
 */
declare interface IBuyRecord extends IProto {
	id: number;
	count: number;
}

/**
 * * .lq.ZHPShop
 * * 杂货铺
 */
declare interface IZHPShop extends IProto {
	/** 商品列表 */
	goods: number[];
	/** 玩家已经购买的货物次数（有数量限制的货物限定） */
	buy_records: IBuyRecord[];
	/** 免费的 */
	free_refresh: IZHPShop_RefreshCount;
	/** 花钱的 */
	cost_refresh: IZHPShop_RefreshCount;
}

/** undefined */
declare interface IZHPShop_RefreshCount extends IProto {
	/** 已经使用的刷新次数 */
	count: number;
	/** 刷新次数上限 */
	limit: number;
}

/**
 * * .lq.MonthTicketInfo
 * * 月卡信息
 */
declare interface IMonthTicketInfo extends IProto {
	/** 月卡ID */
	id: number;
	/** 月卡结束时间 */
	end_time: number;
	/** 上次领取时间 */
	last_pay_time: number;
}

/**
 * * .lq.ShopInfo
 * * 商店信息
 */
declare interface IShopInfo extends IProto {
	/** 杂货铺 */
	zhp: IZHPShop;
	/** 玩家已经购买的货物次数（有数量限制的货物限定，非杂货铺） */
	buy_records: IBuyRecord[];
	/** 上次刷新时间 */
	last_refresh_time: number;
}

/** .lq.ChangeNicknameRecord */
declare interface IChangeNicknameRecord extends IProto {
	/** 原名字 */
	from: string;
	/** 新名字 */
	to: string;
	/** 改名时间 */
	time: number;
}

/** .lq.ServerSettings */
declare interface IServerSettings extends IProto {
	/**
	 * * uint32 open_payment = 1; // 0=不开启 1=开启
	 * * string payment_info = 2; // 充值文本
	 */
	payment_setting: IPaymentSetting;
	payment_setting_v2: IPaymentSettingV2;
	/** 昵称替换功能 */
	nickname_setting: INicknameSetting;
}

/** .lq.NicknameSetting */
declare interface INicknameSetting extends IProto {
	/** 昵称替换功能是否打开 */
	enable: number;
	/** 替换昵称列表 */
	nicknames: string[];
}

/** .lq.PaymentSettingV2 */
declare interface IPaymentSettingV2 extends IProto {
	/** 是否显示支付页面 */
	open_payment: number;
	payment_platforms: IPaymentSettingV2_PaymentSettingUnit[];
}

/** undefined */
declare interface IPaymentSettingV2_PaymentMaintain extends IProto {
	start_time: number;
	end_time: number;
	goods_click_action: number;
	goods_click_text: string;
	enabled_channel: string[];
}

/** undefined */
declare interface IPaymentSettingV2_PaymentSettingUnit extends IProto {
	platform: string;
	is_show: boolean;
	goods_click_action: number;
	/** 提示文本 */
	goods_click_text: string;
	maintain: IPaymentSettingV2_PaymentMaintain;
	enable_for_frozen_account: boolean;
	/** 已废弃，json字符串，每个支付渠道的私有的设置，详细配置如下： */
	extra_data: string;
	/**
	 * * platform = yostar
	 * * {
	 * * disabled_order_type: number[]  // 暂时禁用的订单类型 1-googleplay 2-ipa 3-nintendo 4-krgoogleplay 5-kriap
	 * * }
	 */
	enabled_channel: string[];
}

/** .lq.PaymentSetting */
declare interface IPaymentSetting extends IProto {
	/** 0=不开启 1=开启 */
	open_payment: number;
	/** 0=弹框提示 1=显示支付二维码下面 */
	payment_info_show_type: number;
	/** 充值文本 */
	payment_info: string;
	wechat: IPaymentSetting_WechatData;
	alipay: IPaymentSetting_AlipayData;
}

/** undefined */
declare interface IPaymentSetting_WechatData extends IProto {
	disable_create: boolean;
	/** 0=原生 1=汇潮 */
	payment_source_platform: number;
	enable_credit: boolean;
}

/** undefined */
declare interface IPaymentSetting_AlipayData extends IProto {
	disable_create: boolean;
	/** 0=原生 1=汇潮 */
	payment_source_platform: number;
}

/** .lq.AccountSetting */
declare interface IAccountSetting extends IProto {
	key: number;
	value: number;
}

/**
 * * .lq.ChestData
 * * 宝箱
 */
declare interface IChestData extends IProto {
	/** 宝箱Id */
	chest_id: number;
	/** 总共开启的次数 */
	total_open_count: number;
	/** 消耗的次数 */
	consume_count: number;
	/** 脸黑次数 */
	face_black_count: number;
}

/** .lq.ChestDataV2 */
declare interface IChestDataV2 extends IProto {
	/** 宝箱Id */
	chest_id: number;
	/** 总共开启的次数，单纯做记录 */
	total_open_count: number;
	/** 脸黑次数 */
	face_black_count: number;
	/** 单抽 */
	ticket_face_black_count: number;
}

/** .lq.FaithData */
declare interface IFaithData extends IProto {
	faith_id: number;
	/** 总共开启的次数 */
	total_open_count: number;
	/** 消耗的次数 */
	consume_count: number;
	/** 后台调整次数,可以为负数 */
	modify_count: number;
}

/**
 * * .lq.CustomizedContestBase
 * * 包含搜索排序的基础信息，同时确保数据容量不会很大，这样可以一次性给多个到前端
 */
declare interface ICustomizedContestBase extends IProto {
	unique_id: number;
	contest_id: number;
	contest_name: string;
	/** 1-尚未开始 2-正在进行 3-已结束 */
	state: number;
	creator_id: number;
	create_time: number;
	start_time: number;
	finish_time: number;
	/** 公开 */
	open: boolean;
	/** 0-普通赛事 1-官方赛事 */
	contest_type: number;
	/** 对外公告 */
	public_notice: string;
	check_state: number;
	checking_name: string;
	season_type: number;
	show_team_rank: boolean;
}

/** .lq.CustomizedContestExtend */
declare interface ICustomizedContestExtend extends IProto {
	unique_id: number;
	/** 对外公开公告 */
	public_notice: string;
}

/**
 * * .lq.CustomizedContestAbstract
 * * 自定义比赛摘要信息
 */
declare interface ICustomizedContestAbstract extends IProto {
	unique_id: number;
	contest_id: number;
	contest_name: string;
	/** 1-尚未开始 2-正在进行 3-已结束 */
	state: number;
	creator_id: number;
	create_time: number;
	start_time: number;
	finish_time: number;
	/** 公开 */
	open: boolean;
	/** 对外公开公告 */
	public_notice: string;
	/** 0-普通赛事 1-官方赛事 */
	contest_type: number;
}

/**
 * * .lq.CustomizedContestDetail
 * * 自定义比赛详细信息
 */
declare interface ICustomizedContestDetail extends IProto {
	unique_id: number;
	contest_id: number;
	contest_name: string;
	state: number;
	creator_id: number;
	create_time: number;
	start_time: number;
	finish_time: number;
	/** 公开 */
	open: boolean;
	/** 排名显示方式 */
	rank_rule: number;
	/** 游戏设定 */
	game_mode: IGameMode;
	private_notice: string;
	/** 是否能添加实时OB */
	observer_switch: number;
	/** 是否允许对战表情 */
	emoji_switch: number;
	/** 赛事类型 */
	contest_type: number;
	disable_broadcast: number;
	signup_start_time: number;
	signup_end_time: number;
	/** 报名类型 1 - 关闭报名 2 - 自动报名 3 - 开启报名 */
	signup_type: number;
	/** 0=非自动匹配 1=自动匹配 */
	auto_match: number;
	/** 赛季模式 0：个人赛 1：团队赛 */
	season_type: number;
	/** 是否公开团队排名 */
	show_team_rank: boolean;
}

/**
 * * .lq.CustomizedContestPlayerReport
 * * 自定义比赛参与报告（成绩）
 */
declare interface ICustomizedContestPlayerReport extends IProto {
	/**
	 * * 排名显示方式
	 * * 1 最近3场
	 * * 2 最近5场
	 * * 12 最佳2场
	 * * 13 最佳3场
	 * * 14 最佳4场
	 * * 15 最佳5场
	 */
	rank_rule: number;
	/** 排名 */
	rank: number;
	/** 精算点 (x1000) */
	point: number;
	/** 最近的比赛位次（根据rank_rule做判断） */
	game_ranks: number[];
	/** 已经参与的对局次数 */
	total_game_count: number;
}

/**
 * * .lq.RecordGame
 * * 牌谱记录头部信息
 */
declare interface IRecordGame extends IProto {
	uuid: string;
	start_time: number;
	end_time: number;
	/**
	 * * 2018.07.15 xienanjie 使用config替换mode，客户端需要自己检测是否有config字段
	 * * GameMode mode = 4;
	 */
	config: IGameConfig;
	accounts: IRecordGame_AccountInfo[];
	result: IGameEndResult;
	robots: IRecordGame_AccountInfo[];
	standard_rule: number;
}

/** undefined */
declare interface IRecordGame_AccountInfo extends IProto {
	account_id: number;
	seat: number;
	nickname: string;
	avatar_id: number;
	character: ICharacter;
	title: number;
	level: IAccountLevel;
	level3: IAccountLevel;
	avatar_frame: number;
	verified: number;
	views: IViewSlot[];
}

/**
 * * .lq.RecordListEntry
 * * 牌谱列表单项信息
 */
declare interface IRecordListEntry extends IProto {
	/** 版本（202408表示新版牌谱列表，0表示老版本列表） */
	version: number;
	uuid: string;
	/** 对局开始时间 */
	start_time: number;
	/** 对局结束时间（时间范围筛选条件按照这个字段来） */
	end_time: number;
	/** 标签 */
	tag: number;
	/** 子标签，根据tag来 tag=1/3 就是matchmode.id，tag=2/4 就是mode.mode */
	subtag: number;
	/** 包含真实玩家或者机器人 */
	players: IRecordPlayerResult[];
	/** 是否是标准立直规则（1 - 可以MAKA分析） */
	standard_rule: number;
}

/** .lq.RecordPlayerResult */
declare interface IRecordPlayerResult extends IProto {
	/** 顺位：1/2/3/4 */
	rank: number;
	/** 帐号ID（如果ID小于1000，则为机器人） */
	account_id: number;
	/** 昵称 */
	nickname: string;
	/** 四麻段位 */
	level: IAccountLevel;
	/** 三麻段位 */
	level3: IAccountLevel;
	/** 座次 */
	seat: number;
	/** PT变化 */
	pt: number;
	/** 点数 */
	point: number;
	/** 最大和牌类型 参考客户端枚举 E_Dadian_Title 内容（不包含流满） */
	max_hu_type: number;
	/** 立直次数 */
	action_liqi: number;
	/** 荣和次数 */
	action_rong: number;
	/** 自摸次数 */
	action_zimo: number;
	/** 铳牌次数 */
	action_chong: number;
	/** 猫爪/P 信息 */
	verified: number;
}

/**
 * * .lq.CustomizedContestGameStart
 * * 比赛开始消息广播
 */
declare interface ICustomizedContestGameStart extends IProto {
	players: ICustomizedContestGameStart_Item[];
}

/** undefined */
declare interface ICustomizedContestGameStart_Item extends IProto {
	account_id: number;
	nickname: string;
}

/**
 * * .lq.CustomizedContestGameEnd
 * * 比赛结束消息广播
 */
declare interface ICustomizedContestGameEnd extends IProto {
	players: ICustomizedContestGameEnd_Item[];
}

/** undefined */
declare interface ICustomizedContestGameEnd_Item extends IProto {
	account_id: number;
	nickname: string;
	total_point: number;
}

/** .lq.Activity */
declare interface IActivity extends IProto {
	activity_id: number;
	start_time: number;
	end_time: number;
	type: string;
}

/** .lq.ExchangeRecord */
declare interface IExchangeRecord extends IProto {
	/** 兑换id */
	exchange_id: number;
	/** 已经兑换的次数 */
	count: number;
}

/**
 * * .lq.ActivityAccumulatedPointData
 * * 累计得点活动
 */
declare interface IActivityAccumulatedPointData extends IProto {
	activity_id: number;
	point: number;
	/** 已经领取过的奖励列表 */
	gained_reward_list: number[];
}

/**
 * * .lq.ActivityRankPointData
 * * 排名得点活动
 */
declare interface IActivityRankPointData extends IProto {
	leaderboard_id: number;
	point: number;
	/** 是否已经领取奖励 */
	gained_reward: boolean;
	/** 可领取奖励的开始时间 */
	gainable_time: number;
}

/** .lq.GameRoundHuData */
declare interface IGameRoundHuData extends IProto {
	/** 和牌信息 */
	hupai: IGameRoundHuData_HuPai;
	/** 番种列表 */
	fans: IGameRoundHuData_Fan[];
	/** 打点 */
	score: number;
	/** 和了巡目 */
	xun: number;
	title_id: number;
	fan_sum: number;
	fu_sum: number;
	/** 役满数量 */
	yakuman_count: number;
	/** 表宝牌数量 */
	biao_dora_count: number;
	/** 赤宝牌数量 */
	red_dora_count: number;
	/** 里宝牌数量 */
	li_dora_count: number;
	/** 拔北数量 */
	babei_count: number;
	/** 悬赏番数，用来计算运（赤宝牌，里宝牌，一发等） */
	xuan_shang_count: number;
	/** 当前余牌量 */
	pai_left_count: number;
}

/** undefined */
declare interface IGameRoundHuData_HuPai extends IProto {
	tile: string;
	seat: number;
	liqi: number;
}

/** undefined */
declare interface IGameRoundHuData_Fan extends IProto {
	id: number;
	count: number;
	fan: number;
}

/** .lq.GameRoundPlayerFangChongInfo */
declare interface IGameRoundPlayerFangChongInfo extends IProto {
	seat: number;
	tile: string;
	pai_left_count: number;
}

/** .lq.GameRoundPlayerResult */
declare interface IGameRoundPlayerResult extends IProto {
	type: number;
	hands: string[];
	ming: string[];
	liqi_type: number;
	is_fulu: boolean;
	is_liujumanguan: boolean;
	lian_zhuang: number;
	hu: IGameRoundHuData;
	fangchongs: IGameRoundPlayerFangChongInfo[];
	liqi_fangchong: boolean;
	liqi_failed: boolean;
}

/** .lq.GameRoundPlayer */
declare interface IGameRoundPlayer extends IProto {
	score: number;
	rank: number;
	result: IGameRoundPlayerResult;
}

/** .lq.GameRoundSnapshot */
declare interface IGameRoundSnapshot extends IProto {
	ju: number;
	ben: number;
	players: IGameRoundPlayer[];
}

/** .lq.GameFinalSnapshot */
declare interface IGameFinalSnapshot extends IProto {
	uuid: string;
	state: number;
	/** 1=好友房 2=匹配 3=比赛房（临时）  4=自定义比赛 */
	category: number;
	mode: IGameMode;
	meta: IGameMetaData;
	calculate_param: IGameFinalSnapshot_CalculateParam;
	create_time: number;
	start_time: number;
	finish_time: number;
	seats: IGameFinalSnapshot_GameSeat[];
	rounds: IGameRoundSnapshot[];
	account_views: IPlayerGameView[];
	final_players: IGameFinalSnapshot_FinalPlayer[];
	afk_info: IGameFinalSnapshot_AFKInfo[];
	robot_views: IPlayerGameView[];
}

/**
 * * undefined
 * * 计算相关参数
 */
declare interface IGameFinalSnapshot_CalculateParam extends IProto {
	/** 初始点 */
	init_point: number;
	/** 精算原点 */
	jingsuanyuandian: number;
	/** 顺位分 */
	rank_points: number[];
}

/** undefined */
declare interface IGameFinalSnapshot_GameSeat extends IProto {
	type: number;
	account_id: number;
	/** 内部服务器通知地址 */
	notify_endpoint: INetworkEndpoint;
	/** 客户端连接IP地址 */
	client_address: string;
	/** 最终是断开连接的 */
	is_connected: boolean;
}

/** undefined */
declare interface IGameFinalSnapshot_FinalPlayer extends IProto {
	seat: number;
	total_point: number;
	part_point_1: number;
	part_point_2: number;
	grading_score: number;
	gold: number;
}

/** undefined */
declare interface IGameFinalSnapshot_AFKInfo extends IProto {
	deal_tile_count: number;
	moqie_count: number;
	seat: number;
}

/**
 * * .lq.RecordCollectedData
 * * 简要的收藏信息
 */
declare interface IRecordCollectedData extends IProto {
	/** 牌谱uuid */
	uuid: string;
	/** 备注 */
	remarks: string;
	start_time: number;
	/** 游戏结束之间 */
	end_time: number;
}

/** .lq.ContestDetailRule */
declare interface IContestDetailRule extends IProto {
	/** 初始点数 */
	init_point: number;
	/** 一位必要点数 */
	fandian: number;
	/** 是否会被击飞 */
	can_jifei: boolean;
	/** 天边，=0不计天边，否则1位达到天边就游戏结束 */
	tianbian_value: number;
	/** 立直棒供托点数 */
	liqibang_value: number;
	/** 场棒点数 */
	changbang_value: number;
	/** 1人不听罚符 */
	noting_fafu_1: number;
	/** 2人不听罚符 */
	noting_fafu_2: number;
	/** 3人不听罚符 */
	noting_fafu_3: number;
	/** 有流局满贯 */
	have_liujumanguan: boolean;
	/** 有切上满贯 */
	have_qieshangmanguan: boolean;
	/** 开启表宝牌 */
	have_biao_dora: boolean;
	/** 开启杠表宝牌 */
	have_gang_biao_dora: boolean;
	/** 大明杠、加杠宝牌即开 */
	ming_dora_immediately_open: boolean;
	/** 开启里宝牌 */
	have_li_dora: boolean;
	/** 开启杠里宝牌 */
	have_gang_li_dora: boolean;
	/** 开启四风连打流局 */
	have_sifenglianda: boolean;
	/** 开启四杠散了流局 */
	have_sigangsanle: boolean;
	/** 开启四家立直流局 */
	have_sijializhi: boolean;
	/** 开启九种九牌流局 */
	have_jiuzhongjiupai: boolean;
	/** 开启三家和了流局 */
	have_sanjiahele: boolean;
	/** 开启胡牌头跳 */
	have_toutiao: boolean;
	/** 和牌连庄 */
	have_helelianzhuang: boolean;
	/** 和了终局 */
	have_helezhongju: boolean;
	/** 听牌连庄 */
	have_tingpailianzhuang: boolean;
	/** 听牌终局 */
	have_tingpaizhongju: boolean;
	/** 开启一发 */
	have_yifa: boolean;
	/** 开启南入\西入 */
	have_nanruxiru: boolean;
	/** 精算原点必须大于等于初始点数，如果大于初始点数，则计算丘点 */
	jingsuanyuandian: number;
	/** 2位顺位马 */
	shunweima_2: number;
	/** 3位顺位马 */
	shunweima_3: number;
	/** 4位顺位马，1位的顺位马根据2、3、4位计算得出 */
	shunweima_4: number;
	/** 是否开启便捷提示 */
	bianjietishi: boolean;
	/** ai等级，1：低级（默认），2：中级 */
	ai_level: number;
	/** 3麻限定，是否有自摸损，默认为有 */
	have_zimosun: boolean;
	/** 是否禁用多倍役满（默认：否） */
	disable_multi_yukaman: boolean;
	/** 是否启用古役 */
	guyi_mode: number;
	/** 是否禁用累计役满得点 */
	disable_leijiyiman: boolean;
	dora3_mode: number;
	xuezhandaodi: number;
	huansanzhang: number;
	chuanma: number;
	/** 是否禁用双倍役满（默认0：否, 1:开启）（四单/国13/纯九/大四） */
	disable_double_yakuman: number;
	/** 是否禁用复合役满（默认0：否, 1:开启） */
	disable_composite_yakuman: number;
	/** 是否启用食替规则（默认0：否, 1:开启） */
	enable_shiti: number;
	/** 是否允许剩余牌数小于4张的立直（默认0：否, 1:开启） */
	enable_nontsumo_liqi: number;
	/** 是否禁用连风牌4符（默认0：否, 1:开启） */
	disable_double_wind_four_fu: number;
	/** 是否禁用国士抢杠（默认0：否, 1:开启） */
	disable_angang_guoshi: number;
	/** 是否启用人和（默认0：否, 1:满贯，2：役满） */
	enable_renhe: number;
	/** 是否启用包牌拓展设置（默认0：大三元大四喜，1：大三元大四喜四杠子，2：无包牌） */
	enable_baopai_extend_settings: number;
	fanfu: number;
}

/** .lq.ContestDetailRuleV2 */
declare interface IContestDetailRuleV2 extends IProto {
	game_rule: IContestDetailRule;
	extra_rule: IContestDetailRuleV2_ExtraRule;
}

/** undefined */
declare interface IContestDetailRuleV2_ExtraRule extends IProto {
	required_level: number;
	max_game_count: number;
}

/** .lq.GameRuleSetting */
declare interface IGameRuleSetting extends IProto {
	round_type: number;
	shiduan: boolean;
	dora_count: number;
	thinking_type: number;
	use_detail_rule: boolean;
	detail_rule_v2: IContestDetailRuleV2;
}

/**
 * * .lq.RecordTingPaiInfo
 * * 听牌的状态
 */
declare interface IRecordTingPaiInfo extends IProto {
	tile: string;
	/** 听这张牌是否有役（番缚>1时候以下面为准，<=1时还是用这个减少线上影响）（荣和） */
	haveyi: boolean;
	/** 听这张牌是否役满了（荣和） */
	yiman: boolean;
	/** 不役满时候为番数，役满时候为役满倍数，跟dora无关（荣和） */
	count: number;
	/** 听这张牌胡牌的番数 （荣和） */
	fu: number;
	/** 明面可见的手牌dora个数，和count相加就可以算出明面上的番数 （荣和，不过这个自摸也一样） */
	biao_dora_count: number;
	/** 自摸是否役满 （自摸） */
	yiman_zimo: boolean;
	/** 自摸不役满时候为番数，役满时候为役满倍数，跟dora无关（自摸） */
	count_zimo: number;
	/** 听这张牌胡牌的番数 （自摸） */
	fu_zimo: number;
}

/**
 * * .lq.RecordNoTilePlayerInfo
 * * 荒牌流局，玩家的数据
 */
declare interface IRecordNoTilePlayerInfo extends IProto {
	tingpai: boolean;
	hand: string[];
	tings: IRecordTingPaiInfo[];
	liuman: boolean;
}

/** .lq.RecordHuleInfo */
declare interface IRecordHuleInfo extends IProto {
	hand: string[];
	ming: string[];
	hu_tile: string;
	seat: number;
	zimo: boolean;
	qinjia: boolean;
	liqi: boolean;
	doras: string[];
	li_doras: string[];
	yiman: boolean;
	count: number;
	fans: IRecordHuleInfo_RecordFanInfo[];
	fu: number;
	point_zimo_qin: number;
	point_zimo_xian: number;
	title_id: number;
	point_sum: number;
	dadian: number;
	is_jue_zhang: boolean;
	xun: number;
	ting_type: number;
	ting_mian: number;
}

/** undefined */
declare interface IRecordHuleInfo_RecordFanInfo extends IProto {
	val: number;
	id: number;
}

/** .lq.RecordHulesInfo */
declare interface IRecordHulesInfo extends IProto {
	seat: number;
	hules: IRecordHuleInfo[];
}

/** .lq.RecordLiujuInfo */
declare interface IRecordLiujuInfo extends IProto {
	seat: number;
	type: number;
}

/** .lq.RecordNoTileInfo */
declare interface IRecordNoTileInfo extends IProto {
	liujumanguan: boolean;
	players: IRecordNoTilePlayerInfo[];
}

/** .lq.RecordLiqiInfo */
declare interface IRecordLiqiInfo extends IProto {
	seat: number;
	score: number;
	is_w: boolean;
	is_zhen_ting: boolean;
	xun: number;
	is_success: boolean;
}

/** .lq.RecordGangInfo */
declare interface IRecordGangInfo extends IProto {
	seat: number;
	type: number;
	pai: string;
	is_dora: boolean;
	xun: number;
}

/** .lq.RecordBaBeiInfo */
declare interface IRecordBaBeiInfo extends IProto {
	seat: number;
	is_zi_mo: boolean;
	is_chong: boolean;
	is_bei: boolean;
}

/** .lq.RecordPeiPaiInfo */
declare interface IRecordPeiPaiInfo extends IProto {
	dora_count: number;
	r_dora_count: number;
	bei_count: number;
}

/** .lq.RecordRoundInfo */
declare interface IRecordRoundInfo extends IProto {
	name: string;
	chang: number;
	ju: number;
	ben: number;
	scores: number[];
	liqi_infos: IRecordLiqiInfo[];
	gang_infos: IRecordGangInfo[];
	peipai_infos: IRecordPeiPaiInfo[];
	babai_infos: IRecordBaBeiInfo[];
	hules_info: IRecordHulesInfo;
	liuju_info: IRecordLiujuInfo;
	no_tile_info: IRecordNoTileInfo;
	xiuluo_hules_info: IRecordHulesInfo[];
}

/** .lq.RecordAnalysisedData */
declare interface IRecordAnalysisedData extends IProto {
	round_infos: IRecordRoundInfo[];
}

/** .lq.VoteData */
declare interface IVoteData extends IProto {
	activity_id: number;
	vote: number;
	count: number;
}

/** .lq.ActivityBuffData */
declare interface IActivityBuffData extends IProto {
	buff_id: number;
	level: number;
	count: number;
	update_time: number;
}

/** .lq.AccountResourceSnapshot */
declare interface IAccountResourceSnapshot extends IProto {
	bag_item: IAccountResourceSnapshot_BagItemSnapshot[];
	currency: IAccountResourceSnapshot_CurrencySnapshot[];
	title: IAccountResourceSnapshot_TitleSnapshot;
	used_title: IAccountResourceSnapshot_UsedTitleSnapshot;
	currency_convert: number;
}

/** undefined */
declare interface IAccountResourceSnapshot_BagItemSnapshot extends IProto {
	resource_id: number;
	resource_count: number;
	resource_version: number;
}

/** undefined */
declare interface IAccountResourceSnapshot_CurrencySnapshot extends IProto {
	currency_id: number;
	currency_count: number;
}

/** undefined */
declare interface IAccountResourceSnapshot_TitleSnapshot extends IProto {
	title_list: number[];
}

/** undefined */
declare interface IAccountResourceSnapshot_UsedTitleSnapshot extends IProto {
	title_id: number;
}

/** .lq.AccountCharacterSnapshot */
declare interface IAccountCharacterSnapshot extends IProto {
	created_characters: number[];
	removed_characters: ICharacter[];
	modified_characters: ICharacter[];
	main_character: IAccountCharacterSnapshot_MainCharacterSnapshot;
	skins: IAccountCharacterSnapshot_SkinsSnapshot;
	hidden_characters: IAccountCharacterSnapshot_HiddenCharacter;
}

/** undefined */
declare interface IAccountCharacterSnapshot_MainCharacterSnapshot extends IProto {
	character_id: number;
}

/** undefined */
declare interface IAccountCharacterSnapshot_SkinsSnapshot extends IProto {
	skin_list: number[];
}

/** undefined */
declare interface IAccountCharacterSnapshot_HiddenCharacter extends IProto {
	hidden_list: number[];
}

/** .lq.AccountMailRecord */
declare interface IAccountMailRecord extends IProto {
	created_mails: number[];
	removed_mails: IAccountMailRecord_MailSnapshot[];
	modified_mails: IAccountMailRecord_MailSnapshot[];
}

/** undefined */
declare interface IAccountMailRecord_MailSnapshot extends IProto {
	mail_id: number;
	reference_id: number;
	create_time: number;
	expire_time: number;
	take_attachment: number;
	attachments: IRewardSlot[];
}

/** .lq.AccountAchievementSnapshot */
declare interface IAccountAchievementSnapshot extends IProto {
	achievements: IAchievementProgress[];
	rewarded_group: IAccountAchievementSnapshot_RewardedGroupSnapshot;
	version: IAccountAchievementSnapshot_AchievementVersion;
}

/** undefined */
declare interface IAccountAchievementSnapshot_RewardedGroupSnapshot extends IProto {
	rewarded_id: number;
}

/** undefined */
declare interface IAccountAchievementSnapshot_AchievementVersion extends IProto {
	version: number;
}

/** .lq.AccountMiscSnapshot */
declare interface IAccountMiscSnapshot extends IProto {
	faith_data: IFaithData;
	vip_reward_gained: IAccountMiscSnapshot_AccountVIPRewardSnapshot;
	vip: IAccountMiscSnapshot_AccountVIP;
	shop_info: IShopInfo;
	month_ticket: IAccountMiscSnapshot_AccountMonthTicketSnapshot;
	recharged: IAccountMiscSnapshot_AccountRechargeInfo;
	month_ticket_v2: IAccountMiscSnapshot_AccountMonthTicketSnapshotV2;
}

/** undefined */
declare interface IAccountMiscSnapshot_AccountVIPRewardSnapshot extends IProto {
	rewarded: number[];
}

/** undefined */
declare interface IAccountMiscSnapshot_MonthTicketInfo extends IProto {
	/** 月卡ID */
	id: number;
	/** 月卡结束时间 */
	end_time: number;
	/** 上次领取时间 */
	last_pay_time: number;
	/** 记录开始时间 */
	record_start_time: number;
	/** 领取记录 */
	history: number[];
}

/** undefined */
declare interface IAccountMiscSnapshot_AccountMonthTicketSnapshot extends IProto {
	tickets: IAccountMiscSnapshot_MonthTicketInfo[];
}

/** undefined */
declare interface IAccountMiscSnapshot_AccountVIP extends IProto {
	vip: number;
}

/** undefined */
declare interface IAccountMiscSnapshot_AccountRechargeInfo extends IProto {
	records: IAccountMiscSnapshot_RechargeRecord[];
	has_data: number;
}

/** undefined */
declare interface IAccountMiscSnapshot_AccountMonthTicketSnapshotV2 extends IProto {
	/** 月卡结束时间 */
	end_time: number;
	/** 上次领取时间 */
	last_pay_time: number;
	/** 记录开始时间 */
	record_start_time: number;
	/** 领取记录 */
	history: number[];
}

/** undefined */
declare interface IAccountMiscSnapshot_RechargeRecord extends IProto {
	level: number;
	recharge_time: number;
}

/** .lq.AccountGiftCodeRecord */
declare interface IAccountGiftCodeRecord extends IProto {
	used_gift_code: string[];
}

/** .lq.AccSn */
declare interface IAccSn extends IProto {
	resource: IAccountResourceSnapshot;
	character: IAccountCharacterSnapshot;
	mail: IAccountMailRecord;
	achievement: IAccountAchievementSnapshot;
	misc: IAccountMiscSnapshot;
	gift_code: IAccountGiftCodeRecord;
}

/** .lq.AccSnDa */
declare interface IAccSnDa extends IProto {
	account_id: number;
	time: number;
	snapshot: number[];
}

/** .lq.TransparentData */
declare interface ITransparentData extends IProto {
	method: string;
	data: number[];
	session: string;
	remote: INetworkEndpoint;
}

/**
 * * .lq.QuestionnaireReward
 * * 调查问卷相关
 */
declare interface IQuestionnaireReward extends IProto {
	resource_id: number;
	count: number;
}

/**
 * * .lq.QuestionnaireDetail
 * * 调查问卷详细信息
 */
declare interface IQuestionnaireDetail extends IProto {
	id: number;
	version_id: number;
	effective_time_start: number;
	effective_time_end: number;
	rewards: IQuestionnaireReward[];
	banner_title: string;
	title: string;
	announcement_title: string;
	announcement_content: string;
	final_text: string;
	questions: IQuestionnaireQuestion[];
	/** 1=问卷 2=四象战报名 3=官方赛事报名 */
	type: number;
}

/**
 * * .lq.QuestionnaireQuestion
 * * 调查问卷问题
 */
declare interface IQuestionnaireQuestion extends IProto {
	id: number;
	title: string;
	describe: string;
	type: string;
	sub_type: string;
	options: IQuestionnaireQuestion_QuestionOption[];
	option_random_sort: boolean;
	require: boolean;
	max_choice: number;
	next_question: IQuestionnaireQuestion_NextQuestionData[];
	matrix_row: string[];
	option_random_sort_index: number;
}

/** undefined */
declare interface IQuestionnaireQuestion_QuestionOption extends IProto {
	label: string;
	value: string;
	allow_input: boolean;
}

/** undefined */
declare interface IQuestionnaireQuestion_NextQuestionData extends IProto {
	target_question_id: number;
	conditions: IQuestionnaireQuestion_QuestionconditionWrapper[];
}

/** undefined */
declare interface IQuestionnaireQuestion_QuestionCondition extends IProto {
	question_id: number;
	op: string;
	values: string[];
}

/** undefined */
declare interface IQuestionnaireQuestion_QuestionconditionWrapper extends IProto {
	conditions: IQuestionnaireQuestion_QuestionCondition[];
}

/** .lq.QuestionnaireBrief */
declare interface IQuestionnaireBrief extends IProto {
	id: number;
	version_id: number;
	effective_time_start: number;
	effective_time_end: number;
	rewards: IQuestionnaireReward[];
	banner_title: string;
	title: string;
	/** 1=问卷 2=四象战报名 3=官方赛事报名 */
	type: number;
}

/**
 * * .lq.SeerReport
 * * Seer AI 报告
 */
declare interface ISeerReport extends IProto {
	uuid: string;
	events: ISeerEvent[];
	rounds: ISeerRound[];
}

/** .lq.SeerEvent */
declare interface ISeerEvent extends IProto {
	/** 原雀魂牌谱事件下标 */
	record_index: number;
	/** seer数据，不需要关心 */
	seer_index: number;
	/** 推荐操作列表（以玩家为单位） */
	recommends: ISeerRecommend[];
}

/** .lq.SeerRecommend */
declare interface ISeerRecommend extends IProto {
	/** 玩家座位号 */
	seat: number;
	/** 预测操作列表 */
	predictions: ISeerPrediction[];
}

/** .lq.SeerPrediction */
declare interface ISeerPrediction extends IProto {
	/** 推荐动作 枚举见https://confluence.catfoodstudio.net:5443/x/sY-xBw */
	action: number;
	/** 评分，范围为 0-100 */
	score: number;
}

/** .lq.SeerRound */
declare interface ISeerRound extends IProto {
	/** 场 */
	chang: number;
	/** 局，场风是谁的自风 */
	ju: number;
	/** 本 */
	ben: number;
	player_scores: ISeerScore[];
}

/** .lq.SeerScore */
declare interface ISeerScore extends IProto {
	seat: number;
	/**
	 * * 等级 56=S+ 55=S 54=S- 46=A+ 45=A 44=A- 36=B+ 35=B 34=B- 26=C+ 25=C 24=C- 16=D+ 15=D 5=E
	 * * 不使用具体数字，避免解包玩家从数值和推荐权重反推出雀魂的计算方式
	 */
	rating: number;
}

/** .lq.SeerBrief */
declare interface ISeerBrief extends IProto {
	uuid: string;
	/** 1-正在分析 2-分析完毕且未过期 */
	state: number;
	/** 过期时间 */
	expire_time: number;
	player_scores: ISeerScore[];
	/** 创建时间 */
	create_time: number;
}

/** .lq.SimulationV2SeasonData */
declare interface ISimulationV2SeasonData extends IProto {
	/** 回合（第几天） */
	round: number;
	/** 一姬属性 */
	ability: ISimulationV2Ability;
	/** 当前特性 */
	effect_list: ISimulationV2Effect[];
	/** 比赛对局信息 */
	match: ISimulationV2Match;
	/** 待选事件 */
	event: ISimulationV2Event;
	/** 事件选择历史，不会发送给客户端 */
	event_history: ISimulationV2EventHistory[];
	/** 游戏记录，不会发给客户端 */
	record: ISimulationV2Record;
	/** 当前总分 */
	total_score: number;
	/** 对局历史记录 */
	match_history: ISimulationV2MatchRecord[];
}

/** .lq.SimulationV2PlayerRecord */
declare interface ISimulationV2PlayerRecord extends IProto {
	/** 角色id */
	id: number;
	/** 是否玩家操控角色 */
	main: boolean;
	/** 对局分数 */
	score: number;
	/** 排名 */
	rank: number;
	/** 座位编号 */
	seat: number;
}

/** .lq.SimulationV2MatchRecord */
declare interface ISimulationV2MatchRecord extends IProto {
	/** 玩家对局记录 */
	players: ISimulationV2PlayerRecord[];
	/** 当前回合数 */
	round: number;
}

/** .lq.SimulationV2EventHistory */
declare interface ISimulationV2EventHistory extends IProto {
	id: number;
	round: number;
}

/** .lq.SimulationV2Event */
declare interface ISimulationV2Event extends IProto {
	/** 事件id */
	id: number;
	selections: ISimulationV2Event_SimulationV2EventSelection[];
	/** 事件选择后的回合数 */
	next_round: number;
}

/** undefined */
declare interface ISimulationV2Event_SimulationV2EventSelection extends IProto {
	/** 选项id */
	id: number;
	results: ISimulationV2Event_SimulationV2EventResult[];
}

/** undefined */
declare interface ISimulationV2Event_SimulationV2EventResult extends IProto {
	/** 结果id */
	id: number;
	/** 几率 */
	weight: number;
}

/** .lq.SimulationV2Ability */
declare interface ISimulationV2Ability extends IProto {
	/** 运气 */
	luk: number;
	/** 技术 */
	tec: number;
	/** 洞察 */
	ins: number;
	/** 直觉 */
	int: number;
	/** 智谋 */
	res: number;
}

/** .lq.SimulationV2Buff */
declare interface ISimulationV2Buff extends IProto {
	id: number;
	/** 为0时生效，其他数值代表剩余多少回合再生效 */
	round: number;
	store: number[];
}

/** .lq.SimulationV2Effect */
declare interface ISimulationV2Effect extends IProto {
	id: number;
}

/** .lq.SimulationV2MatchInfo */
declare interface ISimulationV2MatchInfo extends IProto {
	chang: number;
	ju: number;
	ben: number;
	/** 场供（立直棒） */
	gong: number;
	/** 牌河余牌数量 */
	remain: number;
}

/** .lq.SimulationV2Record */
declare interface ISimulationV2Record extends IProto {
	/** 和牌次数 */
	hu_count: number;
	/** 放铳次数 */
	chong_count: number;
	/** 最大和牌 */
	highest_hu: number;
	/** 对局顺位 */
	rank: number[];
	/** 对局场数 */
	round_count: number;
}

/** .lq.SimulationV2MatchHistory */
declare interface ISimulationV2MatchHistory extends IProto {
	/** 事件类型 */
	type: number;
	/** 当前余牌数量 */
	remain: number;
	/** 分数变动(seat 为索引) */
	score_modify: number[];
	round_start: ISimulationV2MatchHistory_RoundStartArgs;
	riichi: ISimulationV2MatchHistory_RiichiArgs;
	fulu: ISimulationV2MatchHistory_FuluArgs;
	hule: ISimulationV2MatchHistory_HuleArgs[];
	push_ting: ISimulationV2MatchHistory_PushTingArgs;
	find_ting: ISimulationV2MatchHistory_FindTingArgs;
	liuju: ISimulationV2MatchHistory_LiujuArgs;
	story: ISimulationV2MatchHistory_StoryArgs;
}

/** undefined */
declare interface ISimulationV2MatchHistory_RoundStartArgs extends IProto {
	info: ISimulationV2MatchInfo;
	scores: number[];
	/** 一姬向听数 */
	ting: number;
	/** 本局生效buff列表 */
	effected_buff_list: number[];
}

/** undefined */
declare interface ISimulationV2MatchHistory_RiichiArgs extends IProto {
	seat: number;
}

/** undefined */
declare interface ISimulationV2MatchHistory_FuluArgs extends IProto {
	seat: number;
	/** 副露后向听数 */
	ting: number;
	/** 副露数 */
	fulu: number;
}

/** undefined */
declare interface ISimulationV2MatchHistory_HuleArgs extends IProto {
	seat: number;
	zimo: boolean;
	chong_seat: number;
	point: number;
	fan: number;
	score_modify: number[];
}

/** undefined */
declare interface ISimulationV2MatchHistory_PushTingArgs extends IProto {
	seat: number;
	ting: number;
}

/** undefined */
declare interface ISimulationV2MatchHistory_FindTingArgs extends IProto {
	seat: number;
	target: number;
}

/** undefined */
declare interface ISimulationV2MatchHistory_LiujuArgs extends IProto {
	/** 玩家是否听牌(seat 索引) */
	ting: number[];
}

/** undefined */
declare interface ISimulationV2MatchHistory_StoryArgs extends IProto {
	story_id: number;
}

/** .lq.SimulationV2Match */
declare interface ISimulationV2Match extends IProto {
	info: ISimulationV2MatchInfo;
	players: ISimulationV2Match_SimulationV2Player[];
	/** 对局历史 */
	history: ISimulationV2MatchHistory[];
	/** 当前顺位(seat) */
	rank: number[];
	/** 本场对局是否已结束 */
	is_match_end: boolean;
	/** 服务端数据 */
	actions: ISimulationActionData[];
	/** 当前buff，服务端数据 */
	buff_list: ISimulationV2Buff[];
	/** 是否第一巡 */
	is_first_round: boolean;
	/** 上一次触发事件时的余牌数量 */
	last_event_remain: number;
	/** 当前生效buff列表，客户端数据 */
	effected_buff_list: number[];
	/** 触发过得碎碎念，服务端数据 */
	triggered_story: number[];
}

/** undefined */
declare interface ISimulationV2Match_SimulationV2Player extends IProto {
	/** 角色id */
	id: number;
	/** 是否是玩家控制角色 */
	main: boolean;
	ting: number;
	/** 分数 */
	score: number;
	/** 副露数 */
	fulu: number;
	/** 是否立直 */
	riichi: boolean;
	/** 是否发现他家听牌(seat) */
	find_ting: number[];
	seat: number;
	/** 服务端数据 */
	con_push_ting: number;
	/** 服务端数据 */
	con_keep_ting: number;
	/** 一发状态 */
	ippatsu: boolean;
}

/** .lq.SimulationActionData */
declare interface ISimulationActionData extends IProto {
	type: number;
	riichi: ISimulationActionData_ActionRiichiData;
	hule: ISimulationActionData_ActionHuleData;
	fulu: ISimulationActionData_ActionFuluData;
	discard_tile: ISimulationActionData_ActionDiscardData;
	deal_tile: ISimulationActionData_ActionDealTileData;
}

/** undefined */
declare interface ISimulationActionData_ActionRiichiData extends IProto {
	seat: number;
}

/** undefined */
declare interface ISimulationActionData_ActionHuleData extends IProto {
	hule: ISimulationActionData_HuleInfo[];
}

/** undefined */
declare interface ISimulationActionData_ActionFuluData extends IProto {
	seat: number;
}

/** undefined */
declare interface ISimulationActionData_ActionDiscardData extends IProto {
	seat: number;
	riichi: boolean;
}

/** undefined */
declare interface ISimulationActionData_ActionDealTileData extends IProto {
	seat: number;
}

/** undefined */
declare interface ISimulationActionData_HuleInfo extends IProto {
	fan: number;
	zimo: boolean;
	point: number;
	oya: boolean;
	player: number;
	chong: number;
	toutiao: boolean;
}

/**
 * * .lq.ResConnectionInfo
 * * 获取客户端连接信息
 */
declare interface IResConnectionInfo extends IResponse {
	client_endpoint: INetworkEndpoint;
}

/** .lq.ResFetchQueueInfo */
declare interface IResFetchQueueInfo extends IResponse {
	remain: number;
	rank: number;
}

/** .lq.ReqOpenidCheck */
declare interface IReqOpenidCheck extends IProto {
	type: number;
	token: string;
}

/**
 * * .lq.ReqSignupAccount
 * * 协议：注册账号
 */
declare interface IReqSignupAccount extends IProto {
	/** 玩家登陆账号名 */
	account: string;
	/** hash后的密码 */
	password: string;
	/** 验证码 */
	code: string;
	/** 类型 email=1 phone=2 */
	type: number;
	/** 客户端设备信息 */
	device: IClientDeviceInfo;
	/** 客户端版本验证用 */
	client_version_string: string;
	/** 服务器标签，日志统计用 */
	tag: string;
}

/** .lq.ResSignupAccount */
declare interface IResSignupAccount extends IResponse {
}

/**
 * * .lq.ReqLogin
 * * 协议：登录游戏内账号
 */
declare interface IReqLogin extends IProto {
	/** 玩家登陆账号名 */
	account: string;
	/** hash后的密码 */
	password: string;
	reconnect: boolean;
	/** 客户端设备信息 */
	device: IClientDeviceInfo;
	/** 登录随机key */
	random_key: string;
	/** 客户端版本 */
	client_version: IClientVersionInfo;
	/** 生成快速登录口令 */
	gen_access_token: boolean;
	/** 客户端支持的货币平台 */
	currency_platforms: number[];
	/** 0=account/email 1=phone */
	type: number;
	/** 客户端替换包奖励版本 */
	version: number;
	/** 客户端版本验证用 */
	client_version_string: string;
	/** 服务器标签，日志统计用 */
	tag: string;
}

/** .lq.ResLogin */
declare interface IResLogin extends IResponse {
	/** 账号id */
	account_id: number;
	account: IAccount;
	/** 正在进行的游戏信息 */
	game_info: IGameConnectInfo;
	/** 有未读公告 */
	has_unread_announcement: boolean;
	/** 游戏通用登录口令 */
	access_token: string;
	/** 帐号注册时间 */
	signup_time: number;
	/** 是否进行了实名认证 */
	is_id_card_authed: boolean;
	/** 用户登录地区 */
	country: string;
	/** 该账户曾经登录过的奖励version值 */
	logined_version: number[];
	/** 该账户曾经领取过的奖励version值 */
	rewarded_version: number[];
}

/** .lq.ReqPrepareLogin */
declare interface IReqPrepareLogin extends IProto {
	/** Oauth2Login 中的 access_token */
	access_token: string;
	/** Oauth2Login 中的 type */
	type: number;
}

/** .lq.ResFastLogin */
declare interface IResFastLogin extends IResponse {
	/** 正在进行的游戏信息 */
	game_info: IGameConnectInfo;
	/** 不在好友房内的话本字段为空 */
	room: IRoom;
}

/** .lq.ReqEmailLogin */
declare interface IReqEmailLogin extends IProto {
	/** 玩家登陆账号名 */
	email: string;
	/** hash后的密码 */
	password: string;
	reconnect: boolean;
	/** 客户端设备信息 */
	device: IClientDeviceInfo;
	/** 登录随机key */
	random_key: string;
	/** 客户端版本 */
	client_version: string;
	/** 生成快速登录口令 */
	gen_access_token: boolean;
	/** 客户端支持的货币平台 */
	currency_platforms: number[];
}

/**
 * * .lq.ReqBindAccount
 * * 协议：绑定账号密码
 */
declare interface IReqBindAccount extends IProto {
	account: string;
	password: string;
}

/**
 * * .lq.ReqCreatePhoneVerifyCode
 * * 协议：获取手机验证码
 */
declare interface IReqCreatePhoneVerifyCode extends IProto {
	phone: string;
	/**
	 * * 用途（用于之后的操作校验）
	 * * BIND_EMAIL       = 1, // 绑定电子邮箱
	 * * MODIFY_PASSWORD  = 4, // 更换密码
	 * * SIGN_UP          = 5, // 注册账号
	 * * BIND_PHONE       = 6, // 绑定手机
	 * * VERIFY_THRID_PARTY = 7, // 验证第三方账号
	 * * UNBIND_PHONE     = 8, // 解绑手机
	 */
	usage: number;
}

/**
 * * .lq.ReqCreateEmailVerifyCode
 * * 协议：获取邮箱验证码
 */
declare interface IReqCreateEmailVerifyCode extends IProto {
	email: string;
	/**
	 * * 用途（用于之后的操作校验）
	 * * 1=绑定邮箱
	 */
	usage: number;
}

/**
 * * .lq.ReqVerifyCodeForSecure
 * * 协议：验证码获取安全权限
 */
declare interface IReqVerifyCodeForSecure extends IProto {
	code: string;
	/** 1=更换手机号绑定 */
	operation: number;
}

/** .lq.ResVerfiyCodeForSecure */
declare interface IResVerfiyCodeForSecure extends IResponse {
	/** 操作口令 */
	secure_token: string;
}

/**
 * * .lq.ReqBindPhoneNumber
 * * 协议：绑定手机号
 */
declare interface IReqBindPhoneNumber extends IProto {
	/** 验证码 */
	code: string;
	phone: string;
	/** 没有密码需要设置密码（老客户端用，下个版本删除） */
	password: string;
	/** 多手机号绑定版本（新客户端用，填true，下个版本删除） */
	multi_bind_version: boolean;
}

/**
 * * .lq.ReqUnbindPhoneNumber
 * * 协议：解绑账号手机
 */
declare interface IReqUnbindPhoneNumber extends IProto {
	code: string;
	phone: string;
	password: string;
}

/**
 * * .lq.ResFetchPhoneLoginBind
 * * 协议：查询已绑定手机是否有该手机登录方式
 */
declare interface IResFetchPhoneLoginBind extends IResponse {
	/** 0=无绑定登录方式 1=已绑定登录方式且是本游戏账号 2=已绑定登录方式但不是本游戏账号 */
	phone_login: number;
}

/**
 * * .lq.ReqCreatePhoneLoginBind
 * * 协议：生成手机登录绑定
 */
declare interface IReqCreatePhoneLoginBind extends IProto {
	/** 没有密码需要设置密码 */
	password: string;
}

/**
 * * .lq.ReqBindEmail
 * * 协议：绑定邮箱
 */
declare interface IReqBindEmail extends IProto {
	email: string;
	code: string;
	/** 没有密码需要设置密码 */
	password: string;
}

/**
 * * .lq.ReqModifyPassword
 * * 协议：修改密码
 */
declare interface IReqModifyPassword extends IProto {
	/** 新密码 */
	new_password: string;
	/** 老密码（无任何绑定的情况） */
	old_password: string;
	/** 安全操作口令 */
	secure_token: string;
}

/**
 * * .lq.ReqOauth2Auth
 * * 协议：Oauth2 授权
 */
declare interface IReqOauth2Auth extends IProto {
	/** oauth2 自定义平台类型 */
	type: number;
	/** oauth2 code */
	code: string;
	/** 只在悠星sdk下登陆使用 */
	uid: string;
	/** 客户端版本验证用 */
	client_version_string: string;
}

/** .lq.ResOauth2Auth */
declare interface IResOauth2Auth extends IResponse {
	access_token: string;
}

/**
 * * .lq.ReqOauth2Check
 * * 协议：Oauth2 验证是否已经注册过账号
 */
declare interface IReqOauth2Check extends IProto {
	/** oauth2 自定义平台类型 */
	type: number;
	/** oauth2 code */
	access_token: string;
}

/** .lq.ResOauth2Check */
declare interface IResOauth2Check extends IResponse {
	/** true=已经注册 false=未注册 */
	has_account: boolean;
}

/**
 * * .lq.ReqOauth2Signup
 * * 协议：Oauth2 注册账号
 */
declare interface IReqOauth2Signup extends IProto {
	type: number;
	access_token: string;
	email: string;
	advertise_str: string;
	/** 客户端设备信息 */
	device: IClientDeviceInfo;
	/** 客户端版本 */
	client_version: IClientVersionInfo;
	/** 客户端版本验证用 */
	client_version_string: string;
	/** 服务器标签，日志统计用 */
	tag: string;
}

/** .lq.ResOauth2Signup */
declare interface IResOauth2Signup extends IResponse {
}

/**
 * * .lq.ReqOauth2Login
 * * 协议：Oauth2 登录
 */
declare interface IReqOauth2Login extends IProto {
	/** 0=账号密码快速登录 1=微信 2=微博 3=QQ */
	type: number;
	access_token: string;
	reconnect: boolean;
	/** 客户端设备信息 */
	device: IClientDeviceInfo;
	/** 登录随机key */
	random_key: string;
	/** 客户端版本 */
	client_version: IClientVersionInfo;
	/** 生成快速登录口令 */
	gen_access_token: boolean;
	/** 客户端支持的货币平台 */
	currency_platforms: number[];
	/** 客户端替换包奖励版本 */
	version: number;
	/** 客户端版本验证用 */
	client_version_string: string;
	/** 服务器标签，日志统计用 */
	tag: string;
}

/**
 * * .lq.ReqDMMPreLogin
 * * 协议：获取DMM登录参数
 */
declare interface IReqDMMPreLogin extends IProto {
	finish_url: string;
}

/** .lq.ResDMMPreLogin */
declare interface IResDMMPreLogin extends IResponse {
	parameter: string;
}

/**
 * * .lq.ReqLogout
 * * 协议：注销账号
 */
declare interface IReqLogout extends IProto {
}

/** .lq.ResLogout */
declare interface IResLogout extends IResponse {
}

/**
 * * .lq.ReqHeatBeat
 * * 心跳请求
 */
declare interface IReqHeatBeat extends IProto {
	/** 无操作时间计数（用于踢下线） */
	no_operation_counter: number;
}

/** .lq.ReqSearchAccountByEidLobby */
declare interface IReqSearchAccountByEidLobby extends IProto {
	eid: number;
}

/** .lq.ResSearchAccountbyEidLobby */
declare interface IResSearchAccountbyEidLobby extends IResponse {
	account_id: number;
}

/**
 * * .lq.ReqLoginBeat
 * * 登录心跳
 */
declare interface IReqLoginBeat extends IProto {
	contract: string;
}

/**
 * * .lq.ReqJoinMatchQueue
 * * 协议：加入匹配队列
 */
declare interface IReqJoinMatchQueue extends IProto {
	match_mode: number;
	/** 客户端版本验证用 */
	client_version_string: string;
}

/**
 * * .lq.ReqCancelMatchQueue
 * * 协议：取消匹配
 */
declare interface IReqCancelMatchQueue extends IProto {
	match_mode: number;
}

/**
 * * .lq.ReqAccountInfo
 * * 协议：请求账号信息
 */
declare interface IReqAccountInfo extends IProto {
	/** 本人可以不填数据 */
	account_id: number;
}

/** .lq.ResAccountInfo */
declare interface IResAccountInfo extends IResponse {
	account: IAccount;
	room: IRoom;
}

/**
 * * .lq.ReqCreateNickname
 * * 协议：创建昵称
 */
declare interface IReqCreateNickname extends IProto {
	nickname: string;
	advertise_str: string;
	/** 服务器标签，日志统计用 */
	tag: string;
}

/**
 * * .lq.ReqModifyNickname
 * * 协议：修改昵称
 */
declare interface IReqModifyNickname extends IProto {
	nickname: string;
	/** 使用改名卡 */
	use_item_id: number;
}

/**
 * * .lq.ReqModifyBirthday
 * * 协议：修改生日
 */
declare interface IReqModifyBirthday extends IProto {
	/** unix second */
	birthday: number;
}

/**
 * * .lq.ResSelfRoom
 * * 协议：请求自身房间信息
 */
declare interface IResSelfRoom extends IResponse {
	room: IRoom;
}

/** .lq.ResFetchGamingInfo */
declare interface IResFetchGamingInfo extends IResponse {
	game_info: IGameConnectInfo;
}

/**
 * * .lq.ReqCreateRoom
 * * 协议：创建房间
 */
declare interface IReqCreateRoom extends IProto {
	player_count: number;
	mode: IGameMode;
	/** 公开观战 */
	public_live: boolean;
	/** 客户端版本验证用 */
	client_version_string: string;
	/** 预设规则 liqi xuezhandaodi chuanma reveal_discard jiuchao dora3 field_spell zhanxing tianming yongchang beishui */
	pre_rule: string;
}

/** .lq.ResCreateRoom */
declare interface IResCreateRoom extends IResponse {
	room: IRoom;
}

/**
 * * .lq.ReqJoinRoom
 * * 协议：加入房间
 */
declare interface IReqJoinRoom extends IProto {
	room_id: number;
	/** 客户端版本验证用 */
	client_version_string: string;
}

/** .lq.ResJoinRoom */
declare interface IResJoinRoom extends IResponse {
	room: IRoom;
}

/**
 * * .lq.ReqRoomReady
 * * 协议：准备就绪
 */
declare interface IReqRoomReady extends IProto {
	/** true=准备 false=取消准备 */
	ready: boolean;
}

/**
 * * .lq.ReqRoomDressing
 * * 协议：切换装扮状态
 */
declare interface IReqRoomDressing extends IProto {
	/** true=正在装扮 false=普通状态 */
	dressing: boolean;
}

/**
 * * .lq.ReqRoomStart
 * * 协议：开始游戏
 */
declare interface IReqRoomStart extends IProto {
}

/**
 * * .lq.ReqRoomKickPlayer
 * * 协议：踢出玩家
 */
declare interface IReqRoomKickPlayer extends IProto {
	/** 玩家账号id或机器人id */
	id: number;
}

/**
 * * .lq.ReqModifyRoom
 * * 协议：修改房间
 */
declare interface IReqModifyRoom extends IProto {
	robot_count: number;
}

/**
 * * .lq.ReqAddRoomRobot
 * * 协议：添加好友房机器人
 */
declare interface IReqAddRoomRobot extends IProto {
	position: number;
}

/**
 * * .lq.ReqChangeAvatar
 * * 协议：修改头像
 */
declare interface IReqChangeAvatar extends IProto {
	avatar_id: number;
}

/**
 * * .lq.ReqAccountStatisticInfo
 * * 协议：请求账号统计信息
 */
declare interface IReqAccountStatisticInfo extends IProto {
	account_id: number;
}

/** .lq.ResAccountStatisticInfo */
declare interface IResAccountStatisticInfo extends IResponse {
	statistic_data: IAccountStatisticData[];
	detail_data: IAccountDetailStatisticV2;
}

/**
 * * .lq.ResAccountChallengeRankInfo
 * * 协议：获取试炼赛排名信息
 */
declare interface IResAccountChallengeRankInfo extends IResponse {
	season_info: IResAccountChallengeRankInfo_ChallengeRank[];
}

/** undefined */
declare interface IResAccountChallengeRankInfo_ChallengeRank extends IProto {
	season: number;
	rank: number;
	level: number;
}

/**
 * * .lq.ResAccountCharacterInfo
 * * 协议：获取账号人物信息
 */
declare interface IResAccountCharacterInfo extends IResponse {
	/** 已经解锁列表 */
	unlock_list: number[];
}

/**
 * * .lq.ReqShopPurchase
 * * 协议：商店购买
 */
declare interface IReqShopPurchase extends IProto {
	type: string;
	id: number;
}

/** .lq.ResShopPurchase */
declare interface IResShopPurchase extends IResponse {
	/** 增量更新数据 */
	update: IAccountUpdate;
}

/**
 * * .lq.ReqGameRecord
 * * 协议：获取单场牌谱记录
 */
declare interface IReqGameRecord extends IProto {
	game_uuid: string;
	client_version_string: string;
}

/** .lq.ResGameRecord */
declare interface IResGameRecord extends IResponse {
	/** 牌谱头部数据 */
	head: IRecordGame;
	/** 牌谱打牌数据（优先判断） */
	data: number[];
	/** 牌谱打牌数据url地址 */
	data_url: string;
}

/**
 * * .lq.ReqGameRecordList
 * * 协议：获取牌谱列表
 * * 已废弃，使用v2
 */
declare interface IReqGameRecordList extends IProto {
	/** 起始下标，基于0 */
	start: number;
	/** 期望获取的数量（结果可能少于该数量，最大有效值为30，超过按照30获取） */
	count: number;
	/** ALL=0 好友房=1 段位=2 大会室=4 */
	type: number;
}

/** .lq.ResGameRecordList */
declare interface IResGameRecordList extends IResponse {
	/** 所有游戏记录的长度（20240829 xienanjie 客户端没有使用该字段） */
	total_count: number;
	/** 记录列表（长度不超过请求中的count） */
	record_list: IRecordGame[];
}

/**
 * * .lq.ReqGameRecordListV2
 * * 协议：获取牌谱列表V2
 * * 202408牌谱改版后使用，兼容老结构内容
 * * 本结构使用了迭代器模式，只用于创建迭代器，不会返回实际数据
 * * 客户端得到迭代器游标之后，使用游标进行后续请求
 * * 迭代器有失效时间，过期后调用本接口重新申请
 */
declare interface IReqGameRecordListV2 extends IProto {
	/** 标签，总览（全部）=0/段位=1/友人=2/活动=3/赛事=4（收藏是另外的逻辑） */
	tag: number;
	/** 筛选的开始日期（精确到选择的0点），不填服务器默认为90天前的日期（也是0点） */
	begin_time: number;
	/** 筛选的结束日期（精确到选择的23:59:59），不填服务器默认为今天的日期 */
	end_time: number;
	/** 筛选的顺位列表，1/2/3/4，长度为0等价于全选 */
	ranks: number[];
	/** 筛选的模式列表，三人=3/四人=4，长度为0等价于全选 */
	modes: number[];
	/** 筛选的出现大和，全部=0/倍满以上=1/三倍满以上=2/役满以上=3 */
	max_hu_type: number;
	/** 筛选的对局模式（仅段位筛选条件下有效），铜=1/银=2/金=3/玉=4/王座普通=5/王座巅峰=6，长度为0等价于全选 */
	level_mode: number[];
}

/** .lq.ResGameRecordListV2 */
declare interface IResGameRecordListV2 extends IResponse {
	/** 这里可能会返回创建迭代器过快的报错 */
	/** 迭代器游标 */
	iterator: string;
	/** 迭代器游标过期时间戳 */
	iterator_expire: number;
	/** 实际的开始时间（服务器筛选的实际时间范围） */
	actual_begin_time: number;
	/** 实际的结束时间（同上） */
	actual_end_time: number;
}

/**
 * * .lq.ReqNextGameRecordList
 * * 协议：根据迭代器获取牌谱列表内容
 */
declare interface IReqNextGameRecordList extends IProto {
	iterator: string;
	/** 期望的数量（服务器最大返回30条，这个与原先做法一致） */
	count: number;
}

/** .lq.ResNextGameRecordList */
declare interface IResNextGameRecordList extends IResponse {
	/** 是否还有后续内容 */
	next: boolean;
	entries: IRecordListEntry[];
	/** 迭代器游标过期时间戳 */
	iterator_expire: number;
	/**
	 * * 下一次查询的时间范围右区间值
	 * * 如果entries有数据，那么就是最后一个entries的end_time字段
	 * * 如果没有数据，那么是服务器查询不到数据的范围（注：服务器有分月表，跨月表查询可能会分批次）
	 */
	next_end_time: number;
}

/**
 * * .lq.ResCollectedGameRecordList
 * * 协议:获得收藏的牌谱列表（简要信息）
 */
declare interface IResCollectedGameRecordList extends IResponse {
	/** 简要的收藏信息 */
	record_list: IRecordCollectedData[];
	record_collect_limit: number;
}

/**
 * * .lq.ReqGameRecordsDetail
 * * 协议:获取牌谱列表的详细信息
 */
declare interface IReqGameRecordsDetail extends IProto {
	/** 根据uuid获取牌谱详情（返回的结果不超过30个） */
	uuid_list: string[];
}

/** .lq.ResGameRecordsDetail */
declare interface IResGameRecordsDetail extends IResponse {
	/** 记录列表（长度不超过请求中的uuid_list的长度） */
	record_list: IRecordGame[];
}

/**
 * * .lq.ReqGameRecordsDetailV2
 * * 协议:获取牌谱列表的详细信息（新版）
 */
declare interface IReqGameRecordsDetailV2 extends IProto {
	/** 根据uuid获取牌谱详情（返回的结果不超过30个） */
	uuid_list: string[];
}

/** .lq.ResGameRecordsDetailV2 */
declare interface IResGameRecordsDetailV2 extends IResponse {
	/** 记录列表（长度不超过请求中的uuid_list的长度） */
	entries: IRecordListEntry[];
}

/**
 * * .lq.ReqAddCollectedGameRecord
 * * 协议:添加牌谱收藏
 */
declare interface IReqAddCollectedGameRecord extends IProto {
	/** 牌谱uuid */
	uuid: string;
	/** 备注，如果是默认备注则不用传过来 */
	remarks: string;
	start_time: number;
	end_time: number;
}

/** .lq.ResAddCollectedGameRecord */
declare interface IResAddCollectedGameRecord extends IResponse {
}

/**
 * * .lq.ReqRemoveCollectedGameRecord
 * * 协议:移除牌谱收藏
 */
declare interface IReqRemoveCollectedGameRecord extends IProto {
	/** 牌谱uuid */
	uuid: string;
}

/** .lq.ResRemoveCollectedGameRecord */
declare interface IResRemoveCollectedGameRecord extends IResponse {
}

/**
 * * .lq.ReqChangeCollectedGameRecordRemarks
 * * 协议:修改收藏牌谱的注释
 */
declare interface IReqChangeCollectedGameRecordRemarks extends IProto {
	/** 牌谱uuid */
	uuid: string;
	/** 备注，只能修改收藏过的牌谱 */
	remarks: string;
}

/** .lq.ResChangeCollectedGameRecordRemarks */
declare interface IResChangeCollectedGameRecordRemarks extends IResponse {
}

/**
 * * .lq.ReqLevelLeaderboard
 * * 协议：排行榜
 */
declare interface IReqLevelLeaderboard extends IProto {
	/** 1=四麻 2=三麻 */
	type: number;
}

/** .lq.ResLevelLeaderboard */
declare interface IResLevelLeaderboard extends IResponse {
	items: IResLevelLeaderboard_Item[];
	/** 自身的排名（null表示无排名） */
	self_rank: number;
}

/** undefined */
declare interface IResLevelLeaderboard_Item extends IProto {
	account_id: number;
	level: IAccountLevel;
}

/**
 * * .lq.ReqChallangeLeaderboard
 * * 协议：试炼赛排行榜
 */
declare interface IReqChallangeLeaderboard extends IProto {
	season: number;
}

/** .lq.ResChallengeLeaderboard */
declare interface IResChallengeLeaderboard extends IResponse {
	items: IResChallengeLeaderboard_Item[];
	/** 自身的排名（null表示无排名） */
	self_rank: number;
}

/** undefined */
declare interface IResChallengeLeaderboard_Item extends IProto {
	account_id: number;
	level: number;
	nickname: string;
}

/**
 * * .lq.ReqMutiChallengeLevel
 * * 协议：获取多人试炼赛等级
 */
declare interface IReqMutiChallengeLevel extends IProto {
	account_id_list: number[];
	season: number;
}

/** .lq.ResMutiChallengeLevel */
declare interface IResMutiChallengeLevel extends IResponse {
	items: IResMutiChallengeLevel_Item[];
}

/** undefined */
declare interface IResMutiChallengeLevel_Item extends IProto {
	account_id: number;
	level: number;
}

/**
 * * .lq.ReqMultiAccountId
 * * 协议：获取多人信息
 */
declare interface IReqMultiAccountId extends IProto {
	account_id_list: number[];
}

/** .lq.ResMultiAccountBrief */
declare interface IResMultiAccountBrief extends IResponse {
	players: IPlayerBaseView[];
}

/**
 * * .lq.ResFriendList
 * * 获取好友列表
 */
declare interface IResFriendList extends IResponse {
	friends: IFriend[];
	/** 好友数量上限 */
	friend_max_count: number;
	friend_count: number;
}

/**
 * * .lq.ResFriendApplyList
 * * 获取好友申请列表
 */
declare interface IResFriendApplyList extends IResponse {
	/** 申请列表 */
	applies: IResFriendApplyList_FriendApply[];
}

/** undefined */
declare interface IResFriendApplyList_FriendApply extends IProto {
	/** 申请者id */
	account_id: number;
	/** 申请时间 */
	apply_time: number;
}

/**
 * * .lq.ReqApplyFriend
 * * 申请好友
 */
declare interface IReqApplyFriend extends IProto {
	/** 申请的目标id */
	target_id: number;
}

/**
 * * .lq.ReqHandleFriendApply
 * * 处理好友申请
 */
declare interface IReqHandleFriendApply extends IProto {
	target_id: number;
	/** 1=agree 2=refuse */
	method: number;
}

/**
 * * .lq.ReqRemoveFriend
 * * 删除好友
 */
declare interface IReqRemoveFriend extends IProto {
	target_id: number;
}

/**
 * * .lq.ReqSearchAccountByPattern
 * * 模糊查询
 */
declare interface IReqSearchAccountByPattern extends IProto {
	/** 继续上次查询 */
	search_next: boolean;
	/** 开启新的模糊查询 */
	pattern: string;
}

/** .lq.ResSearchAccountByPattern */
declare interface IResSearchAccountByPattern extends IResponse {
	is_finished: boolean;
	match_accounts: number[];
	/** 解析后的id */
	decode_id: number;
}

/**
 * * .lq.ReqAccountList
 * * 查询玩家状态
 */
declare interface IReqAccountList extends IProto {
	/** 最多一次20个 */
	account_id_list: number[];
}

/** .lq.ResAccountStates */
declare interface IResAccountStates extends IResponse {
	states: IAccountActiveState[];
}

/**
 * * .lq.ReqSearchAccountById
 * * 查询单个玩家
 */
declare interface IReqSearchAccountById extends IProto {
	account_id: number;
}

/** .lq.ResSearchAccountById */
declare interface IResSearchAccountById extends IResponse {
	/** for account_id */
	player: IPlayerBaseView;
}

/**
 * * .lq.ResBagInfo
 * * 协议：请求背包信息
 */
declare interface IResBagInfo extends IResponse {
	bag: IBag;
}

/**
 * * .lq.ReqUseBagItem
 * * 协议：使用背包道具
 */
declare interface IReqUseBagItem extends IProto {
	item_id: number;
}

/**
 * * .lq.ReqOpenManualItem
 * * 协议：使用手选道具物品
 */
declare interface IReqOpenManualItem extends IProto {
	/** 使用的道具物品ID */
	item_id: number;
	/** 使用数量 */
	count: number;
	/** 选择的获取道具ID */
	select_id: number;
}

/**
 * * .lq.ReqOpenRandomRewardItem
 * * 协议：使用随机道具物品
 */
declare interface IReqOpenRandomRewardItem extends IProto {
	/** 使用的道具物品ID */
	item_id: number;
	/** 使用个数 */
	count: number;
}

/** .lq.ResOpenRandomRewardItem */
declare interface IResOpenRandomRewardItem extends IResponse {
	/** 抽取结果 */
	results: IOpenResult[];
}

/**
 * * .lq.ReqOpenAllRewardItem
 * * 协议：使用全领礼包物品
 */
declare interface IReqOpenAllRewardItem extends IProto {
	/** 使用的道具物品ID */
	item_id: number;
}

/** .lq.ResOpenAllRewardItem */
declare interface IResOpenAllRewardItem extends IResponse {
	/** 抽取结果 */
	results: IOpenResult[];
}

/**
 * * .lq.ReqComposeShard
 * * 协议：合成碎片
 */
declare interface IReqComposeShard extends IProto {
	item_id: number;
}

/**
 * * .lq.ReqFetchAnnouncement
 * * 协议：公告
 */
declare interface IReqFetchAnnouncement extends IProto {
	lang: string;
	/** web, steam, apple, android, google, dmm_web, windows */
	platform: string;
}

/** .lq.ResAnnouncement */
declare interface IResAnnouncement extends IResponse {
	/** 公告内容 */
	announcements: IAnnouncement[];
	/** 排序, yaya: 不再使用，announcements里就是sort好的内容 */
	sort: number[];
	read_list: number[];
}

/** .lq.ResMailInfo */
declare interface IResMailInfo extends IResponse {
	mails: IMail[];
}

/** .lq.ReqReadMail */
declare interface IReqReadMail extends IProto {
	mail_id: number;
}

/** .lq.ReqDeleteMail */
declare interface IReqDeleteMail extends IProto {
	mail_id: number;
}

/** .lq.ReqTakeAttachment */
declare interface IReqTakeAttachment extends IProto {
	mail_id: number;
}

/**
 * * .lq.ReqReceiveAchievementGroupReward
 * * 协议：领取成就组奖励
 */
declare interface IReqReceiveAchievementGroupReward extends IProto {
	group_id: number;
}

/** .lq.ResReceiveAchievementGroupReward */
declare interface IResReceiveAchievementGroupReward extends IResponse {
	execute_reward: IExecuteReward[];
}

/**
 * * .lq.ReqReceiveAchievementReward
 * * 协议：领取成就奖励
 */
declare interface IReqReceiveAchievementReward extends IProto {
	achievement_id: number;
}

/** .lq.ResReceiveAchievementReward */
declare interface IResReceiveAchievementReward extends IResponse {
	execute_reward: IExecuteReward[];
}

/**
 * * .lq.ResFetchAchievementRate
 * * 协议：获取全服成就完成率
 */
declare interface IResFetchAchievementRate extends IResponse {
	rate: IResFetchAchievementRate_AchievementRate[];
}

/** undefined */
declare interface IResFetchAchievementRate_AchievementRate extends IProto {
	id: number;
	/** 4000 表示 40.00% */
	rate: number;
}

/**
 * * .lq.ResAchievement
 * * 协议：获取成就
 */
declare interface IResAchievement extends IResponse {
	progresses: IAchievementProgress[];
	rewarded_group: number[];
}

/**
 * * .lq.ResTitleList
 * * 称号列表
 */
declare interface IResTitleList extends IResponse {
	title_list: number[];
}

/**
 * * .lq.ReqUseTitle
 * * 协议：使用称号
 */
declare interface IReqUseTitle extends IProto {
	title: number;
}

/**
 * * .lq.ReqBuyShiLian
 * * 协议：购买试炼资格
 */
declare interface IReqBuyShiLian extends IProto {
	/** 0=ticket 1=currency */
	type: number;
}

/**
 * * .lq.ReqUpdateClientValue
 * * 协议：更新客户端统计信息
 */
declare interface IReqUpdateClientValue extends IProto {
	key: number;
	value: number;
}

/**
 * * .lq.ResClientValue
 * * 协议：客户端统计信息
 */
declare interface IResClientValue extends IResponse {
	datas: IResClientValue_Value[];
	/** 充值成功次数 */
	recharged_count: number;
}

/** undefined */
declare interface IResClientValue_Value extends IProto {
	key: number;
	value: number;
}

/**
 * * .lq.ReqClientMessage
 * * 协议：客户端信息
 */
declare interface IReqClientMessage extends IProto {
	timestamp: number;
	message: string;
}

/**
 * * .lq.ReqCurrentMatchInfo
 * * 协议：请求当前匹配模式信息
 */
declare interface IReqCurrentMatchInfo extends IProto {
	mode_list: number[];
}

/** .lq.ResCurrentMatchInfo */
declare interface IResCurrentMatchInfo extends IResponse {
	matches: IResCurrentMatchInfo_CurrentMatchInfo[];
}

/** undefined */
declare interface IResCurrentMatchInfo_CurrentMatchInfo extends IProto {
	mode_id: number;
	playing_count: number;
}

/**
 * * .lq.ReqUserComplain
 * * 协议：用户举报
 */
declare interface IReqUserComplain extends IProto {
	target_id: number;
	/** 0-不友善对局 1-昵称违规 2-中途退出/挂机 3-作弊 4-通牌 */
	type: number;
	/** 用户填写的详细信息，可选 */
	content: string;
	/** 对局/牌谱uuid，可选 */
	game_uuid: string;
	/** 对局详情 */
	round_info: IReqUserComplain_GameRoundInfo;
}

/** undefined */
declare interface IReqUserComplain_GameRoundInfo extends IProto {
	chang: number;
	ju: number;
	ben: number;
	seat: number;
	xun: number;
}

/**
 * * .lq.ReqReadAnnouncement
 * * 阅读公告
 */
declare interface IReqReadAnnouncement extends IProto {
	announcement_id: number;
	announcement_list: number[];
}

/**
 * * .lq.ResReviveCoinInfo
 * * 复活币信息
 */
declare interface IResReviveCoinInfo extends IResponse {
	/** 是否已经领取 */
	has_gained: boolean;
}

/** .lq.ResDailyTask */
declare interface IResDailyTask extends IResponse {
	/** 任务列表 */
	progresses: ITaskProgress[];
	/** 有刷新次数，废弃不用，改用refresh_count */
	has_refresh_count: boolean;
	/** 最高任务上限 */
	max_daily_task_count: number;
	/** 剩余刷新次数 */
	refresh_count: number;
}

/** .lq.ReqRefreshDailyTask */
declare interface IReqRefreshDailyTask extends IProto {
	task_id: number;
}

/** .lq.ResRefreshDailyTask */
declare interface IResRefreshDailyTask extends IResponse {
	progress: ITaskProgress;
	/** 剩余刷新次数 */
	refresh_count: number;
}

/** .lq.ReqUseGiftCode */
declare interface IReqUseGiftCode extends IProto {
	/** 礼品码 */
	code: string;
}

/** .lq.ResUseGiftCode */
declare interface IResUseGiftCode extends IResponse {
	/** 奖励内容 */
	rewards: IRewardSlot[];
}

/** .lq.ResUseSpecialGiftCode */
declare interface IResUseSpecialGiftCode extends IResponse {
	rewards: IExecuteReward[];
}

/**
 * * .lq.ReqSendClientMessage
 * * 发送一条单方面消息
 */
declare interface IReqSendClientMessage extends IProto {
	target_id: number;
	type: number;
	content: string;
}

/**
 * * .lq.ReqGameLiveInfo
 * * 协议：获取游戏直播信息（全视角）
 */
declare interface IReqGameLiveInfo extends IProto {
	game_uuid: string;
}

/** .lq.ResGameLiveInfo */
declare interface IResGameLiveInfo extends IResponse {
	/** 剩余可以开始观看时间 */
	left_start_seconds: number;
	live_head: IGameLiveHead;
	/** 当前局的所有分片列表 */
	segments: IGameLiveSegmentUri[];
	/** 直播时间线对应的当前相对时间（距离开始的毫秒数） */
	now_millisecond: number;
}

/**
 * * .lq.ReqGameLiveLeftSegment
 * * 协议：获取游戏直播剩余分片信息（增量）
 */
declare interface IReqGameLiveLeftSegment extends IProto {
	game_uuid: string;
	/** 客户端已经接收到的最大分片id */
	last_segment_id: number;
}

/** .lq.ResGameLiveLeftSegment */
declare interface IResGameLiveLeftSegment extends IResponse {
	/** 1=游戏进行中 2=游戏结束了 3=游戏已中断（所有玩家掉线） */
	live_state: number;
	/** 当前局的所有分片列表 */
	segments: IGameLiveSegmentUri[];
	/** 直播时间线对应的当前相对时间（距离开始的毫秒数） */
	now_millisecond: number;
	/** 这些分片列表所提供的最大时长（可能会出现空的分片，但是时长依然包含空分片） */
	segment_end_millisecond: number;
}

/**
 * * .lq.ReqGameLiveList
 * * 协议：获取正在直播的游戏列表
 */
declare interface IReqGameLiveList extends IProto {
	filter_id: number;
}

/** .lq.ResGameLiveList */
declare interface IResGameLiveList extends IResponse {
	live_list: IGameLiveHead[];
}

/**
 * * .lq.ResCommentSetting
 * * 协议：查看留言板设置信息
 */
declare interface IResCommentSetting extends IResponse {
	/** 许可的留言人：0=所有人都可以 1=只允许好友 2=不允许任何人留言 */
	comment_allow: number;
}

/**
 * * .lq.ReqUpdateCommentSetting
 * * 协议：更新留言板设置
 */
declare interface IReqUpdateCommentSetting extends IProto {
	comment_allow: number;
}

/**
 * * .lq.ReqFetchCommentList
 * * 协议：获取留言板列表
 */
declare interface IReqFetchCommentList extends IProto {
	target_id: number;
}

/** .lq.ResFetchCommentList */
declare interface IResFetchCommentList extends IResponse {
	/** 许可的留言人：0=所有人都可以 1=只允许好友 2=不允许任何人留言 */
	comment_allow: number;
	comment_id_list: number[];
	last_read_id: number;
}

/**
 * * .lq.ReqFetchCommentContent
 * * 协议：获取留言板内容
 */
declare interface IReqFetchCommentContent extends IProto {
	target_id: number;
	comment_id_list: number[];
}

/** .lq.ResFetchCommentContent */
declare interface IResFetchCommentContent extends IResponse {
	comments: ICommentItem[];
}

/**
 * * .lq.ReqLeaveComment
 * * 协议：发送留言
 */
declare interface IReqLeaveComment extends IProto {
	target_id: number;
	content: string;
}

/**
 * * .lq.ReqDeleteComment
 * * 协议：删除留言
 */
declare interface IReqDeleteComment extends IProto {
	target_id: number;
	/** 删除列表 */
	delete_list: number[];
}

/**
 * * .lq.ReqUpdateReadComment
 * * 协议：更新留言阅读记录
 */
declare interface IReqUpdateReadComment extends IProto {
	/** 阅读的最大id */
	read_id: number;
}

/**
 * * .lq.ResFetchRollingNotice
 * * 协议：获取滚动公告
 */
declare interface IResFetchRollingNotice extends IResponse {
	notice: IRollingNotice;
}

/**
 * * .lq.ResFetchMaintainNotice
 * * 协议：获取维护公告
 */
declare interface IResFetchMaintainNotice extends IResponse {
	notice: IMaintainNotice;
}

/**
 * * .lq.ReqFetchRollingNotice
 * * 滚动公告请求数据
 */
declare interface IReqFetchRollingNotice extends IProto {
	/** 语言信息 */
	lang: string;
}

/**
 * * .lq.ResServerTime
 * * 协议：获取服务器时间
 */
declare interface IResServerTime extends IResponse {
	/** 服务器时间 */
	server_time: number;
}

/**
 * * .lq.ReqPlatformBillingProducts
 * * 协议：获取对应平台的商品列表
 */
declare interface IReqPlatformBillingProducts extends IProto {
	/** 货架ID */
	shelves_id: number;
}

/** .lq.ResPlatformBillingProducts */
declare interface IResPlatformBillingProducts extends IResponse {
	products: IBillingProduct[];
}

/**
 * * .lq.ReqCreateBillingOrder
 * * 协议：创建支付订单
 */
declare interface IReqCreateBillingOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 支付渠道类型枚举 */
	payment_platform: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	client_version_string: string;
}

/** .lq.ResCreateBillingOrder */
declare interface IResCreateBillingOrder extends IResponse {
	/** 生成的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqSolveGooglePlayOrder
 * * 协议：处理 Google Play 支付完成
 */
declare interface IReqSolveGooglePlayOrder extends IProto {
	/** INAPP_PURCHASE_DATA 字段 */
	inapp_purchase_data: string;
	/** INAPP_DATA_SIGNATURE 字段 */
	inapp_data_signature: string;
}

/** .lq.ReqSolveGooglePlayOrderV3 */
declare interface IReqSolveGooglePlayOrderV3 extends IProto {
	order_id: string;
	transaction_id: string;
	token: string;
	account_id: number;
}

/**
 * * .lq.ReqCancelGooglePlayOrder
 * * 协议：取消 Google Play 订单
 */
declare interface IReqCancelGooglePlayOrder extends IProto {
	order_id: string;
}

/**
 * * .lq.ReqCreateWechatNativeOrder
 * * 协议：创建微信支付（扫码支付）订单
 */
declare interface IReqCreateWechatNativeOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 服务器用字段，客户端不用填 */
	account_ip: string;
	client_version_string: string;
}

/** .lq.ResCreateWechatNativeOrder */
declare interface IResCreateWechatNativeOrder extends IResponse {
	/** 生成的二维码图片 */
	qrcode_buffer: string;
	order_id: string;
}

/**
 * * .lq.ReqCreateWechatAppOrder
 * * 协议：创建微信支付（App支付）订单
 */
declare interface IReqCreateWechatAppOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 服务器用字段，客户端不用填 */
	account_ip: string;
	client_version_string: string;
}

/** .lq.ResCreateWechatAppOrder */
declare interface IResCreateWechatAppOrder extends IResponse {
	/** APP端调起支付的参数列表对象 */
	call_wechat_app_param: IResCreateWechatAppOrder_CallWechatAppParam;
}

/** undefined */
declare interface IResCreateWechatAppOrder_CallWechatAppParam extends IProto {
	appid: string;
	partnerid: string;
	prepayid: string;
	package: string;
	noncestr: string;
	timestamp: string;
	sign: string;
}

/**
 * * .lq.ReqCreateAlipayOrder
 * * 协议：创建支付宝（链接地址）订单
 */
declare interface IReqCreateAlipayOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** PC_WEB MOBILE_WEB APP */
	alipay_trade_type: string;
	return_url: string;
	client_version_string: string;
}

/** .lq.ResCreateAlipayOrder */
declare interface IResCreateAlipayOrder extends IResponse {
	/** 支付跳转链接 */
	alipay_url: string;
}

/**
 * * .lq.ReqCreateAlipayScanOrder
 * * 协议：创建支付宝（扫码支付）订单
 */
declare interface IReqCreateAlipayScanOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	client_version_string: string;
}

/** .lq.ResCreateAlipayScanOrder */
declare interface IResCreateAlipayScanOrder extends IResponse {
	/** 生成的二维码图片 */
	qrcode_buffer: string;
	order_id: string;
	/** 二维码链接地址 */
	qr_code: string;
}

/**
 * * .lq.ReqCreateAlipayAppOrder
 * * 协议：创建支付宝（App支付）订单
 */
declare interface IReqCreateAlipayAppOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	client_version_string: string;
}

/** .lq.ResCreateAlipayAppOrder */
declare interface IResCreateAlipayAppOrder extends IResponse {
	/** 支付App拉起参数 */
	alipay_url: string;
}

/**
 * * .lq.ReqCreateJPCreditCardOrder
 * * 协议：创建日服-CreditCard订单
 */
declare interface IReqCreateJPCreditCardOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPCreditCardOrder */
declare interface IResCreateJPCreditCardOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateJPPaypalOrder
 * * 协议：创建日服-Paypal订单
 */
declare interface IReqCreateJPPaypalOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPPaypalOrder */
declare interface IResCreateJPPaypalOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateJPAuOrder
 * * 协议：创建日服-Au订单
 */
declare interface IReqCreateJPAuOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPAuOrder */
declare interface IResCreateJPAuOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateJPDocomoOrder
 * * 协议：创建日服-Docomo订单
 */
declare interface IReqCreateJPDocomoOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPDocomoOrder */
declare interface IResCreateJPDocomoOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateJPWebMoneyOrder
 * * 协议：创建日服-WebMoney订单
 */
declare interface IReqCreateJPWebMoneyOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPWebMoneyOrder */
declare interface IResCreateJPWebMoneyOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateJPSoftbankOrder
 * * 协议：创建日服-Softbank订单
 */
declare interface IReqCreateJPSoftbankOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPSoftbankOrder */
declare interface IResCreateJPSoftbankOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/** .lq.ReqCreateJPPayPayOrder */
declare interface IReqCreateJPPayPayOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPPayPayOrder */
declare interface IResCreateJPPayPayOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/** .lq.ReqFetchJPCommonCreditCardOrder */
declare interface IReqFetchJPCommonCreditCardOrder extends IProto {
	order_id: string;
	account_id: number;
}

/** .lq.ResFetchJPCommonCreditCardOrder */
declare interface IResFetchJPCommonCreditCardOrder extends IResponse {
}

/** .lq.ReqCreateJPGMOOrder */
declare interface IReqCreateJPGMOOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateJPGMOOrder */
declare interface IResCreateJPGMOOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateYostarOrder
 * * 协议：创建yostar-sdk订单
 */
declare interface IReqCreateYostarOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 平台订单类型，谷歌 = 1,iap = 2,common = 3 */
	order_type: number;
	client_version_string: string;
}

/**
 * * .lq.ResCreateYostarOrder
 * * 协议：创建yostar-sdk订单
 */
declare interface IResCreateYostarOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateENPaypalOrder
 * * 协议：创建美服-Paypal订单
 */
declare interface IReqCreateENPaypalOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateENPaypalOrder */
declare interface IResCreateENPaypalOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateENJCBOrder
 * * 协议：创建美服-JCB订单
 */
declare interface IReqCreateENJCBOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateENJCBOrder */
declare interface IResCreateENJCBOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateENMasterCardOrder
 * * 协议：创建美服-MasterCard订单
 */
declare interface IReqCreateENMasterCardOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateENMasterCardOrder */
declare interface IResCreateENMasterCardOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateENVisaOrder
 * * 协议：创建美服-Visa订单
 */
declare interface IReqCreateENVisaOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateENVisaOrder */
declare interface IResCreateENVisaOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateENAlipayOrder
 * * 协议：创建美服-支付宝订单
 */
declare interface IReqCreateENAlipayOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateENAlipayOrder */
declare interface IResCreateENAlipayOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateKRPaypalOrder
 * * 协议：创建韩服-Paypal订单
 */
declare interface IReqCreateKRPaypalOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateKRPaypalOrder */
declare interface IResCreateKRPaypalOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateKRJCBOrder
 * * 协议：创建韩服-JCB订单
 */
declare interface IReqCreateKRJCBOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateKRJCBOrder */
declare interface IResCreateKRJCBOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateKRMasterCardOrder
 * * 协议：创建韩服-MasterCard订单
 */
declare interface IReqCreateKRMasterCardOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateKRMasterCardOrder */
declare interface IResCreateKRMasterCardOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateKRVisaOrder
 * * 协议：创建韩服-Visa订单
 */
declare interface IReqCreateKRVisaOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateKRVisaOrder */
declare interface IResCreateKRVisaOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateKRAlipayOrder
 * * 协议：创建韩服-支付宝订单
 */
declare interface IReqCreateKRAlipayOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 订单结束后客户端的跳转地址 */
	return_url: string;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	client_version_string: string;
}

/** .lq.ResCreateKRAlipayOrder */
declare interface IResCreateKRAlipayOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqCreateDMMOrder
 * * 协议：创建DMM订单
 */
declare interface IReqCreateDMMOrder extends IProto {
	goods_id: number;
	account_id: number;
	client_type: number;
	client_version_string: string;
}

/** .lq.ResCreateDmmOrder */
declare interface IResCreateDmmOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
	transaction_id: string;
	dmm_user_id: string;
	token: string;
	callback_url: string;
	request_time: string;
	dmm_app_id: string;
}

/**
 * * .lq.ReqCreateIAPOrder
 * * 协议：创建苹果内购订单
 */
declare interface IReqCreateIAPOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 用户登录时，悠星的sdk token */
	access_token: string;
	debt_order_id: string;
	client_version_string: string;
}

/** .lq.ResCreateIAPOrder */
declare interface IResCreateIAPOrder extends IResponse {
	/** 创建订单返回的订单号 */
	order_id: string;
}

/**
 * * .lq.ReqVerificationIAPOrder
 * * 协议：验证苹果内购订单
 */
declare interface IReqVerificationIAPOrder extends IProto {
	/** 创建订单返回的订单号 */
	order_id: string;
	/** 苹果订单id */
	transaction_id: string;
	/** 去验证的数据 */
	receipt_data: string;
	/** 账号ID */
	account_id: number;
}

/** .lq.ResVerificationIAPOrder */
declare interface IResVerificationIAPOrder extends IResponse {
}

/**
 * * .lq.ReqCreateSteamOrder
 * * 协议：创建Steam订单
 */
declare interface IReqCreateSteamOrder extends IProto {
	language: string;
	account_id: number;
	client_type: number;
	goods_id: number;
	steam_id: string;
	debt_order_id: string;
	client_version_string: string;
}

/** .lq.ResCreateSteamOrder */
declare interface IResCreateSteamOrder extends IResponse {
	order_id: string;
	platform_order_id: string;
}

/**
 * * .lq.ResRandomCharacter
 * * 协议：获取角色随机池
 */
declare interface IResRandomCharacter extends IResponse {
	/** 当前随机角色池启用开关(1 = 启用 0 = 不启用) */
	enabled: boolean;
	/** 随机角色池 */
	pool: IRandomCharacter[];
}

/**
 * * .lq.ReqRandomCharacter
 * * 协议：设置角色随机池
 */
declare interface IReqRandomCharacter extends IProto {
	/** 随机角色池启用开关(1 = 启用 0 = 不启用) */
	enabled: boolean;
	/** 随机角色池 */
	pool: IRandomCharacter[];
}

/**
 * * .lq.ReqVerifySteamOrder
 * * 协议：Steam验单
 */
declare interface IReqVerifySteamOrder extends IProto {
	order_id: string;
	account_id: number;
}

/**
 * * .lq.ReqCreateMyCardOrder
 * * 协议：创建MyCard订单
 */
declare interface IReqCreateMyCardOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	debt_order_id: string;
	client_version_string: string;
}

/** .lq.ResCreateMyCardOrder */
declare interface IResCreateMyCardOrder extends IResponse {
	auth_code: string;
	order_id: string;
}

/** .lq.ReqVerifyMyCardOrder */
declare interface IReqVerifyMyCardOrder extends IProto {
	order_id: string;
	account_id: number;
}

/**
 * * .lq.ReqCreatePaypalOrder
 * * 协议：创建Palpal订单
 */
declare interface IReqCreatePaypalOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	debt_order_id: string;
	client_version_string: string;
}

/** .lq.ResCreatePaypalOrder */
declare interface IResCreatePaypalOrder extends IResponse {
	order_id: string;
	url: string;
}

/**
 * * .lq.ReqCreateXsollaOrder
 * * 协议：创建Xsolla订单
 */
declare interface IReqCreateXsollaOrder extends IProto {
	/** 商品ID */
	goods_id: number;
	/** 设备类型 */
	client_type: number;
	/** 账号ID */
	account_id: number;
	/** 支付方式 直接跳转银联的话传2580，其他传空 */
	payment_method: number;
	debt_order_id: string;
	client_version_string: string;
	/** 服务端字段，客户端不用传 */
	account_ip: string;
}

/** .lq.ResCreateXsollaOrder */
declare interface IResCreateXsollaOrder extends IResponse {
	order_id: string;
	url: string;
}

/**
 * * .lq.ReqDeliverAA32Order
 * * 协议：处理AA32订单
 */
declare interface IReqDeliverAA32Order extends IProto {
	account_id: number;
	nsa_id: string;
	nsa_token: string;
}

/**
 * * .lq.ReqOpenChest
 * * 协议：抽宝箱
 */
declare interface IReqOpenChest extends IProto {
	/** 宝箱Id */
	chest_id: number;
	/** 1 or 10 */
	count: number;
	/** 使用宝箱道具 */
	use_ticket: boolean;
	/** 可选up宝箱活动id */
	choose_up_activity_id: number;
}

/** .lq.ResOpenChest */
declare interface IResOpenChest extends IResponse {
	/** 抽取结果 */
	results: IOpenResult[];
	/** [已弃用]该宝箱总共开启次数 */
	total_open_count: number;
	/** 新的信仰值 */
	faith_count: number;
	/** 必 new up 数据 */
	chest_replace_up: IResOpenChest_ChestReplaceCountData[];
}

/** undefined */
declare interface IResOpenChest_ChestReplaceCountData extends IProto {
	id: number;
	count: number;
}

/**
 * * .lq.ReqBuyFromChestShop
 * * 协议：宝箱商店购买商品
 */
declare interface IReqBuyFromChestShop extends IProto {
	goods_id: number;
	count: number;
}

/** .lq.ResBuyFromChestShop */
declare interface IResBuyFromChestShop extends IResponse {
	chest_id: number;
	/** 消耗的次数 */
	consume_count: number;
	/** 购物后剩余信仰点数 */
	faith_count: number;
}

/**
 * * .lq.ResDailySignInInfo
 * * 协议：获取每日签到信息
 */
declare interface IResDailySignInInfo extends IResponse {
	/** 已经签到的天数 */
	sign_in_days: number;
}

/**
 * * .lq.ReqDoActivitySignIn
 * * 协议：活动签到
 */
declare interface IReqDoActivitySignIn extends IProto {
	activity_id: number;
}

/** .lq.ResDoActivitySignIn */
declare interface IResDoActivitySignIn extends IResponse {
	rewards: IResDoActivitySignIn_RewardData[];
	sign_in_count: number;
}

/** undefined */
declare interface IResDoActivitySignIn_RewardData extends IProto {
	resource_id: number;
	count: number;
}

/**
 * * .lq.ResCharacterInfo
 * * 协议：获取角色信息
 */
declare interface IResCharacterInfo extends IResponse {
	/** 角色列表 */
	characters: ICharacter[];
	/** 皮肤列表 */
	skins: number[];
	/** 主角色id */
	main_character_id: number;
	/** 每日已经送礼次数 */
	send_gift_count: number;
	/** 每日送礼次数上限 */
	send_gift_limit: number;
	finished_endings: number[];
	rewarded_endings: number[];
	/** 星标排序 */
	character_sort: number[];
	hidden_characters: number[];
	/** 非星标排序 */
	other_character_sort: number[];
}

/**
 * * .lq.ReqUpdateCharacterSort
 * * 协议：更新角色排序和隐藏角色
 */
declare interface IReqUpdateCharacterSort extends IProto {
	/** 星标排序 */
	sort: number[];
	/** 非星标排序 */
	other_sort: number[];
	/** 隐藏角色 */
	hidden_characters: number[];
}

/**
 * * .lq.ReqChangeMainCharacter
 * * 协议：切换主角色
 */
declare interface IReqChangeMainCharacter extends IProto {
	character_id: number;
}

/**
 * * .lq.ReqChangeCharacterSkin
 * * 协议：切换角色皮肤
 */
declare interface IReqChangeCharacterSkin extends IProto {
	character_id: number;
	skin: number;
}

/**
 * * .lq.ReqChangeCharacterView
 * * 协议：设置角色外观
 */
declare interface IReqChangeCharacterView extends IProto {
	character_id: number;
	slot: number;
	item_id: number;
}

/**
 * * .lq.ReqSetHiddenCharacter
 * * 协议：设置隐藏角色
 */
declare interface IReqSetHiddenCharacter extends IProto {
	chara_list: number[];
}

/** .lq.ResSetHiddenCharacter */
declare interface IResSetHiddenCharacter extends IResponse {
	hidden_characters: number[];
}

/**
 * * .lq.ReqSendGiftToCharacter
 * * 协议：赠送礼物给角色
 */
declare interface IReqSendGiftToCharacter extends IProto {
	character_id: number;
	gifts: IReqSendGiftToCharacter_Gift[];
}

/** undefined */
declare interface IReqSendGiftToCharacter_Gift extends IProto {
	item_id: number;
	count: number;
}

/** .lq.ResSendGiftToCharacter */
declare interface IResSendGiftToCharacter extends IResponse {
	level: number;
	exp: number;
}

/**
 * * .lq.ReqSellItem
 * * 协议：出售道具
 */
declare interface IReqSellItem extends IProto {
	sells: IReqSellItem_Item[];
}

/** undefined */
declare interface IReqSellItem_Item extends IProto {
	item_id: number;
	count: number;
}

/**
 * * .lq.ResCommonView
 * * 协议：获取通用外观
 */
declare interface IResCommonView extends IResponse {
	slots: IResCommonView_Slot[];
}

/** undefined */
declare interface IResCommonView_Slot extends IProto {
	slot: number;
	value: number;
}

/**
 * * .lq.ReqChangeCommonView
 * * 协议：切换通用外观（牌桌，牌背等）
 */
declare interface IReqChangeCommonView extends IProto {
	slot: number;
	value: number;
}

/**
 * * .lq.ReqSaveCommonViews
 * * 协议：保存通用外观方案
 */
declare interface IReqSaveCommonViews extends IProto {
	views: IViewSlot[];
	save_index: number;
	is_use: number;
	/** 方案名称 */
	name: string;
}

/**
 * * .lq.ReqCommonViews
 * * 协议：获取通用外观方案
 */
declare interface IReqCommonViews extends IProto {
	index: number;
}

/** .lq.ResCommonViews */
declare interface IResCommonViews extends IResponse {
	views: IViewSlot[];
	/** 方案名称 */
	name: string;
}

/**
 * * .lq.ResAllcommonViews
 * * 协议：获取所有通用外观方案
 */
declare interface IResAllcommonViews extends IResponse {
	views: IResAllcommonViews_Views[];
	use: number;
}

/** undefined */
declare interface IResAllcommonViews_Views extends IProto {
	values: IViewSlot[];
	index: number;
	/** 方案名称 */
	name: string;
}

/**
 * * .lq.ReqUseCommonView
 * * 协议：切换通用外观方案
 */
declare interface IReqUseCommonView extends IProto {
	index: number;
}

/**
 * * .lq.ReqUpgradeCharacter
 * * 协议：突破角色
 */
declare interface IReqUpgradeCharacter extends IProto {
	character_id: number;
}

/** .lq.ResUpgradeCharacter */
declare interface IResUpgradeCharacter extends IResponse {
	character: ICharacter;
}

/**
 * * .lq.ReqFinishedEnding
 * * 协议：完成结局
 * * 协议：领取结局奖励
 */
declare interface IReqFinishedEnding extends IProto {
	/** 角色ID */
	character_id: number;
	/** 剧情ID */
	story_id: number;
	/** 结局ID */
	ending_id: number;
}

/**
 * * .lq.ReqGMCommand
 * * 协议：GM指令
 */
declare interface IReqGMCommand extends IProto {
	command: string;
}

/**
 * * .lq.ResShopInfo
 * * 协议：获取商店信息
 */
declare interface IResShopInfo extends IResponse {
	shop_info: IShopInfo;
}

/**
 * * .lq.ReqBuyFromShop
 * * 协议：普通商店购买
 */
declare interface IReqBuyFromShop extends IProto {
	/** 商品Id */
	goods_id: number;
	/** 购买数量 */
	count: number;
	/** 最终结算总价用于验证 */
	ver_price: IReqBuyFromShop_Item[];
	/** 最终可以获得的东西，用于验证 */
	ver_goods: IReqBuyFromShop_Item[];
}

/** undefined */
declare interface IReqBuyFromShop_Item extends IProto {
	/** 物品ID */
	id: number;
	/** 数量 */
	count: number;
}

/** .lq.ResBuyFromShop */
declare interface IResBuyFromShop extends IResponse {
	/** 打开福袋时才有奖励内容 */
	rewards: IRewardSlot[];
}

/**
 * * .lq.ReqBuyFromZHP
 * * 协议：杂货铺购买
 */
declare interface IReqBuyFromZHP extends IProto {
	/** 商品Id */
	goods_id: number;
	/** 购买数量 */
	count: number;
}

/**
 * * .lq.ReqPayMonthTicket
 * * 协议：领取月卡工资
 */
declare interface IReqPayMonthTicket extends IProto {
	/** 月卡Id */
	ticket_id: number;
}

/** .lq.ResPayMonthTicket */
declare interface IResPayMonthTicket extends IResponse {
	/** 获得的资源Id */
	resource_id: number;
	/** 获得的资源数量 */
	resource_count: number;
}

/**
 * * .lq.ReqReshZHPShop
 * * 协议：刷新杂货铺商店
 */
declare interface IReqReshZHPShop extends IProto {
	free_refresh: number;
	cost_refresh: number;
}

/** .lq.ResRefreshZHPShop */
declare interface IResRefreshZHPShop extends IResponse {
	zhp: IZHPShop;
}

/**
 * * .lq.ResMonthTicketInfo
 * * 协议：获取月卡信息
 */
declare interface IResMonthTicketInfo extends IResponse {
	month_ticket_info: IMonthTicketInfo;
}

/**
 * * .lq.ReqExchangeCurrency
 * * 协议：兑换货币
 */
declare interface IReqExchangeCurrency extends IProto {
	id: number;
	count: number;
}

/**
 * * .lq.ResServerSettings
 * * 协议：获取服务器设置
 */
declare interface IResServerSettings extends IResponse {
	settings: IServerSettings;
}

/**
 * * .lq.ResAccountSettings
 * * 协议：账户设置
 */
declare interface IResAccountSettings extends IResponse {
	settings: IAccountSetting[];
}

/**
 * * .lq.ReqUpdateAccountSettings
 * * 更新账号设置
 */
declare interface IReqUpdateAccountSettings extends IProto {
	setting: IAccountSetting;
}

/**
 * * .lq.ResModNicknameTime
 * * 协议：获取改名时间
 */
declare interface IResModNicknameTime extends IResponse {
	/** 最后一次改名时间 */
	last_mod_time: number;
}

/**
 * * .lq.ResMisc
 * * 获取账号杂七杂八的数据
 */
declare interface IResMisc extends IResponse {
	/** 以及充值过的人民币档位 */
	recharged_list: number[];
	/** 信仰数据 */
	faiths: IResMisc_MiscFaithData[];
	/** 是否隐藏主播/职业标记 1-隐藏（在任何地方都不显示） 2-显示 */
	verified_hidden: number;
	/** 隐藏主播/职业标记时记录原值是什么 */
	verified_value: number;
	/** 好友房电脑随机角色开关 */
	disable_room_random_bot_char: number;
}

/** undefined */
declare interface IResMisc_MiscFaithData extends IProto {
	faith_id: number;
	count: number;
}

/**
 * * .lq.ReqModifySignature
 * * 协议：修改签名
 */
declare interface IReqModifySignature extends IProto {
	signature: string;
}

/**
 * * .lq.ResIDCardInfo
 * * 协议：获取实名认证信息
 */
declare interface IResIDCardInfo extends IResponse {
	/** 是否已经认证 */
	is_authed: boolean;
	/** IP地址 国家 */
	country: string;
}

/**
 * * .lq.ReqUpdateIDCardInfo
 * * 协议：进行实名认证
 */
declare interface IReqUpdateIDCardInfo extends IProto {
	/** 全名 */
	fullname: string;
	/** 身份证 */
	card_no: string;
}

/**
 * * .lq.ResVipReward
 * * 协议：获取vip奖励
 */
declare interface IResVipReward extends IResponse {
	gained_vip_levels: number[];
}

/**
 * * .lq.ResFetchRefundOrder
 * * 协议： 获取退款订单信息
 */
declare interface IResFetchRefundOrder extends IResponse {
	/** 欠款订单列表 */
	orders: IResFetchRefundOrder_OrderInfo[];
	/** 最后补款时间 */
	clear_deadline: number;
	/** 提示消息 */
	message: II18nContext[];
}

/** undefined */
declare interface IResFetchRefundOrder_OrderInfo extends IProto {
	/** 支付时间 */
	success_time: number;
	/** 商品ID */
	goods_id: number;
	/** 是否已经补款 */
	cleared: number;
	/** 订单ID */
	order_id: string;
}

/**
 * * .lq.ReqGainVipReward
 * * 协议：领取vip奖励
 */
declare interface IReqGainVipReward extends IProto {
	vip_level: number;
}

/**
 * * .lq.ReqFetchCustomizedContestList
 * * 协议：获取赛事列表
 */
declare interface IReqFetchCustomizedContestList extends IProto {
	start: number;
	/** 服务器限制最多 100 个 */
	count: number;
	/** 对外公告语言 */
	lang: string;
}

/** .lq.ResFetchCustomizedContestList */
declare interface IResFetchCustomizedContestList extends IResponse {
	/** 比赛列表 */
	contests: ICustomizedContestBase[];
	/** 关注的比赛列表（与contests会有重复） */
	follow_contests: ICustomizedContestBase[];
}

/**
 * * .lq.ReqFetchCustomizedContestAuthInfo
 * * 协议：获取赛事权限相关信息
 */
declare interface IReqFetchCustomizedContestAuthInfo extends IProto {
	unique_id: number;
}

/** .lq.ResFetchCustomizedContestAuthInfo */
declare interface IResFetchCustomizedContestAuthInfo extends IResponse {
	/** 0=无OB权限 1=有OB权限 */
	observer_level: number;
}

/**
 * * .lq.ReqEnterCustomizedContest
 * * 协议：进入赛事主页
 */
declare interface IReqEnterCustomizedContest extends IProto {
	unique_id: number;
	lang: string;
}

/** .lq.ResEnterCustomizedContest */
declare interface IResEnterCustomizedContest extends IResponse {
	detail_info: ICustomizedContestDetail;
	/** null 表示没有 参与 */
	player_report: ICustomizedContestPlayerReport;
	is_followed: boolean;
	/** 0-未报名 1-已报名 2-可以参赛 */
	state: number;
	is_admin: boolean;
}

/**
 * * .lq.ReqFetchCustomizedContestOnlineInfo
 * * 协议：请求比赛在线信息
 */
declare interface IReqFetchCustomizedContestOnlineInfo extends IProto {
	unique_id: number;
}

/** .lq.ResFetchCustomizedContestOnlineInfo */
declare interface IResFetchCustomizedContestOnlineInfo extends IResponse {
	/** 在线人数 */
	online_player: number;
}

/**
 * * .lq.ReqFetchCustomizedContestByContestId
 * * 协议：获取赛事基本信息（通过赛事ID）
 */
declare interface IReqFetchCustomizedContestByContestId extends IProto {
	contest_id: number;
	lang: string;
}

/** .lq.ResFetchCustomizedContestByContestId */
declare interface IResFetchCustomizedContestByContestId extends IResponse {
	contest_info: ICustomizedContestAbstract;
}

/**
 * * .lq.ReqSignupCustomizedContest
 * * 协议：报名比赛
 */
declare interface IReqSignupCustomizedContest extends IProto {
	unique_id: number;
	client_version_string: string;
}

/** .lq.ResSignupCustomizedContest */
declare interface IResSignupCustomizedContest extends IResponse {
	state: number;
}

/**
 * * .lq.ReqStartCustomizedContest
 * * 协议：开始比赛匹配
 */
declare interface IReqStartCustomizedContest extends IProto {
	unique_id: number;
	client_version_string: string;
}

/** .lq.ReqStopCustomizedContest */
declare interface IReqStopCustomizedContest extends IProto {
	unique_id: number;
}

/**
 * * .lq.ReqJoinCustomizedContestChatRoom
 * * 协议：进入比赛聊天室
 */
declare interface IReqJoinCustomizedContestChatRoom extends IProto {
	unique_id: number;
}

/** .lq.ResJoinCustomizedContestChatRoom */
declare interface IResJoinCustomizedContestChatRoom extends IResponse {
	token: string;
}

/**
 * * .lq.ReqSayChatMessage
 * * 协议：发送聊天消息
 */
declare interface IReqSayChatMessage extends IProto {
	content: string;
	unique_id: number;
}

/**
 * * .lq.ReqFetchCustomizedContestGameLiveList
 * * 协议：获取正在直播的比赛游戏列表
 */
declare interface IReqFetchCustomizedContestGameLiveList extends IProto {
	unique_id: number;
}

/** .lq.ResFetchCustomizedContestGameLiveList */
declare interface IResFetchCustomizedContestGameLiveList extends IResponse {
	live_list: IGameLiveHead[];
}

/**
 * * .lq.ReqFetchCustomizedContestGameRecords
 * * 协议：查询赛事牌谱列表
 */
declare interface IReqFetchCustomizedContestGameRecords extends IProto {
	unique_id: number;
	/** 最新下标 从0开始 初始填null */
	last_index: number;
	season_id: number;
}

/** .lq.ResFetchCustomizedContestGameRecords */
declare interface IResFetchCustomizedContestGameRecords extends IResponse {
	/** 下次请求的下标 */
	next_index: number;
	/** 记录列表（长度不超过请求中的count） */
	record_list: IRecordGame[];
}

/** .lq.ReqTargetCustomizedContest */
declare interface IReqTargetCustomizedContest extends IProto {
	unique_id: number;
}

/**
 * * .lq.ResActivityList
 * * 协议：获取获得列表
 */
declare interface IResActivityList extends IResponse {
	activities: IActivity[];
}

/**
 * * .lq.ResAccountActivityData
 * * 协议：获取玩家获得数据
 */
declare interface IResAccountActivityData extends IResponse {
	exchange_records: IExchangeRecord[];
	task_progress_list: ITaskProgress[];
	accumulated_point_list: IActivityAccumulatedPointData[];
	rank_data_list: IActivityRankPointData[];
	flip_task_progress_list: ITaskProgress[];
	sign_in_data: IResAccountActivityData_ActivitySignInData[];
	richman_data: IResAccountActivityData_ActivityRichmanData[];
	period_task_progress_list: ITaskProgress[];
	random_task_progress_list: ITaskProgress[];
	chest_up_data: IResAccountActivityData_ChestUpData[];
	sns_data: IResAccountActivityData_ActivitySNSData;
	mine_data: IMineActivityData[];
	rpg_data: IRPGActivity[];
	arena_data: IActivityArenaData[];
	feed_data: IFeedActivityData[];
	segment_task_progress_list: ISegmentTaskProgress[];
	vote_records: IVoteData[];
	spot_data: IActivitySpotData[];
	friend_gift_data: IActivityFriendGiftData[];
	upgrade_data: IActivityUpgradeData[];
	gacha_data: IActivityGachaUpdateData[];
	simulation_data: IActivitySimulationData[];
	combining_data: IActivityCombiningLQData[];
	village_data: IActivityVillageData[];
	festival_data: IActivityFestivalData[];
	island_data: IActivityIslandData[];
	story_data: IActivityStoryData[];
	choose_up_data: IActivityChooseUpData[];
	progress_reward_data: IActivityProgressRewardData[];
}

/** undefined */
declare interface IResAccountActivityData_ActivitySignInData extends IProto {
	activity_id: number;
	sign_in_count: number;
	last_sign_in_time: number;
}

/** undefined */
declare interface IResAccountActivityData_BuffData extends IProto {
	type: number;
	remain: number;
	effect: number;
}

/** undefined */
declare interface IResAccountActivityData_ActivityRichmanData extends IProto {
	activity_id: number;
	location: number;
	finished_count: number;
	chest_position: number;
	bank_save: number;
	exp: number;
	buff: IResAccountActivityData_BuffData[];
}

/** undefined */
declare interface IResAccountActivityData_ChestUpData extends IProto {
	/** count id */
	id: number;
	/** 累计抽到非up物品次数 */
	count: number;
}

/** undefined */
declare interface IResAccountActivityData_ActivitySNSData extends IProto {
	blog: ISNSBlog[];
	/** 点赞博文ID */
	liked_id: number[];
	reply: ISNSReply[];
}

/** .lq.SNSBlog */
declare interface ISNSBlog extends IProto {
	/** 博文id */
	id: number;
	/** 第一次打开时间 */
	read_time: number;
}

/** .lq.SNSReply */
declare interface ISNSReply extends IProto {
	/** 博文ID */
	id: number;
	/** NPC回复显示时间（在此时间前不显示NPC回复） */
	reply_time: number;
}

/**
 * * .lq.ReqExchangeActivityItem
 * * 协议：兑换活动道具
 */
declare interface IReqExchangeActivityItem extends IProto {
	/** 兑换ID */
	exchange_id: number;
	count: number;
}

/** .lq.ResExchangeActivityItem */
declare interface IResExchangeActivityItem extends IResponse {
	execute_reward: IExecuteReward[];
}

/**
 * * .lq.ReqCompleteActivityTask
 * * 协议：完成活动任务
 */
declare interface IReqCompleteActivityTask extends IProto {
	task_id: number;
}

/** .lq.ReqCompleteActivityTaskBatch */
declare interface IReqCompleteActivityTaskBatch extends IProto {
	task_list: number[];
}

/** .lq.ReqCompletePeriodActivityTaskBatch */
declare interface IReqCompletePeriodActivityTaskBatch extends IProto {
	task_list: number[];
}

/**
 * * .lq.ReqReceiveActivityFlipTask
 * * 协议：翻牌牌
 */
declare interface IReqReceiveActivityFlipTask extends IProto {
	task_id: number;
}

/** .lq.ResReceiveActivityFlipTask */
declare interface IResReceiveActivityFlipTask extends IResponse {
	count: number;
}

/**
 * * .lq.ReqCompleteSegmentTaskReward
 * * 协议：完成分段任务
 */
declare interface IReqCompleteSegmentTaskReward extends IProto {
	task_id: number;
	count: number;
}

/** .lq.ResCompleteSegmentTaskReward */
declare interface IResCompleteSegmentTaskReward extends IResponse {
	rewards: IExecuteReward[];
}

/**
 * * .lq.ReqFetchActivityFlipInfo
 * * 协议：翻牌牌奖励格领取
 */
declare interface IReqFetchActivityFlipInfo extends IProto {
	activity_id: number;
}

/** .lq.ResFetchActivityFlipInfo */
declare interface IResFetchActivityFlipInfo extends IResponse {
	rewards: number[];
	count: number;
}

/**
 * * .lq.ReqGainAccumulatedPointActivityReward
 * * 协议：领取得点活动奖励
 */
declare interface IReqGainAccumulatedPointActivityReward extends IProto {
	activity_id: number;
	reward_id: number;
}

/** .lq.ReqGainMultiPointActivityReward */
declare interface IReqGainMultiPointActivityReward extends IProto {
	activity_id: number;
	reward_id_list: number[];
}

/** .lq.ReqFetchRankPointLeaderboard */
declare interface IReqFetchRankPointLeaderboard extends IProto {
	leaderboard_id: number;
}

/** .lq.ResFetchRankPointLeaderboard */
declare interface IResFetchRankPointLeaderboard extends IResponse {
	items: IResFetchRankPointLeaderboard_Item[];
	/** 上次刷新排行榜时间 */
	last_refresh_time: number;
}

/** undefined */
declare interface IResFetchRankPointLeaderboard_Item extends IProto {
	account_id: number;
	rank: number;
	view: IPlayerBaseView;
	point: number;
}

/** .lq.ReqGainRankPointReward */
declare interface IReqGainRankPointReward extends IProto {
	leaderboard_id: number;
	activity_id: number;
}

/**
 * * .lq.ReqRichmanNextMove
 * * 协议：大富翁投骰子
 */
declare interface IReqRichmanNextMove extends IProto {
	activity_id: number;
}

/** .lq.ResRichmanNextMove */
declare interface IResRichmanNextMove extends IResponse {
	/** 本次行动路径 */
	paths: IResRichmanNextMove_PathData[];
	/** 本次投骰子结果 */
	dice: number;
	/** 新的位置 */
	location: number;
	/** 踏破次数 */
	finished_count: number;
	/** 本次行走步数 */
	step: number;
	buff: IResRichmanNextMove_BuffData[];
	bank_save: number;
	chest_position: number;
	exp: number;
	bank_save_add: number;
}

/** undefined */
declare interface IResRichmanNextMove_RewardData extends IProto {
	resource_id: number;
	/** 实际获取资源数量 */
	count: number;
	/** 未加成前资源数量 */
	origin_count: number;
	/** 奖励类型  0-踩点奖励 1-宝箱奖励 2-圈数奖励 */
	type: number;
}

/** undefined */
declare interface IResRichmanNextMove_PathData extends IProto {
	/** 起始点为0，其他位置见表 */
	location: number;
	/** 该点获取奖励 */
	rewards: IResRichmanNextMove_RewardData[];
	/** 该点触发事件ID */
	events: number[];
}

/** undefined */
declare interface IResRichmanNextMove_BuffData extends IProto {
	/** 1 - 影响金币获取 2 - 影响下次骰子行走步数 */
	type: number;
	/** 剩余回合数 */
	remain: number;
	/** 效果 50 代表 50% 200 代表 200% */
	effect: number;
}

/** .lq.ReqRichmanSpecialMove */
declare interface IReqRichmanSpecialMove extends IProto {
	activity_id: number;
	step: number;
}

/** .lq.ReqRichmanChestInfo */
declare interface IReqRichmanChestInfo extends IProto {
	activity_id: number;
}

/** .lq.ResRichmanChestInfo */
declare interface IResRichmanChestInfo extends IResponse {
	items: IResRichmanChestInfo_ItemData[];
}

/** undefined */
declare interface IResRichmanChestInfo_ItemData extends IProto {
	id: number;
	count: number;
}

/**
 * * .lq.ReqCreateGameObserveAuth
 * * 协议：创建实时OB权限
 */
declare interface IReqCreateGameObserveAuth extends IProto {
	game_uuid: string;
}

/** .lq.ResCreateGameObserveAuth */
declare interface IResCreateGameObserveAuth extends IResponse {
	token: string;
	location: string;
}

/**
 * * .lq.ReqRefreshGameObserveAuth
 * * 协议：刷新实时OB权限时长
 */
declare interface IReqRefreshGameObserveAuth extends IProto {
	token: string;
}

/** .lq.ResRefreshGameObserveAuth */
declare interface IResRefreshGameObserveAuth extends IResponse {
	ttl: number;
}

/**
 * * .lq.ResActivityBuff
 * * 协议：获取活动buff
 */
declare interface IResActivityBuff extends IResponse {
	buff_list: IActivityBuffData[];
}

/**
 * * .lq.ReqUpgradeActivityBuff
 * * 协议：升级活动buff
 */
declare interface IReqUpgradeActivityBuff extends IProto {
	buff_id: number;
}

/**
 * * .lq.ReqUpgradeActivityLevel
 * * 协议：升级活动升级
 */
declare interface IReqUpgradeActivityLevel extends IProto {
	activity_id: number;
	group: number;
	count: number;
}

/** .lq.ResUpgradeActivityLevel */
declare interface IResUpgradeActivityLevel extends IResponse {
	rewards: IExecuteReward[];
}

/** .lq.ReqReceiveUpgradeActivityReward */
declare interface IReqReceiveUpgradeActivityReward extends IProto {
	activity_id: number;
}

/** .lq.ResReceiveUpgradeActivityReward */
declare interface IResReceiveUpgradeActivityReward extends IResponse {
	rewards: IExecuteReward[];
}

/** .lq.ReqReceiveAllActivityGift */
declare interface IReqReceiveAllActivityGift extends IProto {
	activity_id: number;
}

/** .lq.ResReceiveAllActivityGift */
declare interface IResReceiveAllActivityGift extends IResponse {
	rewards: IExecuteReward[];
	receive_gift: IResReceiveAllActivityGift_ReceiveRewards[];
}

/** undefined */
declare interface IResReceiveAllActivityGift_ReceiveRewards extends IProto {
	id: number;
	from_account_id: number;
	item_id: number;
	count: number;
}

/**
 * * .lq.ResUpgradeChallenge
 * * 协议：试炼券升级
 */
declare interface IResUpgradeChallenge extends IResponse {
	/** 当前试炼券任务 */
	task_progress: ITaskProgress[];
	/** 再发行次数 */
	refresh_count: number;
	/** 试炼等级 */
	level: number;
	/** 已进行比赛场次 */
	match_count: number;
	/** 试炼券ID */
	ticket_id: number;
}

/**
 * * .lq.ResRefreshChallenge
 * * 协议：试炼赛再发行
 */
declare interface IResRefreshChallenge extends IResponse {
	/** 当前试炼券任务 */
	task_progress: ITaskProgress[];
	/** 再发行次数 */
	refresh_count: number;
	/** 试炼等级 */
	level: number;
	/** 已进行比赛场次 */
	match_count: number;
	/** 试炼券ID */
	ticket_id: number;
}

/**
 * * .lq.ResFetchChallengeInfo
 * * 协议：获取试炼赛信息
 */
declare interface IResFetchChallengeInfo extends IResponse {
	/** 当前试炼券任务 */
	task_progress: ITaskProgress[];
	/** 再发行次数 */
	refresh_count: number;
	/** 试炼等级 */
	level: number;
	/** 已进行比赛场次 */
	match_count: number;
	/** 试炼券ID */
	ticket_id: number;
	rewarded_season: number[];
}

/**
 * * .lq.ReqForceCompleteChallengeTask
 * * 协议：试炼赛盖章
 */
declare interface IReqForceCompleteChallengeTask extends IProto {
	task_id: number;
}

/**
 * * .lq.ResFetchABMatch
 * * 协议获取AB轮赛信息
 */
declare interface IResFetchABMatch extends IResponse {
	match_id: number;
	match_count: number;
	buy_in_count: number;
	point: number;
	rewarded: boolean;
	match_max_point: IResFetchABMatch_MatchPoint[];
	quit: boolean;
}

/** undefined */
declare interface IResFetchABMatch_MatchPoint extends IProto {
	match_id: number;
	point: number;
}

/**
 * * .lq.ReqStartUnifiedMatch
 * * 协议：开始匹配
 */
declare interface IReqStartUnifiedMatch extends IProto {
	match_sid: string;
	/** 客户端版本验证用 */
	client_version_string: string;
}

/**
 * * .lq.ReqCancelUnifiedMatch
 * * 协议：取消匹配
 */
declare interface IReqCancelUnifiedMatch extends IProto {
	match_sid: string;
}

/**
 * * .lq.ResChallengeSeasonInfo
 * * 协议：获取试炼赛赛季信息
 */
declare interface IResChallengeSeasonInfo extends IResponse {
	challenge_season_list: IResChallengeSeasonInfo_ChallengeInfo[];
}

/** undefined */
declare interface IResChallengeSeasonInfo_ChallengeInfo extends IProto {
	season_id: number;
	start_time: number;
	end_time: number;
	state: number;
}

/**
 * * .lq.ReqReceiveChallengeRankReward
 * * 协议：领取赛季排名奖励
 */
declare interface IReqReceiveChallengeRankReward extends IProto {
	season_id: number;
}

/** .lq.ResReceiveChallengeRankReward */
declare interface IResReceiveChallengeRankReward extends IResponse {
	rewards: IResReceiveChallengeRankReward_Reward[];
}

/** undefined */
declare interface IResReceiveChallengeRankReward_Reward extends IProto {
	resource_id: number;
	count: number;
}

/**
 * * .lq.ReqBuyInABMatch
 * * 协议：买入AB赛
 */
declare interface IReqBuyInABMatch extends IProto {
	match_id: number;
}

/**
 * * .lq.ReqGamePointRank
 * * 协议：获取打点活动排行榜
 */
declare interface IReqGamePointRank extends IProto {
	activity_id: number;
}

/** .lq.ResGamePointRank */
declare interface IResGamePointRank extends IResponse {
	rank: IResGamePointRank_RankInfo[];
	self_rank: number;
}

/** undefined */
declare interface IResGamePointRank_RankInfo extends IProto {
	account_id: number;
	point: number;
}

/**
 * * .lq.ResFetchSelfGamePointRank
 * * 协议：获取自身打点活动排名
 */
declare interface IResFetchSelfGamePointRank extends IResponse {
	/** 自身的排名百分比,0表示没有参加 */
	self_rate: number;
}

/** .lq.ReqReadSNS */
declare interface IReqReadSNS extends IProto {
	id: number;
}

/** .lq.ResReadSNS */
declare interface IResReadSNS extends IResponse {
	sns_content: ISNSBlog;
}

/** .lq.ReqReplySNS */
declare interface IReqReplySNS extends IProto {
	id: number;
}

/** .lq.ResReplySNS */
declare interface IResReplySNS extends IResponse {
	sns_reply: ISNSReply;
}

/** .lq.ReqLikeSNS */
declare interface IReqLikeSNS extends IProto {
	id: number;
}

/** .lq.ResLikeSNS */
declare interface IResLikeSNS extends IResponse {
	is_liked: number;
}

/** .lq.ReqDigMine */
declare interface IReqDigMine extends IProto {
	activity_id: number;
	point: IPoint;
}

/** .lq.ResDigMine */
declare interface IResDigMine extends IResponse {
	map: IMineReward[];
	reward: IRewardSlot[];
}

/** .lq.ReqFetchLastPrivacy */
declare interface IReqFetchLastPrivacy extends IProto {
	type: number[];
}

/** .lq.ResFetchLastPrivacy */
declare interface IResFetchLastPrivacy extends IResponse {
	privacy: IResFetchLastPrivacy_PrivacyInfo[];
}

/** undefined */
declare interface IResFetchLastPrivacy_PrivacyInfo extends IProto {
	type: number;
	version: string;
}

/** .lq.ReqCheckPrivacy */
declare interface IReqCheckPrivacy extends IProto {
	device_type: string;
	versions: IReqCheckPrivacy_Versions[];
}

/** undefined */
declare interface IReqCheckPrivacy_Versions extends IProto {
	version: string;
	type: number;
}

/** .lq.ReqFetchRPGBattleHistory */
declare interface IReqFetchRPGBattleHistory extends IProto {
	activity_id: number;
}

/** .lq.ResFetchRPGBattleHistory */
declare interface IResFetchRPGBattleHistory extends IResponse {
	battle_result: IResFetchRPGBattleHistory_BattleResult[];
	start_state: IRPGState;
	current_state: IRPGState;
}

/** undefined */
declare interface IResFetchRPGBattleHistory_BattleResult extends IProto {
	/** 牌谱 uuid */
	uuid: string;
	/** 场 */
	chang: number;
	/** 局 */
	ju: number;
	/** 本 */
	ben: number;
	/** 作用目标 1 - player 2 - monster */
	target: number;
	/** 对目标造成伤害 */
	damage: number;
	/** 对目标造成治疗 */
	heal: number;
	/** 怪物序列号 */
	monster_seq: number;
	/** 玩家连续攻击次数 */
	chain_atk: number;
	/** 是否击杀目标 */
	killed: number;
	/** 是否暴击 */
	is_luk: number;
	/** 是否闪避 */
	is_dex: number;
	/** 该次攻击是否是击飞其他玩家造成的连续攻击 */
	is_extra: number;
	/** 奖励 */
	reward: string;
	/** 打点 */
	points: number;
	/** 是否自摸 */
	is_zimo: number;
}

/** .lq.ResFetchRPGBattleHistoryV2 */
declare interface IResFetchRPGBattleHistoryV2 extends IResponse {
	battle_result: IResFetchRPGBattleHistoryV2_BattleResultV2[];
	start_state: IRPGState;
	current_state: IRPGState;
	recent_battle_result: IResFetchRPGBattleHistoryV2_BattleResultV2[];
}

/** undefined */
declare interface IResFetchRPGBattleHistoryV2_BattleResultV2 extends IProto {
	uuid: string;
	/** 场 */
	chang: number;
	/** 局 */
	ju: number;
	/** 本 */
	ben: number;
	/** 对目标造成伤害 */
	damage: number;
	/** 怪物序列号 */
	monster_seq: number;
	/** 是否击杀目标 */
	killed: number;
	buff: IActivityBuffData[];
	points: number;
}

/** .lq.ReqBuyArenaTicket */
declare interface IReqBuyArenaTicket extends IProto {
	activity_id: number;
}

/** .lq.ReqArenaReward */
declare interface IReqArenaReward extends IProto {
	activity_id: number;
}

/** .lq.ReqEnterArena */
declare interface IReqEnterArena extends IProto {
	activity_id: number;
}

/** .lq.ResArenaReward */
declare interface IResArenaReward extends IResponse {
	items: IResArenaReward_RewardItem[];
}

/** undefined */
declare interface IResArenaReward_RewardItem extends IProto {
	id: number;
	count: number;
}

/** .lq.ReqReceiveRPGRewards */
declare interface IReqReceiveRPGRewards extends IProto {
	activity_id: number;
}

/** .lq.ReqReceiveRPGReward */
declare interface IReqReceiveRPGReward extends IProto {
	activity_id: number;
	monster_seq: number;
}

/** .lq.ResReceiveRPGRewards */
declare interface IResReceiveRPGRewards extends IResponse {
	items: IResReceiveRPGRewards_RewardItem[];
}

/** undefined */
declare interface IResReceiveRPGRewards_RewardItem extends IProto {
	id: number;
	count: number;
}

/** .lq.ReqFetchOBToken */
declare interface IReqFetchOBToken extends IProto {
	uuid: string;
}

/** .lq.ResFetchOBToken */
declare interface IResFetchOBToken extends IResponse {
	token: string;
	create_time: number;
	delay: number;
	start_time: number;
}

/** .lq.ReqReceiveCharacterRewards */
declare interface IReqReceiveCharacterRewards extends IProto {
	character_id: number;
	level: number;
}

/** .lq.ResReceiveCharacterRewards */
declare interface IResReceiveCharacterRewards extends IResponse {
	items: IResReceiveCharacterRewards_RewardItem[];
}

/** undefined */
declare interface IResReceiveCharacterRewards_RewardItem extends IProto {
	id: number;
	count: number;
}

/** .lq.ReqFeedActivityFeed */
declare interface IReqFeedActivityFeed extends IProto {
	activity_id: number;
	count: number;
}

/** .lq.ResFeedActivityFeed */
declare interface IResFeedActivityFeed extends IResponse {
	items: IResFeedActivityFeed_RewardItem[];
	feed_count: number;
}

/** undefined */
declare interface IResFeedActivityFeed_RewardItem extends IProto {
	id: number;
	count: number;
}

/** .lq.ReqSendActivityGiftToFriend */
declare interface IReqSendActivityGiftToFriend extends IProto {
	activity_id: number;
	item_id: number;
	target_id: number;
}

/** .lq.ResSendActivityGiftToFriend */
declare interface IResSendActivityGiftToFriend extends IResponse {
	send_gift_count: number;
}

/** .lq.ReqReceiveActivityGift */
declare interface IReqReceiveActivityGift extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqFetchFriendGiftActivityData */
declare interface IReqFetchFriendGiftActivityData extends IProto {
	activity_id: number;
	account_list: number[];
}

/** .lq.ResFetchFriendGiftActivityData */
declare interface IResFetchFriendGiftActivityData extends IResponse {
	list: IResFetchFriendGiftActivityData_FriendData[];
}

/** undefined */
declare interface IResFetchFriendGiftActivityData_ItemCountData extends IProto {
	item: number;
	count: number;
}

/** undefined */
declare interface IResFetchFriendGiftActivityData_FriendData extends IProto {
	account_id: number;
	items: IResFetchFriendGiftActivityData_ItemCountData[];
	receive_count: number;
}

/** .lq.ReqOpenPreChestItem */
declare interface IReqOpenPreChestItem extends IProto {
	item_id: number;
	pool_id: number;
}

/** .lq.ResOpenPreChestItem */
declare interface IResOpenPreChestItem extends IResponse {
	/** 抽取结果 */
	results: IOpenResult[];
}

/** .lq.ReqFetchVoteActivity */
declare interface IReqFetchVoteActivity extends IProto {
	activity_id: number;
}

/** .lq.ResFetchVoteActivity */
declare interface IResFetchVoteActivity extends IResponse {
	/** repeated uint32 vote_rank = 2; */
	update_time: number;
	data: IResFetchVoteActivity_VoteRankData[];
}

/** undefined */
declare interface IResFetchVoteActivity_VoteRankData extends IProto {
	id: number;
	share: number;
}

/** .lq.ReqVoteActivity */
declare interface IReqVoteActivity extends IProto {
	vote: number;
	activity_id: number;
	/** 1 或 10 */
	count: number;
}

/** .lq.ResVoteActivity */
declare interface IResVoteActivity extends IResponse {
	vote_records: IVoteData[];
}

/** .lq.ReqUnlockActivitySpot */
declare interface IReqUnlockActivitySpot extends IProto {
	unique_id: number;
}

/** .lq.ReqUnlockActivitySpotEnding */
declare interface IReqUnlockActivitySpotEnding extends IProto {
	unique_id: number;
	ending_id: number;
}

/** .lq.ReqReceiveActivitySpotReward */
declare interface IReqReceiveActivitySpotReward extends IProto {
	unique_id: number;
}

/** .lq.ResReceiveActivitySpotReward */
declare interface IResReceiveActivitySpotReward extends IResponse {
	items: IResReceiveActivitySpotReward_RewardItem[];
}

/** undefined */
declare interface IResReceiveActivitySpotReward_RewardItem extends IProto {
	id: number;
	count: number;
}

/** .lq.ReqLogReport */
declare interface IReqLogReport extends IProto {
	success: number;
	failed: number;
}

/** .lq.ReqBindOauth2 */
declare interface IReqBindOauth2 extends IProto {
	type: number;
	token: string;
}

/** .lq.ReqFetchOauth2 */
declare interface IReqFetchOauth2 extends IProto {
	type: number;
}

/** .lq.ResFetchOauth2 */
declare interface IResFetchOauth2 extends IResponse {
	openid: string;
}

/** .lq.ResDeleteAccount */
declare interface IResDeleteAccount extends IResponse {
	delete_time: number;
}

/** .lq.ReqSetLoadingImage */
declare interface IReqSetLoadingImage extends IProto {
	images: number[];
}

/** .lq.ResFetchShopInterval */
declare interface IResFetchShopInterval extends IResponse {
	result: IResFetchShopInterval_ShopInterval[];
}

/** undefined */
declare interface IResFetchShopInterval_ShopInterval extends IProto {
	group_id: number;
	interval: number;
}

/** .lq.ResFetchActivityInterval */
declare interface IResFetchActivityInterval extends IResponse {
	result: IResFetchActivityInterval_ActivityInterval[];
}

/** undefined */
declare interface IResFetchActivityInterval_ActivityInterval extends IProto {
	activity_id: number;
	interval: number;
}

/** .lq.ResFetchrecentFriend */
declare interface IResFetchrecentFriend extends IResponse {
	account_list: number[];
}

/** .lq.ReqOpenGacha */
declare interface IReqOpenGacha extends IProto {
	activity_id: number;
	count: number;
}

/** .lq.ResOpenGacha */
declare interface IResOpenGacha extends IResponse {
	result_list: number[];
	reward_items: IExecuteReward[];
	sp_reward_items: IExecuteReward[];
	remain_count: number;
}

/** .lq.ReqTaskRequest */
declare interface IReqTaskRequest extends IProto {
	params: number[];
}

/** .lq.ReqSimulationActivityTrain */
declare interface IReqSimulationActivityTrain extends IProto {
	activity_id: number;
	/** 训练指令, 1-对局 2-读书 3-跑步 4-祈祷 5-摸鱼 */
	type: number;
}

/** .lq.ResSimulationActivityTrain */
declare interface IResSimulationActivityTrain extends IResponse {
	/** 1-成功 2-失败 3-大成功 */
	result_type: number;
	/** 能力值变动后最终值 */
	final_stats: number[];
}

/** .lq.ReqFetchSimulationGameRecord */
declare interface IReqFetchSimulationGameRecord extends IProto {
	game_uuid: string;
	activity_id: number;
}

/** .lq.ResFetchSimulationGameRecord */
declare interface IResFetchSimulationGameRecord extends IResponse {
	messages: IActivitySimulationGameRecordMessage[];
}

/** .lq.ReqStartSimulationActivityGame */
declare interface IReqStartSimulationActivityGame extends IProto {
	activity_id: number;
}

/** .lq.ResStartSimulationActivityGame */
declare interface IResStartSimulationActivityGame extends IResponse {
	records: IActivitySimulationGameRecord[];
}

/** .lq.ReqFetchSimulationGameRank */
declare interface IReqFetchSimulationGameRank extends IProto {
	activity_id: number;
	day: number;
}

/** .lq.ResFetchSimulationGameRank */
declare interface IResFetchSimulationGameRank extends IResponse {
	rank: IResFetchSimulationGameRank_RankInfo[];
}

/** undefined */
declare interface IResFetchSimulationGameRank_RankInfo extends IProto {
	character: number;
	score: number;
}

/** .lq.ReqGenerateCombiningCraft */
declare interface IReqGenerateCombiningCraft extends IProto {
	activity_id: number;
	bin_id: number;
}

/** .lq.ResGenerateCombiningCraft */
declare interface IResGenerateCombiningCraft extends IResponse {
	pos: number;
	craft_id: number;
}

/** .lq.ReqMoveCombiningCraft */
declare interface IReqMoveCombiningCraft extends IProto {
	activity_id: number;
	from: number;
	to: number;
}

/** .lq.ResMoveCombiningCraft */
declare interface IResMoveCombiningCraft extends IResponse {
	pos: number;
	combined: number;
	craft_id: number;
	bonus: IResMoveCombiningCraft_BonusData;
}

/** undefined */
declare interface IResMoveCombiningCraft_BonusData extends IProto {
	craft_id: number;
	pos: number;
}

/** .lq.ReqCombiningRecycleCraft */
declare interface IReqCombiningRecycleCraft extends IProto {
	activity_id: number;
	pos: number;
}

/** .lq.ResCombiningRecycleCraft */
declare interface IResCombiningRecycleCraft extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqRecoverCombiningRecycle */
declare interface IReqRecoverCombiningRecycle extends IProto {
	activity_id: number;
}

/** .lq.ResRecoverCombiningRecycle */
declare interface IResRecoverCombiningRecycle extends IResponse {
	craft_id: number;
	pos: number;
}

/** .lq.ReqFinishCombiningOrder */
declare interface IReqFinishCombiningOrder extends IProto {
	activity_id: number;
	craft_pos: number;
	order_pos: number;
}

/** .lq.ResFinishCombiningOrder */
declare interface IResFinishCombiningOrder extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ResFetchInfo */
declare interface IResFetchInfo extends IResponse {
	server_time: IResServerTime;
	server_setting: IResServerSettings;
	client_value: IResClientValue;
	friend_list: IResFriendList;
	friend_apply_list: IResFriendApplyList;
	recent_friend: IResFetchrecentFriend;
	mail_info: IResMailInfo;
	receive_coin_info: IResReviveCoinInfo;
	title_list: IResTitleList;
	bag_info: IResBagInfo;
	shop_info: IResShopInfo;
	shop_interval: IResFetchShopInterval;
	activity_data: IResAccountActivityData;
	activity_interval: IResFetchActivityInterval;
	activity_buff: IResActivityBuff;
	vip_reward: IResVipReward;
	month_ticket_info: IResMonthTicketInfo;
	achievement: IResAchievement;
	comment_setting: IResCommentSetting;
	account_settings: IResAccountSettings;
	mod_nickname_time: IResModNicknameTime;
	misc: IResMisc;
	announcement: IResAnnouncement;
	activity_list: IResActivityList;
	character_info: IResCharacterInfo;
	all_common_views: IResAllcommonViews;
	collected_game_record_list: IResCollectedGameRecordList;
	maintain_notice: IResFetchMaintainNotice;
	random_character: IResRandomCharacter;
	maintenance_info: IResFetchServerMaintenanceInfo;
	seer_info: IResFetchSeerInfo;
	annual_report_info: IResFetchAnnualReportInfo;
}

/** .lq.ResFetchSeerInfo */
declare interface IResFetchSeerInfo extends IResponse {
	remain_count: number;
	/** 牌谱时间范围限制，小于该值的牌谱不显示分析按钮，形式：250101，代表牌谱 uuid 时间小于 250101 的牌谱不能分析 */
	date_limit: number;
	/** 解析成功的牌谱过期时间，秒 */
	expire_time: number;
}

/** .lq.ResFetchServerMaintenanceInfo */
declare interface IResFetchServerMaintenanceInfo extends IResponse {
	function_maintenance: IResFetchServerMaintenanceInfo_ServerFunctionMaintenanceInfo[];
}

/** undefined */
declare interface IResFetchServerMaintenanceInfo_ServerFunctionMaintenanceInfo extends IProto {
	/**
	 * * FunctionName {
	 * * RandomCharacter = 'random-character',
	 * * Badge = 'badge',
	 * * Seer = 'seer',
	 * * }
	 */
	name: string;
	open: boolean;
}

/** .lq.ReqUpgradeVillageBuilding */
declare interface IReqUpgradeVillageBuilding extends IProto {
	/** 建筑id */
	building_id: number;
	/** 活动id */
	activity_id: number;
}

/** .lq.ReqReceiveVillageBuildingReward */
declare interface IReqReceiveVillageBuildingReward extends IProto {
	activity_id: number;
	building_id: number;
	rewards: IRewardSlot[];
}

/** .lq.ResReceiveVillageBuildingReward */
declare interface IResReceiveVillageBuildingReward extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqStartVillageTrip */
declare interface IReqStartVillageTrip extends IProto {
	dest: number;
	activity_id: number;
}

/** .lq.ReqReceiveVillageTripReward */
declare interface IReqReceiveVillageTripReward extends IProto {
	activity_id: number;
	dest_id: number;
	rewards: IRewardSlot[];
}

/** .lq.ResReceiveVillageTripReward */
declare interface IResReceiveVillageTripReward extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqCompleteVillageTask */
declare interface IReqCompleteVillageTask extends IProto {
	task_id: number;
	activity_id: number;
}

/** .lq.ResCompleteVillageTask */
declare interface IResCompleteVillageTask extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqGetFriendVillageData */
declare interface IReqGetFriendVillageData extends IProto {
	account_list: number[];
	activity_id: number;
}

/** .lq.ResGetFriendVillageData */
declare interface IResGetFriendVillageData extends IResponse {
	list: IResGetFriendVillageData_FriendVillageData[];
}

/** undefined */
declare interface IResGetFriendVillageData_FriendVillageData extends IProto {
	account_id: number;
	level: number;
}

/** .lq.ReqSetVillageWorker */
declare interface IReqSetVillageWorker extends IProto {
	building_id: number;
	/** 如果这个位置上有人就卸下来，没人就装上去 */
	worker_pos: number;
	activity_id: number;
}

/** .lq.ResSetVillageWorker */
declare interface IResSetVillageWorker extends IResponse {
	building: IVillageBuildingData;
	update_time: number;
}

/** .lq.ReqNextRoundVillage */
declare interface IReqNextRoundVillage extends IProto {
	activity_id: number;
}

/** .lq.ResNextRoundVillage */
declare interface IResNextRoundVillage extends IResponse {
	activity_data: IActivityVillageData;
}

/** .lq.ReqResolveFestivalActivityProposal */
declare interface IReqResolveFestivalActivityProposal extends IProto {
	activity_id: number;
	id: number;
	select: number;
}

/** .lq.ResResolveFestivalActivityProposal */
declare interface IResResolveFestivalActivityProposal extends IResponse {
	/** 生效技能 */
	effected_buff: number[];
	/** 1-成功 2-大成功 3-失败 */
	result: number;
	reward_items: IExecuteResult[];
	level: number;
}

/** .lq.ReqResolveFestivalActivityEvent */
declare interface IReqResolveFestivalActivityEvent extends IProto {
	activity_id: number;
	id: number;
	select: number;
}

/** .lq.ResResolveFestivalActivityEvent */
declare interface IResResolveFestivalActivityEvent extends IResponse {
	/** 生效技能 */
	effected_buff: number[];
	reward_items: IExecuteResult[];
	ending_id: number;
	level: number;
}

/** .lq.ReqBuyFestivalProposal */
declare interface IReqBuyFestivalProposal extends IProto {
	activity_id: number;
}

/** .lq.ResBuyFestivalProposal */
declare interface IResBuyFestivalProposal extends IResponse {
	new_proposal: IFestivalProposalData;
}

/** .lq.ReqIslandActivityMove */
declare interface IReqIslandActivityMove extends IProto {
	activity_id: number;
	zone_id: number;
}

/** .lq.ReqIslandActivityBuy */
declare interface IReqIslandActivityBuy extends IProto {
	activity_id: number;
	items: IReqIslandActivityBuy_BuyItems[];
}

/** undefined */
declare interface IReqIslandActivityBuy_BuyItems extends IProto {
	goods_id: number;
	pos: number[];
	rotate: number;
	bag_id: number;
	price: number;
}

/** .lq.ReqIslandActivitySell */
declare interface IReqIslandActivitySell extends IProto {
	activity_id: number;
	items: IReqIslandActivitySell_SellItem[];
}

/** undefined */
declare interface IReqIslandActivitySell_SellItem extends IProto {
	bag_id: number;
	id: number;
	price: number;
}

/** .lq.ReqIslandActivityTidyBag */
declare interface IReqIslandActivityTidyBag extends IProto {
	activity_id: number;
	bag_data: IReqIslandActivityTidyBag_BagData[];
}

/** undefined */
declare interface IReqIslandActivityTidyBag_BagData extends IProto {
	bag_id: number;
	items: IReqIslandActivityTidyBag_ITemData[];
	drops: number[];
}

/** undefined */
declare interface IReqIslandActivityTidyBag_ITemData extends IProto {
	id: number;
	pos: number[];
	rotate: number;
}

/** .lq.ReqIslandActivityUnlockBagGrid */
declare interface IReqIslandActivityUnlockBagGrid extends IProto {
	activity_id: number;
	bag_id: number;
	pos: number[];
}

/** .lq.ContestSetting */
declare interface IContestSetting extends IProto {
	/** 报名玩家等级段位限制, or 关系 */
	level_limit: IContestSetting_LevelLimit[];
	/** 对局数限制 */
	game_limit: number;
	/** 赛事系统消息推送 0=不推送 1=推送 */
	system_broadcast: number;
}

/** undefined */
declare interface IContestSetting_LevelLimit extends IProto {
	/** 类型 1=四人麻将 2=三人麻将 */
	type: number;
	/** 段位 10101=初心一星... */
	value: number;
}

/** .lq.ReqCreateCustomizedContest */
declare interface IReqCreateCustomizedContest extends IProto {
	name: string;
	open_show: number;
	game_rule_setting: IGameMode;
	start_time: number;
	end_time: number;
	/** 0=非自动匹配 1=自动匹配 */
	auto_match: number;
	/** 排名显示方式 0=无 1=最近3场 2=最近5场 12=最佳2场 13=最佳3场 14=最佳4场 15=最佳5场 若season_type为团队赛，则传0 */
	rank_rule: number;
	contest_setting: IContestSetting;
	/** 赛季模式 0：个人赛 1：团队赛 */
	season_type: number;
}

/** .lq.ResCreateCustomizedContest */
declare interface IResCreateCustomizedContest extends IResponse {
	unique_id: number;
}

/** .lq.ReqFetchmanagerCustomizedContestList */
declare interface IReqFetchmanagerCustomizedContestList extends IProto {
	lang: string;
}

/** .lq.ResFetchManagerCustomizedContestList */
declare interface IResFetchManagerCustomizedContestList extends IResponse {
	/** 比赛列表 */
	contests: ICustomizedContestBase[];
}

/** .lq.ReqFetchManagerCustomizedContest */
declare interface IReqFetchManagerCustomizedContest extends IProto {
	unique_id: number;
}

/** .lq.ResFetchManagerCustomizedContest */
declare interface IResFetchManagerCustomizedContest extends IResponse {
	name: string;
	open_show: number;
	game_rule_setting: IGameMode;
	start_time: number;
	end_time: number;
	auto_match: number;
	rank_rule: number;
	/** 审核状态 0-正常 1-正在审核中 */
	check_state: number;
	/** 审核中的名称 */
	checking_name: string;
	contest_setting: IContestSetting;
	/** 赛季模式 0-个人赛 1-团队赛 */
	season_type: number;
}

/** .lq.ReqUpdateManagerCustomizedContest */
declare interface IReqUpdateManagerCustomizedContest extends IProto {
	name: string;
	open_show: number;
	game_rule_setting: IGameMode;
	start_time: number;
	end_time: number;
	unique_id: number;
	auto_match: number;
	rank_rule: number;
	contest_setting: IContestSetting;
}

/** .lq.ReqFetchContestPlayerRank */
declare interface IReqFetchContestPlayerRank extends IProto {
	unique_id: number;
	limit: number;
	offset: number;
}

/** .lq.ResFetchContestPlayerRank */
declare interface IResFetchContestPlayerRank extends IResponse {
	total: number;
	rank: IResFetchContestPlayerRank_SeasonRank[];
	player_data: IResFetchContestPlayerRank_PlayerData;
}

/** undefined */
declare interface IResFetchContestPlayerRank_ContestPlayerAccountData extends IProto {
	total_game_count: number;
	recent_games: IResFetchContestPlayerRank_ContestGameResult[];
	highest_series_points: IResFetchContestPlayerRank_ContestSeriesGameResult[];
}

/** undefined */
declare interface IResFetchContestPlayerRank_SeasonRank extends IProto {
	account_id: number;
	nickname: string;
	data: IResFetchContestPlayerRank_ContestPlayerAccountData;
}

/** undefined */
declare interface IResFetchContestPlayerRank_PlayerData extends IProto {
	rank: number;
	data: IResFetchContestPlayerRank_ContestPlayerAccountData;
}

/** undefined */
declare interface IResFetchContestPlayerRank_ContestGameResult extends IProto {
	rank: number;
	total_point: number;
}

/** undefined */
declare interface IResFetchContestPlayerRank_ContestSeriesGameResult extends IProto {
	key: number;
	results: IResFetchContestPlayerRank_ContestGameResult[];
}

/** .lq.ReqFetchContestTeamRank */
declare interface IReqFetchContestTeamRank extends IProto {
	/** 赛事唯一id */
	unique_id: number;
	/** 赛程id */
	season_id: number;
	limit: number;
	offset: number;
}

/**
 * * .lq.ResFetchContestTeamRank
 * * 团队赛排行榜返回信息
 */
declare interface IResFetchContestTeamRank extends IResponse {
	/** 当前队伍总数 */
	total: number;
	/** 排行榜总数据 */
	rank: IResFetchContestTeamRank_SeasonTeamRank[];
	/** 玩家所在队伍数据（玩家无归属时该字段为空） */
	team_rank: IResFetchContestTeamRank_SeasonTeamRank;
}

/** undefined */
declare interface IResFetchContestTeamRank_ContestTeamRankResult extends IProto {
	/** 团队名次 */
	rank: number;
	/** 团队累计总分 */
	total_point: number;
	/** 全队累计对局次数 */
	total_game_count: number;
	/** 队员总数 */
	member_count: number;
}

/** undefined */
declare interface IResFetchContestTeamRank_SeasonTeamRank extends IProto {
	/** 队伍id */
	team_id: number;
	/** 队伍名称 */
	name: string;
	/** 队伍排名数据 */
	result: IResFetchContestTeamRank_ContestTeamRankResult;
}

/**
 * * .lq.ReqFetchContestTeamPlayerRank
 * * 大会室团队赛个人排名请求协议
 */
declare interface IReqFetchContestTeamPlayerRank extends IProto {
	/** 赛事唯一id */
	unique_id: number;
	/** 赛程id */
	season_id: number;
	offset: number;
	limit: number;
}

/**
 * * .lq.ResFetchContestTeamPlayerRank
 * * 大会室团队赛个人协议返回协议
 */
declare interface IResFetchContestTeamPlayerRank extends IResponse {
	/** 玩家总数 */
	total: number;
	/** 排行榜位次信息 */
	rank: IResFetchContestTeamPlayerRank_SeasonTeamRank[];
	/** 当前玩家排名数据 */
	player_data: IResFetchContestTeamPlayerRank_PlayerData;
}

/** undefined */
declare interface IResFetchContestTeamPlayerRank_ContestTeamPlayerAccountData extends IProto {
	/** 玩家名次 */
	rank: number;
	/** 玩家累计总分 */
	total_point: number;
	/** 玩家对局总数 */
	total_game_count: number;
}

/** undefined */
declare interface IResFetchContestTeamPlayerRank_SeasonTeamRank extends IProto {
	/** 玩家id */
	account_id: number;
	/** 玩家昵称 */
	nickname: string;
	/** 玩家排名数据 */
	data: IResFetchContestTeamPlayerRank_ContestTeamPlayerAccountData;
	/** 团队名称（若当前玩家不属于任何队伍则为空） */
	team_name: string;
	/** 团队id */
	team_id: number;
}

/** undefined */
declare interface IResFetchContestTeamPlayerRank_PlayerData extends IProto {
	/** 当前玩家排名 */
	rank: number;
	data: IResFetchContestTeamPlayerRank_ContestTeamPlayerAccountData;
	/** 团队名称（若当前玩家不属于任何队伍则为空） */
	team_name: string;
	/** 团队id */
	team_id: number;
}

/**
 * * .lq.ReqFetchContestTeamMember
 * * 队伍明细请求数据
 */
declare interface IReqFetchContestTeamMember extends IProto {
	/** 赛事唯一id */
	unique_id: number;
	/** 赛程id */
	season_id: number;
	/** 队伍id */
	team_id: number;
	offset: number;
	limit: number;
}

/**
 * * .lq.ResFetchContestTeamMember
 * * 队伍明细返回数据
 */
declare interface IResFetchContestTeamMember extends IResponse {
	/** 玩家列表按分数排序 */
	members: IResFetchContestTeamMember_ContestTeamMember[];
}

/** undefined */
declare interface IResFetchContestTeamMember_ContestTeamMember extends IProto {
	/** 玩家id */
	account_id: number;
	/** 玩家对局总数 */
	total_game_count: number;
	/** 玩家分数 */
	total_score: number;
	/** 玩家昵称 */
	nickname: string;
}

/** .lq.ReqFetchReadyPlayerList */
declare interface IReqFetchReadyPlayerList extends IProto {
	unique_id: number;
}

/** .lq.ResFetchReadyPlayerList */
declare interface IResFetchReadyPlayerList extends IResponse {
	list: IResFetchReadyPlayerList_Player[];
}

/** undefined */
declare interface IResFetchReadyPlayerList_Player extends IProto {
	account_id: number;
	nickname: string;
	team_name: string;
}

/** .lq.ReqCreateGamePlan */
declare interface IReqCreateGamePlan extends IProto {
	unique_id: number;
	account_list: number[];
	game_start_time: number;
	/** 0=不随机座位 1=随机座位 */
	shuffle_seats: number;
	/** 0=摸切电脑 1=简单电脑 2=普通电脑 */
	ai_level: number;
}

/** .lq.ResGenerateContestManagerLoginCode */
declare interface IResGenerateContestManagerLoginCode extends IResponse {
	code: string;
}

/** .lq.ReqAmuletActivityFetchInfo */
declare interface IReqAmuletActivityFetchInfo extends IProto {
	activity_id: number;
}

/** .lq.ResAmuletActivityFetchInfo */
declare interface IResAmuletActivityFetchInfo extends IResponse {
	data: IActivityAmuletData;
}

/** .lq.ReqAmuletActivityFetchBrief */
declare interface IReqAmuletActivityFetchBrief extends IProto {
	activity_id: number;
}

/** .lq.ResAmuletActivityFetchBrief */
declare interface IResAmuletActivityFetchBrief extends IResponse {
	/** 永久强化信息 */
	upgrade: IActivityAmuletUpgradeData;
	/** 图鉴信息 */
	illustrated_book: IActivityAmuletIllustratedBookData;
	/** 最近通关记录 */
	game_records: IActivityAmuletGameRecordData[];
	/** 统计数据 */
	statistic: IActivityAmuletStatisticData;
}

/** .lq.ReqFetchAmuletActivityData */
declare interface IReqFetchAmuletActivityData extends IProto {
	activity_id: number;
}

/** .lq.ResFetchAmuletActivityData */
declare interface IResFetchAmuletActivityData extends IResponse {
	data: IActivityAmuletData;
}

/** .lq.ResAmuletEventResponse */
declare interface IResAmuletEventResponse extends IResponse {
	events: IAmuletEventData[];
}

/** .lq.ReqAmuletActivityStartGame */
declare interface IReqAmuletActivityStartGame extends IProto {
	activity_id: number;
}

/** .lq.ReqAmuletActivityOperate */
declare interface IReqAmuletActivityOperate extends IProto {
	activity_id: number;
	/** 操作类型 1-切牌 4-开杠 8-和牌 99-模切 100-结束换牌 101-换牌 */
	type: number;
	/** 操作牌 切牌时传要切的牌  杠时传杠的牌(四张都要传)  和牌不用传 */
	tile_list: number[];
}

/** .lq.ReqAmuletActivityUpgrade */
declare interface IReqAmuletActivityUpgrade extends IProto {
	activity_id: number;
}

/** .lq.ReqAmuletActivitySelectPack */
declare interface IReqAmuletActivitySelectPack extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqAmuletActivityBuy */
declare interface IReqAmuletActivityBuy extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqAmuletActivitySellEffect */
declare interface IReqAmuletActivitySellEffect extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqAmuletActivityEffectSort */
declare interface IReqAmuletActivityEffectSort extends IProto {
	activity_id: number;
	sorted_id: number[];
}

/** .lq.ReqAmuletActivityGiveup */
declare interface IReqAmuletActivityGiveup extends IProto {
	activity_id: number;
}

/** .lq.ReqAmuletActivityRefreshShop */
declare interface IReqAmuletActivityRefreshShop extends IProto {
	activity_id: number;
}

/** .lq.ReqAmuletActivitySelectFreeEffect */
declare interface IReqAmuletActivitySelectFreeEffect extends IProto {
	activity_id: number;
	/** 选择的护身符id */
	selected_id: number;
}

/** .lq.ReqAmuletActivityUpgradeShopBuff */
declare interface IReqAmuletActivityUpgradeShopBuff extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqAmuletActivityEndShopping */
declare interface IReqAmuletActivityEndShopping extends IProto {
	activity_id: number;
}

/** .lq.ReqAmuletActivitySetSkillLevel */
declare interface IReqAmuletActivitySetSkillLevel extends IProto {
	activity_id: number;
	/** 技能点数与等级 */
	skill: IAmuletSkillData[];
}

/** .lq.ResAmuletActivityMaintainInfo */
declare interface IResAmuletActivityMaintainInfo extends IResponse {
	/** 'maintain' 表示当前处于维护模式中，其他任意值都等于不维护 */
	mode: string;
}

/** .lq.ReqAmuletActivitySelectRewardPack */
declare interface IReqAmuletActivitySelectRewardPack extends IProto {
	activity_id: number;
	id: number;
}

/** .lq.ReqAmuletActivitySelectBookEffect */
declare interface IReqAmuletActivitySelectBookEffect extends IProto {
	activity_id: number;
	effect_id: number;
}

/**
 * * .lq.ReqAmuletActivityDebug
 * * ==DevDebug Start==
 * * debug 协议在正式版本删除
 */
declare interface IReqAmuletActivityDebug extends IProto {
	activity_data: IActivityAmuletData;
}

/** .lq.ReqAmuletActivityFetchDebug */
declare interface IReqAmuletActivityFetchDebug extends IProto {
	activity_id: number;
}

/** .lq.ResFetchAmuletActivityDebug */
declare interface IResFetchAmuletActivityDebug extends IResponse {
	activity_data: IActivityAmuletData;
}

/** .lq.ReqStoryActivityUnlock */
declare interface IReqStoryActivityUnlock extends IProto {
	activity_id: number;
	story_id: number;
}

/** .lq.ReqStoryActivityUnlockEnding */
declare interface IReqStoryActivityUnlockEnding extends IProto {
	activity_id: number;
	story_id: number;
	ending_id: number;
}

/** .lq.ReqStoryActivityReceiveEndingReward */
declare interface IReqStoryActivityReceiveEndingReward extends IProto {
	activity_id: number;
	story_id: number;
	ending_id: number;
}

/** .lq.ResStoryReward */
declare interface IResStoryReward extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqStoryActivityReceiveFinishReward */
declare interface IReqStoryActivityReceiveFinishReward extends IProto {
	activity_id: number;
	story_id: number;
}

/** .lq.ReqStoryActivityReceiveAllFinishReward */
declare interface IReqStoryActivityReceiveAllFinishReward extends IProto {
	activity_id: number;
	story_id: number;
}

/** .lq.ReqStoryActivityUnlockEndingAndReceive */
declare interface IReqStoryActivityUnlockEndingAndReceive extends IProto {
	activity_id: number;
	story_id: number;
	ending_id: number;
}

/** .lq.ResStoryActivityUnlockEndingAndReceive */
declare interface IResStoryActivityUnlockEndingAndReceive extends IResponse {
	ending_reward: IExecuteReward[];
	finish_reward: IExecuteReward[];
	all_finish_reward: IExecuteReward[];
}

/** .lq.ReqFetchActivityRank */
declare interface IReqFetchActivityRank extends IProto {
	activity_id: number;
	/** 可选，不传就是获取全服排名，传了就是获取 account_list 内的账号排名，account_list 内的账号必须是好友 */
	account_list: number[];
}

/** .lq.ResFetchActivityRank */
declare interface IResFetchActivityRank extends IResponse {
	/** 排名信息，如果是全服排名返回前100 */
	items: IResFetchActivityRank_ActivityRankItem[];
	self: IResFetchActivityRank_ActivityRankItem;
}

/** undefined */
declare interface IResFetchActivityRank_ActivityRankItem extends IProto {
	account_id: number;
	score: number;
	/** json字符串,排行榜额外信息 */
	data: string;
	/** 排名 */
	rank: number;
}

/** .lq.ReqFetchQuestionnaireList */
declare interface IReqFetchQuestionnaireList extends IProto {
	lang: string;
	channel: string;
}

/** .lq.ResFetchQuestionnaireList */
declare interface IResFetchQuestionnaireList extends IResponse {
	list: IQuestionnaireBrief[];
	/** 已经回答过的问卷列表 */
	finished_list: number[];
}

/** .lq.ReqFetchQuestionnaireDetail */
declare interface IReqFetchQuestionnaireDetail extends IProto {
	id: number;
	lang: string;
	channel: string;
}

/** .lq.ResFetchQuestionnaireDetail */
declare interface IResFetchQuestionnaireDetail extends IResponse {
	detail: IQuestionnaireDetail;
}

/** .lq.ReqSetVerifiedHidden */
declare interface IReqSetVerifiedHidden extends IProto {
	verified_hidden: number;
}

/** .lq.ReqSubmitQuestionnaire */
declare interface IReqSubmitQuestionnaire extends IProto {
	questionnaire_id: number;
	questionnaire_version_id: number;
	answers: IReqSubmitQuestionnaire_QuestionnaireAnswer[];
	/** 客户端问卷打开的时间 */
	open_time: number;
	/** 客户端问卷完成的时间 */
	finish_time: number;
	/** 客户端类型 */
	client: string;
}

/** undefined */
declare interface IReqSubmitQuestionnaire_QuestionnaireAnswer extends IProto {
	question_id: number;
	values: IReqSubmitQuestionnaire_QuestionnaireAnswerValue[];
}

/** undefined */
declare interface IReqSubmitQuestionnaire_QuestionnaireAnswerValue extends IProto {
	value: string;
	custom_input: string;
}

/** .lq.ReqSetFriendRoomRandomBotChar */
declare interface IReqSetFriendRoomRandomBotChar extends IProto {
	/** 1 - 只用一姬  0 - 所有角色池里随机 */
	disable_random_char: number;
}

/** .lq.ReqFetchAccountGameHuRecords */
declare interface IReqFetchAccountGameHuRecords extends IProto {
	uuid: string;
	/** 1 - 四人麻将  2 - 三人麻将 */
	category: number;
	/** 1 - 段位场  2 - 友人场  3 - 活动场 */
	type: number;
}

/** .lq.ResFetchAccountGameHuRecords */
declare interface IResFetchAccountGameHuRecords extends IResponse {
	records: IResFetchAccountGameHuRecords_GameHuRecords[];
}

/** undefined */
declare interface IResFetchAccountGameHuRecords_GameHuRecords extends IProto {
	chang: number;
	ju: number;
	ben: number;
	title_id: number;
	hands: string[];
	ming: string[];
	hupai: string;
	hu_fans: number[];
}

/** .lq.ReqFetchAccountInfoExtra */
declare interface IReqFetchAccountInfoExtra extends IProto {
	account_id: number;
	/** 1 - 四人麻将  2 - 三人麻将 */
	category: number;
	/** 1 - 段位场  2 - 友人场  3 - 活动场 */
	type: number;
}

/** .lq.ResFetchAccountInfoExtra */
declare interface IResFetchAccountInfoExtra extends IResponse {
	recent_games: IResFetchAccountInfoExtra_AccountInfoGameRecord[];
	hu_type_details: IResFetchAccountInfoExtra_GameHuTypeDetail[];
	game_rank_details: IResFetchAccountInfoExtra_AccountGameRankDetail[];
}

/** undefined */
declare interface IResFetchAccountInfoExtra_AccountInfoGameRecord extends IProto {
	uuid: string;
	start_time: number;
	end_time: number;
	tag: number;
	sub_tag: number;
	rank: number;
	final_point: number;
	results: IResFetchAccountInfoExtra_AccountGameResult[];
}

/** undefined */
declare interface IResFetchAccountInfoExtra_GameHuTypeDetail extends IProto {
	/** 1- 立直 2- 副露 3- 默听 */
	type: number;
	count: number;
}

/** undefined */
declare interface IResFetchAccountInfoExtra_AccountGameRankDetail extends IProto {
	rank: number;
	count: number;
}

/** undefined */
declare interface IResFetchAccountInfoExtra_AccountGameResult extends IProto {
	rank: number;
	account_id: number;
	nickname: string;
	verified: number;
	grading_score: number;
	final_point: number;
	seat: number;
	level: IAccountLevel;
	level3: IAccountLevel;
}

/** .lq.ReqSetAccountFavoriteHu */
declare interface IReqSetAccountFavoriteHu extends IProto {
	/** 1- 显示最近大和 2- 显示自选和牌 */
	mode: number;
	/** 1 - 四人麻将  2 - 三人麻将 */
	category: number;
	/** 1 - 段位场  2 - 友人场  3 - 活动场 */
	type: number;
	/** mode = 1 时不用传以下参数 */
	uuid: string;
	chang: number;
	ju: number;
	ben: number;
}

/** .lq.ReqFetchSeerReport */
declare interface IReqFetchSeerReport extends IProto {
	uuid: string;
}

/** .lq.ResFetchSeerReport */
declare interface IResFetchSeerReport extends IResponse {
	report: ISeerReport;
}

/** .lq.ReqCreateSeerReport */
declare interface IReqCreateSeerReport extends IProto {
	uuid: string;
}

/** .lq.ResCreateSeerReport */
declare interface IResCreateSeerReport extends IResponse {
	seer_report: ISeerBrief;
}

/** .lq.ResFetchSeerReportList */
declare interface IResFetchSeerReportList extends IResponse {
	/** seer 任务状态 */
	seer_report_list: ISeerBrief[];
}

/** .lq.ReqSelectChestChooseUp */
declare interface IReqSelectChestChooseUp extends IProto {
	activity_id: number;
	/** 选择的物品id */
	selection: number;
	/** 选择的卡池id */
	chest_id: number;
}

/**
 * * .lq.ReqFestivalDebug
 * * ==DevDebug Start==
 * * debug 协议在正式版本删除
 */
declare interface IReqFestivalDebug extends IProto {
	festival_activity: IActivityFestivalData;
}

/** .lq.ReqFestivalFetchDebug */
declare interface IReqFestivalFetchDebug extends IProto {
	activity_id: number;
}

/** .lq.ResFestivalFetchDebug */
declare interface IResFestivalFetchDebug extends IResponse {
	festival_activity: IActivityFestivalData;
}

/** .lq.ReqGenerateAnnualReportToken */
declare interface IReqGenerateAnnualReportToken extends IProto {
	/** cn jp en kr */
	lang: string;
}

/** .lq.ResGenerateAnnualReportToken */
declare interface IResGenerateAnnualReportToken extends IResponse {
	token: string;
	url: string;
}

/** .lq.ResFetchAnnualReportInfo */
declare interface IResFetchAnnualReportInfo extends IResponse {
	start_time: number;
	end_time: number;
}

/** .lq.ReqRemarkFriend */
declare interface IReqRemarkFriend extends IProto {
	account_id: number;
	remark: string;
}

/** .lq.ReqSimV2ActivityFetchInfo */
declare interface IReqSimV2ActivityFetchInfo extends IProto {
	activity_id: number;
}

/** .lq.ResSimV2ActivityFetchInfo */
declare interface IResSimV2ActivityFetchInfo extends IResponse {
	data: ISimulationV2Data;
}

/** .lq.ReqSimV2ActivityStartSeason */
declare interface IReqSimV2ActivityStartSeason extends IProto {
	activity_id: number;
}

/** .lq.ResSimV2ActivityStartSeason */
declare interface IResSimV2ActivityStartSeason extends IResponse {
	season: ISimulationV2SeasonData;
}

/** .lq.ReqSimV2ActivityTrain */
declare interface IReqSimV2ActivityTrain extends IProto {
	activity_id: number;
	ability: number;
	skip: number;
}

/** .lq.ResSimV2ActivityTrain */
declare interface IResSimV2ActivityTrain extends IResponse {
	/** 触发事件的话有值 */
	event: ISimulationV2Event;
	/** 更新后的数值 */
	ability: ISimulationV2Ability;
	/** 新的回合数 */
	round: number;
	/** 当前特性 */
	effect_list: ISimulationV2Effect[];
	/** 训练结果 1-成功 2-大成功 3-失败 */
	train_result: number;
	/** 当前赛季是否结束 */
	is_end: boolean;
	/** 本轮游戏记录（当前赛季结束即is_end字段为true时有值） */
	record: ISimulationV2Record;
}

/** .lq.ReqSimV2ActivitySelectEvent */
declare interface IReqSimV2ActivitySelectEvent extends IProto {
	activity_id: number;
	selection_id: number;
}

/** .lq.ResSimV2ActivitySelectEvent */
declare interface IResSimV2ActivitySelectEvent extends IResponse {
	/** 触发事件的话有值 */
	event: ISimulationV2Event;
	/** 更新后的数值 */
	ability: ISimulationV2Ability;
	/** 对局信息 */
	match: ISimulationV2Match;
	/** 当前特性 */
	effect_list: ISimulationV2Effect[];
	/** 新的回合数 */
	round: number;
	/** 当前赛季是否结束 */
	is_end: boolean;
	/** 结果id */
	result_id: number;
	/** 本轮游戏记录（当前赛季结束即is_end字段为true时有值） */
	record: ISimulationV2Record;
	/** 新的buff */
	effected_buff_list: number[];
}

/** .lq.ReqSimV2ActivityStartMatch */
declare interface IReqSimV2ActivityStartMatch extends IProto {
	activity_id: number;
}

/** .lq.ResSimV2ActivityStartMatch */
declare interface IResSimV2ActivityStartMatch extends IResponse {
	/** 触发事件的话有值 */
	event: ISimulationV2Event;
	/** 对局信息 */
	match: ISimulationV2Match;
	/** 当前特性 */
	effect_list: ISimulationV2Effect[];
	/** 对局是否已结束 */
	is_match_end: boolean;
}

/** .lq.ReqSimV2ActivityEndMatch */
declare interface IReqSimV2ActivityEndMatch extends IProto {
	activity_id: number;
}

/** .lq.ResSimV2ActivityEndMatch */
declare interface IResSimV2ActivityEndMatch extends IResponse {
	/** 新的回合数 */
	round: number;
	/** 当前赛季是否结束 */
	is_end: boolean;
	/** 本轮游戏记录（当前赛季结束即is_end字段为true时有值） */
	record: ISimulationV2Record;
	/** 当前总分 */
	total_score: number;
	/** 对局历史记录 */
	match_history: ISimulationV2MatchRecord[];
	rewards: IResSimV2ActivityEndMatch_SimulationV2MatchReward[];
	/** 当前特性 */
	effect_list: ISimulationV2Effect[];
	/** 更新后的数值 */
	ability: ISimulationV2Ability;
}

/** undefined */
declare interface IResSimV2ActivityEndMatch_SimulationV2MatchReward extends IProto {
	/** 类型 1-属性奖励 2-特性奖励 */
	type: number;
	/** 属性奖励：[属性类型， 增长值]  特性奖励：[特性id] */
	params: number[];
}

/** .lq.ReqSimV2ActivityGiveUp */
declare interface IReqSimV2ActivityGiveUp extends IProto {
	activity_id: number;
}

/** .lq.ReqSimV2ActivitySetUpgrade */
declare interface IReqSimV2ActivitySetUpgrade extends IProto {
	activity_id: number;
	/** 场外升级全量数据 */
	upgrade: ISimulationV2Ability;
}

/**
 * * .lq.ReqSimV2ActivityDebug
 * * ==DevDebug Start==
 * * debug 协议在正式版本删除
 */
declare interface IReqSimV2ActivityDebug extends IProto {
	sim_activity: ISimulationV2Data;
}

/** .lq.ReqSimV2ActivityFetchDebug */
declare interface IReqSimV2ActivityFetchDebug extends IProto {
	activity_id: number;
}

/** .lq.ResSimV2ActivityFetchDebug */
declare interface IResSimV2ActivityFetchDebug extends IResponse {
	sim_activity: ISimulationV2Data;
}

/** .lq.ReqProgressRewardActivityReceive */
declare interface IReqProgressRewardActivityReceive extends IProto {
	activity_id: number;
	progresses: number[];
}

/** .lq.ResProgressRewardActivityReceive */
declare interface IResProgressRewardActivityReceive extends IResponse {
	reward_items: IExecuteReward[];
}

/** .lq.ReqFetchProgressRewardActivityInfo */
declare interface IReqFetchProgressRewardActivityInfo extends IProto {
	activity_id: number;
}

/** .lq.ResFetchProgressRewardActivityInfo */
declare interface IResFetchProgressRewardActivityInfo extends IResponse {
	progress: number;
}

/** .lq.AmuletBadgeData */
declare interface IAmuletBadgeData extends IProto {
	/** 表内的印章id */
	id: number;
	/** 实例id */
	uid: number;
	store: string[];
	/** 随机值，用于印章随机角度展示等，范围 1-100000 */
	random: number;
}

/** .lq.AmuletEffectData */
declare interface IAmuletEffectData extends IProto {
	/** 表内的护身符id */
	id: number;
	/** 实例id */
	uid: number;
	store: string[];
	/** 印章数据，可能为空 */
	badge: IAmuletBadgeData;
	/** （客户端数据）护身符占用体积 */
	volume: number;
	/** 护身符标记位，tags[0] = 当前护身符是否回合结束消失 */
	tags: number[];
}

/** .lq.AmuletTile */
declare interface IAmuletTile extends IProto {
	id: number;
	tile: string;
}

/** .lq.AmuletBuffData */
declare interface IAmuletBuffData extends IProto {
	/** 表内的buff id */
	id: number;
	store: string[];
}

/** .lq.AmuletGameShopGoods */
declare interface IAmuletGameShopGoods extends IProto {
	id: number;
	sold: boolean;
	goods_id: number;
	price: number;
}

/** .lq.AmuletActivityTingInfo */
declare interface IAmuletActivityTingInfo extends IProto {
	/** 打这张牌能听，在换牌阶段没有这个字段 */
	tile: string;
	fan: string;
	/** 听的牌 */
	ting_tile: string;
}

/** .lq.AmuletShowDesktopTileData */
declare interface IAmuletShowDesktopTileData extends IProto {
	id: number;
	/** 位置，从后往前数第几个，最小为0，发牌后不会随着摸牌而变化 */
	pos: number;
}

/** .lq.AmuletMingInfo */
declare interface IAmuletMingInfo extends IProto {
	type: number;
	tile_list: number[];
}

/** .lq.AmuletGameOperation */
declare interface IAmuletGameOperation extends IProto {
	/** 1-切牌 4-杠 8-和 99-模切，只能打刚刚摸到的牌 100-开始游戏(仅限换牌阶段) 101-换手牌 */
	type: number;
	/** type = 4 时可以杠的列表 */
	gang: IAmuletGameOperation_GangTiles[];
	/** 换手牌时表示最多可以换多少张牌 */
	value: number;
}

/** undefined */
declare interface IAmuletGameOperation_GangTiles extends IProto {
	tiles: number[];
}

/** .lq.AmuletTileScore */
declare interface IAmuletTileScore extends IProto {
	tile: string;
	score: string;
}

/** .lq.ActivityAmuletHuRecord */
declare interface IActivityAmuletHuRecord extends IProto {
	/** 得分 */
	point: string;
	/** 牌型  例：1m2m3m4m4m,5p5p5p0p,7s7s7s7s */
	pai: string;
	/** 番数 */
	fan: string;
	/** 分 */
	base: string;
	effect_builds: IActivityAmuletEffectRecordData[];
}

/** .lq.AmuletEffectCounterData */
declare interface IAmuletEffectCounterData extends IProto {
	effect_id: number;
	pack_candidate_count: number;
	gain_count: number;
}

/** .lq.AmuletGameRecordData */
declare interface IAmuletGameRecordData extends IProto {
	yiman_count: number;
	level_hu_count: number;
	game_hu_count: number;
	effect_gain: number;
	coin_consume: string;
	coin_gain: string;
	highest_hu: IActivityAmuletHuRecord;
	highest_level_score: string;
	highest_fan: string;
	pack_count: number;
	round_count: number;
	/** 统计护身符出现次数，仅统计出现过的护身符 */
	effect_counter: IAmuletEffectCounterData[];
	/** 上局和牌手牌（记录牌id） */
	hu_tiles_id: number[];
}

/** .lq.AmuletSkillData */
declare interface IAmuletSkillData extends IProto {
	id: number;
	level: number;
}

/** .lq.ActivityAmuletUpgradeData */
declare interface IActivityAmuletUpgradeData extends IProto {
	/** 已分配技能点数与等级 */
	skill: IAmuletSkillData[];
}

/** .lq.AmuletGameRoundData */
declare interface IAmuletGameRoundData extends IProto {
	/** 客户端与服务端共用 */
	pool: IAmuletTile[];
	tile_replace: IAmuletTile[];
	tian_dora: string[];
	dora: number[];
	hands: number[];
	used_desktop: number[];
	ming: IAmuletMingInfo[];
	locked_tile: number[];
	change_tile_count: number;
	total_change_tile_count: number;
	next_operation: IAmuletGameOperation[];
	ting_list: IAmuletActivityTingInfo[];
	point: string;
	target_point: string;
	locked_tile_count: number;
	/** 服务端专用 */
	mountain: number[];
	used: number[];
	desktop: number[];
	show_desktop: number[];
	after_gang: number;
	/** 客户端专用 */
	desktop_remain: number;
	show_desktop_tiles: IAmuletShowDesktopTileData[];
}

/** .lq.AmuletEffectCandidate */
declare interface IAmuletEffectCandidate extends IProto {
	/** 护身符ID */
	id: number;
	/** 印章ID，0表示没有印章 */
	badge_id: number;
}

/** .lq.AmuletGameEffectData */
declare interface IAmuletGameEffectData extends IProto {
	effect_list: IAmuletEffectData[];
	buff_list: IAmuletBuffData[];
	skill_buff_list: IAmuletBuffData[];
	shop_buff_list: IAmuletBuffData[];
	free_reward_candidates: IAmuletEffectCandidate[];
	/** 关卡奖励卡包护身符选项 */
	level_reward_candidates: IAmuletEffectCandidate[];
	/** 未开的关卡奖励卡包 */
	level_reward_packs: number[];
	/** 当前关卡奖励卡包id */
	current_level_reward_pack: number;
	/** 客户端数据，最大护身符持有体积 */
	max_effect_volume: number;
}

/** .lq.AmuletShopData */
declare interface IAmuletShopData extends IProto {
	goods: IAmuletGameShopGoods[];
	candidate_effect_list: IAmuletEffectCandidate[];
	shop_refresh_count: number;
	/** 客户端专用 */
	refresh_price: number;
}

/** .lq.AmuletGameData */
declare interface IAmuletGameData extends IProto {
	round: IAmuletGameRoundData;
	effect: IAmuletGameEffectData;
	game: IAmuletGameInfoData;
	stage: number;
	shop: IAmuletShopData;
	record: IAmuletGameRecordData;
	/** 本局游戏是否已经结束 */
	ended: boolean;
}

/** .lq.AmuletGameInfoData */
declare interface IAmuletGameInfoData extends IProto {
	level: number;
	coin: string;
	max_effect_volume: number;
	next_boss_buff: number[];
	boss_buff: number[];
	tile_score_map: IAmuletTileScore[];
	book_effect_id: number;
}

/** .lq.ActivityAmuletIllustratedBookData */
declare interface IActivityAmuletIllustratedBookData extends IProto {
	/** 护身符 */
	effect_collection: number[];
	badge_collection: number[];
}

/** .lq.ActivityAmuletEffectRecordData */
declare interface IActivityAmuletEffectRecordData extends IProto {
	id: number;
	badge_id: number;
	volume: number;
}

/** .lq.ActivityAmuletGameRecordData */
declare interface IActivityAmuletGameRecordData extends IProto {
	effect_builds: IActivityAmuletEffectRecordData[];
	level: number;
	highest_level_score: string;
	highest_fan: string;
	highest_score: string;
	coin_consumed: string;
	pack_count: number;
	time: number;
	/** 最高和牌记录 */
	highest_hu: IActivityAmuletHuRecord;
}

/** .lq.ActivityAmuletStatisticData */
declare interface IActivityAmuletStatisticData extends IProto {
	/** 历史最高关卡记录 */
	highest_level: number;
	/** 历史最高和牌记录 */
	highest_hu: IActivityAmuletHuRecord;
	highest_level_score: string;
	highest_fan: string;
	highest_score: string;
	/** 完成5-3的次数 */
	pass_game_count: number;
	/** 完成小关数量 */
	round_count: number;
	/** 累计开包次数，包含商店+过关奖励 */
	open_pack_count: number;
	/** 最多单轮花费星币 */
	highest_coin_consumed: string;
}

/**
 * * .lq.ActivityAmuletData
 * * 修改同时也需要修改 BlobAmuletActivity
 */
declare interface IActivityAmuletData extends IProto {
	activity_id: number;
	/** 游戏对局信息 */
	game: IAmuletGameData;
	version: number;
	/** 永久强化信息 */
	upgrade: IActivityAmuletUpgradeData;
	/** 图鉴信息 */
	illustrated_book: IActivityAmuletIllustratedBookData;
	/** 钦定护身符，可能为空 */
	book_effect_id: number;
	/** 最近通关记录 */
	game_records: IActivityAmuletGameRecordData[];
	/** 统计数据 */
	statistic: IActivityAmuletStatisticData;
}

/** .lq.AmuletFan */
declare interface IAmuletFan extends IProto {
	id: number;
	val: string;
	count: number;
	yiman: boolean;
}

/** .lq.AmuletHookResult */
declare interface IAmuletHookResult extends IProto {
	add_effect: IAmuletHookResult_AddEffectResult[];
	/** 移除护身符 uid */
	remove_effect: number[];
	add_buff: number[];
	remove_buff: number[];
	add_tian_dora: string[];
	add_dora: IAmuletHookResult_AddDoraResult;
	coin_modify: IAmuletHookResult_ValueResult;
	tile_replace: IAmuletTile[];
	add_show_tile: number[];
	modify_tile_score: IAmuletTileScore[];
	modify_desktop_count: number;
	modify_show_desktop_count: number;
	modify_lock_tile_count: number;
	/** 修改换牌次数 */
	modify_change_hands_count: number;
	/** 修改单次换牌牌数 */
	modify_change_hands_tile_count: number;
	force_moqie: boolean;
	/** 变牌后可以和牌 */
	replace_hu: boolean;
	modify_target_point: string;
	/** 无视过关分数直接过关 */
	upgrade_level: boolean;
	/** 修改宝牌判定 */
	modify_dora: IAmuletHookResult_ModifyDoraResult[];
	/** 修改最大宝牌数量 */
	modify_dora_max_count: number;
	/** 修改商店刷新卡包数量 */
	modify_shop_goods_count: number;
	/** 修改商店卡包稀有度 */
	modify_shop_rare_weight: boolean;
	/** 修改商店卡包价格 */
	modify_shop_goods_price: boolean;
	/** 修改购买卡包后待选护身符列表 */
	modify_shop_pack_effect: number[];
	/** 修改持有护身符上限 */
	modify_effect_max_count: number;
	/** 修改商店卡包列表 */
	modify_goods: IAmuletGameShopGoods[];
	/** 移除商店卡包 */
	remove_goods: number[];
	modify_base: IAmuletHookResult_ValueResult;
	modify_fan: IAmuletHookResult_ValueResult;
	modify_fan_info: IAmuletFan[];
	/** 护身符变形(从A卡变为B卡) */
	transform_effect: IAmuletHookResult_TransformResult[];
	/** 添加印章 */
	add_badge: IAmuletHookResult_AddBadge[];
	/** 移除印章(护身符uid) */
	remove_badge: number[];
	/** 修改护身符出售价 */
	modify_effect_price: string;
	/** 拷贝护身符 */
	copy_effect: IAmuletHookResult_CopyEffect[];
	/** 护身符数值成长 */
	effect_growth: boolean;
	/** 修改牌基础分成长值，光环效果，不需要抖动动画 */
	modify_tile_score_aura: string;
	/** 修改和牌次数 */
	modify_hule_count: number;
	/** 是否可以开杠 */
	can_gang: boolean;
	/** 修改换牌(修改换牌后的全量手牌数据) */
	modify_change_hands_list: number[];
	/** 修改待摸牌数据 */
	modify_change_desktop: IAmuletHookResult_AmuletChangeDesktopResult;
	/** 自身效果变化效果（如星际黑客凌与不稳定的护身符） */
	self_effect_id: number;
	/** 修改获取星币数量 */
	modify_change_coin: string;
	/** 直接设置牌基础分 */
	set_tile_score: IAmuletTileScore[];
	/** 护身符升级 */
	upgrade_effect: IAmuletHookResult_UpgradeEffectResult[];
	/** 修改和牌基础分 */
	modify_tile_base_score: IAmuletTileScore[];
}

/** undefined */
declare interface IAmuletHookResult_AddEffectResult extends IProto {
	/** 新护身符uid */
	uid: number;
	/** 新护身符id */
	id: number;
	/** 1 - 相同护身符合并   2 - 护身符组合并  3 - 替换印章 */
	merge_type: number;
	/** 合并护身符uid */
	merged_list: number[];
	/** 合并结果（uid） */
	merged_result: number;
	/** 印章 */
	badge: IAmuletBadgeData;
	store: string[];
	/** 生成的护身符(uid)体积 */
	volume: number;
}

/** undefined */
declare interface IAmuletHookResult_AddDoraResult extends IProto {
	/** 新增 dora 数量 */
	count: number;
	/** 实际增加的 dora，牌id */
	list: number[];
}

/** undefined */
declare interface IAmuletHookResult_ValueResult extends IProto {
	origin: string;
	modify: string;
	final: string;
}

/** undefined */
declare interface IAmuletHookResult_ModifyDoraResult extends IProto {
	tile: string;
	is_dora: boolean;
	is_red_dora: boolean;
	is_tian_dora: boolean;
	/** 一张牌算作几dora（可能存在两张相同的宝牌指示牌的情况） */
	dora_count: number;
}

/** undefined */
declare interface IAmuletHookResult_TransformResult extends IProto {
	uid: number;
	effect_id: number;
	add_result: IAmuletHookResult_AddEffectResult;
}

/** undefined */
declare interface IAmuletHookResult_AddBadge extends IProto {
	/** 护身符uid */
	uid: number;
	/** 印章id */
	badge_id: number;
	/** 印章uid */
	badge_uid: number;
}

/** undefined */
declare interface IAmuletHookResult_CopyEffect extends IProto {
	/** 拷贝生成的护身符uid */
	uid: number;
	/** 从哪个护身符拷贝来的 */
	from_uid: number;
}

/** undefined */
declare interface IAmuletHookResult_AmuletChangeDesktopResult extends IProto {
	/** 当前可见牌 */
	show_desktop_tiles: IAmuletShowDesktopTileData[];
	locked_tile_count: number;
	desktop_remain: number;
	locked_tile: number[];
}

/** undefined */
declare interface IAmuletHookResult_UpgradeEffectResult extends IProto {
	/** 护身符uid */
	uid: number;
	/** 新护身符id */
	id: number;
	/** 印章 */
	badge: IAmuletBadgeData;
	store: string[];
	/** 新护身符体积 */
	volume: number;
}

/** .lq.AmuletEffectedHookData */
declare interface IAmuletEffectedHookData extends IProto {
	uid: number;
	id: number;
	result: IAmuletHookResult;
	/** 1 - 护身符  2 - 印章  3 - buff */
	type: number;
}

/** .lq.AmuletEffectCandidatesArrayDirty */
declare interface IAmuletEffectCandidatesArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletEffectCandidate[];
}

/** .lq.AmuletTileArrayDirty */
declare interface IAmuletTileArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletTile[];
}

/** .lq.StringDirty */
declare interface IStringDirty extends IProto {
	dirty: boolean;
	value: string;
}

/** .lq.StringArrayDirty */
declare interface IStringArrayDirty extends IProto {
	dirty: boolean;
	value: string[];
}

/** .lq.UInt32ArrayDirty */
declare interface IUInt32ArrayDirty extends IProto {
	dirty: boolean;
	value: number[];
}

/** .lq.AmuletMingInfoArrayDirty */
declare interface IAmuletMingInfoArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletMingInfo[];
}

/** .lq.UInt32Dirty */
declare interface IUInt32Dirty extends IProto {
	dirty: boolean;
	value: number;
}

/** .lq.AmuletGameOperationArrayDirty */
declare interface IAmuletGameOperationArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletGameOperation[];
}

/** .lq.AmuletTingInfoArrayDirty */
declare interface IAmuletTingInfoArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletActivityTingInfo[];
}

/** .lq.AmuletShowDesktopTileDataArrayDirty */
declare interface IAmuletShowDesktopTileDataArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletShowDesktopTileData[];
}

/** .lq.AmuletRoundDataChanges */
declare interface IAmuletRoundDataChanges extends IProto {
	pool: IAmuletTileArrayDirty;
	tile_replace: IAmuletTileArrayDirty;
	tian_dora: IStringArrayDirty;
	dora: IUInt32ArrayDirty;
	hands: IUInt32ArrayDirty;
	used_desktop: IUInt32ArrayDirty;
	used: IUInt32ArrayDirty;
	ming: IAmuletMingInfoArrayDirty;
	locked_tile: IUInt32ArrayDirty;
	change_tile_count: IUInt32Dirty;
	total_change_tile_count: IUInt32Dirty;
	next_operation: IAmuletGameOperationArrayDirty;
	ting_list: IAmuletTingInfoArrayDirty;
	point: IStringDirty;
	target_point: IStringDirty;
	desktop_remain: IUInt32Dirty;
	show_desktop_tiles: IAmuletShowDesktopTileDataArrayDirty;
	locked_tile_count: IUInt32Dirty;
}

/** .lq.AmuletEffectDataArrayDirty */
declare interface IAmuletEffectDataArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletEffectData[];
}

/** .lq.AmuletBuffDataArrayDirty */
declare interface IAmuletBuffDataArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletBuffData[];
}

/** .lq.AmuletEffectDataChanges */
declare interface IAmuletEffectDataChanges extends IProto {
	effect_list: IAmuletEffectDataArrayDirty;
	buff_list: IAmuletBuffDataArrayDirty;
	skill_buff_list: IAmuletBuffDataArrayDirty;
	shop_buff_list: IAmuletBuffDataArrayDirty;
	free_reward_candidates: IAmuletEffectCandidatesArrayDirty;
	level_reward_candidates: IAmuletEffectCandidatesArrayDirty;
	current_level_reward_pack: IUInt32Dirty;
}

/** .lq.AmuletTileScoreArrayDirty */
declare interface IAmuletTileScoreArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletTileScore[];
}

/** .lq.AmuletGameInfoDataChanges */
declare interface IAmuletGameInfoDataChanges extends IProto {
	level: IUInt32Dirty;
	coin: IStringDirty;
	max_effect_volume: IUInt32Dirty;
	next_boss_buff: IUInt32ArrayDirty;
	boss_buff: IUInt32ArrayDirty;
	tile_score_map: IAmuletTileScoreArrayDirty;
}

/** .lq.AmuletShopGoodsArrayDirty */
declare interface IAmuletShopGoodsArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletGameShopGoods[];
}

/** .lq.AmuletShopDataChanges */
declare interface IAmuletShopDataChanges extends IProto {
	goods: IAmuletShopGoodsArrayDirty;
	candidate_effect_list: IAmuletEffectCandidatesArrayDirty;
	shop_refresh_count: IUInt32Dirty;
	refresh_price: IUInt32Dirty;
}

/** .lq.ActivityAmuletHuRecordDirty */
declare interface IActivityAmuletHuRecordDirty extends IProto {
	dirty: boolean;
	value: IActivityAmuletHuRecord;
}

/** .lq.AmuletEffectCounterDataArrayDirty */
declare interface IAmuletEffectCounterDataArrayDirty extends IProto {
	dirty: boolean;
	value: IAmuletEffectCounterData[];
}

/** .lq.AmuletRecordDataChanges */
declare interface IAmuletRecordDataChanges extends IProto {
	yiman_count: IUInt32Dirty;
	level_hu_count: IUInt32Dirty;
	game_hu_count: IUInt32Dirty;
	effect_gain: IUInt32Dirty;
	coin_consume: IStringDirty;
	coin_gain: IStringDirty;
	highest_hu: IActivityAmuletHuRecordDirty;
	highest_level_score: IStringDirty;
	highest_fan: IStringDirty;
	pack_count: IUInt32Dirty;
	round_count: IUInt32Dirty;
	effect_counter: IAmuletEffectCounterDataArrayDirty;
}

/** .lq.AmuletValueChanges */
declare interface IAmuletValueChanges extends IProto {
	round: IAmuletRoundDataChanges;
	effect: IAmuletEffectDataChanges;
	game: IAmuletGameInfoDataChanges;
	stage: number;
	shop: IAmuletShopDataChanges;
	record: IAmuletRecordDataChanges;
	ended: boolean;
}

/** .lq.AmuletEventResult */
declare interface IAmuletEventResult extends IProto {
	/** DealTile(6) */
	deal_result: IAmuletEventResult_DealResult;
	/** Hule(8) */
	hu_result: IAmuletEventResult_HuResult;
	/** GameEnd(100) */
	game_end_result: IAmuletEventResult_GameEndResult;
	/** Gang(9) */
	gang_result: IAmuletEventResult_GangResult;
	/** RoundEnd(11) */
	upgrade_result: IAmuletEventResult_UpgradeResult;
	/** NewGame(1) */
	new_game_result: IAmuletGameData;
	/** SellEffect(17) */
	sell_effect_result: IAmuletEventResult_SellEffectResult;
	/** SelectFreeEffect(2) SelectPack(14) SelectLevelRewardPack(16) */
	select_pack_result: IAmuletEventResult_SelectPackResult;
}

/** undefined */
declare interface IAmuletEventResult_DealResult extends IProto {
	tile: number;
}

/** undefined */
declare interface IAmuletEventResult_HuResult extends IProto {
	hu_final: IAmuletEventResult_HuInfo;
	hu_base: IAmuletEventResult_HuInfo;
}

/** undefined */
declare interface IAmuletEventResult_GameEndResult extends IProto {
	reason: number;
}

/** undefined */
declare interface IAmuletEventResult_GangResult extends IProto {
	new_dora: number[];
}

/** undefined */
declare interface IAmuletEventResult_UpgradeResult extends IProto {
	level_coin: string;
	point_coin: string;
}

/** undefined */
declare interface IAmuletEventResult_SellEffectResult extends IProto {
	price: string;
}

/** undefined */
declare interface IAmuletEventResult_SelectPackResult extends IProto {
	/** 新护身符uid */
	uid: number;
	/** 新护身符id */
	id: number;
	/** 1 - 相同护身符合并   2 - 护身符组合并  3 - 护身符印章替换 */
	merge_type: number;
	/** 合并护身符uid(哪些护身符参与了合并) */
	merged_list: number[];
	/** 合并结果（uid） */
	merged_result: number;
	/** 新印章数据 */
	badge: IAmuletBadgeData;
}

/** undefined */
declare interface IAmuletEventResult_HuInfo extends IProto {
	tile: number;
	fan_list: IAmuletFan[];
	fan: string;
	base: string;
	point: string;
}

/** .lq.AmuletEventHookData */
declare interface IAmuletEventHookData extends IProto {
	/** 移除护身符 uid */
	remove_effect: number[];
}

/**
 * * .lq.AmuletEventData
 * * 文档：https://confluence.catfoodstudio.net:5443/pages/viewpage.action?pageId=133279130
 */
declare interface IAmuletEventData extends IProto {
	type: number;
	effected_hooks: IAmuletEffectedHookData[];
	value_changes: IAmuletValueChanges;
	result: IAmuletEventResult;
	/** 事件影响，类似 effected_hooks 但是由事件本身触发的，而不是 hook 触发的 */
	event_hooks: IAmuletEventHookData[];
}

/**
 * * .lq.ReqAuthGame
 * * 协议：验证游戏连接
 */
declare interface IReqAuthGame extends IProto {
	account_id: number;
	/** 口令 */
	token: string;
	/** 游戏的uuid */
	game_uuid: string;
	session: string;
	gift: string;
	vs: number;
}

/** .lq.ResAuthGame */
declare interface IResAuthGame extends IResponse {
	players: IPlayerGameView[];
	/** 东南西北（保证4个） */
	seat_list: number[];
	/** 游戏是否已经开始（正常准备流程 or 同步流程） */
	is_game_start: boolean;
	/** 游戏配置 */
	game_config: IGameConfig;
	/** 已就绪Id列表 */
	ready_id_list: number[];
	/** 机器人外观数据 */
	robots: IPlayerGameView[];
	contest_info: IResAuthGame_ContestInfo;
}

/** undefined */
declare interface IResAuthGame_ContestInfo extends IProto {
	/** 赛事类型 官方/热门/民间 */
	contest_type: number;
	/** 赛季类型 0-个人赛 1-团队赛 */
	season_type: number;
}

/**
 * * .lq.GameRestore
 * * 游戏对局还原
 */
declare interface IGameRestore extends IProto {
	/** 快照 */
	snapshot: IGameSnapshot;
	/** 动作列表 */
	actions: IActionPrototype[];
	/** 已经经过的等待时间（没有等待事件，则为null） */
	passed_waiting_time: number;
	/** 对局状态 */
	game_state: number;
	/** 开始时间（秒） */
	start_time: number;
	/** 上次暂停的时间（距离对局开始的时间，单位：毫秒，不在暂停中则为0） */
	last_pause_time_ms: number;
}

/**
 * * .lq.ResEnterGame
 * * 协议：进入游戏
 */
declare interface IResEnterGame extends IResponse {
	/** 游戏状态 */
	is_end: boolean;
	step: number;
	game_restore: IGameRestore;
}

/**
 * * .lq.ReqSyncGame
 * * 协议：同步游戏
 */
declare interface IReqSyncGame extends IProto {
	/** 回合id：场局本 */
	round_id: string;
	step: number;
}

/** .lq.ResSyncGame */
declare interface IResSyncGame extends IResponse {
	/** 游戏状态 */
	is_end: boolean;
	step: number;
	game_restore: IGameRestore;
}

/**
 * * .lq.ReqSelfOperation
 * * 请求：玩家打牌、自摸、暗杠等操作
 * * !!修改此协议记得同步 GameSelfOperation 消息结构
 */
declare interface IReqSelfOperation extends IProto {
	type: number;
	index: number;
	tile: string;
	cancel_operation: boolean;
	moqie: boolean;
	timeuse: number;
	/** 0:默认，1：从open中出牌 */
	tile_state: number;
	/** 换三张-待换的牌 */
	change_tiles: string[];
	/** 换三张-待换的牌的明牌暗牌 */
	tile_states: number[];
	/** 川麻：定缺 */
	gap_type: number;
}

/**
 * * .lq.ReqChiPengGang
 * * 请求：玩家吃碰明杠
 * * !!修改此协议记得同步 GameChiPengGang 消息结构
 */
declare interface IReqChiPengGang extends IProto {
	type: number;
	index: number;
	cancel_operation: boolean;
	timeuse: number;
}

/**
 * * .lq.ReqBroadcastInGame
 * * 请求：广播内容 （在游戏中）
 */
declare interface IReqBroadcastInGame extends IProto {
	content: string;
	except_self: boolean;
}

/**
 * * .lq.ReqGMCommandInGaming
 * * 请求：游戏中GM命令
 * * deprecated
 */
declare interface IReqGMCommandInGaming extends IProto {
	json_data: string;
}

/**
 * * .lq.ResGamePlayerState
 * * 协议：获取对局玩家状态
 */
declare interface IResGamePlayerState extends IResponse {
	/** 状态列表 */
	state_list: GamePlayerState[];
}

/**
 * * .lq.ReqVoteGameEnd
 * * 退出房间投票
 * * !!修改此协议记得同步 GameVoteGameEnd 消息结构
 */
declare interface IReqVoteGameEnd extends IProto {
	yes: boolean;
}

/** .lq.ResGameEndVote */
declare interface IResGameEndVote extends IResponse {
	success: boolean;
	vote_cd_end_time: number;
}

/**
 * * .lq.ReqAuthObserve
 * * 观战验证
 */
declare interface IReqAuthObserve extends IProto {
	/** 口令 */
	token: string;
}

/**
 * * .lq.ResStartObserve
 * * 开始实时观战
 */
declare interface IResStartObserve extends IResponse {
	head: IGameLiveHead;
	/** 过去的记录 */
	passed: IGameLiveSegment;
}

/**
 * * .lq.NotifyNewGame
 * * 通知新的一场游戏开始了
 */
declare interface INotifyNewGame extends IProto {
	/** 游戏的uuid */
	game_uuid: string;
	/** 玩家名字列表 - 按这个次序座 [0, 1, 2, 3] */
	player_list: string[];
}

/**
 * * .lq.NotifyPlayerLoadGameReady
 * * 通知玩家进入游戏的准备就绪
 */
declare interface INotifyPlayerLoadGameReady extends IProto {
	/** 已就绪Id列表 */
	ready_id_list: number[];
}

/**
 * * .lq.NotifyGameBroadcast
 * * 玩家游戏内广播
 */
declare interface INotifyGameBroadcast extends IProto {
	seat: number;
	content: string;
}

/**
 * * .lq.NotifyGameEndResult
 * * 发送整场游戏结束信息
 */
declare interface INotifyGameEndResult extends IProto {
	result: IGameEndResult;
}

/**
 * * .lq.NotifyGameTerminate
 * * 通知游戏中断
 */
declare interface INotifyGameTerminate extends IProto {
	reason: string;
}

/**
 * * .lq.NotifyPlayerConnectionState
 * * 广播玩家连接状态变化
 */
declare interface INotifyPlayerConnectionState extends IProto {
	seat: number;
	state: GamePlayerState;
}

/**
 * * .lq.NotifyAccountLevelChange
 * * 通知玩家段位变化
 */
declare interface INotifyAccountLevelChange extends IProto {
	/** 原来的段位 */
	origin: IAccountLevel;
	/** 变化后的段位 */
	final: IAccountLevel;
	/** 1=四麻 2=三麻 */
	type: number;
}

/**
 * * .lq.NotifyGameFinishReward
 * * 比赛结束奖励
 */
declare interface INotifyGameFinishReward extends IProto {
	mode_id: number;
	level_change: INotifyGameFinishReward_LevelChange;
	/** 比赛宝箱 */
	match_chest: INotifyGameFinishReward_MatchChest;
	main_character: INotifyGameFinishReward_MainCharacter;
	character_gift: INotifyGameFinishReward_CharacterGift;
	badges: IBadgeAchieveProgress[];
}

/** undefined */
declare interface INotifyGameFinishReward_LevelChange extends IProto {
	/** 原来的段位 */
	origin: IAccountLevel;
	/** 变化后的段位 */
	final: IAccountLevel;
	/** 1=四麻 2=三麻 */
	type: number;
}

/** undefined */
declare interface INotifyGameFinishReward_MatchChest extends IProto {
	chest_id: number;
	origin: number;
	final: number;
	is_graded: boolean;
	rewards: IRewardSlot[];
}

/** undefined */
declare interface INotifyGameFinishReward_MainCharacter extends IProto {
	level: number;
	exp: number;
	add: number;
}

/** undefined */
declare interface INotifyGameFinishReward_CharacterGift extends IProto {
	origin: number;
	final: number;
	add: number;
	is_graded: boolean;
}

/** .lq.NotifyActivityReward */
declare interface INotifyActivityReward extends IProto {
	/** 活动奖励 */
	activity_reward: INotifyActivityReward_ActivityReward[];
}

/** undefined */
declare interface INotifyActivityReward_ActivityReward extends IProto {
	activity_id: number;
	rewards: IRewardSlot[];
}

/** .lq.NotifyActivityPoint */
declare interface INotifyActivityPoint extends IProto {
	/** 活动对局得点 */
	activity_points: INotifyActivityPoint_ActivityPoint[];
}

/** undefined */
declare interface INotifyActivityPoint_ActivityPoint extends IProto {
	activity_id: number;
	/** 当前累计点数 */
	point: number;
}

/** .lq.NotifyLeaderboardPoint */
declare interface INotifyLeaderboardPoint extends IProto {
	/** 排行榜对局得点 */
	leaderboard_points: INotifyLeaderboardPoint_LeaderboardPoint[];
}

/** undefined */
declare interface INotifyLeaderboardPoint_LeaderboardPoint extends IProto {
	leaderboard_id: number;
	/** 当前排名点数 */
	point: number;
}

/**
 * * .lq.NotifyGamePause
 * * 比赛暂停通知
 */
declare interface INotifyGamePause extends IProto {
	/** 是不是在暂停中 */
	paused: boolean;
}

/**
 * * .lq.NotifyEndGameVote
 * * 比赛退出投票通知
 */
declare interface INotifyEndGameVote extends IProto {
	results: INotifyEndGameVote_VoteResult[];
	/** 投票开始时间 */
	start_time: number;
	/** 投票持续时间 */
	duration_time: number;
}

/** undefined */
declare interface INotifyEndGameVote_VoteResult extends IProto {
	account_id: number;
	yes: boolean;
}

/**
 * * .lq.NotifyObserveData
 * * 通知观战数据
 */
declare interface INotifyObserveData extends IProto {
	unit: IGameLiveUnit;
}

/** .lq.ActionMJStart */
declare interface IActionMJStart extends IProto {
}

/** .lq.NewRoundOpenedTiles */
declare interface INewRoundOpenedTiles extends IProto {
	seat: number;
	/** open的牌的种类序列 */
	tiles: string[];
	/** 与tile想对应的类别的牌的个数 */
	count: number[];
}

/**
 * * .lq.MuyuInfo
 * * 龙之目玉
 */
declare interface IMuyuInfo extends IProto {
	/** 目玉的座位 */
	seat: number;
	/** 目玉的计数 */
	count: number;
	/** 目玉计数上限 */
	count_max: number;
	/** 目玉改变的编号，如果编号不同了说明变过 */
	id: number;
}

/**
 * * .lq.ChuanmaGang
 * * 川麻杠的算分
 */
declare interface IChuanmaGang extends IProto {
	old_scores: number[];
	delta_scores: number[];
	scores: number[];
	gameend: IGameEnd;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/**
 * * .lq.YongchangInfo
 * * 咏唱之战
 */
declare interface IYongchangInfo extends IProto {
	/** 咏唱的座位 */
	seat: number;
	/** 摸切张数 */
	moqie_count: number;
	/** 咏唱摸切的番数奖励 */
	moqie_bonus: number;
	/** 手切张数 */
	shouqie_count: number;
	/** 咏唱手切的番数奖励 */
	shouqie_bonus: number;
}

/** .lq.ActionNewCard */
declare interface IActionNewCard extends IProto {
	field_spell: number;
}

/** .lq.RecordNewCard */
declare interface IRecordNewCard extends IProto {
	field_spell: number;
}

/**
 * * .lq.ActionNewRound
 * * 开局
 */
declare interface IActionNewRound extends IProto {
	/** 场 */
	chang: number;
	/** 局，场风是谁的自风 */
	ju: number;
	/** 本 */
	ben: number;
	/** 开局的牌 */
	tiles: string[];
	/** 朵拉指示牌 */
	dora: string;
	/** 所有人的分数 */
	scores: number[];
	/** 若是庄家，则会有操作（一般情况只有庄家有操作，但是换牌需要所有人有操作） */
	operation: IOptionalOperationList;
	/** 场上立直棒的数量 */
	liqibang: number;
	/** 当亲家有听牌 */
	tingpais0: ITingPaiDiscardInfo[];
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
	/** 是否最后一局 */
	al: boolean;
	md5: string;
	/** 剩下的牌的数量 */
	left_tile_count: number;
	/** dora3模式后会一开始就有多个，覆盖之前 */
	doras: string[];
	/** open状态的牌 */
	opens: INewRoundOpenedTiles[];
	muyu: IMuyuInfo;
	/** 川麻专用 */
	ju_count: number;
	/** 环境魔法专用 */
	field_spell: number;
	/** 替代md5的字符串，如果该字段有值，则md5字段无效，牌山明文中会包含手牌明文 */
	sha256: string;
	yongchang: IYongchangInfo;
	/** 牌山字符串的加的盐的sha */
	saltSha256: string;
}

/**
 * * .lq.RecordNewRound
 * * 牌谱：开局
 */
declare interface IRecordNewRound extends IProto {
	/** 场 */
	chang: number;
	/** 局 */
	ju: number;
	/** 本 */
	ben: number;
	/** 朵拉指示牌 */
	dora: string;
	/** 所有人的分数 */
	scores: number[];
	/** 场上立直棒的数量 */
	liqibang: number;
	/** 开局的牌 */
	tiles0: string[];
	/** 开局的牌 */
	tiles1: string[];
	/** 开局的牌 */
	tiles2: string[];
	/** 开局的牌 */
	tiles3: string[];
	/** 当子家有听牌 */
	tingpai: IRecordNewRound_TingPai[];
	/** 若是庄家，则会有操作（一般情况只有庄家有操作，但是换牌则用换牌里面的数据来替换） */
	operation: IOptionalOperationList;
	md5: string;
	/** 牌山明文 */
	paishan: string;
	/** 剩下的牌的数量 */
	left_tile_count: number;
	/** dora3模式后会一开始就有多个，覆盖之前 */
	doras: string[];
	/** open状态的牌 */
	opens: INewRoundOpenedTiles[];
	muyu: IMuyuInfo;
	/** 像换三张时候所有人开局都会有操作，就从这边读 */
	operations: IOptionalOperationList[];
	/** 川麻专用 */
	ju_count: number;
	/** 环境魔法专用 */
	field_spell: number;
	/** 替代md5的字符串，如果该字段有值，则md5字段无效，牌山明文中会包含手牌明文 */
	sha256: string;
	yongchang: IYongchangInfo;
	/** 牌山字符串的加的盐的sha */
	saltSha256: string;
	/** 牌山字符串的加的盐 */
	salt: string;
}

/** undefined */
declare interface IRecordNewRound_TingPai extends IProto {
	seat: number;
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
}

/**
 * * .lq.GameSnapshot
 * * 快照
 */
declare interface IGameSnapshot extends IProto {
	/** 场 */
	chang: number;
	/** 局 */
	ju: number;
	/** 本 */
	ben: number;
	index_player: number;
	left_tile_count: number;
	/** 手牌 */
	hands: string[];
	/** 朵拉指示牌 */
	doras: string[];
	/** 场上立直棒的数量 */
	liqibang: number;
	players: IGameSnapshot_PlayerSnapshot[];
	zhenting: boolean;
}

/** undefined */
declare interface IGameSnapshot_PlayerSnapshot extends IProto {
	/** 当前分数 */
	score: number;
	/** 立直的位子，-1就是没立直 */
	liqiposition: number;
	/** 手牌数量 */
	tilenum: number;
	/** 弃牌 */
	qipais: string[];
	/** 鸣牌 */
	mings: IGameSnapshot_Fulu[];
}

/** undefined */
declare interface IGameSnapshot_Fulu extends IProto {
	type: number;
	tile: string[];
	from: number[];
}

/**
 * * .lq.ActionPrototype
 * * 动作
 * * 对局用户广播通知包的封装结构
 */
declare interface IActionPrototype extends IProto {
	/** 当前回合数 */
	step: number;
	/** 包名 */
	name: string;
	/** 包体 */
	data: number[];
}

/**
 * * .lq.GameDetailRecords
 * * 牌谱
 */
declare interface IGameDetailRecords extends IProto {
	/** Wrapper 解析 */
	records: number[][];
	/** 版本 目前的值=210715 */
	version: number;
	actions: IGameAction[];
	/** 冗余数据，客户端不需要处理 */
	bar: number[];
}

/**
 * * .lq.GameSelfOperation
 * * 对局用户基本输入
 * * 来源：ReqSelfOperation
 */
declare interface IGameSelfOperation extends IProto {
	type: number;
	index: number;
	tile: string;
	cancel_operation: boolean;
	moqie: boolean;
	timeuse: number;
	/** 0:默认，1：从open中出牌 */
	tile_state: number;
	/** 换三张-待换的牌 */
	change_tiles: string[];
	/** 换三张-待换的牌的明牌暗牌 */
	tile_states: number[];
	/** 川麻：定缺 */
	gap_type: number;
}

/**
 * * .lq.GameChiPengGang
 * * 对局用户吃碰明杠输入
 * * 来源：ReqChiPengGang
 */
declare interface IGameChiPengGang extends IProto {
	type: number;
	index: number;
	cancel_operation: boolean;
	timeuse: number;
}

/**
 * * .lq.GameVoteGameEnd
 * * 退出房间投票
 * * 来源：ReqVoteGameEnd
 */
declare interface IGameVoteGameEnd extends IProto {
	yes: boolean;
}

/**
 * * .lq.GameUserInput
 * * 对局用户的输入
 */
declare interface IGameUserInput extends IProto {
	/** 座位编号 */
	seat: number;
	/**
	 * * 输入类型
	 * * 1=emo 2=operation 3=cpg 4=vote
	 * * 5=confirmNewRound 6=clearLeaving
	 * * 7=enterGame 8=syncGame 9=finishSyncGame 10=terminateGame
	 */
	type: number;
	emo: number;
	operation: IGameSelfOperation;
	cpg: IGameChiPengGang;
	vote: IGameVoteGameEnd;
}

/**
 * * .lq.GameUserEvent
 * * 对局用户事件
 */
declare interface IGameUserEvent extends IProto {
	seat: number;
	/**
	 * * 事件类型
	 * * 1=Connect 2=Disconnect
	 */
	type: number;
}

/**
 * * .lq.GameAction
 * * xienanjie 2021.07.14 添加
 * * 对局Action结构，记录了操作相关信息
 */
declare interface IGameAction extends IProto {
	/** 相对于开始时间经过的毫秒数 */
	passed: number;
	/**
	 * * 操作类型
	 * * 1=ActionResult 2=UserInput 3=UserEvent 4=GameEvent
	 */
	type: number;
	/** Protobuf封装的ActionResult数据 */
	result: number[];
	user_input: IGameUserInput;
	user_event: IGameUserEvent;
	/**
	 * * 对局事件
	 * * 0=create 1=start 2=end 3=terminate 4=destroy 5=paused
	 */
	game_event: number;
}

/** .lq.OptionalOperation */
declare interface IOptionalOperation extends IProto {
	/** 吃碰胡类型 */
	type: number;
	/** 组合列表 */
	combination: string[];
	/** 需要换的默认牌 */
	change_tiles: string[];
	/** 需要换的默认牌的明牌暗牌 */
	change_tile_states: number[];
	/** 默认定的缺 0筒1万2条 */
	gap_type: number;
}

/** .lq.OptionalOperationList */
declare interface IOptionalOperationList extends IProto {
	seat: number;
	operation_list: IOptionalOperation[];
	time_add: number;
	time_fixed: number;
}

/** .lq.LiQiSuccess */
declare interface ILiQiSuccess extends IProto {
	seat: number;
	score: number;
	liqibang: number;
	/** 立直了，但是立直没有成立，比如血战立直点炮，然后交不出立直棒的情况 */
	failed: boolean;
	/** 背水之战，立直成功类型，0:普通立直，1:5000点立直，2:10000点立直 */
	liqi_type_beishuizhizhan: number;
}

/**
 * * .lq.FanInfo
 * * 番的信息
 */
declare interface IFanInfo extends IProto {
	/** 番种名字 （弃用，改为id） */
	name: string;
	/** 番数 */
	val: number;
	/** 番种名字 */
	id: number;
}

/**
 * * .lq.HuleInfo
 * * 胡牌时候单个人的信息
 */
declare interface IHuleInfo extends IProto {
	hand: string[];
	ming: string[];
	hu_tile: string;
	seat: number;
	zimo: boolean;
	qinjia: boolean;
	liqi: boolean;
	doras: string[];
	li_doras: string[];
	/** 是否役满了 */
	yiman: boolean;
	/** 役满了话就是倍数，否则是番数 */
	count: number;
	/** 各个番 */
	fans: IFanInfo[];
	/** 符数 */
	fu: number;
	/** 番名 （弃用，改用title_id） */
	title: string;
	/** 点炮的点数 */
	point_rong: number;
	/** 自摸时亲家需要支付的点数 */
	point_zimo_qin: number;
	/** 自摸时闲家需要支付的点数 */
	point_zimo_xian: number;
	/** 胡牌标题 */
	title_id: number;
	/** 累计打点（正的），给类似端午累计得点活动使用 */
	point_sum: number;
	/** 2020.10.5新增，用point_rong/point_zimo_qin/point_zimo_xian计算的打点，方便血战这边计算 */
	dadian: number;
	/** 2022.03.25新增 */
	baopai: number;
	/** 2022.02.15新增，因为大四喜和四杠子可能有两个人包，改成数组吧 */
	baopai_seats: number[];
	/** 2023.2.24新增，包牌的分数指向，仅在baopai_seats有值时会传 */
	lines: string[];
	/** 2023.01.05新增，用于天命之战模式下的倍数显示 */
	tianming_bonus: number;
	/** 百搭牌模式下，hand数组里面的百搭牌变成了什么牌，不包含hu_tile */
	baida_changed: string[];
	/** 百搭模式下，若hu_tile是百搭牌，那么它变成的牌 */
	hu_tile_baiDa_changed: string;
}

/**
 * * .lq.TingPaiInfo
 * * 听牌的状态
 */
declare interface ITingPaiInfo extends IProto {
	tile: string;
	/** 听这张牌是否有役（番缚>1时候以下面为准，<=1时还是用这个减少线上影响）（荣和） */
	haveyi: boolean;
	/** 听这张牌是否役满了（荣和） */
	yiman: boolean;
	/** 不役满时候为番数，役满时候为役满倍数，跟dora无关（荣和） */
	count: number;
	/** 听这张牌胡牌的番数 （荣和） */
	fu: number;
	/** 明面可见的手牌dora个数，和count相加就可以算出明面上的番数 （荣和，不过这个自摸也一样） */
	biao_dora_count: number;
	/** 自摸是否役满 （自摸） */
	yiman_zimo: boolean;
	/** 自摸不役满时候为番数，役满时候为役满倍数，跟dora无关（自摸） */
	count_zimo: number;
	/** 听这张牌胡牌的番数 （自摸） */
	fu_zimo: number;
}

/**
 * * .lq.TingPaiDiscardInfo
 * * 听牌时候换牌的状态
 */
declare interface ITingPaiDiscardInfo extends IProto {
	tile: string;
	zhenting: boolean;
	infos: ITingPaiInfo[];
}

/**
 * * .lq.HunZhiYiJiBuffInfo
 * * 魂之一击buff的状态
 */
declare interface IHunZhiYiJiBuffInfo extends IProto {
	/** 改变buff的玩家的seat */
	seat: number;
	/** 立直后，还能连续摸牌的次数，6|5|4|3|2|1|0，0不等于过载 */
	continue_deal_count: number;
	/** 是否过载了，优先判断本字段，=true的时候就不用管continue_deal_count的数值了 */
	overload: boolean;
}

/** .lq.GameEnd */
declare interface IGameEnd extends IProto {
	scores: number[];
}

/**
 * * .lq.ActionSelectGap
 * * 定缺
 */
declare interface IActionSelectGap extends IProto {
	/** 定的缺 */
	gap_types: number[];
	/** 当亲家有听牌 */
	tingpais0: ITingPaiDiscardInfo[];
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
	/** 只有庄家有操作，自己是子家的时候没有操作 */
	operation: IOptionalOperationList;
}

/**
 * * .lq.RecordSelectGap
 * * 牌谱：定缺
 */
declare interface IRecordSelectGap extends IProto {
	/** 定的缺 */
	gap_types: number[];
	/** 当子家有听牌 */
	tingpai: IRecordSelectGap_TingPai[];
	/** 只有庄家有操作，自己是子家的时候没有操作 */
	operation: IOptionalOperationList;
}

/** undefined */
declare interface IRecordSelectGap_TingPai extends IProto {
	seat: number;
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
}

/**
 * * .lq.ActionChangeTile
 * * 换牌
 */
declare interface IActionChangeTile extends IProto {
	/** 换到手的牌 */
	in_tiles: string[];
	/** 换到手的牌的open状态 */
	in_tile_states: number[];
	/** 换出去的牌 */
	out_tiles: string[];
	/** 换出去的牌的open状态 */
	out_tile_states: number[];
	/** 换完之后翻出宝牌 */
	doras: string[];
	/** 当亲家有听牌 */
	tingpais0: ITingPaiDiscardInfo[];
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
	/** 只有庄家有操作，自己是子家的时候没有操作 */
	operation: IOptionalOperationList;
	/** 换牌形式 0-换下家 1-换对家 2-换上家 */
	change_type: number;
}

/**
 * * .lq.RecordChangeTile
 * * 牌谱：换牌
 */
declare interface IRecordChangeTile extends IProto {
	/** 换完之后翻出宝牌 */
	doras: string[];
	/** 当子家有听牌 */
	tingpai: IRecordChangeTile_TingPai[];
	/** 所有玩家的换牌信息 */
	change_tile_infos: IRecordChangeTile_ChangeTile[];
	/** 只有庄家有操作，自己是子家的时候没有操作 */
	operation: IOptionalOperationList;
	/** 换牌形式 0-换下家 1-换对家 2-换上家 */
	change_type: number;
	operations: IOptionalOperationList[];
}

/** undefined */
declare interface IRecordChangeTile_TingPai extends IProto {
	seat: number;
	/** 当子家有听牌 */
	tingpais1: ITingPaiInfo[];
}

/** undefined */
declare interface IRecordChangeTile_ChangeTile extends IProto {
	/** 换到手的牌 */
	in_tiles: string[];
	/** 换到手的牌的open状态 */
	in_tile_states: number[];
	/** 换出去的牌 */
	out_tiles: string[];
	/** 换出去的牌的open状态 */
	out_tile_states: number[];
}

/**
 * * .lq.ActionRevealTile
 * * 暗牌模式：盖牌
 */
declare interface IActionRevealTile extends IProto {
	seat: number;
	is_liqi: boolean;
	is_wliqi: boolean;
	moqie: boolean;
	scores: number[];
	liqibang: number;
	operation: IOptionalOperationList;
	tingpais: ITingPaiInfo[];
	tile: string;
	zhenting: boolean;
}

/** .lq.RecordRevealTile */
declare interface IRecordRevealTile extends IProto {
	seat: number;
	is_liqi: boolean;
	is_wliqi: boolean;
	moqie: boolean;
	scores: number[];
	liqibang: number;
	operations: IOptionalOperationList[];
	tingpais: ITingPaiInfo[];
	tile: string;
	zhenting: boolean[];
}

/**
 * * .lq.ActionUnveilTile
 * * 暗牌模式：揭牌
 */
declare interface IActionUnveilTile extends IProto {
	seat: number;
	scores: number[];
	liqibang: number;
	/** 只有选择盖牌的人有操作：是否锁牌 */
	operation: IOptionalOperationList;
}

/** .lq.RecordUnveilTile */
declare interface IRecordUnveilTile extends IProto {
	seat: number;
	scores: number[];
	liqibang: number;
	operation: IOptionalOperationList;
}

/**
 * * .lq.ActionLockTile
 * * 暗牌模式：锁牌
 */
declare interface IActionLockTile extends IProto {
	seat: number;
	scores: number[];
	liqibang: number;
	tile: string;
	operation: IOptionalOperationList;
	zhenting: boolean;
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	/** 明杠之后根据模式而定，可能是出完牌再翻宝牌 */
	doras: string[];
	/** 0：主动被解锁 1：主动锁定为暗牌 2：无人要求开牌 3：开牌（锁牌方点数不足） */
	lock_state: number;
}

/** .lq.RecordLockTile */
declare interface IRecordLockTile extends IProto {
	seat: number;
	scores: number[];
	liqibang: number;
	tile: string;
	/** 所有人的操作 */
	operation: IOptionalOperationList[];
	zhentings: boolean[];
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	/** 明杠之后根据模式而定，可能是出完牌再翻宝牌 */
	doras: string[];
	/** 0被别人解锁 1被自己锁定 2没人要求开牌 */
	lock_state: number;
}

/**
 * * .lq.ActionDiscardTile
 * * 出牌
 */
declare interface IActionDiscardTile extends IProto {
	seat: number;
	tile: string;
	is_liqi: boolean;
	/** 我可以进行的操作 */
	operation: IOptionalOperationList;
	moqie: boolean;
	zhenting: boolean;
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	doras: string[];
	/** 是否是w立直 */
	is_wliqi: boolean;
	/** tile_state: 0.正常, 1.open */
	tile_state: number;
	muyu: IMuyuInfo;
	/** 暗牌模式用，表示打出的时候宣言这张牌是否为暗牌 */
	revealed: boolean;
	/** 暗牌模式用，表示大家的分数 */
	scores: number[];
	/** 暗牌模式用，表示场上的场供棒数量 */
	liqibang: number;
	yongchang: IYongchangInfo;
	/** 魂之一击模式，立直的那一下会有赋值，其他时候不会有 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
	/** 背水之战立直，0：普通立直，1:5000点立直，2:10000点立直 */
	liqi_type_beishuizhizhan: number;
}

/**
 * * .lq.RecordDiscardTile
 * * 牌谱：出牌
 */
declare interface IRecordDiscardTile extends IProto {
	seat: number;
	tile: string;
	is_liqi: boolean;
	moqie: boolean;
	zhenting: boolean[];
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	doras: string[];
	/** 是否是w立直 */
	is_wliqi: boolean;
	/** 所有人的操作 */
	operations: IOptionalOperationList[];
	/** tile_state: 0.正常, 1.open */
	tile_state: number;
	muyu: IMuyuInfo;
	yongchang: IYongchangInfo;
	/** 魂之一击模式，立直的那一下会有赋值，其他时候不会有。 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
	/** 背水之战立直，0：普通立直，1:5000点立直，2:10000点立直 */
	liqi_type_beishuizhizhan: number;
}

/**
 * * .lq.ActionDealTile
 * * 接牌
 */
declare interface IActionDealTile extends IProto {
	seat: number;
	tile: string;
	left_tile_count: number;
	operation: IOptionalOperationList;
	liqi: ILiQiSuccess;
	doras: string[];
	zhenting: boolean;
	tingpais: ITingPaiDiscardInfo[];
	/** tile_state: 0.正常，tile没意义； 1.open，tile是真实值 */
	tile_state: number;
	muyu: IMuyuInfo;
	/** 占星模式中三张预选牌中的index */
	tile_index: number;
	/** 魂之一击模式，开大状态下每摸一张牌都有赋值；另一个人抓牌的时候也会有赋值，比如前一个人过载了 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.RecordDealTile
 * * 牌谱：接牌
 */
declare interface IRecordDealTile extends IProto {
	seat: number;
	tile: string;
	left_tile_count: number;
	liqi: ILiQiSuccess;
	doras: string[];
	zhenting: boolean[];
	operation: IOptionalOperationList;
	/** tile_state: 0.正常，tile是白板； 1.open，tile是真实值 */
	tile_state: number;
	muyu: IMuyuInfo;
	/** 占星模式中三张预选牌中的index */
	tile_index: number;
	/** 魂之一击模式，立直成功后的第一张牌会有赋值；另一个人抓牌的时候也会有赋值，比如前一个人过载了 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.ActionFillAwaitingTiles
 * * 补充牌
 */
declare interface IActionFillAwaitingTiles extends IProto {
	awaiting_tiles: string[];
	left_tile_count: number;
	operation: IOptionalOperationList;
	liqi: ILiQiSuccess;
}

/**
 * * .lq.RecordFillAwaitingTiles
 * * 补充牌
 */
declare interface IRecordFillAwaitingTiles extends IProto {
	awaiting_tiles: string[];
	left_tile_count: number;
	operation: IOptionalOperationList;
	liqi: ILiQiSuccess;
}

/**
 * * .lq.ActionChiPengGang
 * * 吃碰明杠（做完需要打出一张牌,明杠的话没有操作）
 */
declare interface IActionChiPengGang extends IProto {
	seat: number;
	type: number;
	tiles: string[];
	froms: number[];
	liqi: ILiQiSuccess;
	/** 这个人可以做的操作，其实只有打牌一种，有计时 */
	operation: IOptionalOperationList;
	zhenting: boolean;
	tingpais: ITingPaiDiscardInfo[];
	/** 对应tiles，在配牌open中哪些牌是从open中出来的 */
	tile_states: number[];
	muyu: IMuyuInfo;
	scores: number[];
	/** 辉夜模式用，表示场上的场供棒数量 */
	liqibang: number;
	yongchang: IYongchangInfo;
	/** 魂之一击模式，吃碰杠会导致正在开大的人过载 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.RecordChiPengGang
 * * 牌谱：吃碰明杠
 */
declare interface IRecordChiPengGang extends IProto {
	seat: number;
	type: number;
	tiles: string[];
	froms: number[];
	liqi: ILiQiSuccess;
	zhenting: boolean[];
	/** 这个人可以做的操作，其实只有打牌一种，有计时 */
	operation: IOptionalOperationList;
	/** 对应tiles，在配牌open中哪些牌是从open中出来的 */
	tile_states: number[];
	muyu: IMuyuInfo;
	scores: number[];
	/** 辉夜模式用，表示场上的场供棒数量 */
	liqibang: number;
	yongchang: IYongchangInfo;
	/** 魂之一击模式，吃碰杠会导致正在开大的人过载 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.ActionGangResult
 * * 川麻吃碰明杠的分数结算（做完需要打出一张牌,明杠的话没有操作）
 */
declare interface IActionGangResult extends IProto {
	/** 川麻的杠会带来分数变动 */
	gang_infos: IChuanmaGang;
}

/**
 * * .lq.RecordGangResult
 * * 牌谱：川麻吃碰明杠的终场
 */
declare interface IRecordGangResult extends IProto {
	/** 川麻的杠会带来分数变动 */
	gang_infos: IChuanmaGang;
}

/**
 * * .lq.ActionGangResultEnd
 * * 川麻吃碰明杠的分数结算（做完需要打出一张牌,明杠的话没有操作）
 */
declare interface IActionGangResultEnd extends IProto {
	/** 川麻的杠会带来分数变动 */
	gang_infos: IChuanmaGang;
}

/**
 * * .lq.RecordGangResultEnd
 * * 牌谱：川麻吃碰明杠的终场
 */
declare interface IRecordGangResultEnd extends IProto {
	/** 川麻的杠会带来分数变动 */
	gang_infos: IChuanmaGang;
}

/**
 * * .lq.ActionAnGangAddGang
 * * 暗杠加杠（可能会被抢杠，还没接牌）
 */
declare interface IActionAnGangAddGang extends IProto {
	seat: number;
	type: number;
	tiles: string;
	/** 我可以进行的操作 */
	operation: IOptionalOperationList;
	doras: string[];
	zhenting: boolean;
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	muyu: IMuyuInfo;
}

/**
 * * .lq.RecordAnGangAddGang
 * * 牌谱：暗杠加杠
 */
declare interface IRecordAnGangAddGang extends IProto {
	seat: number;
	type: number;
	tiles: string;
	doras: string[];
	/** 所有人的操作 */
	operations: IOptionalOperationList[];
	muyu: IMuyuInfo;
}

/**
 * * .lq.ActionBaBei
 * * 拔北（可能会被抢杠，还没接牌）
 */
declare interface IActionBaBei extends IProto {
	seat: number;
	/** 我可以进行的操作 */
	operation: IOptionalOperationList;
	doras: string[];
	zhenting: boolean;
	/** 我自己打牌的话我自己的听牌状态 */
	tingpais: ITingPaiInfo[];
	/** 拔北需要知道摸切 */
	moqie: boolean;
	/** 0:常规的北，1：open中的北 */
	tile_state: number;
	muyu: IMuyuInfo;
}

/**
 * * .lq.RecordBaBei
 * * 牌谱：拔北
 */
declare interface IRecordBaBei extends IProto {
	seat: number;
	doras: string[];
	/** 所有人的操作 */
	operations: IOptionalOperationList[];
	/** 拔北需要知道摸切 */
	moqie: boolean;
	/** 0:常规的北，1：open中的北 */
	tile_state: number;
	muyu: IMuyuInfo;
}

/**
 * * .lq.ActionHule
 * * 胡牌了
 */
declare interface IActionHule extends IProto {
	hules: IHuleInfo[];
	old_scores: number[];
	delta_scores: number[];
	wait_timeout: number;
	scores: number[];
	gameend: IGameEnd;
	doras: string[];
	muyu: IMuyuInfo;
	/** 2021.4.8新增，包牌座位 */
	baopai: number;
	/** 魂之一击模式，被胡了会导致正在开大的人过载 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.RecordHule
 * * 牌谱：胡牌了
 */
declare interface IRecordHule extends IProto {
	hules: IHuleInfo[];
	old_scores: number[];
	delta_scores: number[];
	wait_timeout: number;
	scores: number[];
	gameend: IGameEnd;
	doras: string[];
	muyu: IMuyuInfo;
	baopai: number;
	/** 魂之一击模式，被胡了会导致正在开大的人过载 */
	hun_zhi_yi_ji_info: IHunZhiYiJiBuffInfo;
}

/**
 * * .lq.HuInfoXueZhanMid
 * * 血战中途胡牌
 */
declare interface IHuInfoXueZhanMid extends IProto {
	seat: number;
	/** 手牌张数，自摸的时候包含了自摸的那张牌 */
	hand_count: number;
	/** 只有自己胡牌会有hand，其他人胡牌不会有hand信息而使用hand_count， */
	hand: string[];
	ming: string[];
	hu_tile: string;
	zimo: boolean;
	/** 是否役满了 */
	yiman: boolean;
	/** 役满了话就是倍数，否则是番数 */
	count: number;
	/** 各个番 */
	fans: IFanInfo[];
	/** 符数 */
	fu: number;
	/** 胡牌标题 */
	title_id: number;
}

/**
 * * .lq.ActionHuleXueZhanMid
 * * 血战中途胡牌
 */
declare interface IActionHuleXueZhanMid extends IProto {
	hules: IHuInfoXueZhanMid[];
	old_scores: number[];
	delta_scores: number[];
	scores: number[];
	doras: string[];
	muyu: IMuyuInfo;
	liqi: ILiQiSuccess;
	zhenting: boolean;
}

/**
 * * .lq.RecordHuleXueZhanMid
 * * 牌谱：血战中途胡牌
 */
declare interface IRecordHuleXueZhanMid extends IProto {
	hules: IHuInfoXueZhanMid[];
	old_scores: number[];
	delta_scores: number[];
	scores: number[];
	doras: string[];
	muyu: IMuyuInfo;
	liqi: ILiQiSuccess;
	zhenting: boolean[];
}

/**
 * * .lq.ActionHuleXueZhanEnd
 * * 血战最后的胡牌,胡牌后结束这次配牌对局
 */
declare interface IActionHuleXueZhanEnd extends IProto {
	/** 本次胡牌的胡牌信息 */
	hules: IHuInfoXueZhanMid[];
	old_scores: number[];
	delta_scores: number[];
	scores: number[];
	wait_timeout: number;
	gameend: IGameEnd;
	doras: string[];
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/**
 * * .lq.RecordHuleXueZhanEnd
 * * 牌谱：血战最后的胡牌,胡牌后结束这次配牌对局
 */
declare interface IRecordHuleXueZhanEnd extends IProto {
	/** 本次胡牌的胡牌信息 */
	hules: IHuInfoXueZhanMid[];
	old_scores: number[];
	delta_scores: number[];
	scores: number[];
	wait_timeout: number;
	gameend: IGameEnd;
	doras: string[];
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/** .lq.ActionLiuJu */
declare interface IActionLiuJu extends IProto {
	type: number;
	gameend: IGameEnd;
	seat: number;
	tiles: string[];
	liqi: ILiQiSuccess;
	allplayertiles: string[];
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/**
 * * .lq.RecordLiuJu
 * * 牌谱：流局
 */
declare interface IRecordLiuJu extends IProto {
	type: number;
	gameend: IGameEnd;
	seat: number;
	tiles: string[];
	liqi: ILiQiSuccess;
	allplayertiles: string[];
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/**
 * * .lq.NoTilePlayerInfo
 * * 荒牌流局，玩家的数据
 */
declare interface INoTilePlayerInfo extends IProto {
	tingpai: boolean;
	hand: string[];
	tings: ITingPaiInfo[];
	/** 血流模式下，胡牌的不计在荒牌中 */
	already_hule: boolean;
}

/** .lq.NoTileScoreInfo */
declare interface INoTileScoreInfo extends IProto {
	seat: number;
	old_scores: number[];
	delta_scores: number[];
	hand: string[];
	ming: string[];
	doras: string[];
	score: number;
	taxes: number[];
	/** 川麻的线乱七八糟的！需要麻将库支援了！ */
	lines: string[];
}

/**
 * * .lq.ActionNoTile
 * * 荒牌流局
 */
declare interface IActionNoTile extends IProto {
	liujumanguan: boolean;
	players: INoTilePlayerInfo[];
	scores: INoTileScoreInfo[];
	gameend: boolean;
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/**
 * * .lq.RecordNoTile
 * * 牌谱：荒牌流局
 */
declare interface IRecordNoTile extends IProto {
	liujumanguan: boolean;
	players: INoTilePlayerInfo[];
	scores: INoTileScoreInfo[];
	gameend: boolean;
	muyu: IMuyuInfo;
	/** 历史历次胡牌 */
	hules_history: IHuleInfo[];
}

/** .lq.PlayerLeaving */
declare interface IPlayerLeaving extends IProto {
	seat: number;
}

/** .lq.ReqRequestConnection */
declare interface IReqRequestConnection extends IProto {
	/** 连接类型 1-主链接 2-备用连接 3-测探连接 */
	type: number;
	/** 线路ID */
	route_id: string;
	/** 时间戳（毫秒） */
	timestamp: number;
}

/** .lq.ResRequestConnection */
declare interface IResRequestConnection extends IResponse {
	/** 时间戳（毫秒） */
	timestamp: number;
	/** 1-ok 2-拒绝连接 */
	result: number;
}

/** .lq.ReqRequestRouteChange */
declare interface IReqRequestRouteChange extends IProto {
	/** 之前使用的线路ID */
	before: string;
	/** 本连接使用的线路ID */
	route_id: string;
	/** 新的连接类型 1-主链接 2-备用连接 3-测探连接 */
	type: number;
}

/** .lq.ResRequestRouteChange */
declare interface IResRequestRouteChange extends IResponse {
	/** 1-ok 2-拒绝 */
	result: number;
}

/** .lq.ReqHeartbeat */
declare interface IReqHeartbeat extends IProto {
	/** 网络延迟 */
	delay: number;
	no_operation_counter: number;
	/** 客户端包体 iOS=1,Steam_Mac,Android_GP,Android_MyCard,Win,Steam_Win */
	platform: number;
	/** 网络质量 */
	network_quality: number;
}

/** .lq.ResHeartbeat */
declare interface IResHeartbeat extends IResponse {
}
